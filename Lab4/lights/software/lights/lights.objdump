
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00010f68 memsz 0x00010f68 flags r-x
    LOAD off    0x00011f88 vaddr 0x08010f88 paddr 0x08012a84 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x00014580 vaddr 0x08014580 paddr 0x08014580 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010a00  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000344  08010c44  08010c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  08010f88  08012a84  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  08014580  08014580  00014580  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  080146ec  080146ec  00013a84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013a84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd8  00000000  00000000  00013aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024736  00000000  00000000  00014a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009931  00000000  00000000  000391b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bf78  00000000  00000000  00042ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002284  00000000  00000000  0004ea60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a31  00000000  00000000  00050ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a314  00000000  00000000  00054715  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001db8  00000000  00000000  0006ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073af6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00073af9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073b05  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073b06  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00073b07  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00073b12  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00073b1d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00073b28  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  00073b33  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  00073b58  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f5ad  00000000  00000000  00078ccf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08010c44 l    d  .rodata	00000000 .rodata
08010f88 l    d  .rwdata	00000000 .rwdata
08014580 l    d  .bss	00000000 .bss
080146ec l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08010dce l     O .rodata	00000010 zeroes.4404
08003f3c l     F .text	000000bc __sbprintf
08010dde l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800414c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005c7c l     F .text	00000008 __fp_unlock
08005c90 l     F .text	0000019c __sinit.part.1
08005e2c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08010f88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080113cc l     O .rwdata	00000020 lc_ctype_charset
080113ac l     O .rwdata	00000020 lc_message_charset
080113ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08010e10 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009228 l     F .text	000000fc __sprint_r.part.0
08010f44 l     O .rodata	00000010 blanks.4348
08010f34 l     O .rodata	00000010 zeroes.4349
0800a7b4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e40c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e518 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e544 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800e710 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800e7fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800e9d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08012a74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800ec4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800ed80 l     F .text	00000034 alt_dev_reg
080119d4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f068 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800f274 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800fb78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800ffec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801012c l     F .text	0000003c alt_get_errno
08010168 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080145c0 g     O .bss	00000004 alt_instruction_exception_handler
0800886c g     F .text	00000074 _mprec_log10
08008958 g     F .text	0000008c __any_on
0800ad50 g     F .text	00000054 _isatty_r
08010e1c g     O .rodata	00000028 __mprec_tinytens
0800e90c g     F .text	0000007c alt_main
08001bbc g     F .text	000000c0 _puts_r
080145ec g     O .bss	00000100 alt_irq
0800ada4 g     F .text	00000060 _lseek_r
08012a84 g       *ABS*	00000000 __flash_rwdata_start
0800cf9c g     F .text	00000088 .hidden __eqdf2
080146ec g       *ABS*	00000000 __alt_heap_start
08001b80 g     F .text	0000003c printf
0800afbc g     F .text	0000009c _wcrtomb_r
080090e8 g     F .text	0000005c __sseek
08005fcc g     F .text	00000010 __sinit
0800ae64 g     F .text	00000140 __swbuf_r
08006a94 g     F .text	0000007c _setlocale_r
08005e34 g     F .text	00000068 __sfmoreglue
0800e9ac g     F .text	00000024 __malloc_unlock
08000a6c g     F .text	00000440 .hidden __divsf3
08012a3c g     O .rwdata	00000004 kd
08007764 g     F .text	0000015c memmove
08005fb4 g     F .text	00000018 _cleanup
080079e8 g     F .text	000000a8 _Balloc
08001848 g     F .text	00000070 .hidden __fixsfsi
0800d024 g     F .text	000000dc .hidden __gtdf2
08010524 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800acf4 g     F .text	0000005c _fstat_r
080145a4 g     O .bss	00000004 errno
08009064 g     F .text	00000008 __seofread
080145ac g     O .bss	00000004 alt_argv
0801aa34 g       *ABS*	00000000 _gp
0800ec1c g     F .text	00000030 usleep
08001364 g     F .text	000004e4 .hidden __subsf3
08011854 g     O .rwdata	00000180 alt_fd_list
08010548 g     F .text	00000090 alt_find_dev
0800761c g     F .text	00000148 memcpy
08005c84 g     F .text	0000000c _cleanup_r
0800e288 g     F .text	000000dc .hidden __floatsidf
080100b0 g     F .text	0000007c alt_io_redirect
0800d100 g     F .text	000000f4 .hidden __ltdf2
08010c44 g       *ABS*	00000000 __DTOR_END__
08001c7c g     F .text	00000014 puts
08010814 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08008f48 g     F .text	00000074 __fpclassifyd
080087c8 g     F .text	000000a4 __ratio
0800a798 g     F .text	0000001c __vfiprintf_internal
0800f46c g     F .text	0000021c altera_avalon_jtag_uart_read
08001b50 g     F .text	00000030 _printf_r
0800bd4c g     F .text	00000064 .hidden __udivsi3
0800e66c g     F .text	000000a4 isatty
08010e6c g     O .rodata	000000c8 __mprec_tens
08006b10 g     F .text	0000000c __locale_charset
08010784 g     F .text	00000090 alt_icache_flush
080145a0 g     O .bss	00000004 __malloc_top_pad
08012a4c g     O .rwdata	00000004 __mb_cur_max
08006b40 g     F .text	0000000c _localeconv_r
08007df4 g     F .text	0000003c __i2b
08006450 g     F .text	000004bc __sfvwrite_r
08008fbc g     F .text	00000054 _sbrk_r
0800ae04 g     F .text	00000060 _read_r
08012a6c g     O .rwdata	00000004 alt_max_fd
0800a9e8 g     F .text	000000f0 _fclose_r
08005c4c g     F .text	00000030 fflush
0801459c g     O .bss	00000004 __malloc_max_sbrked_mem
080019dc g     F .text	00000110 .hidden __extendsfdf2
0800be08 g     F .text	000008ac .hidden __adddf3
08008570 g     F .text	0000010c __b2d
0800b71c g     F .text	00000538 .hidden __umoddi3
0800e838 g     F .text	000000d4 lseek
08012a44 g     O .rwdata	00000004 _global_impure_ptr
080089e4 g     F .text	00000564 _realloc_r
080146ec g       *ABS*	00000000 __bss_end
0800fefc g     F .text	000000f0 alt_iic_isr_register
0801041c g     F .text	00000108 alt_tick
0800b1a4 g     F .text	00000578 .hidden __udivdi3
0800ac50 g     F .text	00000024 _fputwc_r
08010e44 g     O .rodata	00000028 __mprec_bigtens
08007bd8 g     F .text	00000104 __s2b
0800e364 g     F .text	000000a8 .hidden __floatunsidf
080082b0 g     F .text	00000060 __mcmp
08005fec g     F .text	00000018 __fp_lock_all
0800feb0 g     F .text	0000004c alt_ic_irq_enabled
08010380 g     F .text	0000009c alt_alarm_stop
080145b4 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
0801182c g     O .rwdata	00000028 alt_dev_null
08014580 g     O .bss	00000004 eprev
0800fb30 g     F .text	00000048 alt_dcache_flush_all
08007cdc g     F .text	00000068 __hi0bits
0800e208 g     F .text	00000080 .hidden __fixdfsi
08012a84 g       *ABS*	00000000 __ram_rwdata_end
08012a64 g     O .rwdata	00000008 alt_dev_list
0800ec88 g     F .text	000000f8 write
08000eac g     F .text	000000bc .hidden __gtsf2
08010f88 g       *ABS*	00000000 __ram_rodata_end
0800e580 g     F .text	000000b0 fstat
08012a34 g     O .rwdata	00000004 RPMs
0800d100 g     F .text	000000f4 .hidden __ledf2
08008028 g     F .text	00000140 __pow5mult
0800933c g     F .text	0000145c ___vfiprintf_internal_r
08014594 g     O .bss	00000004 __nlocale_changed
0800bdb0 g     F .text	00000058 .hidden __umodsi3
080146ec g       *ABS*	00000000 end
0800efa8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08010c44 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08001aec g     F .text	00000064 .hidden __clzsi2
0800f688 g     F .text	00000224 altera_avalon_jtag_uart_write
08005fdc g     F .text	00000004 __sfp_lock_acquire
08007538 g     F .text	000000e4 memchr
08001d28 g     F .text	000021f8 ___vfprintf_internal_r
08006140 g     F .text	00000310 _free_r
08006b1c g     F .text	00000010 __locale_mb_cur_max
08010a90 g     F .text	00000180 __call_exitprocs
08014590 g     O .bss	00000004 __mlocale_changed
08012a50 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
080145b8 g     O .bss	00000004 _alt_tick_rate
08008168 g     F .text	00000148 __lshift
080145bc g     O .bss	00000004 _alt_nticks
0800ea0c g     F .text	000000fc read
0800edec g     F .text	00000058 alt_sys_init
080018b8 g     F .text	00000124 .hidden __floatsisf
08010978 g     F .text	00000118 __register_exitproc
08007e30 g     F .text	000001f8 __multiply
0800f314 g     F .text	00000068 altera_avalon_jtag_uart_close
08010f88 g       *ABS*	00000000 __ram_rwdata_start
08010c44 g       *ABS*	00000000 __ram_rodata_start
080145c4 g     O .bss	00000028 __malloc_current_mallinfo
0800867c g     F .text	0000014c __d2b
0800ee44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080106e0 g     F .text	000000a4 alt_get_fd
0800f9d8 g     F .text	00000158 alt_busy_sleep
0800a8d0 g     F .text	00000054 _close_r
080108fc g     F .text	0000007c memcmp
0800ef04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080146ec g       *ABS*	00000000 __alt_stack_base
0800ef54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08003ff8 g     F .text	00000154 __swsetup_r
0800c6b4 g     F .text	000008e8 .hidden __divdf3
08005e9c g     F .text	00000118 __sfp
080088e0 g     F .text	00000078 __copybits
08012a40 g     O .rwdata	00000004 ki
08011424 g     O .rwdata	00000408 __malloc_av_
08005fe8 g     F .text	00000004 __sinit_lock_release
0800d1f4 g     F .text	00000718 .hidden __muldf3
08009010 g     F .text	00000054 __sread
080105d8 g     F .text	00000108 alt_find_file
0800fbb4 g     F .text	000000a4 alt_dev_llist_insert
0800e988 g     F .text	00000024 __malloc_lock
0800eb6c g     F .text	000000b0 sbrk
08005bf0 g     F .text	0000005c _fflush_r
0800a924 g     F .text	000000c4 _calloc_r
08014580 g       *ABS*	00000000 __bss_start
080078c0 g     F .text	00000128 memset
08000290 g     F .text	00000280 main
080145b0 g     O .bss	00000004 alt_envp
08014598 g     O .bss	00000004 __malloc_max_total_mem
0800eea4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800afa4 g     F .text	00000018 __swbuf
08009144 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800aad8 g     F .text	00000014 fclose
0800434c g     F .text	00001688 _dtoa_r
08006d2c g     F .text	0000080c _malloc_r
0800b118 g     F .text	00000030 __ascii_wctomb
08012a70 g     O .rwdata	00000004 alt_errno
0800690c g     F .text	000000c4 _fwalk
0800bc54 g     F .text	00000084 .hidden __divsi3
0800601c g     F .text	00000124 _malloc_trim_r
08010c44 g       *ABS*	00000000 __CTOR_END__
08000f68 g     F .text	000003fc .hidden __mulsf3
0800914c g     F .text	000000dc strcmp
08010c44 g       *ABS*	00000000 __flash_rodata_start
08010c44 g       *ABS*	00000000 __DTOR_LIST__
0800cf9c g     F .text	00000088 .hidden __nedf2
0800edb4 g     F .text	00000038 alt_irq_init
0800eb08 g     F .text	00000064 alt_release_fd
08010c87 g     O .rodata	00000100 .hidden __clz_tab
0801458c g     O .bss	00000004 _PathLocale
080108b0 g     F .text	00000014 atexit
08000eac g     F .text	000000bc .hidden __gesf2
0800a870 g     F .text	00000060 _write_r
08006b4c g     F .text	00000018 setlocale
08012a48 g     O .rwdata	00000004 _impure_ptr
080145a8 g     O .bss	00000004 alt_argc
080059d4 g     F .text	0000021c __sflush_r
0800fcb8 g     F .text	00000060 _do_dtors
08006b38 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
0800850c g     F .text	00000064 __ulp
08006004 g     F .text	00000018 __fp_unlock_all
08014584 g     O .bss	00000004 eIntegral
08012a5c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006b64 g     F .text	0000000c localeconv
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0800fd4c g     F .text	00000050 alt_ic_isr_register
08012a84 g       *ABS*	00000000 _edata
080146ec g       *ABS*	00000000 _end
0800aaec g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
0800f37c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800fe24 g     F .text	0000008c alt_ic_irq_disable
0800906c g     F .text	0000007c __swrite
08012a54 g     O .rwdata	00000004 __malloc_trim_threshold
08006b2c g     F .text	0000000c __locale_msgcharset
080108c4 g     F .text	00000038 exit
08000510 g     F .text	00000094 map_pwm
080069d0 g     F .text	000000c4 _fwalk_reent
08008310 g     F .text	000001fc __mdiff
0800bcd8 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08005fe0 g     F .text	00000004 __sfp_lock_release
08010c10 g     F .text	00000034 _exit
0800f8ac g     F .text	0000012c alt_alarm_start
08006b70 g     F .text	000001bc __smakebuf_r
08001c90 g     F .text	00000098 strlen
0801022c g     F .text	00000154 open
0800d024 g     F .text	000000dc .hidden __gedf2
08012a58 g     O .rwdata	00000004 __wctomb
08009324 g     F .text	00000018 __sprint_r
0800fd18 g     F .text	00000034 alt_icache_flush_all
08012a38 g     O .rwdata	00000004 kp
08012a78 g     O .rwdata	00000004 alt_priority_mask
0800fd9c g     F .text	00000088 alt_ic_irq_enable
08003f20 g     F .text	0000001c __vfprintf_internal
0800b148 g     F .text	0000005c _wctomb_r
0800d90c g     F .text	000008fc .hidden __subdf3
08007d44 g     F .text	000000b0 __lo0bits
08012a7c g     O .rwdata	00000008 alt_alarm_list
0800fc58 g     F .text	00000060 _do_ctors
0800b058 g     F .text	000000c0 wcrtomb
0800e448 g     F .text	000000d0 close
080005a4 g     F .text	000004c8 .hidden __addsf3
0800e778 g     F .text	00000084 alt_load
08014588 g     O .bss	00000004 target
0800ac74 g     F .text	00000080 fputwc
08005fe4 g     F .text	00000004 __sinit_lock_acquire
08007ab8 g     F .text	00000120 __multadd
08007a90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10917b04 	addi	r2,r2,17900
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10917b04 	addi	r2,r2,17900
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6e317 	ldw	r2,-25716(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6e317 	ldw	r2,-25716(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6aa8d14 	ori	gp,gp,43572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	10916014 	ori	r2,r2,17792

    movhi r3, %hi(__bss_end)
 800026c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000270:	18d1bb14 	ori	r3,r3,18156

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800e7780 	call	800e778 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800e90c0 	call	800e90c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <main>:
float target = 0;

int map_pwm(float x);

int main()
{
 8000290:	deffed04 	addi	sp,sp,-76
 8000294:	dfc01215 	stw	ra,72(sp)
 8000298:	df001115 	stw	fp,68(sp)
 800029c:	dcc01015 	stw	r19,64(sp)
 80002a0:	dc800f15 	stw	r18,60(sp)
 80002a4:	dc400e15 	stw	r17,56(sp)
 80002a8:	dc000d15 	stw	r16,52(sp)
 80002ac:	df001104 	addi	fp,sp,68
  // Calculate target function coefficient from desired RPMs
  float targetIncr = RPMs * GR * PPR * DELAY_MS / 60e3;	// increase in target pos each cycle to maintain RPM
 80002b0:	d0a00017 	ldw	r2,-32768(gp)
 80002b4:	01509234 	movhi	r5,16968
 80002b8:	1009883a 	mov	r4,r2
 80002bc:	8000f680 	call	8000f68 <__mulsf3>
 80002c0:	1007883a 	mov	r3,r2
 80002c4:	1805883a 	mov	r2,r3
 80002c8:	01503834 	movhi	r5,16608
 80002cc:	1009883a 	mov	r4,r2
 80002d0:	8000f680 	call	8000f68 <__mulsf3>
 80002d4:	1007883a 	mov	r3,r2
 80002d8:	1805883a 	mov	r2,r3
 80002dc:	01504834 	movhi	r5,16672
 80002e0:	1009883a 	mov	r4,r2
 80002e4:	8000f680 	call	8000f68 <__mulsf3>
 80002e8:	1007883a 	mov	r3,r2
 80002ec:	1805883a 	mov	r2,r3
 80002f0:	0151dab4 	movhi	r5,18282
 80002f4:	29580004 	addi	r5,r5,24576
 80002f8:	1009883a 	mov	r4,r2
 80002fc:	8000a6c0 	call	8000a6c <__divsf3>
 8000300:	1007883a 	mov	r3,r2
 8000304:	e0fff415 	stw	r3,-48(fp)

  printf("Hello from Nios II!\n");
 8000308:	01020074 	movhi	r4,2049
 800030c:	21031104 	addi	r4,r4,3140
 8000310:	8001c7c0 	call	8001c7c <puts>

  while(1) {
	  float deltaT = DELAY_MS*1e-3;	// ms to s
 8000314:	008f0934 	movhi	r2,15396
 8000318:	10b5c284 	addi	r2,r2,-10486
 800031c:	e0bff515 	stw	r2,-44(fp)

	  // Increment target pos by neessary amount each cycle
	  target += targetIncr;
 8000320:	d0a6d517 	ldw	r2,-25772(gp)
 8000324:	e17ff417 	ldw	r5,-48(fp)
 8000328:	1009883a 	mov	r4,r2
 800032c:	80005a40 	call	80005a4 <__addsf3>
 8000330:	1007883a 	mov	r3,r2
 8000334:	1805883a 	mov	r2,r3
 8000338:	d0a6d515 	stw	r2,-25772(gp)

	  // Read position from motor component
	  int pos = IORD(MOTOR_0_BASE, 0);
 800033c:	00840034 	movhi	r2,4096
 8000340:	10841404 	addi	r2,r2,4176
 8000344:	10800037 	ldwio	r2,0(r2)
 8000348:	e0bff615 	stw	r2,-40(fp)

	  // Calculate error
	  float e = (float)target - pos;
 800034c:	d426d517 	ldw	r16,-25772(gp)
 8000350:	e13ff617 	ldw	r4,-40(fp)
 8000354:	80018b80 	call	80018b8 <__floatsisf>
 8000358:	1007883a 	mov	r3,r2
 800035c:	180b883a 	mov	r5,r3
 8000360:	8009883a 	mov	r4,r16
 8000364:	80013640 	call	8001364 <__subsf3>
 8000368:	1007883a 	mov	r3,r2
 800036c:	e0fff715 	stw	r3,-36(fp)

	  // Calculate Derivate and Integral terms
	  float dedt = (float)(e - eprev) / deltaT;
 8000370:	d0a6d317 	ldw	r2,-25780(gp)
 8000374:	100b883a 	mov	r5,r2
 8000378:	e13ff717 	ldw	r4,-36(fp)
 800037c:	80013640 	call	8001364 <__subsf3>
 8000380:	1007883a 	mov	r3,r2
 8000384:	1805883a 	mov	r2,r3
 8000388:	e17ff517 	ldw	r5,-44(fp)
 800038c:	1009883a 	mov	r4,r2
 8000390:	8000a6c0 	call	8000a6c <__divsf3>
 8000394:	1007883a 	mov	r3,r2
 8000398:	e0fff815 	stw	r3,-32(fp)
	  eIntegral += e * deltaT;
 800039c:	e17ff517 	ldw	r5,-44(fp)
 80003a0:	e13ff717 	ldw	r4,-36(fp)
 80003a4:	8000f680 	call	8000f68 <__mulsf3>
 80003a8:	1009883a 	mov	r4,r2
 80003ac:	2007883a 	mov	r3,r4
 80003b0:	d0a6d417 	ldw	r2,-25776(gp)
 80003b4:	100b883a 	mov	r5,r2
 80003b8:	1809883a 	mov	r4,r3
 80003bc:	80005a40 	call	80005a4 <__addsf3>
 80003c0:	1007883a 	mov	r3,r2
 80003c4:	1805883a 	mov	r2,r3
 80003c8:	d0a6d415 	stw	r2,-25776(gp)

	  // Calculate control signal - offset so that 0 is MIN_PWM
	  float u = kp * e + kd * dedt + ki * eIntegral;
 80003cc:	d0a00117 	ldw	r2,-32764(gp)
 80003d0:	e17ff717 	ldw	r5,-36(fp)
 80003d4:	1009883a 	mov	r4,r2
 80003d8:	8000f680 	call	8000f68 <__mulsf3>
 80003dc:	1007883a 	mov	r3,r2
 80003e0:	1821883a 	mov	r16,r3
 80003e4:	d0a00217 	ldw	r2,-32760(gp)
 80003e8:	e17ff817 	ldw	r5,-32(fp)
 80003ec:	1009883a 	mov	r4,r2
 80003f0:	8000f680 	call	8000f68 <__mulsf3>
 80003f4:	1007883a 	mov	r3,r2
 80003f8:	1805883a 	mov	r2,r3
 80003fc:	100b883a 	mov	r5,r2
 8000400:	8009883a 	mov	r4,r16
 8000404:	80005a40 	call	80005a4 <__addsf3>
 8000408:	1007883a 	mov	r3,r2
 800040c:	1821883a 	mov	r16,r3
 8000410:	d0a00317 	ldw	r2,-32756(gp)
 8000414:	d0e6d417 	ldw	r3,-25776(gp)
 8000418:	180b883a 	mov	r5,r3
 800041c:	1009883a 	mov	r4,r2
 8000420:	8000f680 	call	8000f68 <__mulsf3>
 8000424:	1007883a 	mov	r3,r2
 8000428:	1805883a 	mov	r2,r3
 800042c:	100b883a 	mov	r5,r2
 8000430:	8009883a 	mov	r4,r16
 8000434:	80005a40 	call	80005a4 <__addsf3>
 8000438:	1007883a 	mov	r3,r2
 800043c:	e0fff915 	stw	r3,-28(fp)

	  // save previous error
	  eprev = e;
 8000440:	e0bff717 	ldw	r2,-36(fp)
 8000444:	d0a6d315 	stw	r2,-25780(gp)

	  // Map magnitude of control signal to be between 1130 and 2047
	  // must be between 1130 and 2047. must be 1350 to start without help
	  // (1130 acts as 0, since 1135 is required for motor to run)
	  int sign = u > 0 ? 1 : -1;
 8000448:	000b883a 	mov	r5,zero
 800044c:	e13ff917 	ldw	r4,-28(fp)
 8000450:	8000eac0 	call	8000eac <__gesf2>
 8000454:	0080020e 	bge	zero,r2,8000460 <main+0x1d0>
 8000458:	00800044 	movi	r2,1
 800045c:	00000106 	br	8000464 <main+0x1d4>
 8000460:	00bfffc4 	movi	r2,-1
 8000464:	e0bffa15 	stw	r2,-24(fp)
	  int pwm = sign * map_pwm(fabs(u));
 8000468:	e0fff917 	ldw	r3,-28(fp)
 800046c:	00a00034 	movhi	r2,32768
 8000470:	10bfffc4 	addi	r2,r2,-1
 8000474:	1884703a 	and	r2,r3,r2
 8000478:	1009883a 	mov	r4,r2
 800047c:	80005100 	call	8000510 <map_pwm>
 8000480:	1007883a 	mov	r3,r2
 8000484:	e0bffa17 	ldw	r2,-24(fp)
 8000488:	1885383a 	mul	r2,r3,r2
 800048c:	e0bffb15 	stw	r2,-20(fp)

	  IOWR(MOTOR_0_BASE, 0, pwm);
 8000490:	00840034 	movhi	r2,4096
 8000494:	10841404 	addi	r2,r2,4176
 8000498:	e0fffb17 	ldw	r3,-20(fp)
 800049c:	10c00035 	stwio	r3,0(r2)
	  printf("Target %f, Pos: %d, Error: %f, u: %f, PWM: %d\n", target, pos, e, u, pwm);
 80004a0:	d0a6d517 	ldw	r2,-25772(gp)
 80004a4:	1009883a 	mov	r4,r2
 80004a8:	80019dc0 	call	80019dc <__extendsfdf2>
 80004ac:	1025883a 	mov	r18,r2
 80004b0:	1827883a 	mov	r19,r3
 80004b4:	e13ff717 	ldw	r4,-36(fp)
 80004b8:	80019dc0 	call	80019dc <__extendsfdf2>
 80004bc:	1021883a 	mov	r16,r2
 80004c0:	1823883a 	mov	r17,r3
 80004c4:	e13ff917 	ldw	r4,-28(fp)
 80004c8:	80019dc0 	call	80019dc <__extendsfdf2>
 80004cc:	1009883a 	mov	r4,r2
 80004d0:	180b883a 	mov	r5,r3
 80004d4:	e0bffb17 	ldw	r2,-20(fp)
 80004d8:	d8800415 	stw	r2,16(sp)
 80004dc:	d9000215 	stw	r4,8(sp)
 80004e0:	d9400315 	stw	r5,12(sp)
 80004e4:	dc000015 	stw	r16,0(sp)
 80004e8:	dc400115 	stw	r17,4(sp)
 80004ec:	e1fff617 	ldw	r7,-40(fp)
 80004f0:	900b883a 	mov	r5,r18
 80004f4:	980d883a 	mov	r6,r19
 80004f8:	01020074 	movhi	r4,2049
 80004fc:	21031604 	addi	r4,r4,3160
 8000500:	8001b800 	call	8001b80 <printf>
	  usleep(DELAY_MS*1e3);	// ms to us
 8000504:	0109c404 	movi	r4,10000
 8000508:	800ec1c0 	call	800ec1c <usleep>
  }
 800050c:	003f8106 	br	8000314 <main+0x84>

08000510 <map_pwm>:
  return 0;
}

int map_pwm(float x) {
 8000510:	defffd04 	addi	sp,sp,-12
 8000514:	dfc00215 	stw	ra,8(sp)
 8000518:	df000115 	stw	fp,4(sp)
 800051c:	df000104 	addi	fp,sp,4
 8000520:	e13fff15 	stw	r4,-4(fp)
	// linear interpolate values to be between 1150 and 2047
	if (x > MAX_PWM) {
 8000524:	01514034 	movhi	r5,17664
 8000528:	29780004 	addi	r5,r5,-8192
 800052c:	e13fff17 	ldw	r4,-4(fp)
 8000530:	8000eac0 	call	8000eac <__gesf2>
 8000534:	0080020e 	bge	zero,r2,8000540 <map_pwm+0x30>
		return MAX_PWM;
 8000538:	0081ffc4 	movi	r2,2047
 800053c:	00001406 	br	8000590 <map_pwm+0x80>
	}
	return (int)((x*(MAX_PWM-MIN_PWM))/MAX_PWM + MIN_PWM);
 8000540:	01510f74 	movhi	r5,17469
 8000544:	29500004 	addi	r5,r5,16384
 8000548:	e13fff17 	ldw	r4,-4(fp)
 800054c:	8000f680 	call	8000f68 <__mulsf3>
 8000550:	1007883a 	mov	r3,r2
 8000554:	1805883a 	mov	r2,r3
 8000558:	01514034 	movhi	r5,17664
 800055c:	29780004 	addi	r5,r5,-8192
 8000560:	1009883a 	mov	r4,r2
 8000564:	8000a6c0 	call	8000a6c <__divsf3>
 8000568:	1007883a 	mov	r3,r2
 800056c:	1805883a 	mov	r2,r3
 8000570:	01512874 	movhi	r5,17569
 8000574:	29500004 	addi	r5,r5,16384
 8000578:	1009883a 	mov	r4,r2
 800057c:	80005a40 	call	80005a4 <__addsf3>
 8000580:	1007883a 	mov	r3,r2
 8000584:	1805883a 	mov	r2,r3
 8000588:	1009883a 	mov	r4,r2
 800058c:	80018480 	call	8001848 <__fixsfsi>
}
 8000590:	e037883a 	mov	sp,fp
 8000594:	dfc00117 	ldw	ra,4(sp)
 8000598:	df000017 	ldw	fp,0(sp)
 800059c:	dec00204 	addi	sp,sp,8
 80005a0:	f800283a 	ret

080005a4 <__addsf3>:
 80005a4:	defffc04 	addi	sp,sp,-16
 80005a8:	2004d7fa 	srli	r2,r4,31
 80005ac:	280cd5fa 	srli	r6,r5,23
 80005b0:	dc000015 	stw	r16,0(sp)
 80005b4:	00c02034 	movhi	r3,128
 80005b8:	2020d5fa 	srli	r16,r4,23
 80005bc:	280ed7fa 	srli	r7,r5,31
 80005c0:	18ffffc4 	addi	r3,r3,-1
 80005c4:	dc400115 	stw	r17,4(sp)
 80005c8:	1908703a 	and	r4,r3,r4
 80005cc:	194a703a 	and	r5,r3,r5
 80005d0:	dfc00315 	stw	ra,12(sp)
 80005d4:	dc800215 	stw	r18,8(sp)
 80005d8:	14403fcc 	andi	r17,r2,255
 80005dc:	84003fcc 	andi	r16,r16,255
 80005e0:	200890fa 	slli	r4,r4,3
 80005e4:	31803fcc 	andi	r6,r6,255
 80005e8:	280a90fa 	slli	r5,r5,3
 80005ec:	89c05026 	beq	r17,r7,8000730 <__addsf3+0x18c>
 80005f0:	8185c83a 	sub	r2,r16,r6
 80005f4:	00807a0e 	bge	zero,r2,80007e0 <__addsf3+0x23c>
 80005f8:	30001e1e 	bne	r6,zero,8000674 <__addsf3+0xd0>
 80005fc:	28006d1e 	bne	r5,zero,80007b4 <__addsf3+0x210>
 8000600:	208001cc 	andi	r2,r4,7
 8000604:	10000426 	beq	r2,zero,8000618 <__addsf3+0x74>
 8000608:	208003cc 	andi	r2,r4,15
 800060c:	00c00104 	movi	r3,4
 8000610:	10c00126 	beq	r2,r3,8000618 <__addsf3+0x74>
 8000614:	20c9883a 	add	r4,r4,r3
 8000618:	2081002c 	andhi	r2,r4,1024
 800061c:	10003926 	beq	r2,zero,8000704 <__addsf3+0x160>
 8000620:	84000044 	addi	r16,r16,1
 8000624:	00803fc4 	movi	r2,255
 8000628:	80807826 	beq	r16,r2,800080c <__addsf3+0x268>
 800062c:	200891ba 	slli	r4,r4,6
 8000630:	8805883a 	mov	r2,r17
 8000634:	2008d27a 	srli	r4,r4,9
 8000638:	84003fcc 	andi	r16,r16,255
 800063c:	800695fa 	slli	r3,r16,23
 8000640:	10803fcc 	andi	r2,r2,255
 8000644:	04002034 	movhi	r16,128
 8000648:	843fffc4 	addi	r16,r16,-1
 800064c:	100497fa 	slli	r2,r2,31
 8000650:	2408703a 	and	r4,r4,r16
 8000654:	20e0b03a 	or	r16,r4,r3
 8000658:	8084b03a 	or	r2,r16,r2
 800065c:	dfc00317 	ldw	ra,12(sp)
 8000660:	dc800217 	ldw	r18,8(sp)
 8000664:	dc400117 	ldw	r17,4(sp)
 8000668:	dc000017 	ldw	r16,0(sp)
 800066c:	dec00404 	addi	sp,sp,16
 8000670:	f800283a 	ret
 8000674:	00c03fc4 	movi	r3,255
 8000678:	80ffe126 	beq	r16,r3,8000600 <__addsf3+0x5c>
 800067c:	29410034 	orhi	r5,r5,1024
 8000680:	00c006c4 	movi	r3,27
 8000684:	18807516 	blt	r3,r2,800085c <__addsf3+0x2b8>
 8000688:	00c00804 	movi	r3,32
 800068c:	1887c83a 	sub	r3,r3,r2
 8000690:	28c6983a 	sll	r3,r5,r3
 8000694:	288ad83a 	srl	r5,r5,r2
 8000698:	1804c03a 	cmpne	r2,r3,zero
 800069c:	288ab03a 	or	r5,r5,r2
 80006a0:	2149c83a 	sub	r4,r4,r5
 80006a4:	2081002c 	andhi	r2,r4,1024
 80006a8:	10001426 	beq	r2,zero,80006fc <__addsf3+0x158>
 80006ac:	04810034 	movhi	r18,1024
 80006b0:	94bfffc4 	addi	r18,r18,-1
 80006b4:	24a4703a 	and	r18,r4,r18
 80006b8:	9009883a 	mov	r4,r18
 80006bc:	8001aec0 	call	8001aec <__clzsi2>
 80006c0:	10bffec4 	addi	r2,r2,-5
 80006c4:	90a4983a 	sll	r18,r18,r2
 80006c8:	14005416 	blt	r2,r16,800081c <__addsf3+0x278>
 80006cc:	1405c83a 	sub	r2,r2,r16
 80006d0:	11000044 	addi	r4,r2,1
 80006d4:	00800804 	movi	r2,32
 80006d8:	1105c83a 	sub	r2,r2,r4
 80006dc:	9084983a 	sll	r2,r18,r2
 80006e0:	9124d83a 	srl	r18,r18,r4
 80006e4:	0021883a 	mov	r16,zero
 80006e8:	1008c03a 	cmpne	r4,r2,zero
 80006ec:	9108b03a 	or	r4,r18,r4
 80006f0:	003fc306 	br	8000600 <__addsf3+0x5c>
 80006f4:	1000db26 	beq	r2,zero,8000a64 <__addsf3+0x4c0>
 80006f8:	1009883a 	mov	r4,r2
 80006fc:	208001cc 	andi	r2,r4,7
 8000700:	103fc11e 	bne	r2,zero,8000608 <__addsf3+0x64>
 8000704:	2006d0fa 	srli	r3,r4,3
 8000708:	01003fc4 	movi	r4,255
 800070c:	8805883a 	mov	r2,r17
 8000710:	8100241e 	bne	r16,r4,80007a4 <__addsf3+0x200>
 8000714:	18006e26 	beq	r3,zero,80008d0 <__addsf3+0x32c>
 8000718:	19001034 	orhi	r4,r3,64
 800071c:	00c02034 	movhi	r3,128
 8000720:	18ffffc4 	addi	r3,r3,-1
 8000724:	043fffc4 	movi	r16,-1
 8000728:	20c8703a 	and	r4,r4,r3
 800072c:	003fc206 	br	8000638 <__addsf3+0x94>
 8000730:	8187c83a 	sub	r3,r16,r6
 8000734:	00c03e0e 	bge	zero,r3,8000830 <__addsf3+0x28c>
 8000738:	30002326 	beq	r6,zero,80007c8 <__addsf3+0x224>
 800073c:	01803fc4 	movi	r6,255
 8000740:	81bfaf26 	beq	r16,r6,8000600 <__addsf3+0x5c>
 8000744:	29410034 	orhi	r5,r5,1024
 8000748:	018006c4 	movi	r6,27
 800074c:	30c07416 	blt	r6,r3,8000920 <__addsf3+0x37c>
 8000750:	01800804 	movi	r6,32
 8000754:	30cdc83a 	sub	r6,r6,r3
 8000758:	298c983a 	sll	r6,r5,r6
 800075c:	28cad83a 	srl	r5,r5,r3
 8000760:	3006c03a 	cmpne	r3,r6,zero
 8000764:	28cab03a 	or	r5,r5,r3
 8000768:	2149883a 	add	r4,r4,r5
 800076c:	20c1002c 	andhi	r3,r4,1024
 8000770:	183fe226 	beq	r3,zero,80006fc <__addsf3+0x158>
 8000774:	84000044 	addi	r16,r16,1
 8000778:	00c03fc4 	movi	r3,255
 800077c:	80c05426 	beq	r16,r3,80008d0 <__addsf3+0x32c>
 8000780:	00bf0034 	movhi	r2,64512
 8000784:	10bfffc4 	addi	r2,r2,-1
 8000788:	20c0004c 	andi	r3,r4,1
 800078c:	2088703a 	and	r4,r4,r2
 8000790:	2008d07a 	srli	r4,r4,1
 8000794:	20c8b03a 	or	r4,r4,r3
 8000798:	003f9906 	br	8000600 <__addsf3+0x5c>
 800079c:	0007883a 	mov	r3,zero
 80007a0:	0005883a 	mov	r2,zero
 80007a4:	01002034 	movhi	r4,128
 80007a8:	213fffc4 	addi	r4,r4,-1
 80007ac:	1908703a 	and	r4,r3,r4
 80007b0:	003fa106 	br	8000638 <__addsf3+0x94>
 80007b4:	10bfffc4 	addi	r2,r2,-1
 80007b8:	103fb926 	beq	r2,zero,80006a0 <__addsf3+0xfc>
 80007bc:	00c03fc4 	movi	r3,255
 80007c0:	80ffaf1e 	bne	r16,r3,8000680 <__addsf3+0xdc>
 80007c4:	003f8e06 	br	8000600 <__addsf3+0x5c>
 80007c8:	283f8d26 	beq	r5,zero,8000600 <__addsf3+0x5c>
 80007cc:	18ffffc4 	addi	r3,r3,-1
 80007d0:	183fe526 	beq	r3,zero,8000768 <__addsf3+0x1c4>
 80007d4:	01803fc4 	movi	r6,255
 80007d8:	81bfdb1e 	bne	r16,r6,8000748 <__addsf3+0x1a4>
 80007dc:	003f8806 	br	8000600 <__addsf3+0x5c>
 80007e0:	1000201e 	bne	r2,zero,8000864 <__addsf3+0x2c0>
 80007e4:	80800044 	addi	r2,r16,1
 80007e8:	10803fcc 	andi	r2,r2,255
 80007ec:	01800044 	movi	r6,1
 80007f0:	3080450e 	bge	r6,r2,8000908 <__addsf3+0x364>
 80007f4:	2165c83a 	sub	r18,r4,r5
 80007f8:	90c1002c 	andhi	r3,r18,1024
 80007fc:	18002b26 	beq	r3,zero,80008ac <__addsf3+0x308>
 8000800:	2925c83a 	sub	r18,r5,r4
 8000804:	3823883a 	mov	r17,r7
 8000808:	003fab06 	br	80006b8 <__addsf3+0x114>
 800080c:	8805883a 	mov	r2,r17
 8000810:	043fffc4 	movi	r16,-1
 8000814:	0009883a 	mov	r4,zero
 8000818:	003f8706 	br	8000638 <__addsf3+0x94>
 800081c:	013f0034 	movhi	r4,64512
 8000820:	213fffc4 	addi	r4,r4,-1
 8000824:	80a1c83a 	sub	r16,r16,r2
 8000828:	9108703a 	and	r4,r18,r4
 800082c:	003f7406 	br	8000600 <__addsf3+0x5c>
 8000830:	1800411e 	bne	r3,zero,8000938 <__addsf3+0x394>
 8000834:	80c00044 	addi	r3,r16,1
 8000838:	19c03fcc 	andi	r7,r3,255
 800083c:	01800044 	movi	r6,1
 8000840:	31c0260e 	bge	r6,r7,80008dc <__addsf3+0x338>
 8000844:	01803fc4 	movi	r6,255
 8000848:	19802126 	beq	r3,r6,80008d0 <__addsf3+0x32c>
 800084c:	2149883a 	add	r4,r4,r5
 8000850:	2008d07a 	srli	r4,r4,1
 8000854:	1821883a 	mov	r16,r3
 8000858:	003f6906 	br	8000600 <__addsf3+0x5c>
 800085c:	01400044 	movi	r5,1
 8000860:	003f8f06 	br	80006a0 <__addsf3+0xfc>
 8000864:	8000151e 	bne	r16,zero,80008bc <__addsf3+0x318>
 8000868:	20002f26 	beq	r4,zero,8000928 <__addsf3+0x384>
 800086c:	0084303a 	nor	r2,zero,r2
 8000870:	10000a26 	beq	r2,zero,800089c <__addsf3+0x2f8>
 8000874:	00c03fc4 	movi	r3,255
 8000878:	30c02b26 	beq	r6,r3,8000928 <__addsf3+0x384>
 800087c:	00c006c4 	movi	r3,27
 8000880:	18806d16 	blt	r3,r2,8000a38 <__addsf3+0x494>
 8000884:	00c00804 	movi	r3,32
 8000888:	1887c83a 	sub	r3,r3,r2
 800088c:	20c6983a 	sll	r3,r4,r3
 8000890:	2084d83a 	srl	r2,r4,r2
 8000894:	1808c03a 	cmpne	r4,r3,zero
 8000898:	1108b03a 	or	r4,r2,r4
 800089c:	2909c83a 	sub	r4,r5,r4
 80008a0:	3021883a 	mov	r16,r6
 80008a4:	3823883a 	mov	r17,r7
 80008a8:	003f7e06 	br	80006a4 <__addsf3+0x100>
 80008ac:	903f821e 	bne	r18,zero,80006b8 <__addsf3+0x114>
 80008b0:	0005883a 	mov	r2,zero
 80008b4:	0021883a 	mov	r16,zero
 80008b8:	003fba06 	br	80007a4 <__addsf3+0x200>
 80008bc:	00c03fc4 	movi	r3,255
 80008c0:	30c01926 	beq	r6,r3,8000928 <__addsf3+0x384>
 80008c4:	0085c83a 	sub	r2,zero,r2
 80008c8:	21010034 	orhi	r4,r4,1024
 80008cc:	003feb06 	br	800087c <__addsf3+0x2d8>
 80008d0:	043fffc4 	movi	r16,-1
 80008d4:	0009883a 	mov	r4,zero
 80008d8:	003f5706 	br	8000638 <__addsf3+0x94>
 80008dc:	80004a1e 	bne	r16,zero,8000a08 <__addsf3+0x464>
 80008e0:	20005926 	beq	r4,zero,8000a48 <__addsf3+0x4a4>
 80008e4:	283f4626 	beq	r5,zero,8000600 <__addsf3+0x5c>
 80008e8:	2149883a 	add	r4,r4,r5
 80008ec:	2081002c 	andhi	r2,r4,1024
 80008f0:	103f8226 	beq	r2,zero,80006fc <__addsf3+0x158>
 80008f4:	00bf0034 	movhi	r2,64512
 80008f8:	10bfffc4 	addi	r2,r2,-1
 80008fc:	3021883a 	mov	r16,r6
 8000900:	2088703a 	and	r4,r4,r2
 8000904:	003f3e06 	br	8000600 <__addsf3+0x5c>
 8000908:	8000121e 	bne	r16,zero,8000954 <__addsf3+0x3b0>
 800090c:	2000261e 	bne	r4,zero,80009a8 <__addsf3+0x404>
 8000910:	283fa226 	beq	r5,zero,800079c <__addsf3+0x1f8>
 8000914:	2809883a 	mov	r4,r5
 8000918:	3823883a 	mov	r17,r7
 800091c:	003f3806 	br	8000600 <__addsf3+0x5c>
 8000920:	01400044 	movi	r5,1
 8000924:	003f9006 	br	8000768 <__addsf3+0x1c4>
 8000928:	2809883a 	mov	r4,r5
 800092c:	3021883a 	mov	r16,r6
 8000930:	3823883a 	mov	r17,r7
 8000934:	003f3206 	br	8000600 <__addsf3+0x5c>
 8000938:	80000c1e 	bne	r16,zero,800096c <__addsf3+0x3c8>
 800093c:	20002f26 	beq	r4,zero,80009fc <__addsf3+0x458>
 8000940:	00c6303a 	nor	r3,zero,r3
 8000944:	18002b1e 	bne	r3,zero,80009f4 <__addsf3+0x450>
 8000948:	2149883a 	add	r4,r4,r5
 800094c:	3021883a 	mov	r16,r6
 8000950:	003f8606 	br	800076c <__addsf3+0x1c8>
 8000954:	20001b1e 	bne	r4,zero,80009c4 <__addsf3+0x420>
 8000958:	28003926 	beq	r5,zero,8000a40 <__addsf3+0x49c>
 800095c:	2809883a 	mov	r4,r5
 8000960:	3823883a 	mov	r17,r7
 8000964:	04003fc4 	movi	r16,255
 8000968:	003f2506 	br	8000600 <__addsf3+0x5c>
 800096c:	01c03fc4 	movi	r7,255
 8000970:	31c02226 	beq	r6,r7,80009fc <__addsf3+0x458>
 8000974:	00c7c83a 	sub	r3,zero,r3
 8000978:	21010034 	orhi	r4,r4,1024
 800097c:	01c006c4 	movi	r7,27
 8000980:	38c03616 	blt	r7,r3,8000a5c <__addsf3+0x4b8>
 8000984:	01c00804 	movi	r7,32
 8000988:	38cfc83a 	sub	r7,r7,r3
 800098c:	21ce983a 	sll	r7,r4,r7
 8000990:	20c6d83a 	srl	r3,r4,r3
 8000994:	3808c03a 	cmpne	r4,r7,zero
 8000998:	1906b03a 	or	r3,r3,r4
 800099c:	1949883a 	add	r4,r3,r5
 80009a0:	3021883a 	mov	r16,r6
 80009a4:	003f7106 	br	800076c <__addsf3+0x1c8>
 80009a8:	283f1526 	beq	r5,zero,8000600 <__addsf3+0x5c>
 80009ac:	2145c83a 	sub	r2,r4,r5
 80009b0:	10c1002c 	andhi	r3,r2,1024
 80009b4:	183f4f26 	beq	r3,zero,80006f4 <__addsf3+0x150>
 80009b8:	2909c83a 	sub	r4,r5,r4
 80009bc:	3823883a 	mov	r17,r7
 80009c0:	003f0f06 	br	8000600 <__addsf3+0x5c>
 80009c4:	28001a26 	beq	r5,zero,8000a30 <__addsf3+0x48c>
 80009c8:	2008d0fa 	srli	r4,r4,3
 80009cc:	2080102c 	andhi	r2,r4,64
 80009d0:	10000526 	beq	r2,zero,80009e8 <__addsf3+0x444>
 80009d4:	280ad0fa 	srli	r5,r5,3
 80009d8:	2880102c 	andhi	r2,r5,64
 80009dc:	1000021e 	bne	r2,zero,80009e8 <__addsf3+0x444>
 80009e0:	2809883a 	mov	r4,r5
 80009e4:	3823883a 	mov	r17,r7
 80009e8:	200890fa 	slli	r4,r4,3
 80009ec:	04003fc4 	movi	r16,255
 80009f0:	003f0306 	br	8000600 <__addsf3+0x5c>
 80009f4:	01c03fc4 	movi	r7,255
 80009f8:	31ffe01e 	bne	r6,r7,800097c <__addsf3+0x3d8>
 80009fc:	2809883a 	mov	r4,r5
 8000a00:	3021883a 	mov	r16,r6
 8000a04:	003efe06 	br	8000600 <__addsf3+0x5c>
 8000a08:	20001126 	beq	r4,zero,8000a50 <__addsf3+0x4ac>
 8000a0c:	28000826 	beq	r5,zero,8000a30 <__addsf3+0x48c>
 8000a10:	2008d0fa 	srli	r4,r4,3
 8000a14:	2080102c 	andhi	r2,r4,64
 8000a18:	103ff326 	beq	r2,zero,80009e8 <__addsf3+0x444>
 8000a1c:	280ad0fa 	srli	r5,r5,3
 8000a20:	2880102c 	andhi	r2,r5,64
 8000a24:	103ff01e 	bne	r2,zero,80009e8 <__addsf3+0x444>
 8000a28:	2809883a 	mov	r4,r5
 8000a2c:	003fee06 	br	80009e8 <__addsf3+0x444>
 8000a30:	04003fc4 	movi	r16,255
 8000a34:	003ef206 	br	8000600 <__addsf3+0x5c>
 8000a38:	01000044 	movi	r4,1
 8000a3c:	003f9706 	br	800089c <__addsf3+0x2f8>
 8000a40:	0005883a 	mov	r2,zero
 8000a44:	003f3406 	br	8000718 <__addsf3+0x174>
 8000a48:	2809883a 	mov	r4,r5
 8000a4c:	003eec06 	br	8000600 <__addsf3+0x5c>
 8000a50:	2809883a 	mov	r4,r5
 8000a54:	04003fc4 	movi	r16,255
 8000a58:	003ee906 	br	8000600 <__addsf3+0x5c>
 8000a5c:	00c00044 	movi	r3,1
 8000a60:	003fce06 	br	800099c <__addsf3+0x3f8>
 8000a64:	0005883a 	mov	r2,zero
 8000a68:	003f4e06 	br	80007a4 <__addsf3+0x200>

08000a6c <__divsf3>:
 8000a6c:	defff504 	addi	sp,sp,-44
 8000a70:	200cd5fa 	srli	r6,r4,23
 8000a74:	dcc00415 	stw	r19,16(sp)
 8000a78:	2026d7fa 	srli	r19,r4,31
 8000a7c:	00c02034 	movhi	r3,128
 8000a80:	dd800715 	stw	r22,28(sp)
 8000a84:	dd000515 	stw	r20,20(sp)
 8000a88:	dc800315 	stw	r18,12(sp)
 8000a8c:	18ffffc4 	addi	r3,r3,-1
 8000a90:	dfc00a15 	stw	ra,40(sp)
 8000a94:	df000915 	stw	fp,36(sp)
 8000a98:	ddc00815 	stw	r23,32(sp)
 8000a9c:	dd400615 	stw	r21,24(sp)
 8000aa0:	dc400215 	stw	r17,8(sp)
 8000aa4:	dc000115 	stw	r16,4(sp)
 8000aa8:	35003fcc 	andi	r20,r6,255
 8000aac:	1924703a 	and	r18,r3,r4
 8000ab0:	9d803fcc 	andi	r22,r19,255
 8000ab4:	a0005226 	beq	r20,zero,8000c00 <__divsf3+0x194>
 8000ab8:	00803fc4 	movi	r2,255
 8000abc:	a0802e26 	beq	r20,r2,8000b78 <__divsf3+0x10c>
 8000ac0:	91002034 	orhi	r4,r18,128
 8000ac4:	202490fa 	slli	r18,r4,3
 8000ac8:	a53fe044 	addi	r20,r20,-127
 8000acc:	0021883a 	mov	r16,zero
 8000ad0:	002f883a 	mov	r23,zero
 8000ad4:	280cd5fa 	srli	r6,r5,23
 8000ad8:	282ad7fa 	srli	r21,r5,31
 8000adc:	00c02034 	movhi	r3,128
 8000ae0:	18ffffc4 	addi	r3,r3,-1
 8000ae4:	31803fcc 	andi	r6,r6,255
 8000ae8:	1962703a 	and	r17,r3,r5
 8000aec:	af003fcc 	andi	fp,r21,255
 8000af0:	30004a26 	beq	r6,zero,8000c1c <__divsf3+0x1b0>
 8000af4:	00803fc4 	movi	r2,255
 8000af8:	30804526 	beq	r6,r2,8000c10 <__divsf3+0x1a4>
 8000afc:	89402034 	orhi	r5,r17,128
 8000b00:	282290fa 	slli	r17,r5,3
 8000b04:	31bfe044 	addi	r6,r6,-127
 8000b08:	000b883a 	mov	r5,zero
 8000b0c:	2c20b03a 	or	r16,r5,r16
 8000b10:	802090ba 	slli	r16,r16,2
 8000b14:	00820034 	movhi	r2,2048
 8000b18:	1082ce04 	addi	r2,r2,2872
 8000b1c:	80a1883a 	add	r16,r16,r2
 8000b20:	81000017 	ldw	r4,0(r16)
 8000b24:	9d46f03a 	xor	r3,r19,r21
 8000b28:	180f883a 	mov	r7,r3
 8000b2c:	18803fcc 	andi	r2,r3,255
 8000b30:	a18dc83a 	sub	r6,r20,r6
 8000b34:	2000683a 	jmp	r4
 8000b38:	08000d1c 	xori	zero,at,52
 8000b3c:	08000ba0 	cmpeqi	zero,at,46
 8000b40:	08000d10 	cmplti	zero,at,52
 8000b44:	08000b8c 	andi	zero,at,46
 8000b48:	08000d10 	cmplti	zero,at,52
 8000b4c:	08000ce8 	cmpgeui	zero,at,51
 8000b50:	08000d10 	cmplti	zero,at,52
 8000b54:	08000b8c 	andi	zero,at,46
 8000b58:	08000ba0 	cmpeqi	zero,at,46
 8000b5c:	08000ba0 	cmpeqi	zero,at,46
 8000b60:	08000ce8 	cmpgeui	zero,at,51
 8000b64:	08000b8c 	andi	zero,at,46
 8000b68:	08000dfc 	xorhi	zero,at,55
 8000b6c:	08000dfc 	xorhi	zero,at,55
 8000b70:	08000dfc 	xorhi	zero,at,55
 8000b74:	08000db0 	cmpltui	zero,at,54
 8000b78:	9000581e 	bne	r18,zero,8000cdc <__divsf3+0x270>
 8000b7c:	04000204 	movi	r16,8
 8000b80:	05c00084 	movi	r23,2
 8000b84:	003fd306 	br	8000ad4 <__divsf3+0x68>
 8000b88:	0023883a 	mov	r17,zero
 8000b8c:	e02d883a 	mov	r22,fp
 8000b90:	282f883a 	mov	r23,r5
 8000b94:	00800084 	movi	r2,2
 8000b98:	b8808f1e 	bne	r23,r2,8000dd8 <__divsf3+0x36c>
 8000b9c:	b005883a 	mov	r2,r22
 8000ba0:	11c0004c 	andi	r7,r2,1
 8000ba4:	013fffc4 	movi	r4,-1
 8000ba8:	000d883a 	mov	r6,zero
 8000bac:	21003fcc 	andi	r4,r4,255
 8000bb0:	200895fa 	slli	r4,r4,23
 8000bb4:	38803fcc 	andi	r2,r7,255
 8000bb8:	00c02034 	movhi	r3,128
 8000bbc:	100497fa 	slli	r2,r2,31
 8000bc0:	18ffffc4 	addi	r3,r3,-1
 8000bc4:	30c6703a 	and	r3,r6,r3
 8000bc8:	1906b03a 	or	r3,r3,r4
 8000bcc:	1884b03a 	or	r2,r3,r2
 8000bd0:	dfc00a17 	ldw	ra,40(sp)
 8000bd4:	df000917 	ldw	fp,36(sp)
 8000bd8:	ddc00817 	ldw	r23,32(sp)
 8000bdc:	dd800717 	ldw	r22,28(sp)
 8000be0:	dd400617 	ldw	r21,24(sp)
 8000be4:	dd000517 	ldw	r20,20(sp)
 8000be8:	dcc00417 	ldw	r19,16(sp)
 8000bec:	dc800317 	ldw	r18,12(sp)
 8000bf0:	dc400217 	ldw	r17,8(sp)
 8000bf4:	dc000117 	ldw	r16,4(sp)
 8000bf8:	dec00b04 	addi	sp,sp,44
 8000bfc:	f800283a 	ret
 8000c00:	90002b1e 	bne	r18,zero,8000cb0 <__divsf3+0x244>
 8000c04:	04000104 	movi	r16,4
 8000c08:	05c00044 	movi	r23,1
 8000c0c:	003fb106 	br	8000ad4 <__divsf3+0x68>
 8000c10:	8800251e 	bne	r17,zero,8000ca8 <__divsf3+0x23c>
 8000c14:	01400084 	movi	r5,2
 8000c18:	00000206 	br	8000c24 <__divsf3+0x1b8>
 8000c1c:	88001a1e 	bne	r17,zero,8000c88 <__divsf3+0x21c>
 8000c20:	01400044 	movi	r5,1
 8000c24:	8160b03a 	or	r16,r16,r5
 8000c28:	802090ba 	slli	r16,r16,2
 8000c2c:	00c20034 	movhi	r3,2048
 8000c30:	18c31204 	addi	r3,r3,3144
 8000c34:	80e1883a 	add	r16,r16,r3
 8000c38:	80c00017 	ldw	r3,0(r16)
 8000c3c:	9d44f03a 	xor	r2,r19,r21
 8000c40:	a18dc83a 	sub	r6,r20,r6
 8000c44:	1800683a 	jmp	r3
 8000c48:	08000ba0 	cmpeqi	zero,at,46
 8000c4c:	08000ba0 	cmpeqi	zero,at,46
 8000c50:	08000dec 	andhi	zero,at,55
 8000c54:	08000b88 	cmpgei	zero,at,46
 8000c58:	08000dec 	andhi	zero,at,55
 8000c5c:	08000ce8 	cmpgeui	zero,at,51
 8000c60:	08000dec 	andhi	zero,at,55
 8000c64:	08000b88 	cmpgei	zero,at,46
 8000c68:	08000ba0 	cmpeqi	zero,at,46
 8000c6c:	08000ba0 	cmpeqi	zero,at,46
 8000c70:	08000ce8 	cmpgeui	zero,at,51
 8000c74:	08000b88 	cmpgei	zero,at,46
 8000c78:	08000dfc 	xorhi	zero,at,55
 8000c7c:	08000dfc 	xorhi	zero,at,55
 8000c80:	08000dfc 	xorhi	zero,at,55
 8000c84:	08000e14 	ori	zero,at,56
 8000c88:	8809883a 	mov	r4,r17
 8000c8c:	8001aec0 	call	8001aec <__clzsi2>
 8000c90:	10fffec4 	addi	r3,r2,-5
 8000c94:	10801d84 	addi	r2,r2,118
 8000c98:	88e2983a 	sll	r17,r17,r3
 8000c9c:	008dc83a 	sub	r6,zero,r2
 8000ca0:	000b883a 	mov	r5,zero
 8000ca4:	003f9906 	br	8000b0c <__divsf3+0xa0>
 8000ca8:	014000c4 	movi	r5,3
 8000cac:	003f9706 	br	8000b0c <__divsf3+0xa0>
 8000cb0:	9009883a 	mov	r4,r18
 8000cb4:	d9400015 	stw	r5,0(sp)
 8000cb8:	8001aec0 	call	8001aec <__clzsi2>
 8000cbc:	10fffec4 	addi	r3,r2,-5
 8000cc0:	11801d84 	addi	r6,r2,118
 8000cc4:	90e4983a 	sll	r18,r18,r3
 8000cc8:	01a9c83a 	sub	r20,zero,r6
 8000ccc:	0021883a 	mov	r16,zero
 8000cd0:	002f883a 	mov	r23,zero
 8000cd4:	d9400017 	ldw	r5,0(sp)
 8000cd8:	003f7e06 	br	8000ad4 <__divsf3+0x68>
 8000cdc:	04000304 	movi	r16,12
 8000ce0:	05c000c4 	movi	r23,3
 8000ce4:	003f7b06 	br	8000ad4 <__divsf3+0x68>
 8000ce8:	01802034 	movhi	r6,128
 8000cec:	000f883a 	mov	r7,zero
 8000cf0:	31bfffc4 	addi	r6,r6,-1
 8000cf4:	013fffc4 	movi	r4,-1
 8000cf8:	003fac06 	br	8000bac <__divsf3+0x140>
 8000cfc:	01400044 	movi	r5,1
 8000d00:	2909c83a 	sub	r4,r5,r4
 8000d04:	00c006c4 	movi	r3,27
 8000d08:	19004b0e 	bge	r3,r4,8000e38 <__divsf3+0x3cc>
 8000d0c:	114e703a 	and	r7,r2,r5
 8000d10:	0009883a 	mov	r4,zero
 8000d14:	000d883a 	mov	r6,zero
 8000d18:	003fa406 	br	8000bac <__divsf3+0x140>
 8000d1c:	9006917a 	slli	r3,r18,5
 8000d20:	8822917a 	slli	r17,r17,5
 8000d24:	1c40372e 	bgeu	r3,r17,8000e04 <__divsf3+0x398>
 8000d28:	31bfffc4 	addi	r6,r6,-1
 8000d2c:	010006c4 	movi	r4,27
 8000d30:	000b883a 	mov	r5,zero
 8000d34:	180f883a 	mov	r7,r3
 8000d38:	294b883a 	add	r5,r5,r5
 8000d3c:	18c7883a 	add	r3,r3,r3
 8000d40:	38000116 	blt	r7,zero,8000d48 <__divsf3+0x2dc>
 8000d44:	1c400236 	bltu	r3,r17,8000d50 <__divsf3+0x2e4>
 8000d48:	1c47c83a 	sub	r3,r3,r17
 8000d4c:	29400054 	ori	r5,r5,1
 8000d50:	213fffc4 	addi	r4,r4,-1
 8000d54:	203ff71e 	bne	r4,zero,8000d34 <__divsf3+0x2c8>
 8000d58:	1806c03a 	cmpne	r3,r3,zero
 8000d5c:	1962b03a 	or	r17,r3,r5
 8000d60:	31001fc4 	addi	r4,r6,127
 8000d64:	013fe50e 	bge	zero,r4,8000cfc <__divsf3+0x290>
 8000d68:	88c001cc 	andi	r3,r17,7
 8000d6c:	18000426 	beq	r3,zero,8000d80 <__divsf3+0x314>
 8000d70:	88c003cc 	andi	r3,r17,15
 8000d74:	01400104 	movi	r5,4
 8000d78:	19400126 	beq	r3,r5,8000d80 <__divsf3+0x314>
 8000d7c:	8963883a 	add	r17,r17,r5
 8000d80:	88c2002c 	andhi	r3,r17,2048
 8000d84:	18000426 	beq	r3,zero,8000d98 <__divsf3+0x32c>
 8000d88:	00fe0034 	movhi	r3,63488
 8000d8c:	18ffffc4 	addi	r3,r3,-1
 8000d90:	31002004 	addi	r4,r6,128
 8000d94:	88e2703a 	and	r17,r17,r3
 8000d98:	00c03f84 	movi	r3,254
 8000d9c:	193f8016 	blt	r3,r4,8000ba0 <__divsf3+0x134>
 8000da0:	880c91ba 	slli	r6,r17,6
 8000da4:	11c0004c 	andi	r7,r2,1
 8000da8:	300cd27a 	srli	r6,r6,9
 8000dac:	003f7f06 	br	8000bac <__divsf3+0x140>
 8000db0:	9080102c 	andhi	r2,r18,64
 8000db4:	10000226 	beq	r2,zero,8000dc0 <__divsf3+0x354>
 8000db8:	8880102c 	andhi	r2,r17,64
 8000dbc:	10001826 	beq	r2,zero,8000e20 <__divsf3+0x3b4>
 8000dc0:	00802034 	movhi	r2,128
 8000dc4:	91801034 	orhi	r6,r18,64
 8000dc8:	10bfffc4 	addi	r2,r2,-1
 8000dcc:	980f883a 	mov	r7,r19
 8000dd0:	308c703a 	and	r6,r6,r2
 8000dd4:	003fc706 	br	8000cf4 <__divsf3+0x288>
 8000dd8:	008000c4 	movi	r2,3
 8000ddc:	b8802d26 	beq	r23,r2,8000e94 <__divsf3+0x428>
 8000de0:	00c00044 	movi	r3,1
 8000de4:	b005883a 	mov	r2,r22
 8000de8:	b8ffdd1e 	bne	r23,r3,8000d60 <__divsf3+0x2f4>
 8000dec:	11c0004c 	andi	r7,r2,1
 8000df0:	0009883a 	mov	r4,zero
 8000df4:	000d883a 	mov	r6,zero
 8000df8:	003f6c06 	br	8000bac <__divsf3+0x140>
 8000dfc:	9023883a 	mov	r17,r18
 8000e00:	003f6406 	br	8000b94 <__divsf3+0x128>
 8000e04:	1c47c83a 	sub	r3,r3,r17
 8000e08:	01000684 	movi	r4,26
 8000e0c:	01400044 	movi	r5,1
 8000e10:	003fc806 	br	8000d34 <__divsf3+0x2c8>
 8000e14:	9080102c 	andhi	r2,r18,64
 8000e18:	103fe926 	beq	r2,zero,8000dc0 <__divsf3+0x354>
 8000e1c:	0023883a 	mov	r17,zero
 8000e20:	00802034 	movhi	r2,128
 8000e24:	89801034 	orhi	r6,r17,64
 8000e28:	10bfffc4 	addi	r2,r2,-1
 8000e2c:	a80f883a 	mov	r7,r21
 8000e30:	308c703a 	and	r6,r6,r2
 8000e34:	003faf06 	br	8000cf4 <__divsf3+0x288>
 8000e38:	01c00804 	movi	r7,32
 8000e3c:	390fc83a 	sub	r7,r7,r4
 8000e40:	89ce983a 	sll	r7,r17,r7
 8000e44:	890ad83a 	srl	r5,r17,r4
 8000e48:	380ec03a 	cmpne	r7,r7,zero
 8000e4c:	29cab03a 	or	r5,r5,r7
 8000e50:	28c001cc 	andi	r3,r5,7
 8000e54:	18000426 	beq	r3,zero,8000e68 <__divsf3+0x3fc>
 8000e58:	28c003cc 	andi	r3,r5,15
 8000e5c:	01000104 	movi	r4,4
 8000e60:	19000126 	beq	r3,r4,8000e68 <__divsf3+0x3fc>
 8000e64:	290b883a 	add	r5,r5,r4
 8000e68:	28c1002c 	andhi	r3,r5,1024
 8000e6c:	18000426 	beq	r3,zero,8000e80 <__divsf3+0x414>
 8000e70:	11c0004c 	andi	r7,r2,1
 8000e74:	01000044 	movi	r4,1
 8000e78:	000d883a 	mov	r6,zero
 8000e7c:	003f4b06 	br	8000bac <__divsf3+0x140>
 8000e80:	280a91ba 	slli	r5,r5,6
 8000e84:	11c0004c 	andi	r7,r2,1
 8000e88:	0009883a 	mov	r4,zero
 8000e8c:	280cd27a 	srli	r6,r5,9
 8000e90:	003f4606 	br	8000bac <__divsf3+0x140>
 8000e94:	00802034 	movhi	r2,128
 8000e98:	89801034 	orhi	r6,r17,64
 8000e9c:	10bfffc4 	addi	r2,r2,-1
 8000ea0:	b00f883a 	mov	r7,r22
 8000ea4:	308c703a 	and	r6,r6,r2
 8000ea8:	003f9206 	br	8000cf4 <__divsf3+0x288>

08000eac <__gesf2>:
 8000eac:	2004d5fa 	srli	r2,r4,23
 8000eb0:	2806d5fa 	srli	r3,r5,23
 8000eb4:	01802034 	movhi	r6,128
 8000eb8:	31bfffc4 	addi	r6,r6,-1
 8000ebc:	10803fcc 	andi	r2,r2,255
 8000ec0:	01c03fc4 	movi	r7,255
 8000ec4:	3110703a 	and	r8,r6,r4
 8000ec8:	18c03fcc 	andi	r3,r3,255
 8000ecc:	314c703a 	and	r6,r6,r5
 8000ed0:	2008d7fa 	srli	r4,r4,31
 8000ed4:	280ad7fa 	srli	r5,r5,31
 8000ed8:	11c01926 	beq	r2,r7,8000f40 <__gesf2+0x94>
 8000edc:	01c03fc4 	movi	r7,255
 8000ee0:	19c00f26 	beq	r3,r7,8000f20 <__gesf2+0x74>
 8000ee4:	1000061e 	bne	r2,zero,8000f00 <__gesf2+0x54>
 8000ee8:	400f003a 	cmpeq	r7,r8,zero
 8000eec:	1800071e 	bne	r3,zero,8000f0c <__gesf2+0x60>
 8000ef0:	3000061e 	bne	r6,zero,8000f0c <__gesf2+0x60>
 8000ef4:	0005883a 	mov	r2,zero
 8000ef8:	40000e1e 	bne	r8,zero,8000f34 <__gesf2+0x88>
 8000efc:	f800283a 	ret
 8000f00:	18000a1e 	bne	r3,zero,8000f2c <__gesf2+0x80>
 8000f04:	30000b26 	beq	r6,zero,8000f34 <__gesf2+0x88>
 8000f08:	000f883a 	mov	r7,zero
 8000f0c:	29403fcc 	andi	r5,r5,255
 8000f10:	38000726 	beq	r7,zero,8000f30 <__gesf2+0x84>
 8000f14:	28000826 	beq	r5,zero,8000f38 <__gesf2+0x8c>
 8000f18:	00800044 	movi	r2,1
 8000f1c:	f800283a 	ret
 8000f20:	303ff026 	beq	r6,zero,8000ee4 <__gesf2+0x38>
 8000f24:	00bfff84 	movi	r2,-2
 8000f28:	f800283a 	ret
 8000f2c:	29403fcc 	andi	r5,r5,255
 8000f30:	21400526 	beq	r4,r5,8000f48 <__gesf2+0x9c>
 8000f34:	203ff826 	beq	r4,zero,8000f18 <__gesf2+0x6c>
 8000f38:	00bfffc4 	movi	r2,-1
 8000f3c:	f800283a 	ret
 8000f40:	403fe626 	beq	r8,zero,8000edc <__gesf2+0x30>
 8000f44:	003ff706 	br	8000f24 <__gesf2+0x78>
 8000f48:	18bffa16 	blt	r3,r2,8000f34 <__gesf2+0x88>
 8000f4c:	10c00216 	blt	r2,r3,8000f58 <__gesf2+0xac>
 8000f50:	323ff836 	bltu	r6,r8,8000f34 <__gesf2+0x88>
 8000f54:	4180022e 	bgeu	r8,r6,8000f60 <__gesf2+0xb4>
 8000f58:	203fef1e 	bne	r4,zero,8000f18 <__gesf2+0x6c>
 8000f5c:	003ff606 	br	8000f38 <__gesf2+0x8c>
 8000f60:	0005883a 	mov	r2,zero
 8000f64:	f800283a 	ret

08000f68 <__mulsf3>:
 8000f68:	defff504 	addi	sp,sp,-44
 8000f6c:	dc000115 	stw	r16,4(sp)
 8000f70:	2020d5fa 	srli	r16,r4,23
 8000f74:	dd400615 	stw	r21,24(sp)
 8000f78:	202ad7fa 	srli	r21,r4,31
 8000f7c:	dc800315 	stw	r18,12(sp)
 8000f80:	04802034 	movhi	r18,128
 8000f84:	df000915 	stw	fp,36(sp)
 8000f88:	dd000515 	stw	r20,20(sp)
 8000f8c:	94bfffc4 	addi	r18,r18,-1
 8000f90:	dfc00a15 	stw	ra,40(sp)
 8000f94:	ddc00815 	stw	r23,32(sp)
 8000f98:	dd800715 	stw	r22,28(sp)
 8000f9c:	dcc00415 	stw	r19,16(sp)
 8000fa0:	dc400215 	stw	r17,8(sp)
 8000fa4:	84003fcc 	andi	r16,r16,255
 8000fa8:	9124703a 	and	r18,r18,r4
 8000fac:	a829883a 	mov	r20,r21
 8000fb0:	af003fcc 	andi	fp,r21,255
 8000fb4:	80005426 	beq	r16,zero,8001108 <__mulsf3+0x1a0>
 8000fb8:	00803fc4 	movi	r2,255
 8000fbc:	80802f26 	beq	r16,r2,800107c <__mulsf3+0x114>
 8000fc0:	91002034 	orhi	r4,r18,128
 8000fc4:	202490fa 	slli	r18,r4,3
 8000fc8:	843fe044 	addi	r16,r16,-127
 8000fcc:	0023883a 	mov	r17,zero
 8000fd0:	002f883a 	mov	r23,zero
 8000fd4:	2804d5fa 	srli	r2,r5,23
 8000fd8:	282cd7fa 	srli	r22,r5,31
 8000fdc:	01002034 	movhi	r4,128
 8000fe0:	213fffc4 	addi	r4,r4,-1
 8000fe4:	10803fcc 	andi	r2,r2,255
 8000fe8:	2166703a 	and	r19,r4,r5
 8000fec:	b1803fcc 	andi	r6,r22,255
 8000ff0:	10004c26 	beq	r2,zero,8001124 <__mulsf3+0x1bc>
 8000ff4:	00c03fc4 	movi	r3,255
 8000ff8:	10c04726 	beq	r2,r3,8001118 <__mulsf3+0x1b0>
 8000ffc:	99002034 	orhi	r4,r19,128
 8001000:	202690fa 	slli	r19,r4,3
 8001004:	10bfe044 	addi	r2,r2,-127
 8001008:	0007883a 	mov	r3,zero
 800100c:	80a1883a 	add	r16,r16,r2
 8001010:	010003c4 	movi	r4,15
 8001014:	1c44b03a 	or	r2,r3,r17
 8001018:	b56af03a 	xor	r21,r22,r21
 800101c:	81c00044 	addi	r7,r16,1
 8001020:	20806b36 	bltu	r4,r2,80011d0 <__mulsf3+0x268>
 8001024:	100490ba 	slli	r2,r2,2
 8001028:	01020034 	movhi	r4,2048
 800102c:	21040f04 	addi	r4,r4,4156
 8001030:	1105883a 	add	r2,r2,r4
 8001034:	10800017 	ldw	r2,0(r2)
 8001038:	1000683a 	jmp	r2
 800103c:	080011d0 	cmplti	zero,at,71
 8001040:	08001090 	cmplti	zero,at,66
 8001044:	08001090 	cmplti	zero,at,66
 8001048:	0800108c 	andi	zero,at,66
 800104c:	080011b4 	orhi	zero,at,70
 8001050:	080011b4 	orhi	zero,at,70
 8001054:	080011a0 	cmpeqi	zero,at,70
 8001058:	0800108c 	andi	zero,at,66
 800105c:	080011b4 	orhi	zero,at,70
 8001060:	080011a0 	cmpeqi	zero,at,70
 8001064:	080011b4 	orhi	zero,at,70
 8001068:	0800108c 	andi	zero,at,66
 800106c:	080011c0 	call	80011c <__alt_mem_new_sdram_controller_0-0x77ffee4>
 8001070:	080011c0 	call	80011c <__alt_mem_new_sdram_controller_0-0x77ffee4>
 8001074:	080011c0 	call	80011c <__alt_mem_new_sdram_controller_0-0x77ffee4>
 8001078:	0800129c 	xori	zero,at,74
 800107c:	90003b1e 	bne	r18,zero,800116c <__mulsf3+0x204>
 8001080:	04400204 	movi	r17,8
 8001084:	05c00084 	movi	r23,2
 8001088:	003fd206 	br	8000fd4 <__mulsf3+0x6c>
 800108c:	302b883a 	mov	r21,r6
 8001090:	00800084 	movi	r2,2
 8001094:	18802626 	beq	r3,r2,8001130 <__mulsf3+0x1c8>
 8001098:	008000c4 	movi	r2,3
 800109c:	1880ab26 	beq	r3,r2,800134c <__mulsf3+0x3e4>
 80010a0:	00800044 	movi	r2,1
 80010a4:	1880a21e 	bne	r3,r2,8001330 <__mulsf3+0x3c8>
 80010a8:	a829883a 	mov	r20,r21
 80010ac:	0007883a 	mov	r3,zero
 80010b0:	0009883a 	mov	r4,zero
 80010b4:	18803fcc 	andi	r2,r3,255
 80010b8:	100695fa 	slli	r3,r2,23
 80010bc:	a0803fcc 	andi	r2,r20,255
 80010c0:	100a97fa 	slli	r5,r2,31
 80010c4:	00802034 	movhi	r2,128
 80010c8:	10bfffc4 	addi	r2,r2,-1
 80010cc:	2084703a 	and	r2,r4,r2
 80010d0:	10c4b03a 	or	r2,r2,r3
 80010d4:	1144b03a 	or	r2,r2,r5
 80010d8:	dfc00a17 	ldw	ra,40(sp)
 80010dc:	df000917 	ldw	fp,36(sp)
 80010e0:	ddc00817 	ldw	r23,32(sp)
 80010e4:	dd800717 	ldw	r22,28(sp)
 80010e8:	dd400617 	ldw	r21,24(sp)
 80010ec:	dd000517 	ldw	r20,20(sp)
 80010f0:	dcc00417 	ldw	r19,16(sp)
 80010f4:	dc800317 	ldw	r18,12(sp)
 80010f8:	dc400217 	ldw	r17,8(sp)
 80010fc:	dc000117 	ldw	r16,4(sp)
 8001100:	dec00b04 	addi	sp,sp,44
 8001104:	f800283a 	ret
 8001108:	90000d1e 	bne	r18,zero,8001140 <__mulsf3+0x1d8>
 800110c:	04400104 	movi	r17,4
 8001110:	05c00044 	movi	r23,1
 8001114:	003faf06 	br	8000fd4 <__mulsf3+0x6c>
 8001118:	9806c03a 	cmpne	r3,r19,zero
 800111c:	18c00084 	addi	r3,r3,2
 8001120:	003fba06 	br	800100c <__mulsf3+0xa4>
 8001124:	9800141e 	bne	r19,zero,8001178 <__mulsf3+0x210>
 8001128:	00c00044 	movi	r3,1
 800112c:	003fb706 	br	800100c <__mulsf3+0xa4>
 8001130:	a829883a 	mov	r20,r21
 8001134:	00ffffc4 	movi	r3,-1
 8001138:	0009883a 	mov	r4,zero
 800113c:	003fdd06 	br	80010b4 <__mulsf3+0x14c>
 8001140:	9009883a 	mov	r4,r18
 8001144:	d9400015 	stw	r5,0(sp)
 8001148:	8001aec0 	call	8001aec <__clzsi2>
 800114c:	10fffec4 	addi	r3,r2,-5
 8001150:	10801d84 	addi	r2,r2,118
 8001154:	90e4983a 	sll	r18,r18,r3
 8001158:	00a1c83a 	sub	r16,zero,r2
 800115c:	0023883a 	mov	r17,zero
 8001160:	002f883a 	mov	r23,zero
 8001164:	d9400017 	ldw	r5,0(sp)
 8001168:	003f9a06 	br	8000fd4 <__mulsf3+0x6c>
 800116c:	04400304 	movi	r17,12
 8001170:	05c000c4 	movi	r23,3
 8001174:	003f9706 	br	8000fd4 <__mulsf3+0x6c>
 8001178:	9809883a 	mov	r4,r19
 800117c:	d9800015 	stw	r6,0(sp)
 8001180:	8001aec0 	call	8001aec <__clzsi2>
 8001184:	10fffec4 	addi	r3,r2,-5
 8001188:	10801d84 	addi	r2,r2,118
 800118c:	98e6983a 	sll	r19,r19,r3
 8001190:	0085c83a 	sub	r2,zero,r2
 8001194:	0007883a 	mov	r3,zero
 8001198:	d9800017 	ldw	r6,0(sp)
 800119c:	003f9b06 	br	800100c <__mulsf3+0xa4>
 80011a0:	01002034 	movhi	r4,128
 80011a4:	0029883a 	mov	r20,zero
 80011a8:	213fffc4 	addi	r4,r4,-1
 80011ac:	00ffffc4 	movi	r3,-1
 80011b0:	003fc006 	br	80010b4 <__mulsf3+0x14c>
 80011b4:	9027883a 	mov	r19,r18
 80011b8:	b807883a 	mov	r3,r23
 80011bc:	003fb406 	br	8001090 <__mulsf3+0x128>
 80011c0:	9027883a 	mov	r19,r18
 80011c4:	e02b883a 	mov	r21,fp
 80011c8:	b807883a 	mov	r3,r23
 80011cc:	003fb006 	br	8001090 <__mulsf3+0x128>
 80011d0:	9004d43a 	srli	r2,r18,16
 80011d4:	9810d43a 	srli	r8,r19,16
 80011d8:	94bfffcc 	andi	r18,r18,65535
 80011dc:	993fffcc 	andi	r4,r19,65535
 80011e0:	910d383a 	mul	r6,r18,r4
 80011e4:	20a7383a 	mul	r19,r4,r2
 80011e8:	9225383a 	mul	r18,r18,r8
 80011ec:	3006d43a 	srli	r3,r6,16
 80011f0:	1211383a 	mul	r8,r2,r8
 80011f4:	94e5883a 	add	r18,r18,r19
 80011f8:	1c87883a 	add	r3,r3,r18
 80011fc:	1cc0022e 	bgeu	r3,r19,8001208 <__mulsf3+0x2a0>
 8001200:	00800074 	movhi	r2,1
 8001204:	4091883a 	add	r8,r8,r2
 8001208:	1804943a 	slli	r2,r3,16
 800120c:	31bfffcc 	andi	r6,r6,65535
 8001210:	1806d43a 	srli	r3,r3,16
 8001214:	1185883a 	add	r2,r2,r6
 8001218:	102691ba 	slli	r19,r2,6
 800121c:	1a07883a 	add	r3,r3,r8
 8001220:	1004d6ba 	srli	r2,r2,26
 8001224:	180891ba 	slli	r4,r3,6
 8001228:	9826c03a 	cmpne	r19,r19,zero
 800122c:	9884b03a 	or	r2,r19,r2
 8001230:	1126b03a 	or	r19,r2,r4
 8001234:	9882002c 	andhi	r2,r19,2048
 8001238:	10000426 	beq	r2,zero,800124c <__mulsf3+0x2e4>
 800123c:	9804d07a 	srli	r2,r19,1
 8001240:	9900004c 	andi	r4,r19,1
 8001244:	3821883a 	mov	r16,r7
 8001248:	1126b03a 	or	r19,r2,r4
 800124c:	80c01fc4 	addi	r3,r16,127
 8001250:	00c0210e 	bge	zero,r3,80012d8 <__mulsf3+0x370>
 8001254:	988001cc 	andi	r2,r19,7
 8001258:	10000426 	beq	r2,zero,800126c <__mulsf3+0x304>
 800125c:	988003cc 	andi	r2,r19,15
 8001260:	01000104 	movi	r4,4
 8001264:	11000126 	beq	r2,r4,800126c <__mulsf3+0x304>
 8001268:	9927883a 	add	r19,r19,r4
 800126c:	9882002c 	andhi	r2,r19,2048
 8001270:	10000426 	beq	r2,zero,8001284 <__mulsf3+0x31c>
 8001274:	00be0034 	movhi	r2,63488
 8001278:	10bfffc4 	addi	r2,r2,-1
 800127c:	80c02004 	addi	r3,r16,128
 8001280:	98a6703a 	and	r19,r19,r2
 8001284:	00803f84 	movi	r2,254
 8001288:	10ffa916 	blt	r2,r3,8001130 <__mulsf3+0x1c8>
 800128c:	980891ba 	slli	r4,r19,6
 8001290:	a829883a 	mov	r20,r21
 8001294:	2008d27a 	srli	r4,r4,9
 8001298:	003f8606 	br	80010b4 <__mulsf3+0x14c>
 800129c:	9080102c 	andhi	r2,r18,64
 80012a0:	10000826 	beq	r2,zero,80012c4 <__mulsf3+0x35c>
 80012a4:	9880102c 	andhi	r2,r19,64
 80012a8:	1000061e 	bne	r2,zero,80012c4 <__mulsf3+0x35c>
 80012ac:	00802034 	movhi	r2,128
 80012b0:	99001034 	orhi	r4,r19,64
 80012b4:	10bfffc4 	addi	r2,r2,-1
 80012b8:	b029883a 	mov	r20,r22
 80012bc:	2088703a 	and	r4,r4,r2
 80012c0:	003fba06 	br	80011ac <__mulsf3+0x244>
 80012c4:	00802034 	movhi	r2,128
 80012c8:	91001034 	orhi	r4,r18,64
 80012cc:	10bfffc4 	addi	r2,r2,-1
 80012d0:	2088703a 	and	r4,r4,r2
 80012d4:	003fb506 	br	80011ac <__mulsf3+0x244>
 80012d8:	00800044 	movi	r2,1
 80012dc:	10c7c83a 	sub	r3,r2,r3
 80012e0:	008006c4 	movi	r2,27
 80012e4:	10ff7016 	blt	r2,r3,80010a8 <__mulsf3+0x140>
 80012e8:	00800804 	movi	r2,32
 80012ec:	10c5c83a 	sub	r2,r2,r3
 80012f0:	9884983a 	sll	r2,r19,r2
 80012f4:	98c6d83a 	srl	r3,r19,r3
 80012f8:	1004c03a 	cmpne	r2,r2,zero
 80012fc:	1884b03a 	or	r2,r3,r2
 8001300:	10c001cc 	andi	r3,r2,7
 8001304:	18000426 	beq	r3,zero,8001318 <__mulsf3+0x3b0>
 8001308:	10c003cc 	andi	r3,r2,15
 800130c:	01000104 	movi	r4,4
 8001310:	19000126 	beq	r3,r4,8001318 <__mulsf3+0x3b0>
 8001314:	1105883a 	add	r2,r2,r4
 8001318:	10c1002c 	andhi	r3,r2,1024
 800131c:	18000626 	beq	r3,zero,8001338 <__mulsf3+0x3d0>
 8001320:	a829883a 	mov	r20,r21
 8001324:	00c00044 	movi	r3,1
 8001328:	0009883a 	mov	r4,zero
 800132c:	003f6106 	br	80010b4 <__mulsf3+0x14c>
 8001330:	3821883a 	mov	r16,r7
 8001334:	003fc506 	br	800124c <__mulsf3+0x2e4>
 8001338:	100491ba 	slli	r2,r2,6
 800133c:	a829883a 	mov	r20,r21
 8001340:	0007883a 	mov	r3,zero
 8001344:	1008d27a 	srli	r4,r2,9
 8001348:	003f5a06 	br	80010b4 <__mulsf3+0x14c>
 800134c:	00802034 	movhi	r2,128
 8001350:	99001034 	orhi	r4,r19,64
 8001354:	10bfffc4 	addi	r2,r2,-1
 8001358:	a829883a 	mov	r20,r21
 800135c:	2088703a 	and	r4,r4,r2
 8001360:	003f9206 	br	80011ac <__mulsf3+0x244>

08001364 <__subsf3>:
 8001364:	defffc04 	addi	sp,sp,-16
 8001368:	280cd5fa 	srli	r6,r5,23
 800136c:	dc000015 	stw	r16,0(sp)
 8001370:	01c02034 	movhi	r7,128
 8001374:	2020d5fa 	srli	r16,r4,23
 8001378:	39ffffc4 	addi	r7,r7,-1
 800137c:	3906703a 	and	r3,r7,r4
 8001380:	dc400115 	stw	r17,4(sp)
 8001384:	394e703a 	and	r7,r7,r5
 8001388:	2022d7fa 	srli	r17,r4,31
 800138c:	dfc00315 	stw	ra,12(sp)
 8001390:	dc800215 	stw	r18,8(sp)
 8001394:	31803fcc 	andi	r6,r6,255
 8001398:	01003fc4 	movi	r4,255
 800139c:	84003fcc 	andi	r16,r16,255
 80013a0:	180690fa 	slli	r3,r3,3
 80013a4:	2804d7fa 	srli	r2,r5,31
 80013a8:	380e90fa 	slli	r7,r7,3
 80013ac:	31006d26 	beq	r6,r4,8001564 <__subsf3+0x200>
 80013b0:	1080005c 	xori	r2,r2,1
 80013b4:	8189c83a 	sub	r4,r16,r6
 80013b8:	14404f26 	beq	r2,r17,80014f8 <__subsf3+0x194>
 80013bc:	0100770e 	bge	zero,r4,800159c <__subsf3+0x238>
 80013c0:	30001e1e 	bne	r6,zero,800143c <__subsf3+0xd8>
 80013c4:	38006a1e 	bne	r7,zero,8001570 <__subsf3+0x20c>
 80013c8:	188001cc 	andi	r2,r3,7
 80013cc:	10000426 	beq	r2,zero,80013e0 <__subsf3+0x7c>
 80013d0:	188003cc 	andi	r2,r3,15
 80013d4:	01000104 	movi	r4,4
 80013d8:	11000126 	beq	r2,r4,80013e0 <__subsf3+0x7c>
 80013dc:	1907883a 	add	r3,r3,r4
 80013e0:	1881002c 	andhi	r2,r3,1024
 80013e4:	10003926 	beq	r2,zero,80014cc <__subsf3+0x168>
 80013e8:	84000044 	addi	r16,r16,1
 80013ec:	00803fc4 	movi	r2,255
 80013f0:	80807526 	beq	r16,r2,80015c8 <__subsf3+0x264>
 80013f4:	180691ba 	slli	r3,r3,6
 80013f8:	8880004c 	andi	r2,r17,1
 80013fc:	180ad27a 	srli	r5,r3,9
 8001400:	84003fcc 	andi	r16,r16,255
 8001404:	800695fa 	slli	r3,r16,23
 8001408:	10803fcc 	andi	r2,r2,255
 800140c:	01002034 	movhi	r4,128
 8001410:	213fffc4 	addi	r4,r4,-1
 8001414:	100497fa 	slli	r2,r2,31
 8001418:	2920703a 	and	r16,r5,r4
 800141c:	80e0b03a 	or	r16,r16,r3
 8001420:	8084b03a 	or	r2,r16,r2
 8001424:	dfc00317 	ldw	ra,12(sp)
 8001428:	dc800217 	ldw	r18,8(sp)
 800142c:	dc400117 	ldw	r17,4(sp)
 8001430:	dc000017 	ldw	r16,0(sp)
 8001434:	dec00404 	addi	sp,sp,16
 8001438:	f800283a 	ret
 800143c:	00803fc4 	movi	r2,255
 8001440:	80bfe126 	beq	r16,r2,80013c8 <__subsf3+0x64>
 8001444:	39c10034 	orhi	r7,r7,1024
 8001448:	008006c4 	movi	r2,27
 800144c:	11007416 	blt	r2,r4,8001620 <__subsf3+0x2bc>
 8001450:	00800804 	movi	r2,32
 8001454:	1105c83a 	sub	r2,r2,r4
 8001458:	3884983a 	sll	r2,r7,r2
 800145c:	390ed83a 	srl	r7,r7,r4
 8001460:	1008c03a 	cmpne	r4,r2,zero
 8001464:	390eb03a 	or	r7,r7,r4
 8001468:	19c7c83a 	sub	r3,r3,r7
 800146c:	1881002c 	andhi	r2,r3,1024
 8001470:	10001426 	beq	r2,zero,80014c4 <__subsf3+0x160>
 8001474:	04810034 	movhi	r18,1024
 8001478:	94bfffc4 	addi	r18,r18,-1
 800147c:	1ca4703a 	and	r18,r3,r18
 8001480:	9009883a 	mov	r4,r18
 8001484:	8001aec0 	call	8001aec <__clzsi2>
 8001488:	10bffec4 	addi	r2,r2,-5
 800148c:	90a4983a 	sll	r18,r18,r2
 8001490:	14005116 	blt	r2,r16,80015d8 <__subsf3+0x274>
 8001494:	1405c83a 	sub	r2,r2,r16
 8001498:	10c00044 	addi	r3,r2,1
 800149c:	00800804 	movi	r2,32
 80014a0:	10c5c83a 	sub	r2,r2,r3
 80014a4:	9084983a 	sll	r2,r18,r2
 80014a8:	90e4d83a 	srl	r18,r18,r3
 80014ac:	0021883a 	mov	r16,zero
 80014b0:	1006c03a 	cmpne	r3,r2,zero
 80014b4:	90c6b03a 	or	r3,r18,r3
 80014b8:	003fc306 	br	80013c8 <__subsf3+0x64>
 80014bc:	2000e026 	beq	r4,zero,8001840 <__subsf3+0x4dc>
 80014c0:	2007883a 	mov	r3,r4
 80014c4:	188001cc 	andi	r2,r3,7
 80014c8:	103fc11e 	bne	r2,zero,80013d0 <__subsf3+0x6c>
 80014cc:	180ad0fa 	srli	r5,r3,3
 80014d0:	00c03fc4 	movi	r3,255
 80014d4:	8880004c 	andi	r2,r17,1
 80014d8:	80c0031e 	bne	r16,r3,80014e8 <__subsf3+0x184>
 80014dc:	28006d26 	beq	r5,zero,8001694 <__subsf3+0x330>
 80014e0:	29401034 	orhi	r5,r5,64
 80014e4:	043fffc4 	movi	r16,-1
 80014e8:	00c02034 	movhi	r3,128
 80014ec:	18ffffc4 	addi	r3,r3,-1
 80014f0:	28ca703a 	and	r5,r5,r3
 80014f4:	003fc206 	br	8001400 <__subsf3+0x9c>
 80014f8:	01003c0e 	bge	zero,r4,80015ec <__subsf3+0x288>
 80014fc:	30002126 	beq	r6,zero,8001584 <__subsf3+0x220>
 8001500:	01403fc4 	movi	r5,255
 8001504:	817fb026 	beq	r16,r5,80013c8 <__subsf3+0x64>
 8001508:	39c10034 	orhi	r7,r7,1024
 800150c:	014006c4 	movi	r5,27
 8001510:	29007416 	blt	r5,r4,80016e4 <__subsf3+0x380>
 8001514:	01400804 	movi	r5,32
 8001518:	290bc83a 	sub	r5,r5,r4
 800151c:	394a983a 	sll	r5,r7,r5
 8001520:	390ed83a 	srl	r7,r7,r4
 8001524:	2808c03a 	cmpne	r4,r5,zero
 8001528:	390eb03a 	or	r7,r7,r4
 800152c:	19c7883a 	add	r3,r3,r7
 8001530:	1901002c 	andhi	r4,r3,1024
 8001534:	20003826 	beq	r4,zero,8001618 <__subsf3+0x2b4>
 8001538:	84000044 	addi	r16,r16,1
 800153c:	01003fc4 	movi	r4,255
 8001540:	81005426 	beq	r16,r4,8001694 <__subsf3+0x330>
 8001544:	1023883a 	mov	r17,r2
 8001548:	00bf0034 	movhi	r2,64512
 800154c:	10bfffc4 	addi	r2,r2,-1
 8001550:	1900004c 	andi	r4,r3,1
 8001554:	1886703a 	and	r3,r3,r2
 8001558:	1806d07a 	srli	r3,r3,1
 800155c:	1906b03a 	or	r3,r3,r4
 8001560:	003f9906 	br	80013c8 <__subsf3+0x64>
 8001564:	383f9226 	beq	r7,zero,80013b0 <__subsf3+0x4c>
 8001568:	10803fcc 	andi	r2,r2,255
 800156c:	003f9106 	br	80013b4 <__subsf3+0x50>
 8001570:	213fffc4 	addi	r4,r4,-1
 8001574:	203fbc26 	beq	r4,zero,8001468 <__subsf3+0x104>
 8001578:	00803fc4 	movi	r2,255
 800157c:	80bfb21e 	bne	r16,r2,8001448 <__subsf3+0xe4>
 8001580:	003f9106 	br	80013c8 <__subsf3+0x64>
 8001584:	383f9026 	beq	r7,zero,80013c8 <__subsf3+0x64>
 8001588:	213fffc4 	addi	r4,r4,-1
 800158c:	203fe726 	beq	r4,zero,800152c <__subsf3+0x1c8>
 8001590:	01403fc4 	movi	r5,255
 8001594:	817fdd1e 	bne	r16,r5,800150c <__subsf3+0x1a8>
 8001598:	003f8b06 	br	80013c8 <__subsf3+0x64>
 800159c:	2000221e 	bne	r4,zero,8001628 <__subsf3+0x2c4>
 80015a0:	81000044 	addi	r4,r16,1
 80015a4:	21003fcc 	andi	r4,r4,255
 80015a8:	01400044 	movi	r5,1
 80015ac:	2900470e 	bge	r5,r4,80016cc <__subsf3+0x368>
 80015b0:	19e5c83a 	sub	r18,r3,r7
 80015b4:	9141002c 	andhi	r5,r18,1024
 80015b8:	28002d26 	beq	r5,zero,8001670 <__subsf3+0x30c>
 80015bc:	38e5c83a 	sub	r18,r7,r3
 80015c0:	1023883a 	mov	r17,r2
 80015c4:	003fae06 	br	8001480 <__subsf3+0x11c>
 80015c8:	8880004c 	andi	r2,r17,1
 80015cc:	043fffc4 	movi	r16,-1
 80015d0:	000b883a 	mov	r5,zero
 80015d4:	003f8a06 	br	8001400 <__subsf3+0x9c>
 80015d8:	00ff0034 	movhi	r3,64512
 80015dc:	18ffffc4 	addi	r3,r3,-1
 80015e0:	80a1c83a 	sub	r16,r16,r2
 80015e4:	90c6703a 	and	r3,r18,r3
 80015e8:	003f7706 	br	80013c8 <__subsf3+0x64>
 80015ec:	2000431e 	bne	r4,zero,80016fc <__subsf3+0x398>
 80015f0:	81000044 	addi	r4,r16,1
 80015f4:	21803fcc 	andi	r6,r4,255
 80015f8:	01400044 	movi	r5,1
 80015fc:	2980280e 	bge	r5,r6,80016a0 <__subsf3+0x33c>
 8001600:	01403fc4 	movi	r5,255
 8001604:	21402326 	beq	r4,r5,8001694 <__subsf3+0x330>
 8001608:	19c7883a 	add	r3,r3,r7
 800160c:	1806d07a 	srli	r3,r3,1
 8001610:	2021883a 	mov	r16,r4
 8001614:	003f6c06 	br	80013c8 <__subsf3+0x64>
 8001618:	1023883a 	mov	r17,r2
 800161c:	003fa906 	br	80014c4 <__subsf3+0x160>
 8001620:	01c00044 	movi	r7,1
 8001624:	003f9006 	br	8001468 <__subsf3+0x104>
 8001628:	8000151e 	bne	r16,zero,8001680 <__subsf3+0x31c>
 800162c:	18002f26 	beq	r3,zero,80016ec <__subsf3+0x388>
 8001630:	0108303a 	nor	r4,zero,r4
 8001634:	20000a26 	beq	r4,zero,8001660 <__subsf3+0x2fc>
 8001638:	01403fc4 	movi	r5,255
 800163c:	31402b26 	beq	r6,r5,80016ec <__subsf3+0x388>
 8001640:	014006c4 	movi	r5,27
 8001644:	29006e16 	blt	r5,r4,8001800 <__subsf3+0x49c>
 8001648:	01400804 	movi	r5,32
 800164c:	290bc83a 	sub	r5,r5,r4
 8001650:	194a983a 	sll	r5,r3,r5
 8001654:	1908d83a 	srl	r4,r3,r4
 8001658:	2806c03a 	cmpne	r3,r5,zero
 800165c:	20c6b03a 	or	r3,r4,r3
 8001660:	38c7c83a 	sub	r3,r7,r3
 8001664:	3021883a 	mov	r16,r6
 8001668:	1023883a 	mov	r17,r2
 800166c:	003f7f06 	br	800146c <__subsf3+0x108>
 8001670:	903f831e 	bne	r18,zero,8001480 <__subsf3+0x11c>
 8001674:	0005883a 	mov	r2,zero
 8001678:	0021883a 	mov	r16,zero
 800167c:	003f9a06 	br	80014e8 <__subsf3+0x184>
 8001680:	01403fc4 	movi	r5,255
 8001684:	31401926 	beq	r6,r5,80016ec <__subsf3+0x388>
 8001688:	0109c83a 	sub	r4,zero,r4
 800168c:	18c10034 	orhi	r3,r3,1024
 8001690:	003feb06 	br	8001640 <__subsf3+0x2dc>
 8001694:	043fffc4 	movi	r16,-1
 8001698:	000b883a 	mov	r5,zero
 800169c:	003f5806 	br	8001400 <__subsf3+0x9c>
 80016a0:	8000481e 	bne	r16,zero,80017c4 <__subsf3+0x460>
 80016a4:	18006226 	beq	r3,zero,8001830 <__subsf3+0x4cc>
 80016a8:	383f4726 	beq	r7,zero,80013c8 <__subsf3+0x64>
 80016ac:	19c7883a 	add	r3,r3,r7
 80016b0:	1881002c 	andhi	r2,r3,1024
 80016b4:	103f8326 	beq	r2,zero,80014c4 <__subsf3+0x160>
 80016b8:	00bf0034 	movhi	r2,64512
 80016bc:	10bfffc4 	addi	r2,r2,-1
 80016c0:	2821883a 	mov	r16,r5
 80016c4:	1886703a 	and	r3,r3,r2
 80016c8:	003f3f06 	br	80013c8 <__subsf3+0x64>
 80016cc:	80001c1e 	bne	r16,zero,8001740 <__subsf3+0x3dc>
 80016d0:	1800261e 	bne	r3,zero,800176c <__subsf3+0x408>
 80016d4:	38004c26 	beq	r7,zero,8001808 <__subsf3+0x4a4>
 80016d8:	3807883a 	mov	r3,r7
 80016dc:	1023883a 	mov	r17,r2
 80016e0:	003f3906 	br	80013c8 <__subsf3+0x64>
 80016e4:	01c00044 	movi	r7,1
 80016e8:	003f9006 	br	800152c <__subsf3+0x1c8>
 80016ec:	3807883a 	mov	r3,r7
 80016f0:	3021883a 	mov	r16,r6
 80016f4:	1023883a 	mov	r17,r2
 80016f8:	003f3306 	br	80013c8 <__subsf3+0x64>
 80016fc:	8000161e 	bne	r16,zero,8001758 <__subsf3+0x3f4>
 8001700:	18002d26 	beq	r3,zero,80017b8 <__subsf3+0x454>
 8001704:	0108303a 	nor	r4,zero,r4
 8001708:	20000a26 	beq	r4,zero,8001734 <__subsf3+0x3d0>
 800170c:	01403fc4 	movi	r5,255
 8001710:	31402926 	beq	r6,r5,80017b8 <__subsf3+0x454>
 8001714:	014006c4 	movi	r5,27
 8001718:	29004716 	blt	r5,r4,8001838 <__subsf3+0x4d4>
 800171c:	01400804 	movi	r5,32
 8001720:	290bc83a 	sub	r5,r5,r4
 8001724:	194a983a 	sll	r5,r3,r5
 8001728:	1908d83a 	srl	r4,r3,r4
 800172c:	2806c03a 	cmpne	r3,r5,zero
 8001730:	20c6b03a 	or	r3,r4,r3
 8001734:	19c7883a 	add	r3,r3,r7
 8001738:	3021883a 	mov	r16,r6
 800173c:	003f7c06 	br	8001530 <__subsf3+0x1cc>
 8001740:	1800111e 	bne	r3,zero,8001788 <__subsf3+0x424>
 8001744:	38003326 	beq	r7,zero,8001814 <__subsf3+0x4b0>
 8001748:	3807883a 	mov	r3,r7
 800174c:	1023883a 	mov	r17,r2
 8001750:	04003fc4 	movi	r16,255
 8001754:	003f1c06 	br	80013c8 <__subsf3+0x64>
 8001758:	01403fc4 	movi	r5,255
 800175c:	31401626 	beq	r6,r5,80017b8 <__subsf3+0x454>
 8001760:	0109c83a 	sub	r4,zero,r4
 8001764:	18c10034 	orhi	r3,r3,1024
 8001768:	003fea06 	br	8001714 <__subsf3+0x3b0>
 800176c:	383f1626 	beq	r7,zero,80013c8 <__subsf3+0x64>
 8001770:	19c9c83a 	sub	r4,r3,r7
 8001774:	2141002c 	andhi	r5,r4,1024
 8001778:	283f5026 	beq	r5,zero,80014bc <__subsf3+0x158>
 800177c:	38c7c83a 	sub	r3,r7,r3
 8001780:	1023883a 	mov	r17,r2
 8001784:	003f1006 	br	80013c8 <__subsf3+0x64>
 8001788:	38001b26 	beq	r7,zero,80017f8 <__subsf3+0x494>
 800178c:	1806d0fa 	srli	r3,r3,3
 8001790:	1900102c 	andhi	r4,r3,64
 8001794:	20000526 	beq	r4,zero,80017ac <__subsf3+0x448>
 8001798:	380ed0fa 	srli	r7,r7,3
 800179c:	3900102c 	andhi	r4,r7,64
 80017a0:	2000021e 	bne	r4,zero,80017ac <__subsf3+0x448>
 80017a4:	3807883a 	mov	r3,r7
 80017a8:	1023883a 	mov	r17,r2
 80017ac:	180690fa 	slli	r3,r3,3
 80017b0:	04003fc4 	movi	r16,255
 80017b4:	003f0406 	br	80013c8 <__subsf3+0x64>
 80017b8:	3807883a 	mov	r3,r7
 80017bc:	3021883a 	mov	r16,r6
 80017c0:	003f0106 	br	80013c8 <__subsf3+0x64>
 80017c4:	18001726 	beq	r3,zero,8001824 <__subsf3+0x4c0>
 80017c8:	38000b26 	beq	r7,zero,80017f8 <__subsf3+0x494>
 80017cc:	1806d0fa 	srli	r3,r3,3
 80017d0:	1900102c 	andhi	r4,r3,64
 80017d4:	20000426 	beq	r4,zero,80017e8 <__subsf3+0x484>
 80017d8:	380ed0fa 	srli	r7,r7,3
 80017dc:	3900102c 	andhi	r4,r7,64
 80017e0:	2000011e 	bne	r4,zero,80017e8 <__subsf3+0x484>
 80017e4:	3807883a 	mov	r3,r7
 80017e8:	180690fa 	slli	r3,r3,3
 80017ec:	1023883a 	mov	r17,r2
 80017f0:	04003fc4 	movi	r16,255
 80017f4:	003ef406 	br	80013c8 <__subsf3+0x64>
 80017f8:	04003fc4 	movi	r16,255
 80017fc:	003ef206 	br	80013c8 <__subsf3+0x64>
 8001800:	00c00044 	movi	r3,1
 8001804:	003f9606 	br	8001660 <__subsf3+0x2fc>
 8001808:	000b883a 	mov	r5,zero
 800180c:	0005883a 	mov	r2,zero
 8001810:	003f3506 	br	80014e8 <__subsf3+0x184>
 8001814:	01402034 	movhi	r5,128
 8001818:	297fffc4 	addi	r5,r5,-1
 800181c:	0005883a 	mov	r2,zero
 8001820:	003f2f06 	br	80014e0 <__subsf3+0x17c>
 8001824:	3807883a 	mov	r3,r7
 8001828:	04003fc4 	movi	r16,255
 800182c:	003ee606 	br	80013c8 <__subsf3+0x64>
 8001830:	3807883a 	mov	r3,r7
 8001834:	003ee406 	br	80013c8 <__subsf3+0x64>
 8001838:	00c00044 	movi	r3,1
 800183c:	003fbd06 	br	8001734 <__subsf3+0x3d0>
 8001840:	0005883a 	mov	r2,zero
 8001844:	003f2806 	br	80014e8 <__subsf3+0x184>

08001848 <__fixsfsi>:
 8001848:	200ad5fa 	srli	r5,r4,23
 800184c:	00c02034 	movhi	r3,128
 8001850:	18ffffc4 	addi	r3,r3,-1
 8001854:	29403fcc 	andi	r5,r5,255
 8001858:	00801f84 	movi	r2,126
 800185c:	1906703a 	and	r3,r3,r4
 8001860:	2008d7fa 	srli	r4,r4,31
 8001864:	11400e0e 	bge	r2,r5,80018a0 <__fixsfsi+0x58>
 8001868:	00802744 	movi	r2,157
 800186c:	11400816 	blt	r2,r5,8001890 <__fixsfsi+0x48>
 8001870:	00802544 	movi	r2,149
 8001874:	18c02034 	orhi	r3,r3,128
 8001878:	11400b0e 	bge	r2,r5,80018a8 <__fixsfsi+0x60>
 800187c:	28bfda84 	addi	r2,r5,-150
 8001880:	1884983a 	sll	r2,r3,r2
 8001884:	20000726 	beq	r4,zero,80018a4 <__fixsfsi+0x5c>
 8001888:	0085c83a 	sub	r2,zero,r2
 800188c:	f800283a 	ret
 8001890:	00a00034 	movhi	r2,32768
 8001894:	10bfffc4 	addi	r2,r2,-1
 8001898:	2085883a 	add	r2,r4,r2
 800189c:	f800283a 	ret
 80018a0:	0005883a 	mov	r2,zero
 80018a4:	f800283a 	ret
 80018a8:	00802584 	movi	r2,150
 80018ac:	1145c83a 	sub	r2,r2,r5
 80018b0:	1884d83a 	srl	r2,r3,r2
 80018b4:	003ff306 	br	8001884 <__fixsfsi+0x3c>

080018b8 <__floatsisf>:
 80018b8:	defffd04 	addi	sp,sp,-12
 80018bc:	dfc00215 	stw	ra,8(sp)
 80018c0:	dc400115 	stw	r17,4(sp)
 80018c4:	dc000015 	stw	r16,0(sp)
 80018c8:	20003526 	beq	r4,zero,80019a0 <__floatsisf+0xe8>
 80018cc:	2021883a 	mov	r16,r4
 80018d0:	2022d7fa 	srli	r17,r4,31
 80018d4:	20003616 	blt	r4,zero,80019b0 <__floatsisf+0xf8>
 80018d8:	8009883a 	mov	r4,r16
 80018dc:	8001aec0 	call	8001aec <__clzsi2>
 80018e0:	00c02784 	movi	r3,158
 80018e4:	1887c83a 	sub	r3,r3,r2
 80018e8:	01002584 	movi	r4,150
 80018ec:	20c01416 	blt	r4,r3,8001940 <__floatsisf+0x88>
 80018f0:	20c9c83a 	sub	r4,r4,r3
 80018f4:	8120983a 	sll	r16,r16,r4
 80018f8:	00802034 	movhi	r2,128
 80018fc:	10bfffc4 	addi	r2,r2,-1
 8001900:	8809883a 	mov	r4,r17
 8001904:	80a0703a 	and	r16,r16,r2
 8001908:	18803fcc 	andi	r2,r3,255
 800190c:	100695fa 	slli	r3,r2,23
 8001910:	20803fcc 	andi	r2,r4,255
 8001914:	100897fa 	slli	r4,r2,31
 8001918:	00802034 	movhi	r2,128
 800191c:	10bfffc4 	addi	r2,r2,-1
 8001920:	8084703a 	and	r2,r16,r2
 8001924:	10c4b03a 	or	r2,r2,r3
 8001928:	1104b03a 	or	r2,r2,r4
 800192c:	dfc00217 	ldw	ra,8(sp)
 8001930:	dc400117 	ldw	r17,4(sp)
 8001934:	dc000017 	ldw	r16,0(sp)
 8001938:	dec00304 	addi	sp,sp,12
 800193c:	f800283a 	ret
 8001940:	01002644 	movi	r4,153
 8001944:	20c01c16 	blt	r4,r3,80019b8 <__floatsisf+0x100>
 8001948:	20c9c83a 	sub	r4,r4,r3
 800194c:	8120983a 	sll	r16,r16,r4
 8001950:	013f0034 	movhi	r4,64512
 8001954:	213fffc4 	addi	r4,r4,-1
 8001958:	814001cc 	andi	r5,r16,7
 800195c:	8108703a 	and	r4,r16,r4
 8001960:	28000426 	beq	r5,zero,8001974 <__floatsisf+0xbc>
 8001964:	840003cc 	andi	r16,r16,15
 8001968:	01400104 	movi	r5,4
 800196c:	81400126 	beq	r16,r5,8001974 <__floatsisf+0xbc>
 8001970:	2149883a 	add	r4,r4,r5
 8001974:	2141002c 	andhi	r5,r4,1024
 8001978:	28000526 	beq	r5,zero,8001990 <__floatsisf+0xd8>
 800197c:	00c027c4 	movi	r3,159
 8001980:	1887c83a 	sub	r3,r3,r2
 8001984:	00bf0034 	movhi	r2,64512
 8001988:	10bfffc4 	addi	r2,r2,-1
 800198c:	2088703a 	and	r4,r4,r2
 8001990:	202091ba 	slli	r16,r4,6
 8001994:	8809883a 	mov	r4,r17
 8001998:	8020d27a 	srli	r16,r16,9
 800199c:	003fda06 	br	8001908 <__floatsisf+0x50>
 80019a0:	0009883a 	mov	r4,zero
 80019a4:	0007883a 	mov	r3,zero
 80019a8:	0021883a 	mov	r16,zero
 80019ac:	003fd606 	br	8001908 <__floatsisf+0x50>
 80019b0:	0121c83a 	sub	r16,zero,r4
 80019b4:	003fc806 	br	80018d8 <__floatsisf+0x20>
 80019b8:	01002e44 	movi	r4,185
 80019bc:	20c9c83a 	sub	r4,r4,r3
 80019c0:	01400144 	movi	r5,5
 80019c4:	8108983a 	sll	r4,r16,r4
 80019c8:	288bc83a 	sub	r5,r5,r2
 80019cc:	8160d83a 	srl	r16,r16,r5
 80019d0:	2008c03a 	cmpne	r4,r4,zero
 80019d4:	8120b03a 	or	r16,r16,r4
 80019d8:	003fdd06 	br	8001950 <__floatsisf+0x98>

080019dc <__extendsfdf2>:
 80019dc:	200ad5fa 	srli	r5,r4,23
 80019e0:	defffd04 	addi	sp,sp,-12
 80019e4:	dc400115 	stw	r17,4(sp)
 80019e8:	29403fcc 	andi	r5,r5,255
 80019ec:	29800044 	addi	r6,r5,1
 80019f0:	04402034 	movhi	r17,128
 80019f4:	dc000015 	stw	r16,0(sp)
 80019f8:	8c7fffc4 	addi	r17,r17,-1
 80019fc:	dfc00215 	stw	ra,8(sp)
 8001a00:	31803fcc 	andi	r6,r6,255
 8001a04:	00800044 	movi	r2,1
 8001a08:	8922703a 	and	r17,r17,r4
 8001a0c:	2020d7fa 	srli	r16,r4,31
 8001a10:	1180110e 	bge	r2,r6,8001a58 <__extendsfdf2+0x7c>
 8001a14:	880cd0fa 	srli	r6,r17,3
 8001a18:	8822977a 	slli	r17,r17,29
 8001a1c:	2940e004 	addi	r5,r5,896
 8001a20:	2941ffcc 	andi	r5,r5,2047
 8001a24:	2804953a 	slli	r2,r5,20
 8001a28:	01400434 	movhi	r5,16
 8001a2c:	800697fa 	slli	r3,r16,31
 8001a30:	297fffc4 	addi	r5,r5,-1
 8001a34:	314a703a 	and	r5,r6,r5
 8001a38:	288ab03a 	or	r5,r5,r2
 8001a3c:	28c6b03a 	or	r3,r5,r3
 8001a40:	8805883a 	mov	r2,r17
 8001a44:	dfc00217 	ldw	ra,8(sp)
 8001a48:	dc400117 	ldw	r17,4(sp)
 8001a4c:	dc000017 	ldw	r16,0(sp)
 8001a50:	dec00304 	addi	sp,sp,12
 8001a54:	f800283a 	ret
 8001a58:	2800111e 	bne	r5,zero,8001aa0 <__extendsfdf2+0xc4>
 8001a5c:	88001c26 	beq	r17,zero,8001ad0 <__extendsfdf2+0xf4>
 8001a60:	8809883a 	mov	r4,r17
 8001a64:	8001aec0 	call	8001aec <__clzsi2>
 8001a68:	00c00284 	movi	r3,10
 8001a6c:	18801b16 	blt	r3,r2,8001adc <__extendsfdf2+0x100>
 8001a70:	018002c4 	movi	r6,11
 8001a74:	308dc83a 	sub	r6,r6,r2
 8001a78:	11000544 	addi	r4,r2,21
 8001a7c:	8986d83a 	srl	r3,r17,r6
 8001a80:	8922983a 	sll	r17,r17,r4
 8001a84:	0180e244 	movi	r6,905
 8001a88:	01400434 	movhi	r5,16
 8001a8c:	3085c83a 	sub	r2,r6,r2
 8001a90:	297fffc4 	addi	r5,r5,-1
 8001a94:	194c703a 	and	r6,r3,r5
 8001a98:	1141ffcc 	andi	r5,r2,2047
 8001a9c:	003fe006 	br	8001a20 <__extendsfdf2+0x44>
 8001aa0:	88000826 	beq	r17,zero,8001ac4 <__extendsfdf2+0xe8>
 8001aa4:	880cd0fa 	srli	r6,r17,3
 8001aa8:	00800434 	movhi	r2,16
 8001aac:	10bfffc4 	addi	r2,r2,-1
 8001ab0:	31800234 	orhi	r6,r6,8
 8001ab4:	8822977a 	slli	r17,r17,29
 8001ab8:	308c703a 	and	r6,r6,r2
 8001abc:	0141ffc4 	movi	r5,2047
 8001ac0:	003fd706 	br	8001a20 <__extendsfdf2+0x44>
 8001ac4:	0141ffc4 	movi	r5,2047
 8001ac8:	000d883a 	mov	r6,zero
 8001acc:	003fd406 	br	8001a20 <__extendsfdf2+0x44>
 8001ad0:	000b883a 	mov	r5,zero
 8001ad4:	000d883a 	mov	r6,zero
 8001ad8:	003fd106 	br	8001a20 <__extendsfdf2+0x44>
 8001adc:	11bffd44 	addi	r6,r2,-11
 8001ae0:	8986983a 	sll	r3,r17,r6
 8001ae4:	0023883a 	mov	r17,zero
 8001ae8:	003fe606 	br	8001a84 <__extendsfdf2+0xa8>

08001aec <__clzsi2>:
 8001aec:	00bfffd4 	movui	r2,65535
 8001af0:	11000536 	bltu	r2,r4,8001b08 <__clzsi2+0x1c>
 8001af4:	00803fc4 	movi	r2,255
 8001af8:	11000f36 	bltu	r2,r4,8001b38 <__clzsi2+0x4c>
 8001afc:	00800804 	movi	r2,32
 8001b00:	0007883a 	mov	r3,zero
 8001b04:	00000506 	br	8001b1c <__clzsi2+0x30>
 8001b08:	00804034 	movhi	r2,256
 8001b0c:	10bfffc4 	addi	r2,r2,-1
 8001b10:	11000c2e 	bgeu	r2,r4,8001b44 <__clzsi2+0x58>
 8001b14:	00800204 	movi	r2,8
 8001b18:	00c00604 	movi	r3,24
 8001b1c:	20c8d83a 	srl	r4,r4,r3
 8001b20:	00c20074 	movhi	r3,2049
 8001b24:	18c321c4 	addi	r3,r3,3207
 8001b28:	1909883a 	add	r4,r3,r4
 8001b2c:	20c00003 	ldbu	r3,0(r4)
 8001b30:	10c5c83a 	sub	r2,r2,r3
 8001b34:	f800283a 	ret
 8001b38:	00800604 	movi	r2,24
 8001b3c:	00c00204 	movi	r3,8
 8001b40:	003ff606 	br	8001b1c <__clzsi2+0x30>
 8001b44:	00800404 	movi	r2,16
 8001b48:	1007883a 	mov	r3,r2
 8001b4c:	003ff306 	br	8001b1c <__clzsi2+0x30>

08001b50 <_printf_r>:
 8001b50:	defffd04 	addi	sp,sp,-12
 8001b54:	2805883a 	mov	r2,r5
 8001b58:	dfc00015 	stw	ra,0(sp)
 8001b5c:	d9800115 	stw	r6,4(sp)
 8001b60:	d9c00215 	stw	r7,8(sp)
 8001b64:	21400217 	ldw	r5,8(r4)
 8001b68:	d9c00104 	addi	r7,sp,4
 8001b6c:	100d883a 	mov	r6,r2
 8001b70:	8001d280 	call	8001d28 <___vfprintf_internal_r>
 8001b74:	dfc00017 	ldw	ra,0(sp)
 8001b78:	dec00304 	addi	sp,sp,12
 8001b7c:	f800283a 	ret

08001b80 <printf>:
 8001b80:	defffc04 	addi	sp,sp,-16
 8001b84:	dfc00015 	stw	ra,0(sp)
 8001b88:	d9400115 	stw	r5,4(sp)
 8001b8c:	d9800215 	stw	r6,8(sp)
 8001b90:	d9c00315 	stw	r7,12(sp)
 8001b94:	00820074 	movhi	r2,2049
 8001b98:	108a9204 	addi	r2,r2,10824
 8001b9c:	10800017 	ldw	r2,0(r2)
 8001ba0:	200b883a 	mov	r5,r4
 8001ba4:	d9800104 	addi	r6,sp,4
 8001ba8:	11000217 	ldw	r4,8(r2)
 8001bac:	8003f200 	call	8003f20 <__vfprintf_internal>
 8001bb0:	dfc00017 	ldw	ra,0(sp)
 8001bb4:	dec00404 	addi	sp,sp,16
 8001bb8:	f800283a 	ret

08001bbc <_puts_r>:
 8001bbc:	defff604 	addi	sp,sp,-40
 8001bc0:	dc000715 	stw	r16,28(sp)
 8001bc4:	2021883a 	mov	r16,r4
 8001bc8:	2809883a 	mov	r4,r5
 8001bcc:	dc400815 	stw	r17,32(sp)
 8001bd0:	dfc00915 	stw	ra,36(sp)
 8001bd4:	2823883a 	mov	r17,r5
 8001bd8:	8001c900 	call	8001c90 <strlen>
 8001bdc:	10c00044 	addi	r3,r2,1
 8001be0:	d8800115 	stw	r2,4(sp)
 8001be4:	00820074 	movhi	r2,2049
 8001be8:	10836204 	addi	r2,r2,3464
 8001bec:	d8800215 	stw	r2,8(sp)
 8001bf0:	00800044 	movi	r2,1
 8001bf4:	d8800315 	stw	r2,12(sp)
 8001bf8:	00800084 	movi	r2,2
 8001bfc:	dc400015 	stw	r17,0(sp)
 8001c00:	d8c00615 	stw	r3,24(sp)
 8001c04:	dec00415 	stw	sp,16(sp)
 8001c08:	d8800515 	stw	r2,20(sp)
 8001c0c:	80000226 	beq	r16,zero,8001c18 <_puts_r+0x5c>
 8001c10:	80800e17 	ldw	r2,56(r16)
 8001c14:	10001426 	beq	r2,zero,8001c68 <_puts_r+0xac>
 8001c18:	81400217 	ldw	r5,8(r16)
 8001c1c:	2880030b 	ldhu	r2,12(r5)
 8001c20:	10c8000c 	andi	r3,r2,8192
 8001c24:	1800061e 	bne	r3,zero,8001c40 <_puts_r+0x84>
 8001c28:	29001917 	ldw	r4,100(r5)
 8001c2c:	00f7ffc4 	movi	r3,-8193
 8001c30:	10880014 	ori	r2,r2,8192
 8001c34:	20c6703a 	and	r3,r4,r3
 8001c38:	2880030d 	sth	r2,12(r5)
 8001c3c:	28c01915 	stw	r3,100(r5)
 8001c40:	d9800404 	addi	r6,sp,16
 8001c44:	8009883a 	mov	r4,r16
 8001c48:	80064500 	call	8006450 <__sfvwrite_r>
 8001c4c:	1000091e 	bne	r2,zero,8001c74 <_puts_r+0xb8>
 8001c50:	00800284 	movi	r2,10
 8001c54:	dfc00917 	ldw	ra,36(sp)
 8001c58:	dc400817 	ldw	r17,32(sp)
 8001c5c:	dc000717 	ldw	r16,28(sp)
 8001c60:	dec00a04 	addi	sp,sp,40
 8001c64:	f800283a 	ret
 8001c68:	8009883a 	mov	r4,r16
 8001c6c:	8005fcc0 	call	8005fcc <__sinit>
 8001c70:	003fe906 	br	8001c18 <_puts_r+0x5c>
 8001c74:	00bfffc4 	movi	r2,-1
 8001c78:	003ff606 	br	8001c54 <_puts_r+0x98>

08001c7c <puts>:
 8001c7c:	00820074 	movhi	r2,2049
 8001c80:	108a9204 	addi	r2,r2,10824
 8001c84:	200b883a 	mov	r5,r4
 8001c88:	11000017 	ldw	r4,0(r2)
 8001c8c:	8001bbc1 	jmpi	8001bbc <_puts_r>

08001c90 <strlen>:
 8001c90:	208000cc 	andi	r2,r4,3
 8001c94:	10002026 	beq	r2,zero,8001d18 <strlen+0x88>
 8001c98:	20800007 	ldb	r2,0(r4)
 8001c9c:	10002026 	beq	r2,zero,8001d20 <strlen+0x90>
 8001ca0:	2005883a 	mov	r2,r4
 8001ca4:	00000206 	br	8001cb0 <strlen+0x20>
 8001ca8:	10c00007 	ldb	r3,0(r2)
 8001cac:	18001826 	beq	r3,zero,8001d10 <strlen+0x80>
 8001cb0:	10800044 	addi	r2,r2,1
 8001cb4:	10c000cc 	andi	r3,r2,3
 8001cb8:	183ffb1e 	bne	r3,zero,8001ca8 <strlen+0x18>
 8001cbc:	10c00017 	ldw	r3,0(r2)
 8001cc0:	01ffbff4 	movhi	r7,65279
 8001cc4:	39ffbfc4 	addi	r7,r7,-257
 8001cc8:	00ca303a 	nor	r5,zero,r3
 8001ccc:	01a02074 	movhi	r6,32897
 8001cd0:	19c7883a 	add	r3,r3,r7
 8001cd4:	31a02004 	addi	r6,r6,-32640
 8001cd8:	1946703a 	and	r3,r3,r5
 8001cdc:	1986703a 	and	r3,r3,r6
 8001ce0:	1800091e 	bne	r3,zero,8001d08 <strlen+0x78>
 8001ce4:	10800104 	addi	r2,r2,4
 8001ce8:	10c00017 	ldw	r3,0(r2)
 8001cec:	19cb883a 	add	r5,r3,r7
 8001cf0:	00c6303a 	nor	r3,zero,r3
 8001cf4:	28c6703a 	and	r3,r5,r3
 8001cf8:	1986703a 	and	r3,r3,r6
 8001cfc:	183ff926 	beq	r3,zero,8001ce4 <strlen+0x54>
 8001d00:	00000106 	br	8001d08 <strlen+0x78>
 8001d04:	10800044 	addi	r2,r2,1
 8001d08:	10c00007 	ldb	r3,0(r2)
 8001d0c:	183ffd1e 	bne	r3,zero,8001d04 <strlen+0x74>
 8001d10:	1105c83a 	sub	r2,r2,r4
 8001d14:	f800283a 	ret
 8001d18:	2005883a 	mov	r2,r4
 8001d1c:	003fe706 	br	8001cbc <strlen+0x2c>
 8001d20:	0005883a 	mov	r2,zero
 8001d24:	f800283a 	ret

08001d28 <___vfprintf_internal_r>:
 8001d28:	deffb804 	addi	sp,sp,-288
 8001d2c:	dfc04715 	stw	ra,284(sp)
 8001d30:	ddc04515 	stw	r23,276(sp)
 8001d34:	dd404315 	stw	r21,268(sp)
 8001d38:	d9002c15 	stw	r4,176(sp)
 8001d3c:	282f883a 	mov	r23,r5
 8001d40:	302b883a 	mov	r21,r6
 8001d44:	d9c02d15 	stw	r7,180(sp)
 8001d48:	df004615 	stw	fp,280(sp)
 8001d4c:	dd804415 	stw	r22,272(sp)
 8001d50:	dd004215 	stw	r20,264(sp)
 8001d54:	dcc04115 	stw	r19,260(sp)
 8001d58:	dc804015 	stw	r18,256(sp)
 8001d5c:	dc403f15 	stw	r17,252(sp)
 8001d60:	dc003e15 	stw	r16,248(sp)
 8001d64:	8006b400 	call	8006b40 <_localeconv_r>
 8001d68:	10800017 	ldw	r2,0(r2)
 8001d6c:	1009883a 	mov	r4,r2
 8001d70:	d8803415 	stw	r2,208(sp)
 8001d74:	8001c900 	call	8001c90 <strlen>
 8001d78:	d8803715 	stw	r2,220(sp)
 8001d7c:	d8802c17 	ldw	r2,176(sp)
 8001d80:	10000226 	beq	r2,zero,8001d8c <___vfprintf_internal_r+0x64>
 8001d84:	10800e17 	ldw	r2,56(r2)
 8001d88:	1000f926 	beq	r2,zero,8002170 <___vfprintf_internal_r+0x448>
 8001d8c:	b880030b 	ldhu	r2,12(r23)
 8001d90:	10c8000c 	andi	r3,r2,8192
 8001d94:	1800061e 	bne	r3,zero,8001db0 <___vfprintf_internal_r+0x88>
 8001d98:	b9001917 	ldw	r4,100(r23)
 8001d9c:	00f7ffc4 	movi	r3,-8193
 8001da0:	10880014 	ori	r2,r2,8192
 8001da4:	20c6703a 	and	r3,r4,r3
 8001da8:	b880030d 	sth	r2,12(r23)
 8001dac:	b8c01915 	stw	r3,100(r23)
 8001db0:	10c0020c 	andi	r3,r2,8
 8001db4:	1800c126 	beq	r3,zero,80020bc <___vfprintf_internal_r+0x394>
 8001db8:	b8c00417 	ldw	r3,16(r23)
 8001dbc:	1800bf26 	beq	r3,zero,80020bc <___vfprintf_internal_r+0x394>
 8001dc0:	1080068c 	andi	r2,r2,26
 8001dc4:	00c00284 	movi	r3,10
 8001dc8:	10c0c426 	beq	r2,r3,80020dc <___vfprintf_internal_r+0x3b4>
 8001dcc:	d8c00404 	addi	r3,sp,16
 8001dd0:	05020074 	movhi	r20,2049
 8001dd4:	d9001e04 	addi	r4,sp,120
 8001dd8:	a5037384 	addi	r20,r20,3534
 8001ddc:	d8c01e15 	stw	r3,120(sp)
 8001de0:	d8002015 	stw	zero,128(sp)
 8001de4:	d8001f15 	stw	zero,124(sp)
 8001de8:	d8003315 	stw	zero,204(sp)
 8001dec:	d8003615 	stw	zero,216(sp)
 8001df0:	d8003815 	stw	zero,224(sp)
 8001df4:	1811883a 	mov	r8,r3
 8001df8:	d8003915 	stw	zero,228(sp)
 8001dfc:	d8003a15 	stw	zero,232(sp)
 8001e00:	d8002f15 	stw	zero,188(sp)
 8001e04:	d9002815 	stw	r4,160(sp)
 8001e08:	a8800007 	ldb	r2,0(r21)
 8001e0c:	10027b26 	beq	r2,zero,80027fc <___vfprintf_internal_r+0xad4>
 8001e10:	00c00944 	movi	r3,37
 8001e14:	a821883a 	mov	r16,r21
 8001e18:	10c0021e 	bne	r2,r3,8001e24 <___vfprintf_internal_r+0xfc>
 8001e1c:	00001406 	br	8001e70 <___vfprintf_internal_r+0x148>
 8001e20:	10c00326 	beq	r2,r3,8001e30 <___vfprintf_internal_r+0x108>
 8001e24:	84000044 	addi	r16,r16,1
 8001e28:	80800007 	ldb	r2,0(r16)
 8001e2c:	103ffc1e 	bne	r2,zero,8001e20 <___vfprintf_internal_r+0xf8>
 8001e30:	8563c83a 	sub	r17,r16,r21
 8001e34:	88000e26 	beq	r17,zero,8001e70 <___vfprintf_internal_r+0x148>
 8001e38:	d8c02017 	ldw	r3,128(sp)
 8001e3c:	d8801f17 	ldw	r2,124(sp)
 8001e40:	45400015 	stw	r21,0(r8)
 8001e44:	1c47883a 	add	r3,r3,r17
 8001e48:	10800044 	addi	r2,r2,1
 8001e4c:	d8c02015 	stw	r3,128(sp)
 8001e50:	44400115 	stw	r17,4(r8)
 8001e54:	d8801f15 	stw	r2,124(sp)
 8001e58:	00c001c4 	movi	r3,7
 8001e5c:	1880a716 	blt	r3,r2,80020fc <___vfprintf_internal_r+0x3d4>
 8001e60:	42000204 	addi	r8,r8,8
 8001e64:	d9402f17 	ldw	r5,188(sp)
 8001e68:	2c4b883a 	add	r5,r5,r17
 8001e6c:	d9402f15 	stw	r5,188(sp)
 8001e70:	80800007 	ldb	r2,0(r16)
 8001e74:	1000a826 	beq	r2,zero,8002118 <___vfprintf_internal_r+0x3f0>
 8001e78:	84400047 	ldb	r17,1(r16)
 8001e7c:	00bfffc4 	movi	r2,-1
 8001e80:	85400044 	addi	r21,r16,1
 8001e84:	d8002785 	stb	zero,158(sp)
 8001e88:	0007883a 	mov	r3,zero
 8001e8c:	000f883a 	mov	r7,zero
 8001e90:	d8802915 	stw	r2,164(sp)
 8001e94:	d8003115 	stw	zero,196(sp)
 8001e98:	0025883a 	mov	r18,zero
 8001e9c:	01401604 	movi	r5,88
 8001ea0:	01800244 	movi	r6,9
 8001ea4:	02800a84 	movi	r10,42
 8001ea8:	02401b04 	movi	r9,108
 8001eac:	ad400044 	addi	r21,r21,1
 8001eb0:	88bff804 	addi	r2,r17,-32
 8001eb4:	28830436 	bltu	r5,r2,8002ac8 <___vfprintf_internal_r+0xda0>
 8001eb8:	100490ba 	slli	r2,r2,2
 8001ebc:	01020034 	movhi	r4,2048
 8001ec0:	2107b404 	addi	r4,r4,7888
 8001ec4:	1105883a 	add	r2,r2,r4
 8001ec8:	10800017 	ldw	r2,0(r2)
 8001ecc:	1000683a 	jmp	r2
 8001ed0:	080029e8 	cmpgeui	zero,at,167
 8001ed4:	08002ac8 	cmpgei	zero,at,171
 8001ed8:	08002ac8 	cmpgei	zero,at,171
 8001edc:	08002a08 	cmpgei	zero,at,168
 8001ee0:	08002ac8 	cmpgei	zero,at,171
 8001ee4:	08002ac8 	cmpgei	zero,at,171
 8001ee8:	08002ac8 	cmpgei	zero,at,171
 8001eec:	08002ac8 	cmpgei	zero,at,171
 8001ef0:	08002ac8 	cmpgei	zero,at,171
 8001ef4:	08002ac8 	cmpgei	zero,at,171
 8001ef8:	0800217c 	xorhi	zero,at,133
 8001efc:	08002924 	muli	zero,at,164
 8001f00:	08002ac8 	cmpgei	zero,at,171
 8001f04:	08002044 	addi	zero,at,129
 8001f08:	080021a4 	muli	zero,at,134
 8001f0c:	08002ac8 	cmpgei	zero,at,171
 8001f10:	080021e4 	muli	zero,at,135
 8001f14:	080021f0 	cmpltui	zero,at,135
 8001f18:	080021f0 	cmpltui	zero,at,135
 8001f1c:	080021f0 	cmpltui	zero,at,135
 8001f20:	080021f0 	cmpltui	zero,at,135
 8001f24:	080021f0 	cmpltui	zero,at,135
 8001f28:	080021f0 	cmpltui	zero,at,135
 8001f2c:	080021f0 	cmpltui	zero,at,135
 8001f30:	080021f0 	cmpltui	zero,at,135
 8001f34:	080021f0 	cmpltui	zero,at,135
 8001f38:	08002ac8 	cmpgei	zero,at,171
 8001f3c:	08002ac8 	cmpgei	zero,at,171
 8001f40:	08002ac8 	cmpgei	zero,at,171
 8001f44:	08002ac8 	cmpgei	zero,at,171
 8001f48:	08002ac8 	cmpgei	zero,at,171
 8001f4c:	08002ac8 	cmpgei	zero,at,171
 8001f50:	08002ac8 	cmpgei	zero,at,171
 8001f54:	08002ac8 	cmpgei	zero,at,171
 8001f58:	08002ac8 	cmpgei	zero,at,171
 8001f5c:	08002ac8 	cmpgei	zero,at,171
 8001f60:	08002224 	muli	zero,at,136
 8001f64:	080022e0 	cmpeqi	zero,at,139
 8001f68:	08002ac8 	cmpgei	zero,at,171
 8001f6c:	080022e0 	cmpeqi	zero,at,139
 8001f70:	08002ac8 	cmpgei	zero,at,171
 8001f74:	08002ac8 	cmpgei	zero,at,171
 8001f78:	08002ac8 	cmpgei	zero,at,171
 8001f7c:	08002ac8 	cmpgei	zero,at,171
 8001f80:	08002380 	call	800238 <__alt_mem_new_sdram_controller_0-0x77ffdc8>
 8001f84:	08002ac8 	cmpgei	zero,at,171
 8001f88:	08002ac8 	cmpgei	zero,at,171
 8001f8c:	0800238c 	andi	zero,at,142
 8001f90:	08002ac8 	cmpgei	zero,at,171
 8001f94:	08002ac8 	cmpgei	zero,at,171
 8001f98:	08002ac8 	cmpgei	zero,at,171
 8001f9c:	08002ac8 	cmpgei	zero,at,171
 8001fa0:	08002ac8 	cmpgei	zero,at,171
 8001fa4:	08002804 	addi	zero,at,160
 8001fa8:	08002ac8 	cmpgei	zero,at,171
 8001fac:	08002ac8 	cmpgei	zero,at,171
 8001fb0:	08002864 	muli	zero,at,161
 8001fb4:	08002ac8 	cmpgei	zero,at,171
 8001fb8:	08002ac8 	cmpgei	zero,at,171
 8001fbc:	08002ac8 	cmpgei	zero,at,171
 8001fc0:	08002ac8 	cmpgei	zero,at,171
 8001fc4:	08002ac8 	cmpgei	zero,at,171
 8001fc8:	08002ac8 	cmpgei	zero,at,171
 8001fcc:	08002ac8 	cmpgei	zero,at,171
 8001fd0:	08002ac8 	cmpgei	zero,at,171
 8001fd4:	08002ac8 	cmpgei	zero,at,171
 8001fd8:	08002ac8 	cmpgei	zero,at,171
 8001fdc:	08002a74 	orhi	zero,at,169
 8001fe0:	08002a14 	ori	zero,at,168
 8001fe4:	080022e0 	cmpeqi	zero,at,139
 8001fe8:	080022e0 	cmpeqi	zero,at,139
 8001fec:	080022e0 	cmpeqi	zero,at,139
 8001ff0:	08002a24 	muli	zero,at,168
 8001ff4:	08002a14 	ori	zero,at,168
 8001ff8:	08002ac8 	cmpgei	zero,at,171
 8001ffc:	08002ac8 	cmpgei	zero,at,171
 8002000:	08002a30 	cmpltui	zero,at,168
 8002004:	08002ac8 	cmpgei	zero,at,171
 8002008:	08002a40 	call	8002a4 <__alt_mem_new_sdram_controller_0-0x77ffd5c>
 800200c:	08002914 	ori	zero,at,164
 8002010:	08002050 	cmplti	zero,at,129
 8002014:	08002934 	orhi	zero,at,164
 8002018:	08002ac8 	cmpgei	zero,at,171
 800201c:	08002940 	call	800294 <__alt_mem_new_sdram_controller_0-0x77ffd6c>
 8002020:	08002ac8 	cmpgei	zero,at,171
 8002024:	0800299c 	xori	zero,at,166
 8002028:	08002ac8 	cmpgei	zero,at,171
 800202c:	08002ac8 	cmpgei	zero,at,171
 8002030:	080029ac 	andhi	zero,at,166
 8002034:	d9003117 	ldw	r4,196(sp)
 8002038:	d8802d15 	stw	r2,180(sp)
 800203c:	0109c83a 	sub	r4,zero,r4
 8002040:	d9003115 	stw	r4,196(sp)
 8002044:	94800114 	ori	r18,r18,4
 8002048:	ac400007 	ldb	r17,0(r21)
 800204c:	003f9706 	br	8001eac <___vfprintf_internal_r+0x184>
 8002050:	00800c04 	movi	r2,48
 8002054:	d9002d17 	ldw	r4,180(sp)
 8002058:	d9402917 	ldw	r5,164(sp)
 800205c:	d8802705 	stb	r2,156(sp)
 8002060:	00801e04 	movi	r2,120
 8002064:	d8802745 	stb	r2,157(sp)
 8002068:	d8002785 	stb	zero,158(sp)
 800206c:	20c00104 	addi	r3,r4,4
 8002070:	24c00017 	ldw	r19,0(r4)
 8002074:	002d883a 	mov	r22,zero
 8002078:	90800094 	ori	r2,r18,2
 800207c:	28029a16 	blt	r5,zero,8002ae8 <___vfprintf_internal_r+0xdc0>
 8002080:	00bfdfc4 	movi	r2,-129
 8002084:	90a4703a 	and	r18,r18,r2
 8002088:	d8c02d15 	stw	r3,180(sp)
 800208c:	94800094 	ori	r18,r18,2
 8002090:	9802871e 	bne	r19,zero,8002ab0 <___vfprintf_internal_r+0xd88>
 8002094:	00820074 	movhi	r2,2049
 8002098:	10836c04 	addi	r2,r2,3504
 800209c:	d8803915 	stw	r2,228(sp)
 80020a0:	04401e04 	movi	r17,120
 80020a4:	d8802917 	ldw	r2,164(sp)
 80020a8:	0039883a 	mov	fp,zero
 80020ac:	1001e926 	beq	r2,zero,8002854 <___vfprintf_internal_r+0xb2c>
 80020b0:	0027883a 	mov	r19,zero
 80020b4:	002d883a 	mov	r22,zero
 80020b8:	00020506 	br	80028d0 <___vfprintf_internal_r+0xba8>
 80020bc:	d9002c17 	ldw	r4,176(sp)
 80020c0:	b80b883a 	mov	r5,r23
 80020c4:	8003ff80 	call	8003ff8 <__swsetup_r>
 80020c8:	1005ac1e 	bne	r2,zero,800377c <___vfprintf_internal_r+0x1a54>
 80020cc:	b880030b 	ldhu	r2,12(r23)
 80020d0:	00c00284 	movi	r3,10
 80020d4:	1080068c 	andi	r2,r2,26
 80020d8:	10ff3c1e 	bne	r2,r3,8001dcc <___vfprintf_internal_r+0xa4>
 80020dc:	b880038f 	ldh	r2,14(r23)
 80020e0:	103f3a16 	blt	r2,zero,8001dcc <___vfprintf_internal_r+0xa4>
 80020e4:	d9c02d17 	ldw	r7,180(sp)
 80020e8:	d9002c17 	ldw	r4,176(sp)
 80020ec:	a80d883a 	mov	r6,r21
 80020f0:	b80b883a 	mov	r5,r23
 80020f4:	8003f3c0 	call	8003f3c <__sbprintf>
 80020f8:	00001106 	br	8002140 <___vfprintf_internal_r+0x418>
 80020fc:	d9002c17 	ldw	r4,176(sp)
 8002100:	d9801e04 	addi	r6,sp,120
 8002104:	b80b883a 	mov	r5,r23
 8002108:	80093240 	call	8009324 <__sprint_r>
 800210c:	1000081e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002110:	da000404 	addi	r8,sp,16
 8002114:	003f5306 	br	8001e64 <___vfprintf_internal_r+0x13c>
 8002118:	d8802017 	ldw	r2,128(sp)
 800211c:	10000426 	beq	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002120:	d9002c17 	ldw	r4,176(sp)
 8002124:	d9801e04 	addi	r6,sp,120
 8002128:	b80b883a 	mov	r5,r23
 800212c:	80093240 	call	8009324 <__sprint_r>
 8002130:	b880030b 	ldhu	r2,12(r23)
 8002134:	1080100c 	andi	r2,r2,64
 8002138:	1005901e 	bne	r2,zero,800377c <___vfprintf_internal_r+0x1a54>
 800213c:	d8802f17 	ldw	r2,188(sp)
 8002140:	dfc04717 	ldw	ra,284(sp)
 8002144:	df004617 	ldw	fp,280(sp)
 8002148:	ddc04517 	ldw	r23,276(sp)
 800214c:	dd804417 	ldw	r22,272(sp)
 8002150:	dd404317 	ldw	r21,268(sp)
 8002154:	dd004217 	ldw	r20,264(sp)
 8002158:	dcc04117 	ldw	r19,260(sp)
 800215c:	dc804017 	ldw	r18,256(sp)
 8002160:	dc403f17 	ldw	r17,252(sp)
 8002164:	dc003e17 	ldw	r16,248(sp)
 8002168:	dec04804 	addi	sp,sp,288
 800216c:	f800283a 	ret
 8002170:	d9002c17 	ldw	r4,176(sp)
 8002174:	8005fcc0 	call	8005fcc <__sinit>
 8002178:	003f0406 	br	8001d8c <___vfprintf_internal_r+0x64>
 800217c:	d8802d17 	ldw	r2,180(sp)
 8002180:	d9002d17 	ldw	r4,180(sp)
 8002184:	10800017 	ldw	r2,0(r2)
 8002188:	d8803115 	stw	r2,196(sp)
 800218c:	20800104 	addi	r2,r4,4
 8002190:	d9003117 	ldw	r4,196(sp)
 8002194:	203fa716 	blt	r4,zero,8002034 <___vfprintf_internal_r+0x30c>
 8002198:	d8802d15 	stw	r2,180(sp)
 800219c:	ac400007 	ldb	r17,0(r21)
 80021a0:	003f4206 	br	8001eac <___vfprintf_internal_r+0x184>
 80021a4:	ac400007 	ldb	r17,0(r21)
 80021a8:	aac00044 	addi	r11,r21,1
 80021ac:	8a872826 	beq	r17,r10,8003e50 <___vfprintf_internal_r+0x2128>
 80021b0:	88bff404 	addi	r2,r17,-48
 80021b4:	0009883a 	mov	r4,zero
 80021b8:	30867d36 	bltu	r6,r2,8003bb0 <___vfprintf_internal_r+0x1e88>
 80021bc:	5c400007 	ldb	r17,0(r11)
 80021c0:	210002a4 	muli	r4,r4,10
 80021c4:	5d400044 	addi	r21,r11,1
 80021c8:	a817883a 	mov	r11,r21
 80021cc:	2089883a 	add	r4,r4,r2
 80021d0:	88bff404 	addi	r2,r17,-48
 80021d4:	30bff92e 	bgeu	r6,r2,80021bc <___vfprintf_internal_r+0x494>
 80021d8:	2005c916 	blt	r4,zero,8003900 <___vfprintf_internal_r+0x1bd8>
 80021dc:	d9002915 	stw	r4,164(sp)
 80021e0:	003f3306 	br	8001eb0 <___vfprintf_internal_r+0x188>
 80021e4:	94802014 	ori	r18,r18,128
 80021e8:	ac400007 	ldb	r17,0(r21)
 80021ec:	003f2f06 	br	8001eac <___vfprintf_internal_r+0x184>
 80021f0:	a809883a 	mov	r4,r21
 80021f4:	d8003115 	stw	zero,196(sp)
 80021f8:	88bff404 	addi	r2,r17,-48
 80021fc:	0017883a 	mov	r11,zero
 8002200:	24400007 	ldb	r17,0(r4)
 8002204:	5ac002a4 	muli	r11,r11,10
 8002208:	ad400044 	addi	r21,r21,1
 800220c:	a809883a 	mov	r4,r21
 8002210:	12d7883a 	add	r11,r2,r11
 8002214:	88bff404 	addi	r2,r17,-48
 8002218:	30bff92e 	bgeu	r6,r2,8002200 <___vfprintf_internal_r+0x4d8>
 800221c:	dac03115 	stw	r11,196(sp)
 8002220:	003f2306 	br	8001eb0 <___vfprintf_internal_r+0x188>
 8002224:	18c03fcc 	andi	r3,r3,255
 8002228:	18072b1e 	bne	r3,zero,8003ed8 <___vfprintf_internal_r+0x21b0>
 800222c:	94800414 	ori	r18,r18,16
 8002230:	9080080c 	andi	r2,r18,32
 8002234:	10037b26 	beq	r2,zero,8003024 <___vfprintf_internal_r+0x12fc>
 8002238:	d9402d17 	ldw	r5,180(sp)
 800223c:	28800117 	ldw	r2,4(r5)
 8002240:	2cc00017 	ldw	r19,0(r5)
 8002244:	29400204 	addi	r5,r5,8
 8002248:	d9402d15 	stw	r5,180(sp)
 800224c:	102d883a 	mov	r22,r2
 8002250:	10044b16 	blt	r2,zero,8003380 <___vfprintf_internal_r+0x1658>
 8002254:	d9402917 	ldw	r5,164(sp)
 8002258:	df002783 	ldbu	fp,158(sp)
 800225c:	2803bc16 	blt	r5,zero,8003150 <___vfprintf_internal_r+0x1428>
 8002260:	00ffdfc4 	movi	r3,-129
 8002264:	9d84b03a 	or	r2,r19,r22
 8002268:	90e4703a 	and	r18,r18,r3
 800226c:	10017726 	beq	r2,zero,800284c <___vfprintf_internal_r+0xb24>
 8002270:	b0038326 	beq	r22,zero,8003080 <___vfprintf_internal_r+0x1358>
 8002274:	dc402a15 	stw	r17,168(sp)
 8002278:	dc001e04 	addi	r16,sp,120
 800227c:	b023883a 	mov	r17,r22
 8002280:	402d883a 	mov	r22,r8
 8002284:	9809883a 	mov	r4,r19
 8002288:	880b883a 	mov	r5,r17
 800228c:	01800284 	movi	r6,10
 8002290:	000f883a 	mov	r7,zero
 8002294:	800b71c0 	call	800b71c <__umoddi3>
 8002298:	10800c04 	addi	r2,r2,48
 800229c:	843fffc4 	addi	r16,r16,-1
 80022a0:	9809883a 	mov	r4,r19
 80022a4:	880b883a 	mov	r5,r17
 80022a8:	80800005 	stb	r2,0(r16)
 80022ac:	01800284 	movi	r6,10
 80022b0:	000f883a 	mov	r7,zero
 80022b4:	800b1a40 	call	800b1a4 <__udivdi3>
 80022b8:	1027883a 	mov	r19,r2
 80022bc:	10c4b03a 	or	r2,r2,r3
 80022c0:	1823883a 	mov	r17,r3
 80022c4:	103fef1e 	bne	r2,zero,8002284 <___vfprintf_internal_r+0x55c>
 80022c8:	d8c02817 	ldw	r3,160(sp)
 80022cc:	dc402a17 	ldw	r17,168(sp)
 80022d0:	b011883a 	mov	r8,r22
 80022d4:	1c07c83a 	sub	r3,r3,r16
 80022d8:	d8c02e15 	stw	r3,184(sp)
 80022dc:	00005906 	br	8002444 <___vfprintf_internal_r+0x71c>
 80022e0:	18c03fcc 	andi	r3,r3,255
 80022e4:	1806fa1e 	bne	r3,zero,8003ed0 <___vfprintf_internal_r+0x21a8>
 80022e8:	9080020c 	andi	r2,r18,8
 80022ec:	10048a26 	beq	r2,zero,8003518 <___vfprintf_internal_r+0x17f0>
 80022f0:	d8c02d17 	ldw	r3,180(sp)
 80022f4:	d9002d17 	ldw	r4,180(sp)
 80022f8:	d9402d17 	ldw	r5,180(sp)
 80022fc:	18c00017 	ldw	r3,0(r3)
 8002300:	21000117 	ldw	r4,4(r4)
 8002304:	29400204 	addi	r5,r5,8
 8002308:	d8c03615 	stw	r3,216(sp)
 800230c:	d9003815 	stw	r4,224(sp)
 8002310:	d9402d15 	stw	r5,180(sp)
 8002314:	d9003617 	ldw	r4,216(sp)
 8002318:	d9403817 	ldw	r5,224(sp)
 800231c:	da003d15 	stw	r8,244(sp)
 8002320:	04000044 	movi	r16,1
 8002324:	8008f480 	call	8008f48 <__fpclassifyd>
 8002328:	da003d17 	ldw	r8,244(sp)
 800232c:	14041f1e 	bne	r2,r16,80033ac <___vfprintf_internal_r+0x1684>
 8002330:	d9003617 	ldw	r4,216(sp)
 8002334:	d9403817 	ldw	r5,224(sp)
 8002338:	000d883a 	mov	r6,zero
 800233c:	000f883a 	mov	r7,zero
 8002340:	800d1000 	call	800d100 <__ledf2>
 8002344:	da003d17 	ldw	r8,244(sp)
 8002348:	1005be16 	blt	r2,zero,8003a44 <___vfprintf_internal_r+0x1d1c>
 800234c:	df002783 	ldbu	fp,158(sp)
 8002350:	008011c4 	movi	r2,71
 8002354:	1445330e 	bge	r2,r17,8003824 <___vfprintf_internal_r+0x1afc>
 8002358:	04020074 	movhi	r16,2049
 800235c:	84036404 	addi	r16,r16,3472
 8002360:	00c000c4 	movi	r3,3
 8002364:	00bfdfc4 	movi	r2,-129
 8002368:	d8c02a15 	stw	r3,168(sp)
 800236c:	90a4703a 	and	r18,r18,r2
 8002370:	d8c02e15 	stw	r3,184(sp)
 8002374:	d8002915 	stw	zero,164(sp)
 8002378:	d8003215 	stw	zero,200(sp)
 800237c:	00003706 	br	800245c <___vfprintf_internal_r+0x734>
 8002380:	94800214 	ori	r18,r18,8
 8002384:	ac400007 	ldb	r17,0(r21)
 8002388:	003ec806 	br	8001eac <___vfprintf_internal_r+0x184>
 800238c:	18c03fcc 	andi	r3,r3,255
 8002390:	1806db1e 	bne	r3,zero,8003f00 <___vfprintf_internal_r+0x21d8>
 8002394:	94800414 	ori	r18,r18,16
 8002398:	9080080c 	andi	r2,r18,32
 800239c:	1002d826 	beq	r2,zero,8002f00 <___vfprintf_internal_r+0x11d8>
 80023a0:	d9402d17 	ldw	r5,180(sp)
 80023a4:	d8c02917 	ldw	r3,164(sp)
 80023a8:	d8002785 	stb	zero,158(sp)
 80023ac:	28800204 	addi	r2,r5,8
 80023b0:	2cc00017 	ldw	r19,0(r5)
 80023b4:	2d800117 	ldw	r22,4(r5)
 80023b8:	18048f16 	blt	r3,zero,80035f8 <___vfprintf_internal_r+0x18d0>
 80023bc:	013fdfc4 	movi	r4,-129
 80023c0:	9d86b03a 	or	r3,r19,r22
 80023c4:	d8802d15 	stw	r2,180(sp)
 80023c8:	9124703a 	and	r18,r18,r4
 80023cc:	1802d91e 	bne	r3,zero,8002f34 <___vfprintf_internal_r+0x120c>
 80023d0:	d8c02917 	ldw	r3,164(sp)
 80023d4:	0039883a 	mov	fp,zero
 80023d8:	1805c326 	beq	r3,zero,8003ae8 <___vfprintf_internal_r+0x1dc0>
 80023dc:	0027883a 	mov	r19,zero
 80023e0:	002d883a 	mov	r22,zero
 80023e4:	dc001e04 	addi	r16,sp,120
 80023e8:	9806d0fa 	srli	r3,r19,3
 80023ec:	b008977a 	slli	r4,r22,29
 80023f0:	b02cd0fa 	srli	r22,r22,3
 80023f4:	9cc001cc 	andi	r19,r19,7
 80023f8:	98800c04 	addi	r2,r19,48
 80023fc:	843fffc4 	addi	r16,r16,-1
 8002400:	20e6b03a 	or	r19,r4,r3
 8002404:	80800005 	stb	r2,0(r16)
 8002408:	9d86b03a 	or	r3,r19,r22
 800240c:	183ff61e 	bne	r3,zero,80023e8 <___vfprintf_internal_r+0x6c0>
 8002410:	90c0004c 	andi	r3,r18,1
 8002414:	18013b26 	beq	r3,zero,8002904 <___vfprintf_internal_r+0xbdc>
 8002418:	10803fcc 	andi	r2,r2,255
 800241c:	1080201c 	xori	r2,r2,128
 8002420:	10bfe004 	addi	r2,r2,-128
 8002424:	00c00c04 	movi	r3,48
 8002428:	10c13626 	beq	r2,r3,8002904 <___vfprintf_internal_r+0xbdc>
 800242c:	80ffffc5 	stb	r3,-1(r16)
 8002430:	d8c02817 	ldw	r3,160(sp)
 8002434:	80bfffc4 	addi	r2,r16,-1
 8002438:	1021883a 	mov	r16,r2
 800243c:	1887c83a 	sub	r3,r3,r2
 8002440:	d8c02e15 	stw	r3,184(sp)
 8002444:	d8802e17 	ldw	r2,184(sp)
 8002448:	d9002917 	ldw	r4,164(sp)
 800244c:	1100010e 	bge	r2,r4,8002454 <___vfprintf_internal_r+0x72c>
 8002450:	2005883a 	mov	r2,r4
 8002454:	d8802a15 	stw	r2,168(sp)
 8002458:	d8003215 	stw	zero,200(sp)
 800245c:	e7003fcc 	andi	fp,fp,255
 8002460:	e700201c 	xori	fp,fp,128
 8002464:	e73fe004 	addi	fp,fp,-128
 8002468:	e0000326 	beq	fp,zero,8002478 <___vfprintf_internal_r+0x750>
 800246c:	d8c02a17 	ldw	r3,168(sp)
 8002470:	18c00044 	addi	r3,r3,1
 8002474:	d8c02a15 	stw	r3,168(sp)
 8002478:	90c0008c 	andi	r3,r18,2
 800247c:	d8c02b15 	stw	r3,172(sp)
 8002480:	18000326 	beq	r3,zero,8002490 <___vfprintf_internal_r+0x768>
 8002484:	d8c02a17 	ldw	r3,168(sp)
 8002488:	18c00084 	addi	r3,r3,2
 800248c:	d8c02a15 	stw	r3,168(sp)
 8002490:	90c0210c 	andi	r3,r18,132
 8002494:	d8c03015 	stw	r3,192(sp)
 8002498:	1801a31e 	bne	r3,zero,8002b28 <___vfprintf_internal_r+0xe00>
 800249c:	d9003117 	ldw	r4,196(sp)
 80024a0:	d8c02a17 	ldw	r3,168(sp)
 80024a4:	20e7c83a 	sub	r19,r4,r3
 80024a8:	04c19f0e 	bge	zero,r19,8002b28 <___vfprintf_internal_r+0xe00>
 80024ac:	02400404 	movi	r9,16
 80024b0:	d8c02017 	ldw	r3,128(sp)
 80024b4:	d8801f17 	ldw	r2,124(sp)
 80024b8:	4cc50d0e 	bge	r9,r19,80038f0 <___vfprintf_internal_r+0x1bc8>
 80024bc:	01420074 	movhi	r5,2049
 80024c0:	29437784 	addi	r5,r5,3550
 80024c4:	dc403b15 	stw	r17,236(sp)
 80024c8:	d9403515 	stw	r5,212(sp)
 80024cc:	9823883a 	mov	r17,r19
 80024d0:	482d883a 	mov	r22,r9
 80024d4:	9027883a 	mov	r19,r18
 80024d8:	070001c4 	movi	fp,7
 80024dc:	8025883a 	mov	r18,r16
 80024e0:	dc002c17 	ldw	r16,176(sp)
 80024e4:	00000306 	br	80024f4 <___vfprintf_internal_r+0x7cc>
 80024e8:	8c7ffc04 	addi	r17,r17,-16
 80024ec:	42000204 	addi	r8,r8,8
 80024f0:	b440130e 	bge	r22,r17,8002540 <___vfprintf_internal_r+0x818>
 80024f4:	01020074 	movhi	r4,2049
 80024f8:	18c00404 	addi	r3,r3,16
 80024fc:	10800044 	addi	r2,r2,1
 8002500:	21037784 	addi	r4,r4,3550
 8002504:	41000015 	stw	r4,0(r8)
 8002508:	45800115 	stw	r22,4(r8)
 800250c:	d8c02015 	stw	r3,128(sp)
 8002510:	d8801f15 	stw	r2,124(sp)
 8002514:	e0bff40e 	bge	fp,r2,80024e8 <___vfprintf_internal_r+0x7c0>
 8002518:	d9801e04 	addi	r6,sp,120
 800251c:	b80b883a 	mov	r5,r23
 8002520:	8009883a 	mov	r4,r16
 8002524:	80093240 	call	8009324 <__sprint_r>
 8002528:	103f011e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 800252c:	8c7ffc04 	addi	r17,r17,-16
 8002530:	d8c02017 	ldw	r3,128(sp)
 8002534:	d8801f17 	ldw	r2,124(sp)
 8002538:	da000404 	addi	r8,sp,16
 800253c:	b47fed16 	blt	r22,r17,80024f4 <___vfprintf_internal_r+0x7cc>
 8002540:	9021883a 	mov	r16,r18
 8002544:	9825883a 	mov	r18,r19
 8002548:	8827883a 	mov	r19,r17
 800254c:	dc403b17 	ldw	r17,236(sp)
 8002550:	d9403517 	ldw	r5,212(sp)
 8002554:	98c7883a 	add	r3,r19,r3
 8002558:	10800044 	addi	r2,r2,1
 800255c:	41400015 	stw	r5,0(r8)
 8002560:	44c00115 	stw	r19,4(r8)
 8002564:	d8c02015 	stw	r3,128(sp)
 8002568:	d8801f15 	stw	r2,124(sp)
 800256c:	010001c4 	movi	r4,7
 8002570:	2082a316 	blt	r4,r2,8003000 <___vfprintf_internal_r+0x12d8>
 8002574:	df002787 	ldb	fp,158(sp)
 8002578:	42000204 	addi	r8,r8,8
 800257c:	e0000c26 	beq	fp,zero,80025b0 <___vfprintf_internal_r+0x888>
 8002580:	d8801f17 	ldw	r2,124(sp)
 8002584:	d9002784 	addi	r4,sp,158
 8002588:	18c00044 	addi	r3,r3,1
 800258c:	10800044 	addi	r2,r2,1
 8002590:	41000015 	stw	r4,0(r8)
 8002594:	01000044 	movi	r4,1
 8002598:	41000115 	stw	r4,4(r8)
 800259c:	d8c02015 	stw	r3,128(sp)
 80025a0:	d8801f15 	stw	r2,124(sp)
 80025a4:	010001c4 	movi	r4,7
 80025a8:	20823c16 	blt	r4,r2,8002e9c <___vfprintf_internal_r+0x1174>
 80025ac:	42000204 	addi	r8,r8,8
 80025b0:	d8802b17 	ldw	r2,172(sp)
 80025b4:	10000c26 	beq	r2,zero,80025e8 <___vfprintf_internal_r+0x8c0>
 80025b8:	d8801f17 	ldw	r2,124(sp)
 80025bc:	d9002704 	addi	r4,sp,156
 80025c0:	18c00084 	addi	r3,r3,2
 80025c4:	10800044 	addi	r2,r2,1
 80025c8:	41000015 	stw	r4,0(r8)
 80025cc:	01000084 	movi	r4,2
 80025d0:	41000115 	stw	r4,4(r8)
 80025d4:	d8c02015 	stw	r3,128(sp)
 80025d8:	d8801f15 	stw	r2,124(sp)
 80025dc:	010001c4 	movi	r4,7
 80025e0:	20823616 	blt	r4,r2,8002ebc <___vfprintf_internal_r+0x1194>
 80025e4:	42000204 	addi	r8,r8,8
 80025e8:	d9003017 	ldw	r4,192(sp)
 80025ec:	00802004 	movi	r2,128
 80025f0:	20819926 	beq	r4,r2,8002c58 <___vfprintf_internal_r+0xf30>
 80025f4:	d9402917 	ldw	r5,164(sp)
 80025f8:	d8802e17 	ldw	r2,184(sp)
 80025fc:	28adc83a 	sub	r22,r5,r2
 8002600:	0580310e 	bge	zero,r22,80026c8 <___vfprintf_internal_r+0x9a0>
 8002604:	07000404 	movi	fp,16
 8002608:	d8801f17 	ldw	r2,124(sp)
 800260c:	e584140e 	bge	fp,r22,8003660 <___vfprintf_internal_r+0x1938>
 8002610:	01420074 	movhi	r5,2049
 8002614:	29437384 	addi	r5,r5,3534
 8002618:	dc402915 	stw	r17,164(sp)
 800261c:	d9402b15 	stw	r5,172(sp)
 8002620:	b023883a 	mov	r17,r22
 8002624:	04c001c4 	movi	r19,7
 8002628:	a82d883a 	mov	r22,r21
 800262c:	902b883a 	mov	r21,r18
 8002630:	8025883a 	mov	r18,r16
 8002634:	dc002c17 	ldw	r16,176(sp)
 8002638:	00000306 	br	8002648 <___vfprintf_internal_r+0x920>
 800263c:	8c7ffc04 	addi	r17,r17,-16
 8002640:	42000204 	addi	r8,r8,8
 8002644:	e440110e 	bge	fp,r17,800268c <___vfprintf_internal_r+0x964>
 8002648:	18c00404 	addi	r3,r3,16
 800264c:	10800044 	addi	r2,r2,1
 8002650:	45000015 	stw	r20,0(r8)
 8002654:	47000115 	stw	fp,4(r8)
 8002658:	d8c02015 	stw	r3,128(sp)
 800265c:	d8801f15 	stw	r2,124(sp)
 8002660:	98bff60e 	bge	r19,r2,800263c <___vfprintf_internal_r+0x914>
 8002664:	d9801e04 	addi	r6,sp,120
 8002668:	b80b883a 	mov	r5,r23
 800266c:	8009883a 	mov	r4,r16
 8002670:	80093240 	call	8009324 <__sprint_r>
 8002674:	103eae1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002678:	8c7ffc04 	addi	r17,r17,-16
 800267c:	d8c02017 	ldw	r3,128(sp)
 8002680:	d8801f17 	ldw	r2,124(sp)
 8002684:	da000404 	addi	r8,sp,16
 8002688:	e47fef16 	blt	fp,r17,8002648 <___vfprintf_internal_r+0x920>
 800268c:	9021883a 	mov	r16,r18
 8002690:	a825883a 	mov	r18,r21
 8002694:	b02b883a 	mov	r21,r22
 8002698:	882d883a 	mov	r22,r17
 800269c:	dc402917 	ldw	r17,164(sp)
 80026a0:	d9002b17 	ldw	r4,172(sp)
 80026a4:	1d87883a 	add	r3,r3,r22
 80026a8:	10800044 	addi	r2,r2,1
 80026ac:	41000015 	stw	r4,0(r8)
 80026b0:	45800115 	stw	r22,4(r8)
 80026b4:	d8c02015 	stw	r3,128(sp)
 80026b8:	d8801f15 	stw	r2,124(sp)
 80026bc:	010001c4 	movi	r4,7
 80026c0:	2081ee16 	blt	r4,r2,8002e7c <___vfprintf_internal_r+0x1154>
 80026c4:	42000204 	addi	r8,r8,8
 80026c8:	9080400c 	andi	r2,r18,256
 80026cc:	1001181e 	bne	r2,zero,8002b30 <___vfprintf_internal_r+0xe08>
 80026d0:	d9402e17 	ldw	r5,184(sp)
 80026d4:	d8801f17 	ldw	r2,124(sp)
 80026d8:	44000015 	stw	r16,0(r8)
 80026dc:	1947883a 	add	r3,r3,r5
 80026e0:	10800044 	addi	r2,r2,1
 80026e4:	41400115 	stw	r5,4(r8)
 80026e8:	d8c02015 	stw	r3,128(sp)
 80026ec:	d8801f15 	stw	r2,124(sp)
 80026f0:	010001c4 	movi	r4,7
 80026f4:	2081d316 	blt	r4,r2,8002e44 <___vfprintf_internal_r+0x111c>
 80026f8:	42000204 	addi	r8,r8,8
 80026fc:	9480010c 	andi	r18,r18,4
 8002700:	90003226 	beq	r18,zero,80027cc <___vfprintf_internal_r+0xaa4>
 8002704:	d9403117 	ldw	r5,196(sp)
 8002708:	d8802a17 	ldw	r2,168(sp)
 800270c:	28a1c83a 	sub	r16,r5,r2
 8002710:	04002e0e 	bge	zero,r16,80027cc <___vfprintf_internal_r+0xaa4>
 8002714:	04400404 	movi	r17,16
 8002718:	d8801f17 	ldw	r2,124(sp)
 800271c:	8c04a20e 	bge	r17,r16,80039a8 <___vfprintf_internal_r+0x1c80>
 8002720:	01420074 	movhi	r5,2049
 8002724:	29437784 	addi	r5,r5,3550
 8002728:	d9403515 	stw	r5,212(sp)
 800272c:	048001c4 	movi	r18,7
 8002730:	dcc02c17 	ldw	r19,176(sp)
 8002734:	00000306 	br	8002744 <___vfprintf_internal_r+0xa1c>
 8002738:	843ffc04 	addi	r16,r16,-16
 800273c:	42000204 	addi	r8,r8,8
 8002740:	8c00130e 	bge	r17,r16,8002790 <___vfprintf_internal_r+0xa68>
 8002744:	01020074 	movhi	r4,2049
 8002748:	18c00404 	addi	r3,r3,16
 800274c:	10800044 	addi	r2,r2,1
 8002750:	21037784 	addi	r4,r4,3550
 8002754:	41000015 	stw	r4,0(r8)
 8002758:	44400115 	stw	r17,4(r8)
 800275c:	d8c02015 	stw	r3,128(sp)
 8002760:	d8801f15 	stw	r2,124(sp)
 8002764:	90bff40e 	bge	r18,r2,8002738 <___vfprintf_internal_r+0xa10>
 8002768:	d9801e04 	addi	r6,sp,120
 800276c:	b80b883a 	mov	r5,r23
 8002770:	9809883a 	mov	r4,r19
 8002774:	80093240 	call	8009324 <__sprint_r>
 8002778:	103e6d1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 800277c:	843ffc04 	addi	r16,r16,-16
 8002780:	d8c02017 	ldw	r3,128(sp)
 8002784:	d8801f17 	ldw	r2,124(sp)
 8002788:	da000404 	addi	r8,sp,16
 800278c:	8c3fed16 	blt	r17,r16,8002744 <___vfprintf_internal_r+0xa1c>
 8002790:	d9403517 	ldw	r5,212(sp)
 8002794:	1c07883a 	add	r3,r3,r16
 8002798:	10800044 	addi	r2,r2,1
 800279c:	41400015 	stw	r5,0(r8)
 80027a0:	44000115 	stw	r16,4(r8)
 80027a4:	d8c02015 	stw	r3,128(sp)
 80027a8:	d8801f15 	stw	r2,124(sp)
 80027ac:	010001c4 	movi	r4,7
 80027b0:	2080060e 	bge	r4,r2,80027cc <___vfprintf_internal_r+0xaa4>
 80027b4:	d9002c17 	ldw	r4,176(sp)
 80027b8:	d9801e04 	addi	r6,sp,120
 80027bc:	b80b883a 	mov	r5,r23
 80027c0:	80093240 	call	8009324 <__sprint_r>
 80027c4:	103e5a1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 80027c8:	d8c02017 	ldw	r3,128(sp)
 80027cc:	d8803117 	ldw	r2,196(sp)
 80027d0:	d9002a17 	ldw	r4,168(sp)
 80027d4:	1100010e 	bge	r2,r4,80027dc <___vfprintf_internal_r+0xab4>
 80027d8:	2005883a 	mov	r2,r4
 80027dc:	d9402f17 	ldw	r5,188(sp)
 80027e0:	288b883a 	add	r5,r5,r2
 80027e4:	d9402f15 	stw	r5,188(sp)
 80027e8:	18019e1e 	bne	r3,zero,8002e64 <___vfprintf_internal_r+0x113c>
 80027ec:	a8800007 	ldb	r2,0(r21)
 80027f0:	d8001f15 	stw	zero,124(sp)
 80027f4:	da000404 	addi	r8,sp,16
 80027f8:	103d851e 	bne	r2,zero,8001e10 <___vfprintf_internal_r+0xe8>
 80027fc:	a821883a 	mov	r16,r21
 8002800:	003d9b06 	br	8001e70 <___vfprintf_internal_r+0x148>
 8002804:	18c03fcc 	andi	r3,r3,255
 8002808:	1805c11e 	bne	r3,zero,8003f10 <___vfprintf_internal_r+0x21e8>
 800280c:	94800414 	ori	r18,r18,16
 8002810:	9080080c 	andi	r2,r18,32
 8002814:	10020c26 	beq	r2,zero,8003048 <___vfprintf_internal_r+0x1320>
 8002818:	d8802d17 	ldw	r2,180(sp)
 800281c:	d9002917 	ldw	r4,164(sp)
 8002820:	d8002785 	stb	zero,158(sp)
 8002824:	10c00204 	addi	r3,r2,8
 8002828:	14c00017 	ldw	r19,0(r2)
 800282c:	15800117 	ldw	r22,4(r2)
 8002830:	20040f16 	blt	r4,zero,8003870 <___vfprintf_internal_r+0x1b48>
 8002834:	013fdfc4 	movi	r4,-129
 8002838:	9d84b03a 	or	r2,r19,r22
 800283c:	d8c02d15 	stw	r3,180(sp)
 8002840:	9124703a 	and	r18,r18,r4
 8002844:	0039883a 	mov	fp,zero
 8002848:	103e891e 	bne	r2,zero,8002270 <___vfprintf_internal_r+0x548>
 800284c:	d9002917 	ldw	r4,164(sp)
 8002850:	2002c11e 	bne	r4,zero,8003358 <___vfprintf_internal_r+0x1630>
 8002854:	d8002915 	stw	zero,164(sp)
 8002858:	d8002e15 	stw	zero,184(sp)
 800285c:	dc001e04 	addi	r16,sp,120
 8002860:	003ef806 	br	8002444 <___vfprintf_internal_r+0x71c>
 8002864:	18c03fcc 	andi	r3,r3,255
 8002868:	18059d1e 	bne	r3,zero,8003ee0 <___vfprintf_internal_r+0x21b8>
 800286c:	01420074 	movhi	r5,2049
 8002870:	29436704 	addi	r5,r5,3484
 8002874:	d9403915 	stw	r5,228(sp)
 8002878:	9080080c 	andi	r2,r18,32
 800287c:	10005226 	beq	r2,zero,80029c8 <___vfprintf_internal_r+0xca0>
 8002880:	d8802d17 	ldw	r2,180(sp)
 8002884:	14c00017 	ldw	r19,0(r2)
 8002888:	15800117 	ldw	r22,4(r2)
 800288c:	10800204 	addi	r2,r2,8
 8002890:	d8802d15 	stw	r2,180(sp)
 8002894:	9080004c 	andi	r2,r18,1
 8002898:	10019026 	beq	r2,zero,8002edc <___vfprintf_internal_r+0x11b4>
 800289c:	9d84b03a 	or	r2,r19,r22
 80028a0:	10036926 	beq	r2,zero,8003648 <___vfprintf_internal_r+0x1920>
 80028a4:	d8c02917 	ldw	r3,164(sp)
 80028a8:	00800c04 	movi	r2,48
 80028ac:	d8802705 	stb	r2,156(sp)
 80028b0:	dc402745 	stb	r17,157(sp)
 80028b4:	d8002785 	stb	zero,158(sp)
 80028b8:	90800094 	ori	r2,r18,2
 80028bc:	18045d16 	blt	r3,zero,8003a34 <___vfprintf_internal_r+0x1d0c>
 80028c0:	00bfdfc4 	movi	r2,-129
 80028c4:	90a4703a 	and	r18,r18,r2
 80028c8:	94800094 	ori	r18,r18,2
 80028cc:	0039883a 	mov	fp,zero
 80028d0:	d9003917 	ldw	r4,228(sp)
 80028d4:	dc001e04 	addi	r16,sp,120
 80028d8:	988003cc 	andi	r2,r19,15
 80028dc:	b006973a 	slli	r3,r22,28
 80028e0:	2085883a 	add	r2,r4,r2
 80028e4:	9826d13a 	srli	r19,r19,4
 80028e8:	10800003 	ldbu	r2,0(r2)
 80028ec:	b02cd13a 	srli	r22,r22,4
 80028f0:	843fffc4 	addi	r16,r16,-1
 80028f4:	1ce6b03a 	or	r19,r3,r19
 80028f8:	80800005 	stb	r2,0(r16)
 80028fc:	9d84b03a 	or	r2,r19,r22
 8002900:	103ff51e 	bne	r2,zero,80028d8 <___vfprintf_internal_r+0xbb0>
 8002904:	d8c02817 	ldw	r3,160(sp)
 8002908:	1c07c83a 	sub	r3,r3,r16
 800290c:	d8c02e15 	stw	r3,184(sp)
 8002910:	003ecc06 	br	8002444 <___vfprintf_internal_r+0x71c>
 8002914:	18c03fcc 	andi	r3,r3,255
 8002918:	183e9f26 	beq	r3,zero,8002398 <___vfprintf_internal_r+0x670>
 800291c:	d9c02785 	stb	r7,158(sp)
 8002920:	003e9d06 	br	8002398 <___vfprintf_internal_r+0x670>
 8002924:	00c00044 	movi	r3,1
 8002928:	01c00ac4 	movi	r7,43
 800292c:	ac400007 	ldb	r17,0(r21)
 8002930:	003d5e06 	br	8001eac <___vfprintf_internal_r+0x184>
 8002934:	94800814 	ori	r18,r18,32
 8002938:	ac400007 	ldb	r17,0(r21)
 800293c:	003d5b06 	br	8001eac <___vfprintf_internal_r+0x184>
 8002940:	d8c02d17 	ldw	r3,180(sp)
 8002944:	d8002785 	stb	zero,158(sp)
 8002948:	1c000017 	ldw	r16,0(r3)
 800294c:	1cc00104 	addi	r19,r3,4
 8002950:	80041926 	beq	r16,zero,80039b8 <___vfprintf_internal_r+0x1c90>
 8002954:	d9002917 	ldw	r4,164(sp)
 8002958:	2003d016 	blt	r4,zero,800389c <___vfprintf_internal_r+0x1b74>
 800295c:	200d883a 	mov	r6,r4
 8002960:	000b883a 	mov	r5,zero
 8002964:	8009883a 	mov	r4,r16
 8002968:	da003d15 	stw	r8,244(sp)
 800296c:	80075380 	call	8007538 <memchr>
 8002970:	da003d17 	ldw	r8,244(sp)
 8002974:	10045426 	beq	r2,zero,8003ac8 <___vfprintf_internal_r+0x1da0>
 8002978:	1405c83a 	sub	r2,r2,r16
 800297c:	d8802e15 	stw	r2,184(sp)
 8002980:	1003cc16 	blt	r2,zero,80038b4 <___vfprintf_internal_r+0x1b8c>
 8002984:	df002783 	ldbu	fp,158(sp)
 8002988:	d8802a15 	stw	r2,168(sp)
 800298c:	dcc02d15 	stw	r19,180(sp)
 8002990:	d8002915 	stw	zero,164(sp)
 8002994:	d8003215 	stw	zero,200(sp)
 8002998:	003eb006 	br	800245c <___vfprintf_internal_r+0x734>
 800299c:	18c03fcc 	andi	r3,r3,255
 80029a0:	183f9b26 	beq	r3,zero,8002810 <___vfprintf_internal_r+0xae8>
 80029a4:	d9c02785 	stb	r7,158(sp)
 80029a8:	003f9906 	br	8002810 <___vfprintf_internal_r+0xae8>
 80029ac:	18c03fcc 	andi	r3,r3,255
 80029b0:	1805551e 	bne	r3,zero,8003f08 <___vfprintf_internal_r+0x21e0>
 80029b4:	01420074 	movhi	r5,2049
 80029b8:	29436c04 	addi	r5,r5,3504
 80029bc:	d9403915 	stw	r5,228(sp)
 80029c0:	9080080c 	andi	r2,r18,32
 80029c4:	103fae1e 	bne	r2,zero,8002880 <___vfprintf_internal_r+0xb58>
 80029c8:	9080040c 	andi	r2,r18,16
 80029cc:	1002de26 	beq	r2,zero,8003548 <___vfprintf_internal_r+0x1820>
 80029d0:	d8c02d17 	ldw	r3,180(sp)
 80029d4:	002d883a 	mov	r22,zero
 80029d8:	1cc00017 	ldw	r19,0(r3)
 80029dc:	18c00104 	addi	r3,r3,4
 80029e0:	d8c02d15 	stw	r3,180(sp)
 80029e4:	003fab06 	br	8002894 <___vfprintf_internal_r+0xb6c>
 80029e8:	38803fcc 	andi	r2,r7,255
 80029ec:	1080201c 	xori	r2,r2,128
 80029f0:	10bfe004 	addi	r2,r2,-128
 80029f4:	1002d21e 	bne	r2,zero,8003540 <___vfprintf_internal_r+0x1818>
 80029f8:	00c00044 	movi	r3,1
 80029fc:	01c00804 	movi	r7,32
 8002a00:	ac400007 	ldb	r17,0(r21)
 8002a04:	003d2906 	br	8001eac <___vfprintf_internal_r+0x184>
 8002a08:	94800054 	ori	r18,r18,1
 8002a0c:	ac400007 	ldb	r17,0(r21)
 8002a10:	003d2606 	br	8001eac <___vfprintf_internal_r+0x184>
 8002a14:	18c03fcc 	andi	r3,r3,255
 8002a18:	183e0526 	beq	r3,zero,8002230 <___vfprintf_internal_r+0x508>
 8002a1c:	d9c02785 	stb	r7,158(sp)
 8002a20:	003e0306 	br	8002230 <___vfprintf_internal_r+0x508>
 8002a24:	94801014 	ori	r18,r18,64
 8002a28:	ac400007 	ldb	r17,0(r21)
 8002a2c:	003d1f06 	br	8001eac <___vfprintf_internal_r+0x184>
 8002a30:	ac400007 	ldb	r17,0(r21)
 8002a34:	8a438726 	beq	r17,r9,8003854 <___vfprintf_internal_r+0x1b2c>
 8002a38:	94800414 	ori	r18,r18,16
 8002a3c:	003d1b06 	br	8001eac <___vfprintf_internal_r+0x184>
 8002a40:	18c03fcc 	andi	r3,r3,255
 8002a44:	1805341e 	bne	r3,zero,8003f18 <___vfprintf_internal_r+0x21f0>
 8002a48:	9080080c 	andi	r2,r18,32
 8002a4c:	1002cd26 	beq	r2,zero,8003584 <___vfprintf_internal_r+0x185c>
 8002a50:	d9402d17 	ldw	r5,180(sp)
 8002a54:	d9002f17 	ldw	r4,188(sp)
 8002a58:	28800017 	ldw	r2,0(r5)
 8002a5c:	2007d7fa 	srai	r3,r4,31
 8002a60:	29400104 	addi	r5,r5,4
 8002a64:	d9402d15 	stw	r5,180(sp)
 8002a68:	11000015 	stw	r4,0(r2)
 8002a6c:	10c00115 	stw	r3,4(r2)
 8002a70:	003ce506 	br	8001e08 <___vfprintf_internal_r+0xe0>
 8002a74:	d8c02d17 	ldw	r3,180(sp)
 8002a78:	d9002d17 	ldw	r4,180(sp)
 8002a7c:	d8002785 	stb	zero,158(sp)
 8002a80:	18800017 	ldw	r2,0(r3)
 8002a84:	21000104 	addi	r4,r4,4
 8002a88:	00c00044 	movi	r3,1
 8002a8c:	d8c02a15 	stw	r3,168(sp)
 8002a90:	d8801405 	stb	r2,80(sp)
 8002a94:	d9002d15 	stw	r4,180(sp)
 8002a98:	d8c02e15 	stw	r3,184(sp)
 8002a9c:	d8002915 	stw	zero,164(sp)
 8002aa0:	d8003215 	stw	zero,200(sp)
 8002aa4:	dc001404 	addi	r16,sp,80
 8002aa8:	0039883a 	mov	fp,zero
 8002aac:	003e7206 	br	8002478 <___vfprintf_internal_r+0x750>
 8002ab0:	01020074 	movhi	r4,2049
 8002ab4:	21036c04 	addi	r4,r4,3504
 8002ab8:	0039883a 	mov	fp,zero
 8002abc:	d9003915 	stw	r4,228(sp)
 8002ac0:	04401e04 	movi	r17,120
 8002ac4:	003f8206 	br	80028d0 <___vfprintf_internal_r+0xba8>
 8002ac8:	18c03fcc 	andi	r3,r3,255
 8002acc:	1805061e 	bne	r3,zero,8003ee8 <___vfprintf_internal_r+0x21c0>
 8002ad0:	883d9126 	beq	r17,zero,8002118 <___vfprintf_internal_r+0x3f0>
 8002ad4:	00c00044 	movi	r3,1
 8002ad8:	d8c02a15 	stw	r3,168(sp)
 8002adc:	dc401405 	stb	r17,80(sp)
 8002ae0:	d8002785 	stb	zero,158(sp)
 8002ae4:	003fec06 	br	8002a98 <___vfprintf_internal_r+0xd70>
 8002ae8:	01420074 	movhi	r5,2049
 8002aec:	29436c04 	addi	r5,r5,3504
 8002af0:	d9403915 	stw	r5,228(sp)
 8002af4:	d8c02d15 	stw	r3,180(sp)
 8002af8:	1025883a 	mov	r18,r2
 8002afc:	04401e04 	movi	r17,120
 8002b00:	9d84b03a 	or	r2,r19,r22
 8002b04:	1000fc1e 	bne	r2,zero,8002ef8 <___vfprintf_internal_r+0x11d0>
 8002b08:	0039883a 	mov	fp,zero
 8002b0c:	00800084 	movi	r2,2
 8002b10:	10803fcc 	andi	r2,r2,255
 8002b14:	00c00044 	movi	r3,1
 8002b18:	10c20f26 	beq	r2,r3,8003358 <___vfprintf_internal_r+0x1630>
 8002b1c:	00c00084 	movi	r3,2
 8002b20:	10fd6326 	beq	r2,r3,80020b0 <___vfprintf_internal_r+0x388>
 8002b24:	003e2d06 	br	80023dc <___vfprintf_internal_r+0x6b4>
 8002b28:	d8c02017 	ldw	r3,128(sp)
 8002b2c:	003e9306 	br	800257c <___vfprintf_internal_r+0x854>
 8002b30:	00801944 	movi	r2,101
 8002b34:	14407e0e 	bge	r2,r17,8002d30 <___vfprintf_internal_r+0x1008>
 8002b38:	d9003617 	ldw	r4,216(sp)
 8002b3c:	d9403817 	ldw	r5,224(sp)
 8002b40:	000d883a 	mov	r6,zero
 8002b44:	000f883a 	mov	r7,zero
 8002b48:	d8c03c15 	stw	r3,240(sp)
 8002b4c:	da003d15 	stw	r8,244(sp)
 8002b50:	800cf9c0 	call	800cf9c <__eqdf2>
 8002b54:	d8c03c17 	ldw	r3,240(sp)
 8002b58:	da003d17 	ldw	r8,244(sp)
 8002b5c:	1000f71e 	bne	r2,zero,8002f3c <___vfprintf_internal_r+0x1214>
 8002b60:	d8801f17 	ldw	r2,124(sp)
 8002b64:	01020074 	movhi	r4,2049
 8002b68:	21037304 	addi	r4,r4,3532
 8002b6c:	18c00044 	addi	r3,r3,1
 8002b70:	10800044 	addi	r2,r2,1
 8002b74:	41000015 	stw	r4,0(r8)
 8002b78:	01000044 	movi	r4,1
 8002b7c:	41000115 	stw	r4,4(r8)
 8002b80:	d8c02015 	stw	r3,128(sp)
 8002b84:	d8801f15 	stw	r2,124(sp)
 8002b88:	010001c4 	movi	r4,7
 8002b8c:	2082b816 	blt	r4,r2,8003670 <___vfprintf_internal_r+0x1948>
 8002b90:	42000204 	addi	r8,r8,8
 8002b94:	d8802617 	ldw	r2,152(sp)
 8002b98:	d9403317 	ldw	r5,204(sp)
 8002b9c:	11400216 	blt	r2,r5,8002ba8 <___vfprintf_internal_r+0xe80>
 8002ba0:	9080004c 	andi	r2,r18,1
 8002ba4:	103ed526 	beq	r2,zero,80026fc <___vfprintf_internal_r+0x9d4>
 8002ba8:	d8803717 	ldw	r2,220(sp)
 8002bac:	d9003417 	ldw	r4,208(sp)
 8002bb0:	d9403717 	ldw	r5,220(sp)
 8002bb4:	1887883a 	add	r3,r3,r2
 8002bb8:	d8801f17 	ldw	r2,124(sp)
 8002bbc:	41000015 	stw	r4,0(r8)
 8002bc0:	41400115 	stw	r5,4(r8)
 8002bc4:	10800044 	addi	r2,r2,1
 8002bc8:	d8c02015 	stw	r3,128(sp)
 8002bcc:	d8801f15 	stw	r2,124(sp)
 8002bd0:	010001c4 	movi	r4,7
 8002bd4:	20832916 	blt	r4,r2,800387c <___vfprintf_internal_r+0x1b54>
 8002bd8:	42000204 	addi	r8,r8,8
 8002bdc:	d8803317 	ldw	r2,204(sp)
 8002be0:	143fffc4 	addi	r16,r2,-1
 8002be4:	043ec50e 	bge	zero,r16,80026fc <___vfprintf_internal_r+0x9d4>
 8002be8:	04400404 	movi	r17,16
 8002bec:	d8801f17 	ldw	r2,124(sp)
 8002bf0:	8c00880e 	bge	r17,r16,8002e14 <___vfprintf_internal_r+0x10ec>
 8002bf4:	01420074 	movhi	r5,2049
 8002bf8:	29437384 	addi	r5,r5,3534
 8002bfc:	d9402b15 	stw	r5,172(sp)
 8002c00:	058001c4 	movi	r22,7
 8002c04:	dcc02c17 	ldw	r19,176(sp)
 8002c08:	00000306 	br	8002c18 <___vfprintf_internal_r+0xef0>
 8002c0c:	42000204 	addi	r8,r8,8
 8002c10:	843ffc04 	addi	r16,r16,-16
 8002c14:	8c00820e 	bge	r17,r16,8002e20 <___vfprintf_internal_r+0x10f8>
 8002c18:	18c00404 	addi	r3,r3,16
 8002c1c:	10800044 	addi	r2,r2,1
 8002c20:	45000015 	stw	r20,0(r8)
 8002c24:	44400115 	stw	r17,4(r8)
 8002c28:	d8c02015 	stw	r3,128(sp)
 8002c2c:	d8801f15 	stw	r2,124(sp)
 8002c30:	b0bff60e 	bge	r22,r2,8002c0c <___vfprintf_internal_r+0xee4>
 8002c34:	d9801e04 	addi	r6,sp,120
 8002c38:	b80b883a 	mov	r5,r23
 8002c3c:	9809883a 	mov	r4,r19
 8002c40:	80093240 	call	8009324 <__sprint_r>
 8002c44:	103d3a1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002c48:	d8c02017 	ldw	r3,128(sp)
 8002c4c:	d8801f17 	ldw	r2,124(sp)
 8002c50:	da000404 	addi	r8,sp,16
 8002c54:	003fee06 	br	8002c10 <___vfprintf_internal_r+0xee8>
 8002c58:	d9403117 	ldw	r5,196(sp)
 8002c5c:	d8802a17 	ldw	r2,168(sp)
 8002c60:	28adc83a 	sub	r22,r5,r2
 8002c64:	05be630e 	bge	zero,r22,80025f4 <___vfprintf_internal_r+0x8cc>
 8002c68:	07000404 	movi	fp,16
 8002c6c:	d8801f17 	ldw	r2,124(sp)
 8002c70:	e5838f0e 	bge	fp,r22,8003ab0 <___vfprintf_internal_r+0x1d88>
 8002c74:	01420074 	movhi	r5,2049
 8002c78:	29437384 	addi	r5,r5,3534
 8002c7c:	dc403015 	stw	r17,192(sp)
 8002c80:	d9402b15 	stw	r5,172(sp)
 8002c84:	b023883a 	mov	r17,r22
 8002c88:	04c001c4 	movi	r19,7
 8002c8c:	a82d883a 	mov	r22,r21
 8002c90:	902b883a 	mov	r21,r18
 8002c94:	8025883a 	mov	r18,r16
 8002c98:	dc002c17 	ldw	r16,176(sp)
 8002c9c:	00000306 	br	8002cac <___vfprintf_internal_r+0xf84>
 8002ca0:	8c7ffc04 	addi	r17,r17,-16
 8002ca4:	42000204 	addi	r8,r8,8
 8002ca8:	e440110e 	bge	fp,r17,8002cf0 <___vfprintf_internal_r+0xfc8>
 8002cac:	18c00404 	addi	r3,r3,16
 8002cb0:	10800044 	addi	r2,r2,1
 8002cb4:	45000015 	stw	r20,0(r8)
 8002cb8:	47000115 	stw	fp,4(r8)
 8002cbc:	d8c02015 	stw	r3,128(sp)
 8002cc0:	d8801f15 	stw	r2,124(sp)
 8002cc4:	98bff60e 	bge	r19,r2,8002ca0 <___vfprintf_internal_r+0xf78>
 8002cc8:	d9801e04 	addi	r6,sp,120
 8002ccc:	b80b883a 	mov	r5,r23
 8002cd0:	8009883a 	mov	r4,r16
 8002cd4:	80093240 	call	8009324 <__sprint_r>
 8002cd8:	103d151e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002cdc:	8c7ffc04 	addi	r17,r17,-16
 8002ce0:	d8c02017 	ldw	r3,128(sp)
 8002ce4:	d8801f17 	ldw	r2,124(sp)
 8002ce8:	da000404 	addi	r8,sp,16
 8002cec:	e47fef16 	blt	fp,r17,8002cac <___vfprintf_internal_r+0xf84>
 8002cf0:	9021883a 	mov	r16,r18
 8002cf4:	a825883a 	mov	r18,r21
 8002cf8:	b02b883a 	mov	r21,r22
 8002cfc:	882d883a 	mov	r22,r17
 8002d00:	dc403017 	ldw	r17,192(sp)
 8002d04:	d9002b17 	ldw	r4,172(sp)
 8002d08:	1d87883a 	add	r3,r3,r22
 8002d0c:	10800044 	addi	r2,r2,1
 8002d10:	41000015 	stw	r4,0(r8)
 8002d14:	45800115 	stw	r22,4(r8)
 8002d18:	d8c02015 	stw	r3,128(sp)
 8002d1c:	d8801f15 	stw	r2,124(sp)
 8002d20:	010001c4 	movi	r4,7
 8002d24:	20818e16 	blt	r4,r2,8003360 <___vfprintf_internal_r+0x1638>
 8002d28:	42000204 	addi	r8,r8,8
 8002d2c:	003e3106 	br	80025f4 <___vfprintf_internal_r+0x8cc>
 8002d30:	d9403317 	ldw	r5,204(sp)
 8002d34:	00800044 	movi	r2,1
 8002d38:	18c00044 	addi	r3,r3,1
 8002d3c:	1141530e 	bge	r2,r5,800328c <___vfprintf_internal_r+0x1564>
 8002d40:	dc401f17 	ldw	r17,124(sp)
 8002d44:	00800044 	movi	r2,1
 8002d48:	40800115 	stw	r2,4(r8)
 8002d4c:	8c400044 	addi	r17,r17,1
 8002d50:	44000015 	stw	r16,0(r8)
 8002d54:	d8c02015 	stw	r3,128(sp)
 8002d58:	dc401f15 	stw	r17,124(sp)
 8002d5c:	008001c4 	movi	r2,7
 8002d60:	14416b16 	blt	r2,r17,8003310 <___vfprintf_internal_r+0x15e8>
 8002d64:	42000204 	addi	r8,r8,8
 8002d68:	d8803717 	ldw	r2,220(sp)
 8002d6c:	d9003417 	ldw	r4,208(sp)
 8002d70:	8c400044 	addi	r17,r17,1
 8002d74:	10c7883a 	add	r3,r2,r3
 8002d78:	40800115 	stw	r2,4(r8)
 8002d7c:	41000015 	stw	r4,0(r8)
 8002d80:	d8c02015 	stw	r3,128(sp)
 8002d84:	dc401f15 	stw	r17,124(sp)
 8002d88:	008001c4 	movi	r2,7
 8002d8c:	14416916 	blt	r2,r17,8003334 <___vfprintf_internal_r+0x160c>
 8002d90:	45800204 	addi	r22,r8,8
 8002d94:	d9003617 	ldw	r4,216(sp)
 8002d98:	d9403817 	ldw	r5,224(sp)
 8002d9c:	000d883a 	mov	r6,zero
 8002da0:	000f883a 	mov	r7,zero
 8002da4:	d8c03c15 	stw	r3,240(sp)
 8002da8:	800cf9c0 	call	800cf9c <__eqdf2>
 8002dac:	d8c03c17 	ldw	r3,240(sp)
 8002db0:	1000bc26 	beq	r2,zero,80030a4 <___vfprintf_internal_r+0x137c>
 8002db4:	d9403317 	ldw	r5,204(sp)
 8002db8:	84000044 	addi	r16,r16,1
 8002dbc:	8c400044 	addi	r17,r17,1
 8002dc0:	28bfffc4 	addi	r2,r5,-1
 8002dc4:	1887883a 	add	r3,r3,r2
 8002dc8:	b0800115 	stw	r2,4(r22)
 8002dcc:	b4000015 	stw	r16,0(r22)
 8002dd0:	d8c02015 	stw	r3,128(sp)
 8002dd4:	dc401f15 	stw	r17,124(sp)
 8002dd8:	008001c4 	movi	r2,7
 8002ddc:	14414316 	blt	r2,r17,80032ec <___vfprintf_internal_r+0x15c4>
 8002de0:	b5800204 	addi	r22,r22,8
 8002de4:	d9003a17 	ldw	r4,232(sp)
 8002de8:	df0022c4 	addi	fp,sp,139
 8002dec:	8c400044 	addi	r17,r17,1
 8002df0:	20c7883a 	add	r3,r4,r3
 8002df4:	b7000015 	stw	fp,0(r22)
 8002df8:	b1000115 	stw	r4,4(r22)
 8002dfc:	d8c02015 	stw	r3,128(sp)
 8002e00:	dc401f15 	stw	r17,124(sp)
 8002e04:	008001c4 	movi	r2,7
 8002e08:	14400e16 	blt	r2,r17,8002e44 <___vfprintf_internal_r+0x111c>
 8002e0c:	b2000204 	addi	r8,r22,8
 8002e10:	003e3a06 	br	80026fc <___vfprintf_internal_r+0x9d4>
 8002e14:	01020074 	movhi	r4,2049
 8002e18:	21037384 	addi	r4,r4,3534
 8002e1c:	d9002b15 	stw	r4,172(sp)
 8002e20:	d9002b17 	ldw	r4,172(sp)
 8002e24:	1c07883a 	add	r3,r3,r16
 8002e28:	44000115 	stw	r16,4(r8)
 8002e2c:	41000015 	stw	r4,0(r8)
 8002e30:	10800044 	addi	r2,r2,1
 8002e34:	d8c02015 	stw	r3,128(sp)
 8002e38:	d8801f15 	stw	r2,124(sp)
 8002e3c:	010001c4 	movi	r4,7
 8002e40:	20be2d0e 	bge	r4,r2,80026f8 <___vfprintf_internal_r+0x9d0>
 8002e44:	d9002c17 	ldw	r4,176(sp)
 8002e48:	d9801e04 	addi	r6,sp,120
 8002e4c:	b80b883a 	mov	r5,r23
 8002e50:	80093240 	call	8009324 <__sprint_r>
 8002e54:	103cb61e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002e58:	d8c02017 	ldw	r3,128(sp)
 8002e5c:	da000404 	addi	r8,sp,16
 8002e60:	003e2606 	br	80026fc <___vfprintf_internal_r+0x9d4>
 8002e64:	d9002c17 	ldw	r4,176(sp)
 8002e68:	d9801e04 	addi	r6,sp,120
 8002e6c:	b80b883a 	mov	r5,r23
 8002e70:	80093240 	call	8009324 <__sprint_r>
 8002e74:	103e5d26 	beq	r2,zero,80027ec <___vfprintf_internal_r+0xac4>
 8002e78:	003cad06 	br	8002130 <___vfprintf_internal_r+0x408>
 8002e7c:	d9002c17 	ldw	r4,176(sp)
 8002e80:	d9801e04 	addi	r6,sp,120
 8002e84:	b80b883a 	mov	r5,r23
 8002e88:	80093240 	call	8009324 <__sprint_r>
 8002e8c:	103ca81e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002e90:	d8c02017 	ldw	r3,128(sp)
 8002e94:	da000404 	addi	r8,sp,16
 8002e98:	003e0b06 	br	80026c8 <___vfprintf_internal_r+0x9a0>
 8002e9c:	d9002c17 	ldw	r4,176(sp)
 8002ea0:	d9801e04 	addi	r6,sp,120
 8002ea4:	b80b883a 	mov	r5,r23
 8002ea8:	80093240 	call	8009324 <__sprint_r>
 8002eac:	103ca01e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002eb0:	d8c02017 	ldw	r3,128(sp)
 8002eb4:	da000404 	addi	r8,sp,16
 8002eb8:	003dbd06 	br	80025b0 <___vfprintf_internal_r+0x888>
 8002ebc:	d9002c17 	ldw	r4,176(sp)
 8002ec0:	d9801e04 	addi	r6,sp,120
 8002ec4:	b80b883a 	mov	r5,r23
 8002ec8:	80093240 	call	8009324 <__sprint_r>
 8002ecc:	103c981e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002ed0:	d8c02017 	ldw	r3,128(sp)
 8002ed4:	da000404 	addi	r8,sp,16
 8002ed8:	003dc306 	br	80025e8 <___vfprintf_internal_r+0x8c0>
 8002edc:	d8802917 	ldw	r2,164(sp)
 8002ee0:	d8002785 	stb	zero,158(sp)
 8002ee4:	103f0616 	blt	r2,zero,8002b00 <___vfprintf_internal_r+0xdd8>
 8002ee8:	00ffdfc4 	movi	r3,-129
 8002eec:	9d84b03a 	or	r2,r19,r22
 8002ef0:	90e4703a 	and	r18,r18,r3
 8002ef4:	103c6b26 	beq	r2,zero,80020a4 <___vfprintf_internal_r+0x37c>
 8002ef8:	0039883a 	mov	fp,zero
 8002efc:	003e7406 	br	80028d0 <___vfprintf_internal_r+0xba8>
 8002f00:	9080040c 	andi	r2,r18,16
 8002f04:	1001b326 	beq	r2,zero,80035d4 <___vfprintf_internal_r+0x18ac>
 8002f08:	d9002d17 	ldw	r4,180(sp)
 8002f0c:	d9402917 	ldw	r5,164(sp)
 8002f10:	d8002785 	stb	zero,158(sp)
 8002f14:	20800104 	addi	r2,r4,4
 8002f18:	24c00017 	ldw	r19,0(r4)
 8002f1c:	002d883a 	mov	r22,zero
 8002f20:	2801b516 	blt	r5,zero,80035f8 <___vfprintf_internal_r+0x18d0>
 8002f24:	00ffdfc4 	movi	r3,-129
 8002f28:	d8802d15 	stw	r2,180(sp)
 8002f2c:	90e4703a 	and	r18,r18,r3
 8002f30:	983d2726 	beq	r19,zero,80023d0 <___vfprintf_internal_r+0x6a8>
 8002f34:	0039883a 	mov	fp,zero
 8002f38:	003d2a06 	br	80023e4 <___vfprintf_internal_r+0x6bc>
 8002f3c:	dc402617 	ldw	r17,152(sp)
 8002f40:	0441d30e 	bge	zero,r17,8003690 <___vfprintf_internal_r+0x1968>
 8002f44:	dc403217 	ldw	r17,200(sp)
 8002f48:	d8803317 	ldw	r2,204(sp)
 8002f4c:	1440010e 	bge	r2,r17,8002f54 <___vfprintf_internal_r+0x122c>
 8002f50:	1023883a 	mov	r17,r2
 8002f54:	04400a0e 	bge	zero,r17,8002f80 <___vfprintf_internal_r+0x1258>
 8002f58:	d8801f17 	ldw	r2,124(sp)
 8002f5c:	1c47883a 	add	r3,r3,r17
 8002f60:	44000015 	stw	r16,0(r8)
 8002f64:	10800044 	addi	r2,r2,1
 8002f68:	44400115 	stw	r17,4(r8)
 8002f6c:	d8c02015 	stw	r3,128(sp)
 8002f70:	d8801f15 	stw	r2,124(sp)
 8002f74:	010001c4 	movi	r4,7
 8002f78:	20826516 	blt	r4,r2,8003910 <___vfprintf_internal_r+0x1be8>
 8002f7c:	42000204 	addi	r8,r8,8
 8002f80:	88026116 	blt	r17,zero,8003908 <___vfprintf_internal_r+0x1be0>
 8002f84:	d9003217 	ldw	r4,200(sp)
 8002f88:	2463c83a 	sub	r17,r4,r17
 8002f8c:	04407b0e 	bge	zero,r17,800317c <___vfprintf_internal_r+0x1454>
 8002f90:	05800404 	movi	r22,16
 8002f94:	d8801f17 	ldw	r2,124(sp)
 8002f98:	b4419d0e 	bge	r22,r17,8003610 <___vfprintf_internal_r+0x18e8>
 8002f9c:	01020074 	movhi	r4,2049
 8002fa0:	21037384 	addi	r4,r4,3534
 8002fa4:	d9002b15 	stw	r4,172(sp)
 8002fa8:	070001c4 	movi	fp,7
 8002fac:	dcc02c17 	ldw	r19,176(sp)
 8002fb0:	00000306 	br	8002fc0 <___vfprintf_internal_r+0x1298>
 8002fb4:	42000204 	addi	r8,r8,8
 8002fb8:	8c7ffc04 	addi	r17,r17,-16
 8002fbc:	b441970e 	bge	r22,r17,800361c <___vfprintf_internal_r+0x18f4>
 8002fc0:	18c00404 	addi	r3,r3,16
 8002fc4:	10800044 	addi	r2,r2,1
 8002fc8:	45000015 	stw	r20,0(r8)
 8002fcc:	45800115 	stw	r22,4(r8)
 8002fd0:	d8c02015 	stw	r3,128(sp)
 8002fd4:	d8801f15 	stw	r2,124(sp)
 8002fd8:	e0bff60e 	bge	fp,r2,8002fb4 <___vfprintf_internal_r+0x128c>
 8002fdc:	d9801e04 	addi	r6,sp,120
 8002fe0:	b80b883a 	mov	r5,r23
 8002fe4:	9809883a 	mov	r4,r19
 8002fe8:	80093240 	call	8009324 <__sprint_r>
 8002fec:	103c501e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8002ff0:	d8c02017 	ldw	r3,128(sp)
 8002ff4:	d8801f17 	ldw	r2,124(sp)
 8002ff8:	da000404 	addi	r8,sp,16
 8002ffc:	003fee06 	br	8002fb8 <___vfprintf_internal_r+0x1290>
 8003000:	d9002c17 	ldw	r4,176(sp)
 8003004:	d9801e04 	addi	r6,sp,120
 8003008:	b80b883a 	mov	r5,r23
 800300c:	80093240 	call	8009324 <__sprint_r>
 8003010:	103c471e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003014:	d8c02017 	ldw	r3,128(sp)
 8003018:	df002787 	ldb	fp,158(sp)
 800301c:	da000404 	addi	r8,sp,16
 8003020:	003d5606 	br	800257c <___vfprintf_internal_r+0x854>
 8003024:	9080040c 	andi	r2,r18,16
 8003028:	10016126 	beq	r2,zero,80035b0 <___vfprintf_internal_r+0x1888>
 800302c:	d8802d17 	ldw	r2,180(sp)
 8003030:	14c00017 	ldw	r19,0(r2)
 8003034:	10800104 	addi	r2,r2,4
 8003038:	d8802d15 	stw	r2,180(sp)
 800303c:	982dd7fa 	srai	r22,r19,31
 8003040:	b005883a 	mov	r2,r22
 8003044:	003c8206 	br	8002250 <___vfprintf_internal_r+0x528>
 8003048:	9080040c 	andi	r2,r18,16
 800304c:	10003526 	beq	r2,zero,8003124 <___vfprintf_internal_r+0x13fc>
 8003050:	d9402d17 	ldw	r5,180(sp)
 8003054:	d8c02917 	ldw	r3,164(sp)
 8003058:	d8002785 	stb	zero,158(sp)
 800305c:	28800104 	addi	r2,r5,4
 8003060:	2cc00017 	ldw	r19,0(r5)
 8003064:	002d883a 	mov	r22,zero
 8003068:	18003716 	blt	r3,zero,8003148 <___vfprintf_internal_r+0x1420>
 800306c:	00ffdfc4 	movi	r3,-129
 8003070:	d8802d15 	stw	r2,180(sp)
 8003074:	90e4703a 	and	r18,r18,r3
 8003078:	0039883a 	mov	fp,zero
 800307c:	983df326 	beq	r19,zero,800284c <___vfprintf_internal_r+0xb24>
 8003080:	00800244 	movi	r2,9
 8003084:	14fc7b36 	bltu	r2,r19,8002274 <___vfprintf_internal_r+0x54c>
 8003088:	d8c02817 	ldw	r3,160(sp)
 800308c:	dc001dc4 	addi	r16,sp,119
 8003090:	9cc00c04 	addi	r19,r19,48
 8003094:	1c07c83a 	sub	r3,r3,r16
 8003098:	dcc01dc5 	stb	r19,119(sp)
 800309c:	d8c02e15 	stw	r3,184(sp)
 80030a0:	003ce806 	br	8002444 <___vfprintf_internal_r+0x71c>
 80030a4:	d8803317 	ldw	r2,204(sp)
 80030a8:	143fffc4 	addi	r16,r2,-1
 80030ac:	043f4d0e 	bge	zero,r16,8002de4 <___vfprintf_internal_r+0x10bc>
 80030b0:	07000404 	movi	fp,16
 80030b4:	e400810e 	bge	fp,r16,80032bc <___vfprintf_internal_r+0x1594>
 80030b8:	01420074 	movhi	r5,2049
 80030bc:	29437384 	addi	r5,r5,3534
 80030c0:	d9402b15 	stw	r5,172(sp)
 80030c4:	01c001c4 	movi	r7,7
 80030c8:	dcc02c17 	ldw	r19,176(sp)
 80030cc:	00000306 	br	80030dc <___vfprintf_internal_r+0x13b4>
 80030d0:	b5800204 	addi	r22,r22,8
 80030d4:	843ffc04 	addi	r16,r16,-16
 80030d8:	e4007b0e 	bge	fp,r16,80032c8 <___vfprintf_internal_r+0x15a0>
 80030dc:	18c00404 	addi	r3,r3,16
 80030e0:	8c400044 	addi	r17,r17,1
 80030e4:	b5000015 	stw	r20,0(r22)
 80030e8:	b7000115 	stw	fp,4(r22)
 80030ec:	d8c02015 	stw	r3,128(sp)
 80030f0:	dc401f15 	stw	r17,124(sp)
 80030f4:	3c7ff60e 	bge	r7,r17,80030d0 <___vfprintf_internal_r+0x13a8>
 80030f8:	d9801e04 	addi	r6,sp,120
 80030fc:	b80b883a 	mov	r5,r23
 8003100:	9809883a 	mov	r4,r19
 8003104:	d9c03c15 	stw	r7,240(sp)
 8003108:	80093240 	call	8009324 <__sprint_r>
 800310c:	d9c03c17 	ldw	r7,240(sp)
 8003110:	103c071e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003114:	d8c02017 	ldw	r3,128(sp)
 8003118:	dc401f17 	ldw	r17,124(sp)
 800311c:	dd800404 	addi	r22,sp,16
 8003120:	003fec06 	br	80030d4 <___vfprintf_internal_r+0x13ac>
 8003124:	9080100c 	andi	r2,r18,64
 8003128:	d8002785 	stb	zero,158(sp)
 800312c:	10010e26 	beq	r2,zero,8003568 <___vfprintf_internal_r+0x1840>
 8003130:	d9002d17 	ldw	r4,180(sp)
 8003134:	d9402917 	ldw	r5,164(sp)
 8003138:	002d883a 	mov	r22,zero
 800313c:	20800104 	addi	r2,r4,4
 8003140:	24c0000b 	ldhu	r19,0(r4)
 8003144:	283fc90e 	bge	r5,zero,800306c <___vfprintf_internal_r+0x1344>
 8003148:	d8802d15 	stw	r2,180(sp)
 800314c:	0039883a 	mov	fp,zero
 8003150:	9d84b03a 	or	r2,r19,r22
 8003154:	103c461e 	bne	r2,zero,8002270 <___vfprintf_internal_r+0x548>
 8003158:	00800044 	movi	r2,1
 800315c:	003e6c06 	br	8002b10 <___vfprintf_internal_r+0xde8>
 8003160:	d9002c17 	ldw	r4,176(sp)
 8003164:	d9801e04 	addi	r6,sp,120
 8003168:	b80b883a 	mov	r5,r23
 800316c:	80093240 	call	8009324 <__sprint_r>
 8003170:	103bef1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003174:	d8c02017 	ldw	r3,128(sp)
 8003178:	da000404 	addi	r8,sp,16
 800317c:	d9003217 	ldw	r4,200(sp)
 8003180:	d8802617 	ldw	r2,152(sp)
 8003184:	d9403317 	ldw	r5,204(sp)
 8003188:	8123883a 	add	r17,r16,r4
 800318c:	11400216 	blt	r2,r5,8003198 <___vfprintf_internal_r+0x1470>
 8003190:	9100004c 	andi	r4,r18,1
 8003194:	20000d26 	beq	r4,zero,80031cc <___vfprintf_internal_r+0x14a4>
 8003198:	d9003717 	ldw	r4,220(sp)
 800319c:	d9403417 	ldw	r5,208(sp)
 80031a0:	1907883a 	add	r3,r3,r4
 80031a4:	d9001f17 	ldw	r4,124(sp)
 80031a8:	41400015 	stw	r5,0(r8)
 80031ac:	d9403717 	ldw	r5,220(sp)
 80031b0:	21000044 	addi	r4,r4,1
 80031b4:	d8c02015 	stw	r3,128(sp)
 80031b8:	41400115 	stw	r5,4(r8)
 80031bc:	d9001f15 	stw	r4,124(sp)
 80031c0:	014001c4 	movi	r5,7
 80031c4:	2901e816 	blt	r5,r4,8003968 <___vfprintf_internal_r+0x1c40>
 80031c8:	42000204 	addi	r8,r8,8
 80031cc:	d9003317 	ldw	r4,204(sp)
 80031d0:	8121883a 	add	r16,r16,r4
 80031d4:	2085c83a 	sub	r2,r4,r2
 80031d8:	8461c83a 	sub	r16,r16,r17
 80031dc:	1400010e 	bge	r2,r16,80031e4 <___vfprintf_internal_r+0x14bc>
 80031e0:	1021883a 	mov	r16,r2
 80031e4:	04000a0e 	bge	zero,r16,8003210 <___vfprintf_internal_r+0x14e8>
 80031e8:	d9001f17 	ldw	r4,124(sp)
 80031ec:	1c07883a 	add	r3,r3,r16
 80031f0:	44400015 	stw	r17,0(r8)
 80031f4:	21000044 	addi	r4,r4,1
 80031f8:	44000115 	stw	r16,4(r8)
 80031fc:	d8c02015 	stw	r3,128(sp)
 8003200:	d9001f15 	stw	r4,124(sp)
 8003204:	014001c4 	movi	r5,7
 8003208:	2901fb16 	blt	r5,r4,80039f8 <___vfprintf_internal_r+0x1cd0>
 800320c:	42000204 	addi	r8,r8,8
 8003210:	8001f716 	blt	r16,zero,80039f0 <___vfprintf_internal_r+0x1cc8>
 8003214:	1421c83a 	sub	r16,r2,r16
 8003218:	043d380e 	bge	zero,r16,80026fc <___vfprintf_internal_r+0x9d4>
 800321c:	04400404 	movi	r17,16
 8003220:	d8801f17 	ldw	r2,124(sp)
 8003224:	8c3efb0e 	bge	r17,r16,8002e14 <___vfprintf_internal_r+0x10ec>
 8003228:	01420074 	movhi	r5,2049
 800322c:	29437384 	addi	r5,r5,3534
 8003230:	d9402b15 	stw	r5,172(sp)
 8003234:	058001c4 	movi	r22,7
 8003238:	dcc02c17 	ldw	r19,176(sp)
 800323c:	00000306 	br	800324c <___vfprintf_internal_r+0x1524>
 8003240:	42000204 	addi	r8,r8,8
 8003244:	843ffc04 	addi	r16,r16,-16
 8003248:	8c3ef50e 	bge	r17,r16,8002e20 <___vfprintf_internal_r+0x10f8>
 800324c:	18c00404 	addi	r3,r3,16
 8003250:	10800044 	addi	r2,r2,1
 8003254:	45000015 	stw	r20,0(r8)
 8003258:	44400115 	stw	r17,4(r8)
 800325c:	d8c02015 	stw	r3,128(sp)
 8003260:	d8801f15 	stw	r2,124(sp)
 8003264:	b0bff60e 	bge	r22,r2,8003240 <___vfprintf_internal_r+0x1518>
 8003268:	d9801e04 	addi	r6,sp,120
 800326c:	b80b883a 	mov	r5,r23
 8003270:	9809883a 	mov	r4,r19
 8003274:	80093240 	call	8009324 <__sprint_r>
 8003278:	103bad1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 800327c:	d8c02017 	ldw	r3,128(sp)
 8003280:	d8801f17 	ldw	r2,124(sp)
 8003284:	da000404 	addi	r8,sp,16
 8003288:	003fee06 	br	8003244 <___vfprintf_internal_r+0x151c>
 800328c:	9088703a 	and	r4,r18,r2
 8003290:	203eab1e 	bne	r4,zero,8002d40 <___vfprintf_internal_r+0x1018>
 8003294:	dc401f17 	ldw	r17,124(sp)
 8003298:	40800115 	stw	r2,4(r8)
 800329c:	44000015 	stw	r16,0(r8)
 80032a0:	8c400044 	addi	r17,r17,1
 80032a4:	d8c02015 	stw	r3,128(sp)
 80032a8:	dc401f15 	stw	r17,124(sp)
 80032ac:	008001c4 	movi	r2,7
 80032b0:	14400e16 	blt	r2,r17,80032ec <___vfprintf_internal_r+0x15c4>
 80032b4:	45800204 	addi	r22,r8,8
 80032b8:	003eca06 	br	8002de4 <___vfprintf_internal_r+0x10bc>
 80032bc:	01020074 	movhi	r4,2049
 80032c0:	21037384 	addi	r4,r4,3534
 80032c4:	d9002b15 	stw	r4,172(sp)
 80032c8:	d8802b17 	ldw	r2,172(sp)
 80032cc:	1c07883a 	add	r3,r3,r16
 80032d0:	8c400044 	addi	r17,r17,1
 80032d4:	b0800015 	stw	r2,0(r22)
 80032d8:	b4000115 	stw	r16,4(r22)
 80032dc:	d8c02015 	stw	r3,128(sp)
 80032e0:	dc401f15 	stw	r17,124(sp)
 80032e4:	008001c4 	movi	r2,7
 80032e8:	147ebd0e 	bge	r2,r17,8002de0 <___vfprintf_internal_r+0x10b8>
 80032ec:	d9002c17 	ldw	r4,176(sp)
 80032f0:	d9801e04 	addi	r6,sp,120
 80032f4:	b80b883a 	mov	r5,r23
 80032f8:	80093240 	call	8009324 <__sprint_r>
 80032fc:	103b8c1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003300:	d8c02017 	ldw	r3,128(sp)
 8003304:	dc401f17 	ldw	r17,124(sp)
 8003308:	dd800404 	addi	r22,sp,16
 800330c:	003eb506 	br	8002de4 <___vfprintf_internal_r+0x10bc>
 8003310:	d9002c17 	ldw	r4,176(sp)
 8003314:	d9801e04 	addi	r6,sp,120
 8003318:	b80b883a 	mov	r5,r23
 800331c:	80093240 	call	8009324 <__sprint_r>
 8003320:	103b831e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003324:	d8c02017 	ldw	r3,128(sp)
 8003328:	dc401f17 	ldw	r17,124(sp)
 800332c:	da000404 	addi	r8,sp,16
 8003330:	003e8d06 	br	8002d68 <___vfprintf_internal_r+0x1040>
 8003334:	d9002c17 	ldw	r4,176(sp)
 8003338:	d9801e04 	addi	r6,sp,120
 800333c:	b80b883a 	mov	r5,r23
 8003340:	80093240 	call	8009324 <__sprint_r>
 8003344:	103b7a1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003348:	d8c02017 	ldw	r3,128(sp)
 800334c:	dc401f17 	ldw	r17,124(sp)
 8003350:	dd800404 	addi	r22,sp,16
 8003354:	003e8f06 	br	8002d94 <___vfprintf_internal_r+0x106c>
 8003358:	0027883a 	mov	r19,zero
 800335c:	003f4a06 	br	8003088 <___vfprintf_internal_r+0x1360>
 8003360:	d9002c17 	ldw	r4,176(sp)
 8003364:	d9801e04 	addi	r6,sp,120
 8003368:	b80b883a 	mov	r5,r23
 800336c:	80093240 	call	8009324 <__sprint_r>
 8003370:	103b6f1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003374:	d8c02017 	ldw	r3,128(sp)
 8003378:	da000404 	addi	r8,sp,16
 800337c:	003c9d06 	br	80025f4 <___vfprintf_internal_r+0x8cc>
 8003380:	04e7c83a 	sub	r19,zero,r19
 8003384:	9804c03a 	cmpne	r2,r19,zero
 8003388:	05adc83a 	sub	r22,zero,r22
 800338c:	b0adc83a 	sub	r22,r22,r2
 8003390:	d8802917 	ldw	r2,164(sp)
 8003394:	07000b44 	movi	fp,45
 8003398:	df002785 	stb	fp,158(sp)
 800339c:	10017b16 	blt	r2,zero,800398c <___vfprintf_internal_r+0x1c64>
 80033a0:	00bfdfc4 	movi	r2,-129
 80033a4:	90a4703a 	and	r18,r18,r2
 80033a8:	003bb106 	br	8002270 <___vfprintf_internal_r+0x548>
 80033ac:	d9003617 	ldw	r4,216(sp)
 80033b0:	d9403817 	ldw	r5,224(sp)
 80033b4:	da003d15 	stw	r8,244(sp)
 80033b8:	8008f480 	call	8008f48 <__fpclassifyd>
 80033bc:	da003d17 	ldw	r8,244(sp)
 80033c0:	1000f026 	beq	r2,zero,8003784 <___vfprintf_internal_r+0x1a5c>
 80033c4:	d9002917 	ldw	r4,164(sp)
 80033c8:	05bff7c4 	movi	r22,-33
 80033cc:	00bfffc4 	movi	r2,-1
 80033d0:	8dac703a 	and	r22,r17,r22
 80033d4:	20820026 	beq	r4,r2,8003bd8 <___vfprintf_internal_r+0x1eb0>
 80033d8:	008011c4 	movi	r2,71
 80033dc:	b081f726 	beq	r22,r2,8003bbc <___vfprintf_internal_r+0x1e94>
 80033e0:	d9003817 	ldw	r4,224(sp)
 80033e4:	90c04014 	ori	r3,r18,256
 80033e8:	d8c02b15 	stw	r3,172(sp)
 80033ec:	20021516 	blt	r4,zero,8003c44 <___vfprintf_internal_r+0x1f1c>
 80033f0:	dcc03817 	ldw	r19,224(sp)
 80033f4:	d8002a05 	stb	zero,168(sp)
 80033f8:	00801984 	movi	r2,102
 80033fc:	8881f926 	beq	r17,r2,8003be4 <___vfprintf_internal_r+0x1ebc>
 8003400:	00801184 	movi	r2,70
 8003404:	88821c26 	beq	r17,r2,8003c78 <___vfprintf_internal_r+0x1f50>
 8003408:	00801144 	movi	r2,69
 800340c:	b081ef26 	beq	r22,r2,8003bcc <___vfprintf_internal_r+0x1ea4>
 8003410:	d8c02917 	ldw	r3,164(sp)
 8003414:	d8802104 	addi	r2,sp,132
 8003418:	d8800315 	stw	r2,12(sp)
 800341c:	d9403617 	ldw	r5,216(sp)
 8003420:	d8802504 	addi	r2,sp,148
 8003424:	d9002c17 	ldw	r4,176(sp)
 8003428:	d8800215 	stw	r2,8(sp)
 800342c:	d8802604 	addi	r2,sp,152
 8003430:	d8c00015 	stw	r3,0(sp)
 8003434:	d8800115 	stw	r2,4(sp)
 8003438:	01c00084 	movi	r7,2
 800343c:	980d883a 	mov	r6,r19
 8003440:	d8c03c15 	stw	r3,240(sp)
 8003444:	da003d15 	stw	r8,244(sp)
 8003448:	800434c0 	call	800434c <_dtoa_r>
 800344c:	1021883a 	mov	r16,r2
 8003450:	008019c4 	movi	r2,103
 8003454:	d8c03c17 	ldw	r3,240(sp)
 8003458:	da003d17 	ldw	r8,244(sp)
 800345c:	88817126 	beq	r17,r2,8003a24 <___vfprintf_internal_r+0x1cfc>
 8003460:	008011c4 	movi	r2,71
 8003464:	88829226 	beq	r17,r2,8003eb0 <___vfprintf_internal_r+0x2188>
 8003468:	80f9883a 	add	fp,r16,r3
 800346c:	d9003617 	ldw	r4,216(sp)
 8003470:	000d883a 	mov	r6,zero
 8003474:	000f883a 	mov	r7,zero
 8003478:	980b883a 	mov	r5,r19
 800347c:	da003d15 	stw	r8,244(sp)
 8003480:	800cf9c0 	call	800cf9c <__eqdf2>
 8003484:	da003d17 	ldw	r8,244(sp)
 8003488:	10018d26 	beq	r2,zero,8003ac0 <___vfprintf_internal_r+0x1d98>
 800348c:	d8802117 	ldw	r2,132(sp)
 8003490:	1700062e 	bgeu	r2,fp,80034ac <___vfprintf_internal_r+0x1784>
 8003494:	01000c04 	movi	r4,48
 8003498:	10c00044 	addi	r3,r2,1
 800349c:	d8c02115 	stw	r3,132(sp)
 80034a0:	11000005 	stb	r4,0(r2)
 80034a4:	d8802117 	ldw	r2,132(sp)
 80034a8:	173ffb36 	bltu	r2,fp,8003498 <___vfprintf_internal_r+0x1770>
 80034ac:	1405c83a 	sub	r2,r2,r16
 80034b0:	d8803315 	stw	r2,204(sp)
 80034b4:	008011c4 	movi	r2,71
 80034b8:	b0817626 	beq	r22,r2,8003a94 <___vfprintf_internal_r+0x1d6c>
 80034bc:	00801944 	movi	r2,101
 80034c0:	1442810e 	bge	r2,r17,8003ec8 <___vfprintf_internal_r+0x21a0>
 80034c4:	d8c02617 	ldw	r3,152(sp)
 80034c8:	00801984 	movi	r2,102
 80034cc:	d8c03215 	stw	r3,200(sp)
 80034d0:	8881fe26 	beq	r17,r2,8003ccc <___vfprintf_internal_r+0x1fa4>
 80034d4:	d8c03217 	ldw	r3,200(sp)
 80034d8:	d9003317 	ldw	r4,204(sp)
 80034dc:	1901dd16 	blt	r3,r4,8003c54 <___vfprintf_internal_r+0x1f2c>
 80034e0:	9480004c 	andi	r18,r18,1
 80034e4:	90022b1e 	bne	r18,zero,8003d94 <___vfprintf_internal_r+0x206c>
 80034e8:	1805883a 	mov	r2,r3
 80034ec:	18028016 	blt	r3,zero,8003ef0 <___vfprintf_internal_r+0x21c8>
 80034f0:	d8c03217 	ldw	r3,200(sp)
 80034f4:	044019c4 	movi	r17,103
 80034f8:	d8c02e15 	stw	r3,184(sp)
 80034fc:	df002a07 	ldb	fp,168(sp)
 8003500:	e001531e 	bne	fp,zero,8003a50 <___vfprintf_internal_r+0x1d28>
 8003504:	df002783 	ldbu	fp,158(sp)
 8003508:	d8802a15 	stw	r2,168(sp)
 800350c:	dc802b17 	ldw	r18,172(sp)
 8003510:	d8002915 	stw	zero,164(sp)
 8003514:	003bd106 	br	800245c <___vfprintf_internal_r+0x734>
 8003518:	d8802d17 	ldw	r2,180(sp)
 800351c:	d8c02d17 	ldw	r3,180(sp)
 8003520:	d9002d17 	ldw	r4,180(sp)
 8003524:	10800017 	ldw	r2,0(r2)
 8003528:	18c00117 	ldw	r3,4(r3)
 800352c:	21000204 	addi	r4,r4,8
 8003530:	d8803615 	stw	r2,216(sp)
 8003534:	d8c03815 	stw	r3,224(sp)
 8003538:	d9002d15 	stw	r4,180(sp)
 800353c:	003b7506 	br	8002314 <___vfprintf_internal_r+0x5ec>
 8003540:	ac400007 	ldb	r17,0(r21)
 8003544:	003a5906 	br	8001eac <___vfprintf_internal_r+0x184>
 8003548:	9080100c 	andi	r2,r18,64
 800354c:	1000a826 	beq	r2,zero,80037f0 <___vfprintf_internal_r+0x1ac8>
 8003550:	d9002d17 	ldw	r4,180(sp)
 8003554:	002d883a 	mov	r22,zero
 8003558:	24c0000b 	ldhu	r19,0(r4)
 800355c:	21000104 	addi	r4,r4,4
 8003560:	d9002d15 	stw	r4,180(sp)
 8003564:	003ccb06 	br	8002894 <___vfprintf_internal_r+0xb6c>
 8003568:	d8c02d17 	ldw	r3,180(sp)
 800356c:	d9002917 	ldw	r4,164(sp)
 8003570:	002d883a 	mov	r22,zero
 8003574:	18800104 	addi	r2,r3,4
 8003578:	1cc00017 	ldw	r19,0(r3)
 800357c:	203ebb0e 	bge	r4,zero,800306c <___vfprintf_internal_r+0x1344>
 8003580:	003ef106 	br	8003148 <___vfprintf_internal_r+0x1420>
 8003584:	9080040c 	andi	r2,r18,16
 8003588:	1000921e 	bne	r2,zero,80037d4 <___vfprintf_internal_r+0x1aac>
 800358c:	9480100c 	andi	r18,r18,64
 8003590:	90013926 	beq	r18,zero,8003a78 <___vfprintf_internal_r+0x1d50>
 8003594:	d9002d17 	ldw	r4,180(sp)
 8003598:	d9402f17 	ldw	r5,188(sp)
 800359c:	20800017 	ldw	r2,0(r4)
 80035a0:	21000104 	addi	r4,r4,4
 80035a4:	d9002d15 	stw	r4,180(sp)
 80035a8:	1140000d 	sth	r5,0(r2)
 80035ac:	003a1606 	br	8001e08 <___vfprintf_internal_r+0xe0>
 80035b0:	9080100c 	andi	r2,r18,64
 80035b4:	10008026 	beq	r2,zero,80037b8 <___vfprintf_internal_r+0x1a90>
 80035b8:	d8c02d17 	ldw	r3,180(sp)
 80035bc:	1cc0000f 	ldh	r19,0(r3)
 80035c0:	18c00104 	addi	r3,r3,4
 80035c4:	d8c02d15 	stw	r3,180(sp)
 80035c8:	982dd7fa 	srai	r22,r19,31
 80035cc:	b005883a 	mov	r2,r22
 80035d0:	003b1f06 	br	8002250 <___vfprintf_internal_r+0x528>
 80035d4:	9080100c 	andi	r2,r18,64
 80035d8:	d8002785 	stb	zero,158(sp)
 80035dc:	10008a1e 	bne	r2,zero,8003808 <___vfprintf_internal_r+0x1ae0>
 80035e0:	d9402d17 	ldw	r5,180(sp)
 80035e4:	d8c02917 	ldw	r3,164(sp)
 80035e8:	002d883a 	mov	r22,zero
 80035ec:	28800104 	addi	r2,r5,4
 80035f0:	2cc00017 	ldw	r19,0(r5)
 80035f4:	183e4b0e 	bge	r3,zero,8002f24 <___vfprintf_internal_r+0x11fc>
 80035f8:	9d86b03a 	or	r3,r19,r22
 80035fc:	d8802d15 	stw	r2,180(sp)
 8003600:	183e4c1e 	bne	r3,zero,8002f34 <___vfprintf_internal_r+0x120c>
 8003604:	0039883a 	mov	fp,zero
 8003608:	0005883a 	mov	r2,zero
 800360c:	003d4006 	br	8002b10 <___vfprintf_internal_r+0xde8>
 8003610:	01420074 	movhi	r5,2049
 8003614:	29437384 	addi	r5,r5,3534
 8003618:	d9402b15 	stw	r5,172(sp)
 800361c:	d9402b17 	ldw	r5,172(sp)
 8003620:	1c47883a 	add	r3,r3,r17
 8003624:	10800044 	addi	r2,r2,1
 8003628:	41400015 	stw	r5,0(r8)
 800362c:	44400115 	stw	r17,4(r8)
 8003630:	d8c02015 	stw	r3,128(sp)
 8003634:	d8801f15 	stw	r2,124(sp)
 8003638:	010001c4 	movi	r4,7
 800363c:	20bec816 	blt	r4,r2,8003160 <___vfprintf_internal_r+0x1438>
 8003640:	42000204 	addi	r8,r8,8
 8003644:	003ecd06 	br	800317c <___vfprintf_internal_r+0x1454>
 8003648:	d9002917 	ldw	r4,164(sp)
 800364c:	d8002785 	stb	zero,158(sp)
 8003650:	203d2d16 	blt	r4,zero,8002b08 <___vfprintf_internal_r+0xde0>
 8003654:	00bfdfc4 	movi	r2,-129
 8003658:	90a4703a 	and	r18,r18,r2
 800365c:	003a9106 	br	80020a4 <___vfprintf_internal_r+0x37c>
 8003660:	01020074 	movhi	r4,2049
 8003664:	21037384 	addi	r4,r4,3534
 8003668:	d9002b15 	stw	r4,172(sp)
 800366c:	003c0c06 	br	80026a0 <___vfprintf_internal_r+0x978>
 8003670:	d9002c17 	ldw	r4,176(sp)
 8003674:	d9801e04 	addi	r6,sp,120
 8003678:	b80b883a 	mov	r5,r23
 800367c:	80093240 	call	8009324 <__sprint_r>
 8003680:	103aab1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003684:	d8c02017 	ldw	r3,128(sp)
 8003688:	da000404 	addi	r8,sp,16
 800368c:	003d4106 	br	8002b94 <___vfprintf_internal_r+0xe6c>
 8003690:	d8801f17 	ldw	r2,124(sp)
 8003694:	01420074 	movhi	r5,2049
 8003698:	01000044 	movi	r4,1
 800369c:	18c00044 	addi	r3,r3,1
 80036a0:	10800044 	addi	r2,r2,1
 80036a4:	29437304 	addi	r5,r5,3532
 80036a8:	41000115 	stw	r4,4(r8)
 80036ac:	41400015 	stw	r5,0(r8)
 80036b0:	d8c02015 	stw	r3,128(sp)
 80036b4:	d8801f15 	stw	r2,124(sp)
 80036b8:	010001c4 	movi	r4,7
 80036bc:	20805c16 	blt	r4,r2,8003830 <___vfprintf_internal_r+0x1b08>
 80036c0:	42000204 	addi	r8,r8,8
 80036c4:	8800041e 	bne	r17,zero,80036d8 <___vfprintf_internal_r+0x19b0>
 80036c8:	d8803317 	ldw	r2,204(sp)
 80036cc:	1000021e 	bne	r2,zero,80036d8 <___vfprintf_internal_r+0x19b0>
 80036d0:	9080004c 	andi	r2,r18,1
 80036d4:	103c0926 	beq	r2,zero,80026fc <___vfprintf_internal_r+0x9d4>
 80036d8:	d9003717 	ldw	r4,220(sp)
 80036dc:	d8801f17 	ldw	r2,124(sp)
 80036e0:	d9403417 	ldw	r5,208(sp)
 80036e4:	20c7883a 	add	r3,r4,r3
 80036e8:	10800044 	addi	r2,r2,1
 80036ec:	41000115 	stw	r4,4(r8)
 80036f0:	41400015 	stw	r5,0(r8)
 80036f4:	d8c02015 	stw	r3,128(sp)
 80036f8:	d8801f15 	stw	r2,124(sp)
 80036fc:	010001c4 	movi	r4,7
 8003700:	20812116 	blt	r4,r2,8003b88 <___vfprintf_internal_r+0x1e60>
 8003704:	42000204 	addi	r8,r8,8
 8003708:	0463c83a 	sub	r17,zero,r17
 800370c:	0440730e 	bge	zero,r17,80038dc <___vfprintf_internal_r+0x1bb4>
 8003710:	05800404 	movi	r22,16
 8003714:	b440860e 	bge	r22,r17,8003930 <___vfprintf_internal_r+0x1c08>
 8003718:	01420074 	movhi	r5,2049
 800371c:	29437384 	addi	r5,r5,3534
 8003720:	d9402b15 	stw	r5,172(sp)
 8003724:	070001c4 	movi	fp,7
 8003728:	dcc02c17 	ldw	r19,176(sp)
 800372c:	00000306 	br	800373c <___vfprintf_internal_r+0x1a14>
 8003730:	42000204 	addi	r8,r8,8
 8003734:	8c7ffc04 	addi	r17,r17,-16
 8003738:	b440800e 	bge	r22,r17,800393c <___vfprintf_internal_r+0x1c14>
 800373c:	18c00404 	addi	r3,r3,16
 8003740:	10800044 	addi	r2,r2,1
 8003744:	45000015 	stw	r20,0(r8)
 8003748:	45800115 	stw	r22,4(r8)
 800374c:	d8c02015 	stw	r3,128(sp)
 8003750:	d8801f15 	stw	r2,124(sp)
 8003754:	e0bff60e 	bge	fp,r2,8003730 <___vfprintf_internal_r+0x1a08>
 8003758:	d9801e04 	addi	r6,sp,120
 800375c:	b80b883a 	mov	r5,r23
 8003760:	9809883a 	mov	r4,r19
 8003764:	80093240 	call	8009324 <__sprint_r>
 8003768:	103a711e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 800376c:	d8c02017 	ldw	r3,128(sp)
 8003770:	d8801f17 	ldw	r2,124(sp)
 8003774:	da000404 	addi	r8,sp,16
 8003778:	003fee06 	br	8003734 <___vfprintf_internal_r+0x1a0c>
 800377c:	00bfffc4 	movi	r2,-1
 8003780:	003a6f06 	br	8002140 <___vfprintf_internal_r+0x418>
 8003784:	008011c4 	movi	r2,71
 8003788:	1440b816 	blt	r2,r17,8003a6c <___vfprintf_internal_r+0x1d44>
 800378c:	04020074 	movhi	r16,2049
 8003790:	84036504 	addi	r16,r16,3476
 8003794:	00c000c4 	movi	r3,3
 8003798:	00bfdfc4 	movi	r2,-129
 800379c:	d8c02a15 	stw	r3,168(sp)
 80037a0:	90a4703a 	and	r18,r18,r2
 80037a4:	df002783 	ldbu	fp,158(sp)
 80037a8:	d8c02e15 	stw	r3,184(sp)
 80037ac:	d8002915 	stw	zero,164(sp)
 80037b0:	d8003215 	stw	zero,200(sp)
 80037b4:	003b2906 	br	800245c <___vfprintf_internal_r+0x734>
 80037b8:	d9002d17 	ldw	r4,180(sp)
 80037bc:	24c00017 	ldw	r19,0(r4)
 80037c0:	21000104 	addi	r4,r4,4
 80037c4:	d9002d15 	stw	r4,180(sp)
 80037c8:	982dd7fa 	srai	r22,r19,31
 80037cc:	b005883a 	mov	r2,r22
 80037d0:	003a9f06 	br	8002250 <___vfprintf_internal_r+0x528>
 80037d4:	d9402d17 	ldw	r5,180(sp)
 80037d8:	d8c02f17 	ldw	r3,188(sp)
 80037dc:	28800017 	ldw	r2,0(r5)
 80037e0:	29400104 	addi	r5,r5,4
 80037e4:	d9402d15 	stw	r5,180(sp)
 80037e8:	10c00015 	stw	r3,0(r2)
 80037ec:	00398606 	br	8001e08 <___vfprintf_internal_r+0xe0>
 80037f0:	d9402d17 	ldw	r5,180(sp)
 80037f4:	002d883a 	mov	r22,zero
 80037f8:	2cc00017 	ldw	r19,0(r5)
 80037fc:	29400104 	addi	r5,r5,4
 8003800:	d9402d15 	stw	r5,180(sp)
 8003804:	003c2306 	br	8002894 <___vfprintf_internal_r+0xb6c>
 8003808:	d8c02d17 	ldw	r3,180(sp)
 800380c:	d9002917 	ldw	r4,164(sp)
 8003810:	002d883a 	mov	r22,zero
 8003814:	18800104 	addi	r2,r3,4
 8003818:	1cc0000b 	ldhu	r19,0(r3)
 800381c:	203dc10e 	bge	r4,zero,8002f24 <___vfprintf_internal_r+0x11fc>
 8003820:	003f7506 	br	80035f8 <___vfprintf_internal_r+0x18d0>
 8003824:	04020074 	movhi	r16,2049
 8003828:	84036304 	addi	r16,r16,3468
 800382c:	003acc06 	br	8002360 <___vfprintf_internal_r+0x638>
 8003830:	d9002c17 	ldw	r4,176(sp)
 8003834:	d9801e04 	addi	r6,sp,120
 8003838:	b80b883a 	mov	r5,r23
 800383c:	80093240 	call	8009324 <__sprint_r>
 8003840:	103a3b1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003844:	dc402617 	ldw	r17,152(sp)
 8003848:	d8c02017 	ldw	r3,128(sp)
 800384c:	da000404 	addi	r8,sp,16
 8003850:	003f9c06 	br	80036c4 <___vfprintf_internal_r+0x199c>
 8003854:	ac400043 	ldbu	r17,1(r21)
 8003858:	94800814 	ori	r18,r18,32
 800385c:	ad400044 	addi	r21,r21,1
 8003860:	8c403fcc 	andi	r17,r17,255
 8003864:	8c40201c 	xori	r17,r17,128
 8003868:	8c7fe004 	addi	r17,r17,-128
 800386c:	00398f06 	br	8001eac <___vfprintf_internal_r+0x184>
 8003870:	d8c02d15 	stw	r3,180(sp)
 8003874:	0039883a 	mov	fp,zero
 8003878:	003e3506 	br	8003150 <___vfprintf_internal_r+0x1428>
 800387c:	d9002c17 	ldw	r4,176(sp)
 8003880:	d9801e04 	addi	r6,sp,120
 8003884:	b80b883a 	mov	r5,r23
 8003888:	80093240 	call	8009324 <__sprint_r>
 800388c:	103a281e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003890:	d8c02017 	ldw	r3,128(sp)
 8003894:	da000404 	addi	r8,sp,16
 8003898:	003cd006 	br	8002bdc <___vfprintf_internal_r+0xeb4>
 800389c:	8009883a 	mov	r4,r16
 80038a0:	da003d15 	stw	r8,244(sp)
 80038a4:	8001c900 	call	8001c90 <strlen>
 80038a8:	d8802e15 	stw	r2,184(sp)
 80038ac:	da003d17 	ldw	r8,244(sp)
 80038b0:	103c340e 	bge	r2,zero,8002984 <___vfprintf_internal_r+0xc5c>
 80038b4:	0005883a 	mov	r2,zero
 80038b8:	003c3206 	br	8002984 <___vfprintf_internal_r+0xc5c>
 80038bc:	d9002c17 	ldw	r4,176(sp)
 80038c0:	d9801e04 	addi	r6,sp,120
 80038c4:	b80b883a 	mov	r5,r23
 80038c8:	80093240 	call	8009324 <__sprint_r>
 80038cc:	103a181e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 80038d0:	d8c02017 	ldw	r3,128(sp)
 80038d4:	d8801f17 	ldw	r2,124(sp)
 80038d8:	da000404 	addi	r8,sp,16
 80038dc:	d9403317 	ldw	r5,204(sp)
 80038e0:	10800044 	addi	r2,r2,1
 80038e4:	44000015 	stw	r16,0(r8)
 80038e8:	28c7883a 	add	r3,r5,r3
 80038ec:	003b7d06 	br	80026e4 <___vfprintf_internal_r+0x9bc>
 80038f0:	01020074 	movhi	r4,2049
 80038f4:	21037784 	addi	r4,r4,3550
 80038f8:	d9003515 	stw	r4,212(sp)
 80038fc:	003b1406 	br	8002550 <___vfprintf_internal_r+0x828>
 8003900:	013fffc4 	movi	r4,-1
 8003904:	003a3506 	br	80021dc <___vfprintf_internal_r+0x4b4>
 8003908:	0023883a 	mov	r17,zero
 800390c:	003d9d06 	br	8002f84 <___vfprintf_internal_r+0x125c>
 8003910:	d9002c17 	ldw	r4,176(sp)
 8003914:	d9801e04 	addi	r6,sp,120
 8003918:	b80b883a 	mov	r5,r23
 800391c:	80093240 	call	8009324 <__sprint_r>
 8003920:	103a031e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003924:	d8c02017 	ldw	r3,128(sp)
 8003928:	da000404 	addi	r8,sp,16
 800392c:	003d9406 	br	8002f80 <___vfprintf_internal_r+0x1258>
 8003930:	01020074 	movhi	r4,2049
 8003934:	21037384 	addi	r4,r4,3534
 8003938:	d9002b15 	stw	r4,172(sp)
 800393c:	d9002b17 	ldw	r4,172(sp)
 8003940:	1c47883a 	add	r3,r3,r17
 8003944:	10800044 	addi	r2,r2,1
 8003948:	41000015 	stw	r4,0(r8)
 800394c:	44400115 	stw	r17,4(r8)
 8003950:	d8c02015 	stw	r3,128(sp)
 8003954:	d8801f15 	stw	r2,124(sp)
 8003958:	010001c4 	movi	r4,7
 800395c:	20bfd716 	blt	r4,r2,80038bc <___vfprintf_internal_r+0x1b94>
 8003960:	42000204 	addi	r8,r8,8
 8003964:	003fdd06 	br	80038dc <___vfprintf_internal_r+0x1bb4>
 8003968:	d9002c17 	ldw	r4,176(sp)
 800396c:	d9801e04 	addi	r6,sp,120
 8003970:	b80b883a 	mov	r5,r23
 8003974:	80093240 	call	8009324 <__sprint_r>
 8003978:	1039ed1e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 800397c:	d8802617 	ldw	r2,152(sp)
 8003980:	d8c02017 	ldw	r3,128(sp)
 8003984:	da000404 	addi	r8,sp,16
 8003988:	003e1006 	br	80031cc <___vfprintf_internal_r+0x14a4>
 800398c:	00800044 	movi	r2,1
 8003990:	10803fcc 	andi	r2,r2,255
 8003994:	00c00044 	movi	r3,1
 8003998:	10fa3526 	beq	r2,r3,8002270 <___vfprintf_internal_r+0x548>
 800399c:	00c00084 	movi	r3,2
 80039a0:	10fbcb26 	beq	r2,r3,80028d0 <___vfprintf_internal_r+0xba8>
 80039a4:	003a8f06 	br	80023e4 <___vfprintf_internal_r+0x6bc>
 80039a8:	01020074 	movhi	r4,2049
 80039ac:	21037784 	addi	r4,r4,3550
 80039b0:	d9003515 	stw	r4,212(sp)
 80039b4:	003b7606 	br	8002790 <___vfprintf_internal_r+0xa68>
 80039b8:	d8802917 	ldw	r2,164(sp)
 80039bc:	00c00184 	movi	r3,6
 80039c0:	1880012e 	bgeu	r3,r2,80039c8 <___vfprintf_internal_r+0x1ca0>
 80039c4:	1805883a 	mov	r2,r3
 80039c8:	d8802e15 	stw	r2,184(sp)
 80039cc:	1000ef16 	blt	r2,zero,8003d8c <___vfprintf_internal_r+0x2064>
 80039d0:	04020074 	movhi	r16,2049
 80039d4:	d8802a15 	stw	r2,168(sp)
 80039d8:	dcc02d15 	stw	r19,180(sp)
 80039dc:	d8002915 	stw	zero,164(sp)
 80039e0:	d8003215 	stw	zero,200(sp)
 80039e4:	84037104 	addi	r16,r16,3524
 80039e8:	0039883a 	mov	fp,zero
 80039ec:	003aa206 	br	8002478 <___vfprintf_internal_r+0x750>
 80039f0:	0021883a 	mov	r16,zero
 80039f4:	003e0706 	br	8003214 <___vfprintf_internal_r+0x14ec>
 80039f8:	d9002c17 	ldw	r4,176(sp)
 80039fc:	d9801e04 	addi	r6,sp,120
 8003a00:	b80b883a 	mov	r5,r23
 8003a04:	80093240 	call	8009324 <__sprint_r>
 8003a08:	1039c91e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003a0c:	d8802617 	ldw	r2,152(sp)
 8003a10:	d9403317 	ldw	r5,204(sp)
 8003a14:	d8c02017 	ldw	r3,128(sp)
 8003a18:	da000404 	addi	r8,sp,16
 8003a1c:	2885c83a 	sub	r2,r5,r2
 8003a20:	003dfb06 	br	8003210 <___vfprintf_internal_r+0x14e8>
 8003a24:	9080004c 	andi	r2,r18,1
 8003a28:	103e8f1e 	bne	r2,zero,8003468 <___vfprintf_internal_r+0x1740>
 8003a2c:	d8802117 	ldw	r2,132(sp)
 8003a30:	003e9e06 	br	80034ac <___vfprintf_internal_r+0x1784>
 8003a34:	1025883a 	mov	r18,r2
 8003a38:	0039883a 	mov	fp,zero
 8003a3c:	00800084 	movi	r2,2
 8003a40:	003fd306 	br	8003990 <___vfprintf_internal_r+0x1c68>
 8003a44:	07000b44 	movi	fp,45
 8003a48:	df002785 	stb	fp,158(sp)
 8003a4c:	003a4006 	br	8002350 <___vfprintf_internal_r+0x628>
 8003a50:	00c00b44 	movi	r3,45
 8003a54:	d8c02785 	stb	r3,158(sp)
 8003a58:	d8802a15 	stw	r2,168(sp)
 8003a5c:	dc802b17 	ldw	r18,172(sp)
 8003a60:	d8002915 	stw	zero,164(sp)
 8003a64:	07000b44 	movi	fp,45
 8003a68:	003a8006 	br	800246c <___vfprintf_internal_r+0x744>
 8003a6c:	04020074 	movhi	r16,2049
 8003a70:	84036604 	addi	r16,r16,3480
 8003a74:	003f4706 	br	8003794 <___vfprintf_internal_r+0x1a6c>
 8003a78:	d8c02d17 	ldw	r3,180(sp)
 8003a7c:	d9002f17 	ldw	r4,188(sp)
 8003a80:	18800017 	ldw	r2,0(r3)
 8003a84:	18c00104 	addi	r3,r3,4
 8003a88:	d8c02d15 	stw	r3,180(sp)
 8003a8c:	11000015 	stw	r4,0(r2)
 8003a90:	0038dd06 	br	8001e08 <___vfprintf_internal_r+0xe0>
 8003a94:	dd802617 	ldw	r22,152(sp)
 8003a98:	00bfff44 	movi	r2,-3
 8003a9c:	b0801c16 	blt	r22,r2,8003b10 <___vfprintf_internal_r+0x1de8>
 8003aa0:	d9402917 	ldw	r5,164(sp)
 8003aa4:	2d801a16 	blt	r5,r22,8003b10 <___vfprintf_internal_r+0x1de8>
 8003aa8:	dd803215 	stw	r22,200(sp)
 8003aac:	003e8906 	br	80034d4 <___vfprintf_internal_r+0x17ac>
 8003ab0:	01020074 	movhi	r4,2049
 8003ab4:	21037384 	addi	r4,r4,3534
 8003ab8:	d9002b15 	stw	r4,172(sp)
 8003abc:	003c9106 	br	8002d04 <___vfprintf_internal_r+0xfdc>
 8003ac0:	e005883a 	mov	r2,fp
 8003ac4:	003e7906 	br	80034ac <___vfprintf_internal_r+0x1784>
 8003ac8:	d9402917 	ldw	r5,164(sp)
 8003acc:	df002783 	ldbu	fp,158(sp)
 8003ad0:	dcc02d15 	stw	r19,180(sp)
 8003ad4:	d9402a15 	stw	r5,168(sp)
 8003ad8:	d9402e15 	stw	r5,184(sp)
 8003adc:	d8002915 	stw	zero,164(sp)
 8003ae0:	d8003215 	stw	zero,200(sp)
 8003ae4:	003a5d06 	br	800245c <___vfprintf_internal_r+0x734>
 8003ae8:	9080004c 	andi	r2,r18,1
 8003aec:	0039883a 	mov	fp,zero
 8003af0:	10000426 	beq	r2,zero,8003b04 <___vfprintf_internal_r+0x1ddc>
 8003af4:	00800c04 	movi	r2,48
 8003af8:	dc001dc4 	addi	r16,sp,119
 8003afc:	d8801dc5 	stb	r2,119(sp)
 8003b00:	003b8006 	br	8002904 <___vfprintf_internal_r+0xbdc>
 8003b04:	d8002e15 	stw	zero,184(sp)
 8003b08:	dc001e04 	addi	r16,sp,120
 8003b0c:	003a4d06 	br	8002444 <___vfprintf_internal_r+0x71c>
 8003b10:	8c7fff84 	addi	r17,r17,-2
 8003b14:	b5bfffc4 	addi	r22,r22,-1
 8003b18:	dd802615 	stw	r22,152(sp)
 8003b1c:	dc4022c5 	stb	r17,139(sp)
 8003b20:	b000bf16 	blt	r22,zero,8003e20 <___vfprintf_internal_r+0x20f8>
 8003b24:	00800ac4 	movi	r2,43
 8003b28:	d8802305 	stb	r2,140(sp)
 8003b2c:	00800244 	movi	r2,9
 8003b30:	15807016 	blt	r2,r22,8003cf4 <___vfprintf_internal_r+0x1fcc>
 8003b34:	00800c04 	movi	r2,48
 8003b38:	b5800c04 	addi	r22,r22,48
 8003b3c:	d8802345 	stb	r2,141(sp)
 8003b40:	dd802385 	stb	r22,142(sp)
 8003b44:	d88023c4 	addi	r2,sp,143
 8003b48:	df0022c4 	addi	fp,sp,139
 8003b4c:	d8c03317 	ldw	r3,204(sp)
 8003b50:	1739c83a 	sub	fp,r2,fp
 8003b54:	d9003317 	ldw	r4,204(sp)
 8003b58:	e0c7883a 	add	r3,fp,r3
 8003b5c:	df003a15 	stw	fp,232(sp)
 8003b60:	d8c02e15 	stw	r3,184(sp)
 8003b64:	00800044 	movi	r2,1
 8003b68:	1100b30e 	bge	r2,r4,8003e38 <___vfprintf_internal_r+0x2110>
 8003b6c:	d8c02e17 	ldw	r3,184(sp)
 8003b70:	18c00044 	addi	r3,r3,1
 8003b74:	d8c02e15 	stw	r3,184(sp)
 8003b78:	1805883a 	mov	r2,r3
 8003b7c:	1800ac16 	blt	r3,zero,8003e30 <___vfprintf_internal_r+0x2108>
 8003b80:	d8003215 	stw	zero,200(sp)
 8003b84:	003e5d06 	br	80034fc <___vfprintf_internal_r+0x17d4>
 8003b88:	d9002c17 	ldw	r4,176(sp)
 8003b8c:	d9801e04 	addi	r6,sp,120
 8003b90:	b80b883a 	mov	r5,r23
 8003b94:	80093240 	call	8009324 <__sprint_r>
 8003b98:	1039651e 	bne	r2,zero,8002130 <___vfprintf_internal_r+0x408>
 8003b9c:	dc402617 	ldw	r17,152(sp)
 8003ba0:	d8c02017 	ldw	r3,128(sp)
 8003ba4:	d8801f17 	ldw	r2,124(sp)
 8003ba8:	da000404 	addi	r8,sp,16
 8003bac:	003ed606 	br	8003708 <___vfprintf_internal_r+0x19e0>
 8003bb0:	582b883a 	mov	r21,r11
 8003bb4:	d8002915 	stw	zero,164(sp)
 8003bb8:	0038bd06 	br	8001eb0 <___vfprintf_internal_r+0x188>
 8003bbc:	d8802917 	ldw	r2,164(sp)
 8003bc0:	103e071e 	bne	r2,zero,80033e0 <___vfprintf_internal_r+0x16b8>
 8003bc4:	dc002915 	stw	r16,164(sp)
 8003bc8:	003e0506 	br	80033e0 <___vfprintf_internal_r+0x16b8>
 8003bcc:	d9002917 	ldw	r4,164(sp)
 8003bd0:	20c00044 	addi	r3,r4,1
 8003bd4:	003e0f06 	br	8003414 <___vfprintf_internal_r+0x16ec>
 8003bd8:	01400184 	movi	r5,6
 8003bdc:	d9402915 	stw	r5,164(sp)
 8003be0:	003dff06 	br	80033e0 <___vfprintf_internal_r+0x16b8>
 8003be4:	d8802104 	addi	r2,sp,132
 8003be8:	d8800315 	stw	r2,12(sp)
 8003bec:	d8802504 	addi	r2,sp,148
 8003bf0:	d8800215 	stw	r2,8(sp)
 8003bf4:	d8802604 	addi	r2,sp,152
 8003bf8:	d8800115 	stw	r2,4(sp)
 8003bfc:	d8802917 	ldw	r2,164(sp)
 8003c00:	d9403617 	ldw	r5,216(sp)
 8003c04:	d9002c17 	ldw	r4,176(sp)
 8003c08:	d8800015 	stw	r2,0(sp)
 8003c0c:	01c000c4 	movi	r7,3
 8003c10:	980d883a 	mov	r6,r19
 8003c14:	da003d15 	stw	r8,244(sp)
 8003c18:	800434c0 	call	800434c <_dtoa_r>
 8003c1c:	d8c02917 	ldw	r3,164(sp)
 8003c20:	da003d17 	ldw	r8,244(sp)
 8003c24:	1021883a 	mov	r16,r2
 8003c28:	10f9883a 	add	fp,r2,r3
 8003c2c:	81000007 	ldb	r4,0(r16)
 8003c30:	00800c04 	movi	r2,48
 8003c34:	20805e26 	beq	r4,r2,8003db0 <___vfprintf_internal_r+0x2088>
 8003c38:	d8c02617 	ldw	r3,152(sp)
 8003c3c:	e0f9883a 	add	fp,fp,r3
 8003c40:	003e0a06 	br	800346c <___vfprintf_internal_r+0x1744>
 8003c44:	00c00b44 	movi	r3,45
 8003c48:	24e0003c 	xorhi	r19,r4,32768
 8003c4c:	d8c02a05 	stb	r3,168(sp)
 8003c50:	003de906 	br	80033f8 <___vfprintf_internal_r+0x16d0>
 8003c54:	d8c03217 	ldw	r3,200(sp)
 8003c58:	00c07a0e 	bge	zero,r3,8003e44 <___vfprintf_internal_r+0x211c>
 8003c5c:	00800044 	movi	r2,1
 8003c60:	d9003317 	ldw	r4,204(sp)
 8003c64:	1105883a 	add	r2,r2,r4
 8003c68:	d8802e15 	stw	r2,184(sp)
 8003c6c:	10004e16 	blt	r2,zero,8003da8 <___vfprintf_internal_r+0x2080>
 8003c70:	044019c4 	movi	r17,103
 8003c74:	003e2106 	br	80034fc <___vfprintf_internal_r+0x17d4>
 8003c78:	d9002917 	ldw	r4,164(sp)
 8003c7c:	d8802104 	addi	r2,sp,132
 8003c80:	d8800315 	stw	r2,12(sp)
 8003c84:	d9000015 	stw	r4,0(sp)
 8003c88:	d8802504 	addi	r2,sp,148
 8003c8c:	d9403617 	ldw	r5,216(sp)
 8003c90:	d9002c17 	ldw	r4,176(sp)
 8003c94:	d8800215 	stw	r2,8(sp)
 8003c98:	d8802604 	addi	r2,sp,152
 8003c9c:	d8800115 	stw	r2,4(sp)
 8003ca0:	01c000c4 	movi	r7,3
 8003ca4:	980d883a 	mov	r6,r19
 8003ca8:	da003d15 	stw	r8,244(sp)
 8003cac:	800434c0 	call	800434c <_dtoa_r>
 8003cb0:	d8c02917 	ldw	r3,164(sp)
 8003cb4:	da003d17 	ldw	r8,244(sp)
 8003cb8:	1021883a 	mov	r16,r2
 8003cbc:	00801184 	movi	r2,70
 8003cc0:	80f9883a 	add	fp,r16,r3
 8003cc4:	88bfd926 	beq	r17,r2,8003c2c <___vfprintf_internal_r+0x1f04>
 8003cc8:	003de806 	br	800346c <___vfprintf_internal_r+0x1744>
 8003ccc:	d9002917 	ldw	r4,164(sp)
 8003cd0:	00c04d0e 	bge	zero,r3,8003e08 <___vfprintf_internal_r+0x20e0>
 8003cd4:	2000441e 	bne	r4,zero,8003de8 <___vfprintf_internal_r+0x20c0>
 8003cd8:	9480004c 	andi	r18,r18,1
 8003cdc:	9000421e 	bne	r18,zero,8003de8 <___vfprintf_internal_r+0x20c0>
 8003ce0:	1805883a 	mov	r2,r3
 8003ce4:	18007016 	blt	r3,zero,8003ea8 <___vfprintf_internal_r+0x2180>
 8003ce8:	d8c03217 	ldw	r3,200(sp)
 8003cec:	d8c02e15 	stw	r3,184(sp)
 8003cf0:	003e0206 	br	80034fc <___vfprintf_internal_r+0x17d4>
 8003cf4:	df0022c4 	addi	fp,sp,139
 8003cf8:	dc002915 	stw	r16,164(sp)
 8003cfc:	4027883a 	mov	r19,r8
 8003d00:	e021883a 	mov	r16,fp
 8003d04:	b009883a 	mov	r4,r22
 8003d08:	01400284 	movi	r5,10
 8003d0c:	800bcd80 	call	800bcd8 <__modsi3>
 8003d10:	10800c04 	addi	r2,r2,48
 8003d14:	843fffc4 	addi	r16,r16,-1
 8003d18:	b009883a 	mov	r4,r22
 8003d1c:	01400284 	movi	r5,10
 8003d20:	80800005 	stb	r2,0(r16)
 8003d24:	800bc540 	call	800bc54 <__divsi3>
 8003d28:	102d883a 	mov	r22,r2
 8003d2c:	00800244 	movi	r2,9
 8003d30:	15bff416 	blt	r2,r22,8003d04 <___vfprintf_internal_r+0x1fdc>
 8003d34:	9811883a 	mov	r8,r19
 8003d38:	b0800c04 	addi	r2,r22,48
 8003d3c:	8027883a 	mov	r19,r16
 8003d40:	997fffc4 	addi	r5,r19,-1
 8003d44:	98bfffc5 	stb	r2,-1(r19)
 8003d48:	dc002917 	ldw	r16,164(sp)
 8003d4c:	2f006a2e 	bgeu	r5,fp,8003ef8 <___vfprintf_internal_r+0x21d0>
 8003d50:	d9c02384 	addi	r7,sp,142
 8003d54:	3ccfc83a 	sub	r7,r7,r19
 8003d58:	d9002344 	addi	r4,sp,141
 8003d5c:	e1cf883a 	add	r7,fp,r7
 8003d60:	00000106 	br	8003d68 <___vfprintf_internal_r+0x2040>
 8003d64:	28800003 	ldbu	r2,0(r5)
 8003d68:	20800005 	stb	r2,0(r4)
 8003d6c:	21000044 	addi	r4,r4,1
 8003d70:	29400044 	addi	r5,r5,1
 8003d74:	393ffb1e 	bne	r7,r4,8003d64 <___vfprintf_internal_r+0x203c>
 8003d78:	d8802304 	addi	r2,sp,140
 8003d7c:	14c5c83a 	sub	r2,r2,r19
 8003d80:	d8c02344 	addi	r3,sp,141
 8003d84:	1885883a 	add	r2,r3,r2
 8003d88:	003f7006 	br	8003b4c <___vfprintf_internal_r+0x1e24>
 8003d8c:	0005883a 	mov	r2,zero
 8003d90:	003f0f06 	br	80039d0 <___vfprintf_internal_r+0x1ca8>
 8003d94:	d8c03217 	ldw	r3,200(sp)
 8003d98:	18c00044 	addi	r3,r3,1
 8003d9c:	d8c02e15 	stw	r3,184(sp)
 8003da0:	1805883a 	mov	r2,r3
 8003da4:	183fb20e 	bge	r3,zero,8003c70 <___vfprintf_internal_r+0x1f48>
 8003da8:	0005883a 	mov	r2,zero
 8003dac:	003fb006 	br	8003c70 <___vfprintf_internal_r+0x1f48>
 8003db0:	d9003617 	ldw	r4,216(sp)
 8003db4:	000d883a 	mov	r6,zero
 8003db8:	000f883a 	mov	r7,zero
 8003dbc:	980b883a 	mov	r5,r19
 8003dc0:	d8c03c15 	stw	r3,240(sp)
 8003dc4:	da003d15 	stw	r8,244(sp)
 8003dc8:	800cf9c0 	call	800cf9c <__eqdf2>
 8003dcc:	d8c03c17 	ldw	r3,240(sp)
 8003dd0:	da003d17 	ldw	r8,244(sp)
 8003dd4:	103f9826 	beq	r2,zero,8003c38 <___vfprintf_internal_r+0x1f10>
 8003dd8:	00800044 	movi	r2,1
 8003ddc:	10c7c83a 	sub	r3,r2,r3
 8003de0:	d8c02615 	stw	r3,152(sp)
 8003de4:	003f9506 	br	8003c3c <___vfprintf_internal_r+0x1f14>
 8003de8:	d9002917 	ldw	r4,164(sp)
 8003dec:	d8c03217 	ldw	r3,200(sp)
 8003df0:	20800044 	addi	r2,r4,1
 8003df4:	1885883a 	add	r2,r3,r2
 8003df8:	d8802e15 	stw	r2,184(sp)
 8003dfc:	103dbf0e 	bge	r2,zero,80034fc <___vfprintf_internal_r+0x17d4>
 8003e00:	0005883a 	mov	r2,zero
 8003e04:	003dbd06 	br	80034fc <___vfprintf_internal_r+0x17d4>
 8003e08:	2000211e 	bne	r4,zero,8003e90 <___vfprintf_internal_r+0x2168>
 8003e0c:	9480004c 	andi	r18,r18,1
 8003e10:	90001f1e 	bne	r18,zero,8003e90 <___vfprintf_internal_r+0x2168>
 8003e14:	00800044 	movi	r2,1
 8003e18:	d8802e15 	stw	r2,184(sp)
 8003e1c:	003db706 	br	80034fc <___vfprintf_internal_r+0x17d4>
 8003e20:	00800b44 	movi	r2,45
 8003e24:	05adc83a 	sub	r22,zero,r22
 8003e28:	d8802305 	stb	r2,140(sp)
 8003e2c:	003f3f06 	br	8003b2c <___vfprintf_internal_r+0x1e04>
 8003e30:	0005883a 	mov	r2,zero
 8003e34:	003f5206 	br	8003b80 <___vfprintf_internal_r+0x1e58>
 8003e38:	90a4703a 	and	r18,r18,r2
 8003e3c:	903f4e26 	beq	r18,zero,8003b78 <___vfprintf_internal_r+0x1e50>
 8003e40:	003f4a06 	br	8003b6c <___vfprintf_internal_r+0x1e44>
 8003e44:	00800084 	movi	r2,2
 8003e48:	10c5c83a 	sub	r2,r2,r3
 8003e4c:	003f8406 	br	8003c60 <___vfprintf_internal_r+0x1f38>
 8003e50:	d8802d17 	ldw	r2,180(sp)
 8003e54:	d9002d17 	ldw	r4,180(sp)
 8003e58:	ac400043 	ldbu	r17,1(r21)
 8003e5c:	10800017 	ldw	r2,0(r2)
 8003e60:	582b883a 	mov	r21,r11
 8003e64:	d8802915 	stw	r2,164(sp)
 8003e68:	20800104 	addi	r2,r4,4
 8003e6c:	d9002917 	ldw	r4,164(sp)
 8003e70:	d8802d15 	stw	r2,180(sp)
 8003e74:	203e7a0e 	bge	r4,zero,8003860 <___vfprintf_internal_r+0x1b38>
 8003e78:	8c403fcc 	andi	r17,r17,255
 8003e7c:	00bfffc4 	movi	r2,-1
 8003e80:	8c40201c 	xori	r17,r17,128
 8003e84:	d8802915 	stw	r2,164(sp)
 8003e88:	8c7fe004 	addi	r17,r17,-128
 8003e8c:	00380706 	br	8001eac <___vfprintf_internal_r+0x184>
 8003e90:	d8c02917 	ldw	r3,164(sp)
 8003e94:	18c00084 	addi	r3,r3,2
 8003e98:	d8c02e15 	stw	r3,184(sp)
 8003e9c:	1805883a 	mov	r2,r3
 8003ea0:	183d960e 	bge	r3,zero,80034fc <___vfprintf_internal_r+0x17d4>
 8003ea4:	003fd606 	br	8003e00 <___vfprintf_internal_r+0x20d8>
 8003ea8:	0005883a 	mov	r2,zero
 8003eac:	003f8e06 	br	8003ce8 <___vfprintf_internal_r+0x1fc0>
 8003eb0:	9080004c 	andi	r2,r18,1
 8003eb4:	103f811e 	bne	r2,zero,8003cbc <___vfprintf_internal_r+0x1f94>
 8003eb8:	d8802117 	ldw	r2,132(sp)
 8003ebc:	1405c83a 	sub	r2,r2,r16
 8003ec0:	d8803315 	stw	r2,204(sp)
 8003ec4:	b47ef326 	beq	r22,r17,8003a94 <___vfprintf_internal_r+0x1d6c>
 8003ec8:	dd802617 	ldw	r22,152(sp)
 8003ecc:	003f1106 	br	8003b14 <___vfprintf_internal_r+0x1dec>
 8003ed0:	d9c02785 	stb	r7,158(sp)
 8003ed4:	00390406 	br	80022e8 <___vfprintf_internal_r+0x5c0>
 8003ed8:	d9c02785 	stb	r7,158(sp)
 8003edc:	0038d306 	br	800222c <___vfprintf_internal_r+0x504>
 8003ee0:	d9c02785 	stb	r7,158(sp)
 8003ee4:	003a6106 	br	800286c <___vfprintf_internal_r+0xb44>
 8003ee8:	d9c02785 	stb	r7,158(sp)
 8003eec:	003af806 	br	8002ad0 <___vfprintf_internal_r+0xda8>
 8003ef0:	0005883a 	mov	r2,zero
 8003ef4:	003d7e06 	br	80034f0 <___vfprintf_internal_r+0x17c8>
 8003ef8:	d8802344 	addi	r2,sp,141
 8003efc:	003f1306 	br	8003b4c <___vfprintf_internal_r+0x1e24>
 8003f00:	d9c02785 	stb	r7,158(sp)
 8003f04:	00392306 	br	8002394 <___vfprintf_internal_r+0x66c>
 8003f08:	d9c02785 	stb	r7,158(sp)
 8003f0c:	003aa906 	br	80029b4 <___vfprintf_internal_r+0xc8c>
 8003f10:	d9c02785 	stb	r7,158(sp)
 8003f14:	003a3d06 	br	800280c <___vfprintf_internal_r+0xae4>
 8003f18:	d9c02785 	stb	r7,158(sp)
 8003f1c:	003aca06 	br	8002a48 <___vfprintf_internal_r+0xd20>

08003f20 <__vfprintf_internal>:
 8003f20:	00820074 	movhi	r2,2049
 8003f24:	108a9204 	addi	r2,r2,10824
 8003f28:	300f883a 	mov	r7,r6
 8003f2c:	280d883a 	mov	r6,r5
 8003f30:	200b883a 	mov	r5,r4
 8003f34:	11000017 	ldw	r4,0(r2)
 8003f38:	8001d281 	jmpi	8001d28 <___vfprintf_internal_r>

08003f3c <__sbprintf>:
 8003f3c:	2880030b 	ldhu	r2,12(r5)
 8003f40:	2ac01917 	ldw	r11,100(r5)
 8003f44:	2a80038b 	ldhu	r10,14(r5)
 8003f48:	2a400717 	ldw	r9,28(r5)
 8003f4c:	2a000917 	ldw	r8,36(r5)
 8003f50:	defee204 	addi	sp,sp,-1144
 8003f54:	00c10004 	movi	r3,1024
 8003f58:	dc011a15 	stw	r16,1128(sp)
 8003f5c:	10bfff4c 	andi	r2,r2,65533
 8003f60:	2821883a 	mov	r16,r5
 8003f64:	d8cb883a 	add	r5,sp,r3
 8003f68:	dc811c15 	stw	r18,1136(sp)
 8003f6c:	dc411b15 	stw	r17,1132(sp)
 8003f70:	dfc11d15 	stw	ra,1140(sp)
 8003f74:	2025883a 	mov	r18,r4
 8003f78:	d881030d 	sth	r2,1036(sp)
 8003f7c:	dac11915 	stw	r11,1124(sp)
 8003f80:	da81038d 	sth	r10,1038(sp)
 8003f84:	da410715 	stw	r9,1052(sp)
 8003f88:	da010915 	stw	r8,1060(sp)
 8003f8c:	dec10015 	stw	sp,1024(sp)
 8003f90:	dec10415 	stw	sp,1040(sp)
 8003f94:	d8c10215 	stw	r3,1032(sp)
 8003f98:	d8c10515 	stw	r3,1044(sp)
 8003f9c:	d8010615 	stw	zero,1048(sp)
 8003fa0:	8001d280 	call	8001d28 <___vfprintf_internal_r>
 8003fa4:	1023883a 	mov	r17,r2
 8003fa8:	10000416 	blt	r2,zero,8003fbc <__sbprintf+0x80>
 8003fac:	d9410004 	addi	r5,sp,1024
 8003fb0:	9009883a 	mov	r4,r18
 8003fb4:	8005bf00 	call	8005bf0 <_fflush_r>
 8003fb8:	10000d1e 	bne	r2,zero,8003ff0 <__sbprintf+0xb4>
 8003fbc:	d881030b 	ldhu	r2,1036(sp)
 8003fc0:	1080100c 	andi	r2,r2,64
 8003fc4:	10000326 	beq	r2,zero,8003fd4 <__sbprintf+0x98>
 8003fc8:	8080030b 	ldhu	r2,12(r16)
 8003fcc:	10801014 	ori	r2,r2,64
 8003fd0:	8080030d 	sth	r2,12(r16)
 8003fd4:	8805883a 	mov	r2,r17
 8003fd8:	dfc11d17 	ldw	ra,1140(sp)
 8003fdc:	dc811c17 	ldw	r18,1136(sp)
 8003fe0:	dc411b17 	ldw	r17,1132(sp)
 8003fe4:	dc011a17 	ldw	r16,1128(sp)
 8003fe8:	dec11e04 	addi	sp,sp,1144
 8003fec:	f800283a 	ret
 8003ff0:	047fffc4 	movi	r17,-1
 8003ff4:	003ff106 	br	8003fbc <__sbprintf+0x80>

08003ff8 <__swsetup_r>:
 8003ff8:	00820074 	movhi	r2,2049
 8003ffc:	defffd04 	addi	sp,sp,-12
 8004000:	108a9204 	addi	r2,r2,10824
 8004004:	dc400115 	stw	r17,4(sp)
 8004008:	2023883a 	mov	r17,r4
 800400c:	11000017 	ldw	r4,0(r2)
 8004010:	dc000015 	stw	r16,0(sp)
 8004014:	dfc00215 	stw	ra,8(sp)
 8004018:	2821883a 	mov	r16,r5
 800401c:	20000226 	beq	r4,zero,8004028 <__swsetup_r+0x30>
 8004020:	20800e17 	ldw	r2,56(r4)
 8004024:	10003126 	beq	r2,zero,80040ec <__swsetup_r+0xf4>
 8004028:	8080030b 	ldhu	r2,12(r16)
 800402c:	10c0020c 	andi	r3,r2,8
 8004030:	1009883a 	mov	r4,r2
 8004034:	18000f26 	beq	r3,zero,8004074 <__swsetup_r+0x7c>
 8004038:	80c00417 	ldw	r3,16(r16)
 800403c:	18001526 	beq	r3,zero,8004094 <__swsetup_r+0x9c>
 8004040:	1100004c 	andi	r4,r2,1
 8004044:	20001c1e 	bne	r4,zero,80040b8 <__swsetup_r+0xc0>
 8004048:	1080008c 	andi	r2,r2,2
 800404c:	1000291e 	bne	r2,zero,80040f4 <__swsetup_r+0xfc>
 8004050:	80800517 	ldw	r2,20(r16)
 8004054:	80800215 	stw	r2,8(r16)
 8004058:	18001c26 	beq	r3,zero,80040cc <__swsetup_r+0xd4>
 800405c:	0005883a 	mov	r2,zero
 8004060:	dfc00217 	ldw	ra,8(sp)
 8004064:	dc400117 	ldw	r17,4(sp)
 8004068:	dc000017 	ldw	r16,0(sp)
 800406c:	dec00304 	addi	sp,sp,12
 8004070:	f800283a 	ret
 8004074:	2080040c 	andi	r2,r4,16
 8004078:	10002e26 	beq	r2,zero,8004134 <__swsetup_r+0x13c>
 800407c:	2080010c 	andi	r2,r4,4
 8004080:	10001e1e 	bne	r2,zero,80040fc <__swsetup_r+0x104>
 8004084:	80c00417 	ldw	r3,16(r16)
 8004088:	20800214 	ori	r2,r4,8
 800408c:	8080030d 	sth	r2,12(r16)
 8004090:	183feb1e 	bne	r3,zero,8004040 <__swsetup_r+0x48>
 8004094:	1100a00c 	andi	r4,r2,640
 8004098:	01408004 	movi	r5,512
 800409c:	217fe826 	beq	r4,r5,8004040 <__swsetup_r+0x48>
 80040a0:	800b883a 	mov	r5,r16
 80040a4:	8809883a 	mov	r4,r17
 80040a8:	8006b700 	call	8006b70 <__smakebuf_r>
 80040ac:	8080030b 	ldhu	r2,12(r16)
 80040b0:	80c00417 	ldw	r3,16(r16)
 80040b4:	003fe206 	br	8004040 <__swsetup_r+0x48>
 80040b8:	80800517 	ldw	r2,20(r16)
 80040bc:	80000215 	stw	zero,8(r16)
 80040c0:	0085c83a 	sub	r2,zero,r2
 80040c4:	80800615 	stw	r2,24(r16)
 80040c8:	183fe41e 	bne	r3,zero,800405c <__swsetup_r+0x64>
 80040cc:	80c0030b 	ldhu	r3,12(r16)
 80040d0:	0005883a 	mov	r2,zero
 80040d4:	1900200c 	andi	r4,r3,128
 80040d8:	203fe126 	beq	r4,zero,8004060 <__swsetup_r+0x68>
 80040dc:	18c01014 	ori	r3,r3,64
 80040e0:	80c0030d 	sth	r3,12(r16)
 80040e4:	00bfffc4 	movi	r2,-1
 80040e8:	003fdd06 	br	8004060 <__swsetup_r+0x68>
 80040ec:	8005fcc0 	call	8005fcc <__sinit>
 80040f0:	003fcd06 	br	8004028 <__swsetup_r+0x30>
 80040f4:	0005883a 	mov	r2,zero
 80040f8:	003fd606 	br	8004054 <__swsetup_r+0x5c>
 80040fc:	81400c17 	ldw	r5,48(r16)
 8004100:	28000626 	beq	r5,zero,800411c <__swsetup_r+0x124>
 8004104:	80801004 	addi	r2,r16,64
 8004108:	28800326 	beq	r5,r2,8004118 <__swsetup_r+0x120>
 800410c:	8809883a 	mov	r4,r17
 8004110:	80061400 	call	8006140 <_free_r>
 8004114:	8100030b 	ldhu	r4,12(r16)
 8004118:	80000c15 	stw	zero,48(r16)
 800411c:	80c00417 	ldw	r3,16(r16)
 8004120:	00bff6c4 	movi	r2,-37
 8004124:	1108703a 	and	r4,r2,r4
 8004128:	80000115 	stw	zero,4(r16)
 800412c:	80c00015 	stw	r3,0(r16)
 8004130:	003fd506 	br	8004088 <__swsetup_r+0x90>
 8004134:	00800244 	movi	r2,9
 8004138:	88800015 	stw	r2,0(r17)
 800413c:	20801014 	ori	r2,r4,64
 8004140:	8080030d 	sth	r2,12(r16)
 8004144:	00bfffc4 	movi	r2,-1
 8004148:	003fc506 	br	8004060 <__swsetup_r+0x68>

0800414c <quorem>:
 800414c:	defff704 	addi	sp,sp,-36
 8004150:	dc800215 	stw	r18,8(sp)
 8004154:	20800417 	ldw	r2,16(r4)
 8004158:	2c800417 	ldw	r18,16(r5)
 800415c:	dfc00815 	stw	ra,32(sp)
 8004160:	ddc00715 	stw	r23,28(sp)
 8004164:	dd800615 	stw	r22,24(sp)
 8004168:	dd400515 	stw	r21,20(sp)
 800416c:	dd000415 	stw	r20,16(sp)
 8004170:	dcc00315 	stw	r19,12(sp)
 8004174:	dc400115 	stw	r17,4(sp)
 8004178:	dc000015 	stw	r16,0(sp)
 800417c:	14807116 	blt	r2,r18,8004344 <quorem+0x1f8>
 8004180:	94bfffc4 	addi	r18,r18,-1
 8004184:	94ad883a 	add	r22,r18,r18
 8004188:	b5ad883a 	add	r22,r22,r22
 800418c:	2c400504 	addi	r17,r5,20
 8004190:	8da9883a 	add	r20,r17,r22
 8004194:	25400504 	addi	r21,r4,20
 8004198:	282f883a 	mov	r23,r5
 800419c:	adad883a 	add	r22,r21,r22
 80041a0:	a1400017 	ldw	r5,0(r20)
 80041a4:	2021883a 	mov	r16,r4
 80041a8:	b1000017 	ldw	r4,0(r22)
 80041ac:	29400044 	addi	r5,r5,1
 80041b0:	800bd4c0 	call	800bd4c <__udivsi3>
 80041b4:	1027883a 	mov	r19,r2
 80041b8:	10002c26 	beq	r2,zero,800426c <quorem+0x120>
 80041bc:	a813883a 	mov	r9,r21
 80041c0:	880b883a 	mov	r5,r17
 80041c4:	0009883a 	mov	r4,zero
 80041c8:	000d883a 	mov	r6,zero
 80041cc:	2a000017 	ldw	r8,0(r5)
 80041d0:	49c00017 	ldw	r7,0(r9)
 80041d4:	29400104 	addi	r5,r5,4
 80041d8:	40bfffcc 	andi	r2,r8,65535
 80041dc:	14c5383a 	mul	r2,r2,r19
 80041e0:	4010d43a 	srli	r8,r8,16
 80041e4:	38ffffcc 	andi	r3,r7,65535
 80041e8:	1105883a 	add	r2,r2,r4
 80041ec:	1008d43a 	srli	r4,r2,16
 80041f0:	44d1383a 	mul	r8,r8,r19
 80041f4:	198d883a 	add	r6,r3,r6
 80041f8:	10ffffcc 	andi	r3,r2,65535
 80041fc:	30c7c83a 	sub	r3,r6,r3
 8004200:	380ed43a 	srli	r7,r7,16
 8004204:	4105883a 	add	r2,r8,r4
 8004208:	180dd43a 	srai	r6,r3,16
 800420c:	113fffcc 	andi	r4,r2,65535
 8004210:	390fc83a 	sub	r7,r7,r4
 8004214:	398d883a 	add	r6,r7,r6
 8004218:	300e943a 	slli	r7,r6,16
 800421c:	18ffffcc 	andi	r3,r3,65535
 8004220:	1008d43a 	srli	r4,r2,16
 8004224:	38ceb03a 	or	r7,r7,r3
 8004228:	49c00015 	stw	r7,0(r9)
 800422c:	300dd43a 	srai	r6,r6,16
 8004230:	4a400104 	addi	r9,r9,4
 8004234:	a17fe52e 	bgeu	r20,r5,80041cc <quorem+0x80>
 8004238:	b0800017 	ldw	r2,0(r22)
 800423c:	10000b1e 	bne	r2,zero,800426c <quorem+0x120>
 8004240:	b0bfff04 	addi	r2,r22,-4
 8004244:	a880082e 	bgeu	r21,r2,8004268 <quorem+0x11c>
 8004248:	b0ffff17 	ldw	r3,-4(r22)
 800424c:	18000326 	beq	r3,zero,800425c <quorem+0x110>
 8004250:	00000506 	br	8004268 <quorem+0x11c>
 8004254:	10c00017 	ldw	r3,0(r2)
 8004258:	1800031e 	bne	r3,zero,8004268 <quorem+0x11c>
 800425c:	10bfff04 	addi	r2,r2,-4
 8004260:	94bfffc4 	addi	r18,r18,-1
 8004264:	a8bffb36 	bltu	r21,r2,8004254 <quorem+0x108>
 8004268:	84800415 	stw	r18,16(r16)
 800426c:	b80b883a 	mov	r5,r23
 8004270:	8009883a 	mov	r4,r16
 8004274:	80082b00 	call	80082b0 <__mcmp>
 8004278:	10002616 	blt	r2,zero,8004314 <quorem+0x1c8>
 800427c:	9cc00044 	addi	r19,r19,1
 8004280:	a805883a 	mov	r2,r21
 8004284:	000b883a 	mov	r5,zero
 8004288:	11000017 	ldw	r4,0(r2)
 800428c:	89800017 	ldw	r6,0(r17)
 8004290:	10800104 	addi	r2,r2,4
 8004294:	20ffffcc 	andi	r3,r4,65535
 8004298:	194b883a 	add	r5,r3,r5
 800429c:	30ffffcc 	andi	r3,r6,65535
 80042a0:	28c7c83a 	sub	r3,r5,r3
 80042a4:	300cd43a 	srli	r6,r6,16
 80042a8:	2008d43a 	srli	r4,r4,16
 80042ac:	180bd43a 	srai	r5,r3,16
 80042b0:	18ffffcc 	andi	r3,r3,65535
 80042b4:	2189c83a 	sub	r4,r4,r6
 80042b8:	2149883a 	add	r4,r4,r5
 80042bc:	200c943a 	slli	r6,r4,16
 80042c0:	8c400104 	addi	r17,r17,4
 80042c4:	200bd43a 	srai	r5,r4,16
 80042c8:	30c6b03a 	or	r3,r6,r3
 80042cc:	10ffff15 	stw	r3,-4(r2)
 80042d0:	a47fed2e 	bgeu	r20,r17,8004288 <quorem+0x13c>
 80042d4:	9485883a 	add	r2,r18,r18
 80042d8:	1085883a 	add	r2,r2,r2
 80042dc:	a887883a 	add	r3,r21,r2
 80042e0:	18800017 	ldw	r2,0(r3)
 80042e4:	10000b1e 	bne	r2,zero,8004314 <quorem+0x1c8>
 80042e8:	18bfff04 	addi	r2,r3,-4
 80042ec:	a880082e 	bgeu	r21,r2,8004310 <quorem+0x1c4>
 80042f0:	18ffff17 	ldw	r3,-4(r3)
 80042f4:	18000326 	beq	r3,zero,8004304 <quorem+0x1b8>
 80042f8:	00000506 	br	8004310 <quorem+0x1c4>
 80042fc:	10c00017 	ldw	r3,0(r2)
 8004300:	1800031e 	bne	r3,zero,8004310 <quorem+0x1c4>
 8004304:	10bfff04 	addi	r2,r2,-4
 8004308:	94bfffc4 	addi	r18,r18,-1
 800430c:	a8bffb36 	bltu	r21,r2,80042fc <quorem+0x1b0>
 8004310:	84800415 	stw	r18,16(r16)
 8004314:	9805883a 	mov	r2,r19
 8004318:	dfc00817 	ldw	ra,32(sp)
 800431c:	ddc00717 	ldw	r23,28(sp)
 8004320:	dd800617 	ldw	r22,24(sp)
 8004324:	dd400517 	ldw	r21,20(sp)
 8004328:	dd000417 	ldw	r20,16(sp)
 800432c:	dcc00317 	ldw	r19,12(sp)
 8004330:	dc800217 	ldw	r18,8(sp)
 8004334:	dc400117 	ldw	r17,4(sp)
 8004338:	dc000017 	ldw	r16,0(sp)
 800433c:	dec00904 	addi	sp,sp,36
 8004340:	f800283a 	ret
 8004344:	0005883a 	mov	r2,zero
 8004348:	003ff306 	br	8004318 <quorem+0x1cc>

0800434c <_dtoa_r>:
 800434c:	20801017 	ldw	r2,64(r4)
 8004350:	deffde04 	addi	sp,sp,-136
 8004354:	df002015 	stw	fp,128(sp)
 8004358:	dcc01b15 	stw	r19,108(sp)
 800435c:	dc801a15 	stw	r18,104(sp)
 8004360:	dc401915 	stw	r17,100(sp)
 8004364:	dc001815 	stw	r16,96(sp)
 8004368:	dfc02115 	stw	ra,132(sp)
 800436c:	ddc01f15 	stw	r23,124(sp)
 8004370:	dd801e15 	stw	r22,120(sp)
 8004374:	dd401d15 	stw	r21,116(sp)
 8004378:	dd001c15 	stw	r20,112(sp)
 800437c:	d9c00315 	stw	r7,12(sp)
 8004380:	2039883a 	mov	fp,r4
 8004384:	3023883a 	mov	r17,r6
 8004388:	2825883a 	mov	r18,r5
 800438c:	dc002417 	ldw	r16,144(sp)
 8004390:	3027883a 	mov	r19,r6
 8004394:	10000826 	beq	r2,zero,80043b8 <_dtoa_r+0x6c>
 8004398:	21801117 	ldw	r6,68(r4)
 800439c:	00c00044 	movi	r3,1
 80043a0:	100b883a 	mov	r5,r2
 80043a4:	1986983a 	sll	r3,r3,r6
 80043a8:	11800115 	stw	r6,4(r2)
 80043ac:	10c00215 	stw	r3,8(r2)
 80043b0:	8007a900 	call	8007a90 <_Bfree>
 80043b4:	e0001015 	stw	zero,64(fp)
 80043b8:	88002e16 	blt	r17,zero,8004474 <_dtoa_r+0x128>
 80043bc:	80000015 	stw	zero,0(r16)
 80043c0:	889ffc2c 	andhi	r2,r17,32752
 80043c4:	00dffc34 	movhi	r3,32752
 80043c8:	10c01c26 	beq	r2,r3,800443c <_dtoa_r+0xf0>
 80043cc:	000d883a 	mov	r6,zero
 80043d0:	000f883a 	mov	r7,zero
 80043d4:	9009883a 	mov	r4,r18
 80043d8:	980b883a 	mov	r5,r19
 80043dc:	800cf9c0 	call	800cf9c <__eqdf2>
 80043e0:	10002b1e 	bne	r2,zero,8004490 <_dtoa_r+0x144>
 80043e4:	d9c02317 	ldw	r7,140(sp)
 80043e8:	00800044 	movi	r2,1
 80043ec:	38800015 	stw	r2,0(r7)
 80043f0:	d8802517 	ldw	r2,148(sp)
 80043f4:	10019e26 	beq	r2,zero,8004a70 <_dtoa_r+0x724>
 80043f8:	d8c02517 	ldw	r3,148(sp)
 80043fc:	00820074 	movhi	r2,2049
 8004400:	10837344 	addi	r2,r2,3533
 8004404:	18800015 	stw	r2,0(r3)
 8004408:	10bfffc4 	addi	r2,r2,-1
 800440c:	dfc02117 	ldw	ra,132(sp)
 8004410:	df002017 	ldw	fp,128(sp)
 8004414:	ddc01f17 	ldw	r23,124(sp)
 8004418:	dd801e17 	ldw	r22,120(sp)
 800441c:	dd401d17 	ldw	r21,116(sp)
 8004420:	dd001c17 	ldw	r20,112(sp)
 8004424:	dcc01b17 	ldw	r19,108(sp)
 8004428:	dc801a17 	ldw	r18,104(sp)
 800442c:	dc401917 	ldw	r17,100(sp)
 8004430:	dc001817 	ldw	r16,96(sp)
 8004434:	dec02204 	addi	sp,sp,136
 8004438:	f800283a 	ret
 800443c:	d8c02317 	ldw	r3,140(sp)
 8004440:	0089c3c4 	movi	r2,9999
 8004444:	18800015 	stw	r2,0(r3)
 8004448:	90017726 	beq	r18,zero,8004a28 <_dtoa_r+0x6dc>
 800444c:	00820074 	movhi	r2,2049
 8004450:	10837f04 	addi	r2,r2,3580
 8004454:	d9002517 	ldw	r4,148(sp)
 8004458:	203fec26 	beq	r4,zero,800440c <_dtoa_r+0xc0>
 800445c:	10c000c7 	ldb	r3,3(r2)
 8004460:	1801781e 	bne	r3,zero,8004a44 <_dtoa_r+0x6f8>
 8004464:	10c000c4 	addi	r3,r2,3
 8004468:	d9802517 	ldw	r6,148(sp)
 800446c:	30c00015 	stw	r3,0(r6)
 8004470:	003fe606 	br	800440c <_dtoa_r+0xc0>
 8004474:	04e00034 	movhi	r19,32768
 8004478:	9cffffc4 	addi	r19,r19,-1
 800447c:	00800044 	movi	r2,1
 8004480:	8ce6703a 	and	r19,r17,r19
 8004484:	80800015 	stw	r2,0(r16)
 8004488:	9823883a 	mov	r17,r19
 800448c:	003fcc06 	br	80043c0 <_dtoa_r+0x74>
 8004490:	d8800204 	addi	r2,sp,8
 8004494:	d8800015 	stw	r2,0(sp)
 8004498:	d9c00104 	addi	r7,sp,4
 800449c:	900b883a 	mov	r5,r18
 80044a0:	980d883a 	mov	r6,r19
 80044a4:	e009883a 	mov	r4,fp
 80044a8:	8820d53a 	srli	r16,r17,20
 80044ac:	800867c0 	call	800867c <__d2b>
 80044b0:	d8800915 	stw	r2,36(sp)
 80044b4:	8001651e 	bne	r16,zero,8004a4c <_dtoa_r+0x700>
 80044b8:	dd800217 	ldw	r22,8(sp)
 80044bc:	dc000117 	ldw	r16,4(sp)
 80044c0:	00800804 	movi	r2,32
 80044c4:	b421883a 	add	r16,r22,r16
 80044c8:	80c10c84 	addi	r3,r16,1074
 80044cc:	10c2d10e 	bge	r2,r3,8005014 <_dtoa_r+0xcc8>
 80044d0:	00801004 	movi	r2,64
 80044d4:	81010484 	addi	r4,r16,1042
 80044d8:	10c7c83a 	sub	r3,r2,r3
 80044dc:	9108d83a 	srl	r4,r18,r4
 80044e0:	88e2983a 	sll	r17,r17,r3
 80044e4:	2448b03a 	or	r4,r4,r17
 80044e8:	800e3640 	call	800e364 <__floatunsidf>
 80044ec:	017f8434 	movhi	r5,65040
 80044f0:	01800044 	movi	r6,1
 80044f4:	1009883a 	mov	r4,r2
 80044f8:	194b883a 	add	r5,r3,r5
 80044fc:	843fffc4 	addi	r16,r16,-1
 8004500:	d9801115 	stw	r6,68(sp)
 8004504:	000d883a 	mov	r6,zero
 8004508:	01cffe34 	movhi	r7,16376
 800450c:	800d90c0 	call	800d90c <__subdf3>
 8004510:	0198dbf4 	movhi	r6,25455
 8004514:	01cff4f4 	movhi	r7,16339
 8004518:	3190d844 	addi	r6,r6,17249
 800451c:	39e1e9c4 	addi	r7,r7,-30809
 8004520:	1009883a 	mov	r4,r2
 8004524:	180b883a 	mov	r5,r3
 8004528:	800d1f40 	call	800d1f4 <__muldf3>
 800452c:	01a2d874 	movhi	r6,35681
 8004530:	01cff1f4 	movhi	r7,16327
 8004534:	31b22cc4 	addi	r6,r6,-14157
 8004538:	39e28a04 	addi	r7,r7,-30168
 800453c:	180b883a 	mov	r5,r3
 8004540:	1009883a 	mov	r4,r2
 8004544:	800be080 	call	800be08 <__adddf3>
 8004548:	8009883a 	mov	r4,r16
 800454c:	1029883a 	mov	r20,r2
 8004550:	1823883a 	mov	r17,r3
 8004554:	800e2880 	call	800e288 <__floatsidf>
 8004558:	019427f4 	movhi	r6,20639
 800455c:	01cff4f4 	movhi	r7,16339
 8004560:	319e7ec4 	addi	r6,r6,31227
 8004564:	39d104c4 	addi	r7,r7,17427
 8004568:	1009883a 	mov	r4,r2
 800456c:	180b883a 	mov	r5,r3
 8004570:	800d1f40 	call	800d1f4 <__muldf3>
 8004574:	100d883a 	mov	r6,r2
 8004578:	180f883a 	mov	r7,r3
 800457c:	a009883a 	mov	r4,r20
 8004580:	880b883a 	mov	r5,r17
 8004584:	800be080 	call	800be08 <__adddf3>
 8004588:	1009883a 	mov	r4,r2
 800458c:	180b883a 	mov	r5,r3
 8004590:	1029883a 	mov	r20,r2
 8004594:	1823883a 	mov	r17,r3
 8004598:	800e2080 	call	800e208 <__fixdfsi>
 800459c:	000d883a 	mov	r6,zero
 80045a0:	000f883a 	mov	r7,zero
 80045a4:	a009883a 	mov	r4,r20
 80045a8:	880b883a 	mov	r5,r17
 80045ac:	d8800515 	stw	r2,20(sp)
 80045b0:	800d1000 	call	800d100 <__ledf2>
 80045b4:	10028716 	blt	r2,zero,8004fd4 <_dtoa_r+0xc88>
 80045b8:	d8c00517 	ldw	r3,20(sp)
 80045bc:	00800584 	movi	r2,22
 80045c0:	10c27536 	bltu	r2,r3,8004f98 <_dtoa_r+0xc4c>
 80045c4:	180490fa 	slli	r2,r3,3
 80045c8:	00c20074 	movhi	r3,2049
 80045cc:	18c39b04 	addi	r3,r3,3692
 80045d0:	1885883a 	add	r2,r3,r2
 80045d4:	11000017 	ldw	r4,0(r2)
 80045d8:	11400117 	ldw	r5,4(r2)
 80045dc:	900d883a 	mov	r6,r18
 80045e0:	980f883a 	mov	r7,r19
 80045e4:	800d0240 	call	800d024 <__gedf2>
 80045e8:	00828d0e 	bge	zero,r2,8005020 <_dtoa_r+0xcd4>
 80045ec:	d9000517 	ldw	r4,20(sp)
 80045f0:	d8000e15 	stw	zero,56(sp)
 80045f4:	213fffc4 	addi	r4,r4,-1
 80045f8:	d9000515 	stw	r4,20(sp)
 80045fc:	b42dc83a 	sub	r22,r22,r16
 8004600:	b5bfffc4 	addi	r22,r22,-1
 8004604:	b0026f16 	blt	r22,zero,8004fc4 <_dtoa_r+0xc78>
 8004608:	d8000815 	stw	zero,32(sp)
 800460c:	d9c00517 	ldw	r7,20(sp)
 8004610:	38026416 	blt	r7,zero,8004fa4 <_dtoa_r+0xc58>
 8004614:	b1ed883a 	add	r22,r22,r7
 8004618:	d9c00d15 	stw	r7,52(sp)
 800461c:	d8000a15 	stw	zero,40(sp)
 8004620:	d9800317 	ldw	r6,12(sp)
 8004624:	00800244 	movi	r2,9
 8004628:	11811436 	bltu	r2,r6,8004a7c <_dtoa_r+0x730>
 800462c:	00800144 	movi	r2,5
 8004630:	1184e10e 	bge	r2,r6,80059b8 <_dtoa_r+0x166c>
 8004634:	31bfff04 	addi	r6,r6,-4
 8004638:	d9800315 	stw	r6,12(sp)
 800463c:	0023883a 	mov	r17,zero
 8004640:	d9800317 	ldw	r6,12(sp)
 8004644:	008000c4 	movi	r2,3
 8004648:	30836726 	beq	r6,r2,80053e8 <_dtoa_r+0x109c>
 800464c:	1183410e 	bge	r2,r6,8005354 <_dtoa_r+0x1008>
 8004650:	d9c00317 	ldw	r7,12(sp)
 8004654:	00800104 	movi	r2,4
 8004658:	38827c26 	beq	r7,r2,800504c <_dtoa_r+0xd00>
 800465c:	00800144 	movi	r2,5
 8004660:	3884c41e 	bne	r7,r2,8005974 <_dtoa_r+0x1628>
 8004664:	00800044 	movi	r2,1
 8004668:	d8800b15 	stw	r2,44(sp)
 800466c:	d8c00517 	ldw	r3,20(sp)
 8004670:	d9002217 	ldw	r4,136(sp)
 8004674:	1907883a 	add	r3,r3,r4
 8004678:	19800044 	addi	r6,r3,1
 800467c:	d8c00c15 	stw	r3,48(sp)
 8004680:	d9800615 	stw	r6,24(sp)
 8004684:	0183a40e 	bge	zero,r6,8005518 <_dtoa_r+0x11cc>
 8004688:	d9800617 	ldw	r6,24(sp)
 800468c:	3021883a 	mov	r16,r6
 8004690:	e0001115 	stw	zero,68(fp)
 8004694:	008005c4 	movi	r2,23
 8004698:	1184c92e 	bgeu	r2,r6,80059c0 <_dtoa_r+0x1674>
 800469c:	00c00044 	movi	r3,1
 80046a0:	00800104 	movi	r2,4
 80046a4:	1085883a 	add	r2,r2,r2
 80046a8:	11000504 	addi	r4,r2,20
 80046ac:	180b883a 	mov	r5,r3
 80046b0:	18c00044 	addi	r3,r3,1
 80046b4:	313ffb2e 	bgeu	r6,r4,80046a4 <_dtoa_r+0x358>
 80046b8:	e1401115 	stw	r5,68(fp)
 80046bc:	e009883a 	mov	r4,fp
 80046c0:	80079e80 	call	80079e8 <_Balloc>
 80046c4:	d8800715 	stw	r2,28(sp)
 80046c8:	e0801015 	stw	r2,64(fp)
 80046cc:	00800384 	movi	r2,14
 80046d0:	1400f736 	bltu	r2,r16,8004ab0 <_dtoa_r+0x764>
 80046d4:	8800f626 	beq	r17,zero,8004ab0 <_dtoa_r+0x764>
 80046d8:	d9c00517 	ldw	r7,20(sp)
 80046dc:	01c39a0e 	bge	zero,r7,8005548 <_dtoa_r+0x11fc>
 80046e0:	388003cc 	andi	r2,r7,15
 80046e4:	100490fa 	slli	r2,r2,3
 80046e8:	382bd13a 	srai	r21,r7,4
 80046ec:	00c20074 	movhi	r3,2049
 80046f0:	18c39b04 	addi	r3,r3,3692
 80046f4:	1885883a 	add	r2,r3,r2
 80046f8:	a8c0040c 	andi	r3,r21,16
 80046fc:	12400017 	ldw	r9,0(r2)
 8004700:	12000117 	ldw	r8,4(r2)
 8004704:	18037926 	beq	r3,zero,80054ec <_dtoa_r+0x11a0>
 8004708:	00820074 	movhi	r2,2049
 800470c:	10839104 	addi	r2,r2,3652
 8004710:	11800817 	ldw	r6,32(r2)
 8004714:	11c00917 	ldw	r7,36(r2)
 8004718:	9009883a 	mov	r4,r18
 800471c:	980b883a 	mov	r5,r19
 8004720:	da001715 	stw	r8,92(sp)
 8004724:	da401615 	stw	r9,88(sp)
 8004728:	800c6b40 	call	800c6b4 <__divdf3>
 800472c:	da001717 	ldw	r8,92(sp)
 8004730:	da401617 	ldw	r9,88(sp)
 8004734:	ad4003cc 	andi	r21,r21,15
 8004738:	040000c4 	movi	r16,3
 800473c:	1023883a 	mov	r17,r2
 8004740:	1829883a 	mov	r20,r3
 8004744:	a8001126 	beq	r21,zero,800478c <_dtoa_r+0x440>
 8004748:	05c20074 	movhi	r23,2049
 800474c:	bdc39104 	addi	r23,r23,3652
 8004750:	4805883a 	mov	r2,r9
 8004754:	4007883a 	mov	r3,r8
 8004758:	a980004c 	andi	r6,r21,1
 800475c:	1009883a 	mov	r4,r2
 8004760:	a82bd07a 	srai	r21,r21,1
 8004764:	180b883a 	mov	r5,r3
 8004768:	30000426 	beq	r6,zero,800477c <_dtoa_r+0x430>
 800476c:	b9800017 	ldw	r6,0(r23)
 8004770:	b9c00117 	ldw	r7,4(r23)
 8004774:	84000044 	addi	r16,r16,1
 8004778:	800d1f40 	call	800d1f4 <__muldf3>
 800477c:	bdc00204 	addi	r23,r23,8
 8004780:	a83ff51e 	bne	r21,zero,8004758 <_dtoa_r+0x40c>
 8004784:	1013883a 	mov	r9,r2
 8004788:	1811883a 	mov	r8,r3
 800478c:	480d883a 	mov	r6,r9
 8004790:	400f883a 	mov	r7,r8
 8004794:	8809883a 	mov	r4,r17
 8004798:	a00b883a 	mov	r5,r20
 800479c:	800c6b40 	call	800c6b4 <__divdf3>
 80047a0:	d8800f15 	stw	r2,60(sp)
 80047a4:	d8c01015 	stw	r3,64(sp)
 80047a8:	d8c00e17 	ldw	r3,56(sp)
 80047ac:	18000626 	beq	r3,zero,80047c8 <_dtoa_r+0x47c>
 80047b0:	d9000f17 	ldw	r4,60(sp)
 80047b4:	d9401017 	ldw	r5,64(sp)
 80047b8:	000d883a 	mov	r6,zero
 80047bc:	01cffc34 	movhi	r7,16368
 80047c0:	800d1000 	call	800d100 <__ledf2>
 80047c4:	10040b16 	blt	r2,zero,80057f4 <_dtoa_r+0x14a8>
 80047c8:	8009883a 	mov	r4,r16
 80047cc:	800e2880 	call	800e288 <__floatsidf>
 80047d0:	d9800f17 	ldw	r6,60(sp)
 80047d4:	d9c01017 	ldw	r7,64(sp)
 80047d8:	1009883a 	mov	r4,r2
 80047dc:	180b883a 	mov	r5,r3
 80047e0:	800d1f40 	call	800d1f4 <__muldf3>
 80047e4:	000d883a 	mov	r6,zero
 80047e8:	01d00734 	movhi	r7,16412
 80047ec:	1009883a 	mov	r4,r2
 80047f0:	180b883a 	mov	r5,r3
 80047f4:	800be080 	call	800be08 <__adddf3>
 80047f8:	1021883a 	mov	r16,r2
 80047fc:	d8800617 	ldw	r2,24(sp)
 8004800:	047f3034 	movhi	r17,64704
 8004804:	1c63883a 	add	r17,r3,r17
 8004808:	10031826 	beq	r2,zero,800546c <_dtoa_r+0x1120>
 800480c:	d8c00517 	ldw	r3,20(sp)
 8004810:	db000617 	ldw	r12,24(sp)
 8004814:	d8c01315 	stw	r3,76(sp)
 8004818:	d9000b17 	ldw	r4,44(sp)
 800481c:	20038f26 	beq	r4,zero,800565c <_dtoa_r+0x1310>
 8004820:	60bfffc4 	addi	r2,r12,-1
 8004824:	100490fa 	slli	r2,r2,3
 8004828:	00c20074 	movhi	r3,2049
 800482c:	18c39b04 	addi	r3,r3,3692
 8004830:	1885883a 	add	r2,r3,r2
 8004834:	11800017 	ldw	r6,0(r2)
 8004838:	11c00117 	ldw	r7,4(r2)
 800483c:	d8800717 	ldw	r2,28(sp)
 8004840:	0009883a 	mov	r4,zero
 8004844:	014ff834 	movhi	r5,16352
 8004848:	db001615 	stw	r12,88(sp)
 800484c:	15c00044 	addi	r23,r2,1
 8004850:	800c6b40 	call	800c6b4 <__divdf3>
 8004854:	800d883a 	mov	r6,r16
 8004858:	880f883a 	mov	r7,r17
 800485c:	1009883a 	mov	r4,r2
 8004860:	180b883a 	mov	r5,r3
 8004864:	800d90c0 	call	800d90c <__subdf3>
 8004868:	d9401017 	ldw	r5,64(sp)
 800486c:	d9000f17 	ldw	r4,60(sp)
 8004870:	102b883a 	mov	r21,r2
 8004874:	d8c01215 	stw	r3,72(sp)
 8004878:	800e2080 	call	800e208 <__fixdfsi>
 800487c:	1009883a 	mov	r4,r2
 8004880:	1029883a 	mov	r20,r2
 8004884:	800e2880 	call	800e288 <__floatsidf>
 8004888:	d9000f17 	ldw	r4,60(sp)
 800488c:	d9401017 	ldw	r5,64(sp)
 8004890:	100d883a 	mov	r6,r2
 8004894:	180f883a 	mov	r7,r3
 8004898:	800d90c0 	call	800d90c <__subdf3>
 800489c:	1823883a 	mov	r17,r3
 80048a0:	d8c00717 	ldw	r3,28(sp)
 80048a4:	d9401217 	ldw	r5,72(sp)
 80048a8:	a2000c04 	addi	r8,r20,48
 80048ac:	1021883a 	mov	r16,r2
 80048b0:	1a000005 	stb	r8,0(r3)
 80048b4:	800d883a 	mov	r6,r16
 80048b8:	880f883a 	mov	r7,r17
 80048bc:	a809883a 	mov	r4,r21
 80048c0:	4029883a 	mov	r20,r8
 80048c4:	800d0240 	call	800d024 <__gedf2>
 80048c8:	00841d16 	blt	zero,r2,8005940 <_dtoa_r+0x15f4>
 80048cc:	800d883a 	mov	r6,r16
 80048d0:	880f883a 	mov	r7,r17
 80048d4:	0009883a 	mov	r4,zero
 80048d8:	014ffc34 	movhi	r5,16368
 80048dc:	800d90c0 	call	800d90c <__subdf3>
 80048e0:	d9401217 	ldw	r5,72(sp)
 80048e4:	100d883a 	mov	r6,r2
 80048e8:	180f883a 	mov	r7,r3
 80048ec:	a809883a 	mov	r4,r21
 80048f0:	800d0240 	call	800d024 <__gedf2>
 80048f4:	db001617 	ldw	r12,88(sp)
 80048f8:	00840e16 	blt	zero,r2,8005934 <_dtoa_r+0x15e8>
 80048fc:	00800044 	movi	r2,1
 8004900:	13006b0e 	bge	r2,r12,8004ab0 <_dtoa_r+0x764>
 8004904:	d9000717 	ldw	r4,28(sp)
 8004908:	dd800f15 	stw	r22,60(sp)
 800490c:	dcc01015 	stw	r19,64(sp)
 8004910:	2319883a 	add	r12,r4,r12
 8004914:	dcc01217 	ldw	r19,72(sp)
 8004918:	602d883a 	mov	r22,r12
 800491c:	dc801215 	stw	r18,72(sp)
 8004920:	b825883a 	mov	r18,r23
 8004924:	00000906 	br	800494c <_dtoa_r+0x600>
 8004928:	800d90c0 	call	800d90c <__subdf3>
 800492c:	a80d883a 	mov	r6,r21
 8004930:	980f883a 	mov	r7,r19
 8004934:	1009883a 	mov	r4,r2
 8004938:	180b883a 	mov	r5,r3
 800493c:	800d1000 	call	800d100 <__ledf2>
 8004940:	1003e816 	blt	r2,zero,80058e4 <_dtoa_r+0x1598>
 8004944:	b825883a 	mov	r18,r23
 8004948:	bd83e926 	beq	r23,r22,80058f0 <_dtoa_r+0x15a4>
 800494c:	a809883a 	mov	r4,r21
 8004950:	980b883a 	mov	r5,r19
 8004954:	000d883a 	mov	r6,zero
 8004958:	01d00934 	movhi	r7,16420
 800495c:	800d1f40 	call	800d1f4 <__muldf3>
 8004960:	000d883a 	mov	r6,zero
 8004964:	01d00934 	movhi	r7,16420
 8004968:	8009883a 	mov	r4,r16
 800496c:	880b883a 	mov	r5,r17
 8004970:	102b883a 	mov	r21,r2
 8004974:	1827883a 	mov	r19,r3
 8004978:	800d1f40 	call	800d1f4 <__muldf3>
 800497c:	180b883a 	mov	r5,r3
 8004980:	1009883a 	mov	r4,r2
 8004984:	1821883a 	mov	r16,r3
 8004988:	1023883a 	mov	r17,r2
 800498c:	800e2080 	call	800e208 <__fixdfsi>
 8004990:	1009883a 	mov	r4,r2
 8004994:	1029883a 	mov	r20,r2
 8004998:	800e2880 	call	800e288 <__floatsidf>
 800499c:	8809883a 	mov	r4,r17
 80049a0:	800b883a 	mov	r5,r16
 80049a4:	100d883a 	mov	r6,r2
 80049a8:	180f883a 	mov	r7,r3
 80049ac:	800d90c0 	call	800d90c <__subdf3>
 80049b0:	a5000c04 	addi	r20,r20,48
 80049b4:	a80d883a 	mov	r6,r21
 80049b8:	980f883a 	mov	r7,r19
 80049bc:	1009883a 	mov	r4,r2
 80049c0:	180b883a 	mov	r5,r3
 80049c4:	95000005 	stb	r20,0(r18)
 80049c8:	1021883a 	mov	r16,r2
 80049cc:	1823883a 	mov	r17,r3
 80049d0:	800d1000 	call	800d100 <__ledf2>
 80049d4:	bdc00044 	addi	r23,r23,1
 80049d8:	800d883a 	mov	r6,r16
 80049dc:	880f883a 	mov	r7,r17
 80049e0:	0009883a 	mov	r4,zero
 80049e4:	014ffc34 	movhi	r5,16368
 80049e8:	103fcf0e 	bge	r2,zero,8004928 <_dtoa_r+0x5dc>
 80049ec:	d8c01317 	ldw	r3,76(sp)
 80049f0:	d8c00515 	stw	r3,20(sp)
 80049f4:	d9400917 	ldw	r5,36(sp)
 80049f8:	e009883a 	mov	r4,fp
 80049fc:	8007a900 	call	8007a90 <_Bfree>
 8004a00:	d9000517 	ldw	r4,20(sp)
 8004a04:	d9802317 	ldw	r6,140(sp)
 8004a08:	d9c02517 	ldw	r7,148(sp)
 8004a0c:	b8000005 	stb	zero,0(r23)
 8004a10:	20800044 	addi	r2,r4,1
 8004a14:	30800015 	stw	r2,0(r6)
 8004a18:	3802aa26 	beq	r7,zero,80054c4 <_dtoa_r+0x1178>
 8004a1c:	3dc00015 	stw	r23,0(r7)
 8004a20:	d8800717 	ldw	r2,28(sp)
 8004a24:	003e7906 	br	800440c <_dtoa_r+0xc0>
 8004a28:	00800434 	movhi	r2,16
 8004a2c:	10bfffc4 	addi	r2,r2,-1
 8004a30:	88a2703a 	and	r17,r17,r2
 8004a34:	883e851e 	bne	r17,zero,800444c <_dtoa_r+0x100>
 8004a38:	00820074 	movhi	r2,2049
 8004a3c:	10837c04 	addi	r2,r2,3568
 8004a40:	003e8406 	br	8004454 <_dtoa_r+0x108>
 8004a44:	10c00204 	addi	r3,r2,8
 8004a48:	003e8706 	br	8004468 <_dtoa_r+0x11c>
 8004a4c:	01400434 	movhi	r5,16
 8004a50:	297fffc4 	addi	r5,r5,-1
 8004a54:	994a703a 	and	r5,r19,r5
 8004a58:	9009883a 	mov	r4,r18
 8004a5c:	843f0044 	addi	r16,r16,-1023
 8004a60:	294ffc34 	orhi	r5,r5,16368
 8004a64:	dd800217 	ldw	r22,8(sp)
 8004a68:	d8001115 	stw	zero,68(sp)
 8004a6c:	003ea506 	br	8004504 <_dtoa_r+0x1b8>
 8004a70:	00820074 	movhi	r2,2049
 8004a74:	10837304 	addi	r2,r2,3532
 8004a78:	003e6406 	br	800440c <_dtoa_r+0xc0>
 8004a7c:	e0001115 	stw	zero,68(fp)
 8004a80:	000b883a 	mov	r5,zero
 8004a84:	e009883a 	mov	r4,fp
 8004a88:	80079e80 	call	80079e8 <_Balloc>
 8004a8c:	01bfffc4 	movi	r6,-1
 8004a90:	01c00044 	movi	r7,1
 8004a94:	d8800715 	stw	r2,28(sp)
 8004a98:	d9800c15 	stw	r6,48(sp)
 8004a9c:	e0801015 	stw	r2,64(fp)
 8004aa0:	d8000315 	stw	zero,12(sp)
 8004aa4:	d9c00b15 	stw	r7,44(sp)
 8004aa8:	d9800615 	stw	r6,24(sp)
 8004aac:	d8002215 	stw	zero,136(sp)
 8004ab0:	d8800117 	ldw	r2,4(sp)
 8004ab4:	10008916 	blt	r2,zero,8004cdc <_dtoa_r+0x990>
 8004ab8:	d9000517 	ldw	r4,20(sp)
 8004abc:	00c00384 	movi	r3,14
 8004ac0:	19008616 	blt	r3,r4,8004cdc <_dtoa_r+0x990>
 8004ac4:	200490fa 	slli	r2,r4,3
 8004ac8:	00c20074 	movhi	r3,2049
 8004acc:	d9802217 	ldw	r6,136(sp)
 8004ad0:	18c39b04 	addi	r3,r3,3692
 8004ad4:	1885883a 	add	r2,r3,r2
 8004ad8:	14000017 	ldw	r16,0(r2)
 8004adc:	14400117 	ldw	r17,4(r2)
 8004ae0:	30016316 	blt	r6,zero,8005070 <_dtoa_r+0xd24>
 8004ae4:	800d883a 	mov	r6,r16
 8004ae8:	880f883a 	mov	r7,r17
 8004aec:	9009883a 	mov	r4,r18
 8004af0:	980b883a 	mov	r5,r19
 8004af4:	800c6b40 	call	800c6b4 <__divdf3>
 8004af8:	180b883a 	mov	r5,r3
 8004afc:	1009883a 	mov	r4,r2
 8004b00:	800e2080 	call	800e208 <__fixdfsi>
 8004b04:	1009883a 	mov	r4,r2
 8004b08:	102b883a 	mov	r21,r2
 8004b0c:	800e2880 	call	800e288 <__floatsidf>
 8004b10:	800d883a 	mov	r6,r16
 8004b14:	880f883a 	mov	r7,r17
 8004b18:	1009883a 	mov	r4,r2
 8004b1c:	180b883a 	mov	r5,r3
 8004b20:	800d1f40 	call	800d1f4 <__muldf3>
 8004b24:	100d883a 	mov	r6,r2
 8004b28:	180f883a 	mov	r7,r3
 8004b2c:	9009883a 	mov	r4,r18
 8004b30:	980b883a 	mov	r5,r19
 8004b34:	800d90c0 	call	800d90c <__subdf3>
 8004b38:	d9c00717 	ldw	r7,28(sp)
 8004b3c:	1009883a 	mov	r4,r2
 8004b40:	a8800c04 	addi	r2,r21,48
 8004b44:	38800005 	stb	r2,0(r7)
 8004b48:	3dc00044 	addi	r23,r7,1
 8004b4c:	d9c00617 	ldw	r7,24(sp)
 8004b50:	01800044 	movi	r6,1
 8004b54:	180b883a 	mov	r5,r3
 8004b58:	2005883a 	mov	r2,r4
 8004b5c:	39803826 	beq	r7,r6,8004c40 <_dtoa_r+0x8f4>
 8004b60:	000d883a 	mov	r6,zero
 8004b64:	01d00934 	movhi	r7,16420
 8004b68:	800d1f40 	call	800d1f4 <__muldf3>
 8004b6c:	000d883a 	mov	r6,zero
 8004b70:	000f883a 	mov	r7,zero
 8004b74:	1009883a 	mov	r4,r2
 8004b78:	180b883a 	mov	r5,r3
 8004b7c:	1025883a 	mov	r18,r2
 8004b80:	1827883a 	mov	r19,r3
 8004b84:	800cf9c0 	call	800cf9c <__eqdf2>
 8004b88:	103f9a26 	beq	r2,zero,80049f4 <_dtoa_r+0x6a8>
 8004b8c:	d9c00617 	ldw	r7,24(sp)
 8004b90:	d8c00717 	ldw	r3,28(sp)
 8004b94:	b829883a 	mov	r20,r23
 8004b98:	38bfffc4 	addi	r2,r7,-1
 8004b9c:	18ad883a 	add	r22,r3,r2
 8004ba0:	00000a06 	br	8004bcc <_dtoa_r+0x880>
 8004ba4:	800d1f40 	call	800d1f4 <__muldf3>
 8004ba8:	000d883a 	mov	r6,zero
 8004bac:	000f883a 	mov	r7,zero
 8004bb0:	1009883a 	mov	r4,r2
 8004bb4:	180b883a 	mov	r5,r3
 8004bb8:	1025883a 	mov	r18,r2
 8004bbc:	1827883a 	mov	r19,r3
 8004bc0:	b829883a 	mov	r20,r23
 8004bc4:	800cf9c0 	call	800cf9c <__eqdf2>
 8004bc8:	103f8a26 	beq	r2,zero,80049f4 <_dtoa_r+0x6a8>
 8004bcc:	800d883a 	mov	r6,r16
 8004bd0:	880f883a 	mov	r7,r17
 8004bd4:	9009883a 	mov	r4,r18
 8004bd8:	980b883a 	mov	r5,r19
 8004bdc:	800c6b40 	call	800c6b4 <__divdf3>
 8004be0:	180b883a 	mov	r5,r3
 8004be4:	1009883a 	mov	r4,r2
 8004be8:	800e2080 	call	800e208 <__fixdfsi>
 8004bec:	1009883a 	mov	r4,r2
 8004bf0:	102b883a 	mov	r21,r2
 8004bf4:	800e2880 	call	800e288 <__floatsidf>
 8004bf8:	800d883a 	mov	r6,r16
 8004bfc:	880f883a 	mov	r7,r17
 8004c00:	1009883a 	mov	r4,r2
 8004c04:	180b883a 	mov	r5,r3
 8004c08:	800d1f40 	call	800d1f4 <__muldf3>
 8004c0c:	100d883a 	mov	r6,r2
 8004c10:	180f883a 	mov	r7,r3
 8004c14:	9009883a 	mov	r4,r18
 8004c18:	980b883a 	mov	r5,r19
 8004c1c:	800d90c0 	call	800d90c <__subdf3>
 8004c20:	aa000c04 	addi	r8,r21,48
 8004c24:	a2000005 	stb	r8,0(r20)
 8004c28:	000d883a 	mov	r6,zero
 8004c2c:	01d00934 	movhi	r7,16420
 8004c30:	1009883a 	mov	r4,r2
 8004c34:	180b883a 	mov	r5,r3
 8004c38:	a5c00044 	addi	r23,r20,1
 8004c3c:	b53fd91e 	bne	r22,r20,8004ba4 <_dtoa_r+0x858>
 8004c40:	100d883a 	mov	r6,r2
 8004c44:	180f883a 	mov	r7,r3
 8004c48:	1009883a 	mov	r4,r2
 8004c4c:	180b883a 	mov	r5,r3
 8004c50:	800be080 	call	800be08 <__adddf3>
 8004c54:	100d883a 	mov	r6,r2
 8004c58:	180f883a 	mov	r7,r3
 8004c5c:	8009883a 	mov	r4,r16
 8004c60:	880b883a 	mov	r5,r17
 8004c64:	1027883a 	mov	r19,r2
 8004c68:	1825883a 	mov	r18,r3
 8004c6c:	800d1000 	call	800d100 <__ledf2>
 8004c70:	10000816 	blt	r2,zero,8004c94 <_dtoa_r+0x948>
 8004c74:	980d883a 	mov	r6,r19
 8004c78:	900f883a 	mov	r7,r18
 8004c7c:	8009883a 	mov	r4,r16
 8004c80:	880b883a 	mov	r5,r17
 8004c84:	800cf9c0 	call	800cf9c <__eqdf2>
 8004c88:	103f5a1e 	bne	r2,zero,80049f4 <_dtoa_r+0x6a8>
 8004c8c:	ad40004c 	andi	r21,r21,1
 8004c90:	a83f5826 	beq	r21,zero,80049f4 <_dtoa_r+0x6a8>
 8004c94:	bd3fffc3 	ldbu	r20,-1(r23)
 8004c98:	b8bfffc4 	addi	r2,r23,-1
 8004c9c:	1007883a 	mov	r3,r2
 8004ca0:	01400e44 	movi	r5,57
 8004ca4:	d9800717 	ldw	r6,28(sp)
 8004ca8:	00000506 	br	8004cc0 <_dtoa_r+0x974>
 8004cac:	18ffffc4 	addi	r3,r3,-1
 8004cb0:	11824726 	beq	r2,r6,80055d0 <_dtoa_r+0x1284>
 8004cb4:	1d000003 	ldbu	r20,0(r3)
 8004cb8:	102f883a 	mov	r23,r2
 8004cbc:	10bfffc4 	addi	r2,r2,-1
 8004cc0:	a1003fcc 	andi	r4,r20,255
 8004cc4:	2100201c 	xori	r4,r4,128
 8004cc8:	213fe004 	addi	r4,r4,-128
 8004ccc:	217ff726 	beq	r4,r5,8004cac <_dtoa_r+0x960>
 8004cd0:	a2000044 	addi	r8,r20,1
 8004cd4:	12000005 	stb	r8,0(r2)
 8004cd8:	003f4606 	br	80049f4 <_dtoa_r+0x6a8>
 8004cdc:	d9000b17 	ldw	r4,44(sp)
 8004ce0:	2000c826 	beq	r4,zero,8005004 <_dtoa_r+0xcb8>
 8004ce4:	d9800317 	ldw	r6,12(sp)
 8004ce8:	00c00044 	movi	r3,1
 8004cec:	1980f90e 	bge	r3,r6,80050d4 <_dtoa_r+0xd88>
 8004cf0:	d8800617 	ldw	r2,24(sp)
 8004cf4:	d8c00a17 	ldw	r3,40(sp)
 8004cf8:	157fffc4 	addi	r21,r2,-1
 8004cfc:	1d41f316 	blt	r3,r21,80054cc <_dtoa_r+0x1180>
 8004d00:	1d6bc83a 	sub	r21,r3,r21
 8004d04:	d9c00617 	ldw	r7,24(sp)
 8004d08:	3802aa16 	blt	r7,zero,80057b4 <_dtoa_r+0x1468>
 8004d0c:	dd000817 	ldw	r20,32(sp)
 8004d10:	d8800617 	ldw	r2,24(sp)
 8004d14:	d8c00817 	ldw	r3,32(sp)
 8004d18:	01400044 	movi	r5,1
 8004d1c:	e009883a 	mov	r4,fp
 8004d20:	1887883a 	add	r3,r3,r2
 8004d24:	d8c00815 	stw	r3,32(sp)
 8004d28:	b0ad883a 	add	r22,r22,r2
 8004d2c:	8007df40 	call	8007df4 <__i2b>
 8004d30:	1023883a 	mov	r17,r2
 8004d34:	a0000826 	beq	r20,zero,8004d58 <_dtoa_r+0xa0c>
 8004d38:	0580070e 	bge	zero,r22,8004d58 <_dtoa_r+0xa0c>
 8004d3c:	a005883a 	mov	r2,r20
 8004d40:	b500b916 	blt	r22,r20,8005028 <_dtoa_r+0xcdc>
 8004d44:	d9000817 	ldw	r4,32(sp)
 8004d48:	a0a9c83a 	sub	r20,r20,r2
 8004d4c:	b0adc83a 	sub	r22,r22,r2
 8004d50:	2089c83a 	sub	r4,r4,r2
 8004d54:	d9000815 	stw	r4,32(sp)
 8004d58:	d9800a17 	ldw	r6,40(sp)
 8004d5c:	0181810e 	bge	zero,r6,8005364 <_dtoa_r+0x1018>
 8004d60:	d9c00b17 	ldw	r7,44(sp)
 8004d64:	3800b326 	beq	r7,zero,8005034 <_dtoa_r+0xce8>
 8004d68:	a800b226 	beq	r21,zero,8005034 <_dtoa_r+0xce8>
 8004d6c:	880b883a 	mov	r5,r17
 8004d70:	a80d883a 	mov	r6,r21
 8004d74:	e009883a 	mov	r4,fp
 8004d78:	80080280 	call	8008028 <__pow5mult>
 8004d7c:	d9800917 	ldw	r6,36(sp)
 8004d80:	100b883a 	mov	r5,r2
 8004d84:	e009883a 	mov	r4,fp
 8004d88:	1023883a 	mov	r17,r2
 8004d8c:	8007e300 	call	8007e30 <__multiply>
 8004d90:	1021883a 	mov	r16,r2
 8004d94:	d8800a17 	ldw	r2,40(sp)
 8004d98:	d9400917 	ldw	r5,36(sp)
 8004d9c:	e009883a 	mov	r4,fp
 8004da0:	1545c83a 	sub	r2,r2,r21
 8004da4:	d8800a15 	stw	r2,40(sp)
 8004da8:	8007a900 	call	8007a90 <_Bfree>
 8004dac:	d8c00a17 	ldw	r3,40(sp)
 8004db0:	18009f1e 	bne	r3,zero,8005030 <_dtoa_r+0xce4>
 8004db4:	05c00044 	movi	r23,1
 8004db8:	e009883a 	mov	r4,fp
 8004dbc:	b80b883a 	mov	r5,r23
 8004dc0:	8007df40 	call	8007df4 <__i2b>
 8004dc4:	d9000d17 	ldw	r4,52(sp)
 8004dc8:	102b883a 	mov	r21,r2
 8004dcc:	2000ce26 	beq	r4,zero,8005108 <_dtoa_r+0xdbc>
 8004dd0:	200d883a 	mov	r6,r4
 8004dd4:	100b883a 	mov	r5,r2
 8004dd8:	e009883a 	mov	r4,fp
 8004ddc:	80080280 	call	8008028 <__pow5mult>
 8004de0:	d9800317 	ldw	r6,12(sp)
 8004de4:	102b883a 	mov	r21,r2
 8004de8:	b981810e 	bge	r23,r6,80053f0 <_dtoa_r+0x10a4>
 8004dec:	0027883a 	mov	r19,zero
 8004df0:	a8800417 	ldw	r2,16(r21)
 8004df4:	05c00804 	movi	r23,32
 8004df8:	10800104 	addi	r2,r2,4
 8004dfc:	1085883a 	add	r2,r2,r2
 8004e00:	1085883a 	add	r2,r2,r2
 8004e04:	a885883a 	add	r2,r21,r2
 8004e08:	11000017 	ldw	r4,0(r2)
 8004e0c:	8007cdc0 	call	8007cdc <__hi0bits>
 8004e10:	b885c83a 	sub	r2,r23,r2
 8004e14:	1585883a 	add	r2,r2,r22
 8004e18:	108007cc 	andi	r2,r2,31
 8004e1c:	1000b326 	beq	r2,zero,80050ec <_dtoa_r+0xda0>
 8004e20:	00c00804 	movi	r3,32
 8004e24:	1887c83a 	sub	r3,r3,r2
 8004e28:	01000104 	movi	r4,4
 8004e2c:	20c2cd0e 	bge	r4,r3,8005964 <_dtoa_r+0x1618>
 8004e30:	00c00704 	movi	r3,28
 8004e34:	1885c83a 	sub	r2,r3,r2
 8004e38:	d8c00817 	ldw	r3,32(sp)
 8004e3c:	a0a9883a 	add	r20,r20,r2
 8004e40:	b0ad883a 	add	r22,r22,r2
 8004e44:	1887883a 	add	r3,r3,r2
 8004e48:	d8c00815 	stw	r3,32(sp)
 8004e4c:	d9800817 	ldw	r6,32(sp)
 8004e50:	0180040e 	bge	zero,r6,8004e64 <_dtoa_r+0xb18>
 8004e54:	800b883a 	mov	r5,r16
 8004e58:	e009883a 	mov	r4,fp
 8004e5c:	80081680 	call	8008168 <__lshift>
 8004e60:	1021883a 	mov	r16,r2
 8004e64:	0580050e 	bge	zero,r22,8004e7c <_dtoa_r+0xb30>
 8004e68:	a80b883a 	mov	r5,r21
 8004e6c:	b00d883a 	mov	r6,r22
 8004e70:	e009883a 	mov	r4,fp
 8004e74:	80081680 	call	8008168 <__lshift>
 8004e78:	102b883a 	mov	r21,r2
 8004e7c:	d9c00e17 	ldw	r7,56(sp)
 8004e80:	3801211e 	bne	r7,zero,8005308 <_dtoa_r+0xfbc>
 8004e84:	d9800617 	ldw	r6,24(sp)
 8004e88:	0181380e 	bge	zero,r6,800536c <_dtoa_r+0x1020>
 8004e8c:	d8c00b17 	ldw	r3,44(sp)
 8004e90:	1800ab1e 	bne	r3,zero,8005140 <_dtoa_r+0xdf4>
 8004e94:	dc800717 	ldw	r18,28(sp)
 8004e98:	dcc00617 	ldw	r19,24(sp)
 8004e9c:	9029883a 	mov	r20,r18
 8004ea0:	00000206 	br	8004eac <_dtoa_r+0xb60>
 8004ea4:	8007ab80 	call	8007ab8 <__multadd>
 8004ea8:	1021883a 	mov	r16,r2
 8004eac:	a80b883a 	mov	r5,r21
 8004eb0:	8009883a 	mov	r4,r16
 8004eb4:	800414c0 	call	800414c <quorem>
 8004eb8:	10800c04 	addi	r2,r2,48
 8004ebc:	90800005 	stb	r2,0(r18)
 8004ec0:	94800044 	addi	r18,r18,1
 8004ec4:	9507c83a 	sub	r3,r18,r20
 8004ec8:	000f883a 	mov	r7,zero
 8004ecc:	01800284 	movi	r6,10
 8004ed0:	800b883a 	mov	r5,r16
 8004ed4:	e009883a 	mov	r4,fp
 8004ed8:	1cfff216 	blt	r3,r19,8004ea4 <_dtoa_r+0xb58>
 8004edc:	1011883a 	mov	r8,r2
 8004ee0:	d8800617 	ldw	r2,24(sp)
 8004ee4:	0082370e 	bge	zero,r2,80057c4 <_dtoa_r+0x1478>
 8004ee8:	d9000717 	ldw	r4,28(sp)
 8004eec:	0025883a 	mov	r18,zero
 8004ef0:	20af883a 	add	r23,r4,r2
 8004ef4:	01800044 	movi	r6,1
 8004ef8:	800b883a 	mov	r5,r16
 8004efc:	e009883a 	mov	r4,fp
 8004f00:	da001715 	stw	r8,92(sp)
 8004f04:	80081680 	call	8008168 <__lshift>
 8004f08:	a80b883a 	mov	r5,r21
 8004f0c:	1009883a 	mov	r4,r2
 8004f10:	d8800915 	stw	r2,36(sp)
 8004f14:	80082b00 	call	80082b0 <__mcmp>
 8004f18:	da001717 	ldw	r8,92(sp)
 8004f1c:	0081800e 	bge	zero,r2,8005520 <_dtoa_r+0x11d4>
 8004f20:	b93fffc3 	ldbu	r4,-1(r23)
 8004f24:	b8bfffc4 	addi	r2,r23,-1
 8004f28:	1007883a 	mov	r3,r2
 8004f2c:	01800e44 	movi	r6,57
 8004f30:	d9c00717 	ldw	r7,28(sp)
 8004f34:	00000506 	br	8004f4c <_dtoa_r+0xc00>
 8004f38:	18ffffc4 	addi	r3,r3,-1
 8004f3c:	11c12326 	beq	r2,r7,80053cc <_dtoa_r+0x1080>
 8004f40:	19000003 	ldbu	r4,0(r3)
 8004f44:	102f883a 	mov	r23,r2
 8004f48:	10bfffc4 	addi	r2,r2,-1
 8004f4c:	21403fcc 	andi	r5,r4,255
 8004f50:	2940201c 	xori	r5,r5,128
 8004f54:	297fe004 	addi	r5,r5,-128
 8004f58:	29bff726 	beq	r5,r6,8004f38 <_dtoa_r+0xbec>
 8004f5c:	21000044 	addi	r4,r4,1
 8004f60:	11000005 	stb	r4,0(r2)
 8004f64:	a80b883a 	mov	r5,r21
 8004f68:	e009883a 	mov	r4,fp
 8004f6c:	8007a900 	call	8007a90 <_Bfree>
 8004f70:	883ea026 	beq	r17,zero,80049f4 <_dtoa_r+0x6a8>
 8004f74:	90000426 	beq	r18,zero,8004f88 <_dtoa_r+0xc3c>
 8004f78:	94400326 	beq	r18,r17,8004f88 <_dtoa_r+0xc3c>
 8004f7c:	900b883a 	mov	r5,r18
 8004f80:	e009883a 	mov	r4,fp
 8004f84:	8007a900 	call	8007a90 <_Bfree>
 8004f88:	880b883a 	mov	r5,r17
 8004f8c:	e009883a 	mov	r4,fp
 8004f90:	8007a900 	call	8007a90 <_Bfree>
 8004f94:	003e9706 	br	80049f4 <_dtoa_r+0x6a8>
 8004f98:	01800044 	movi	r6,1
 8004f9c:	d9800e15 	stw	r6,56(sp)
 8004fa0:	003d9606 	br	80045fc <_dtoa_r+0x2b0>
 8004fa4:	d8800817 	ldw	r2,32(sp)
 8004fa8:	d8c00517 	ldw	r3,20(sp)
 8004fac:	d8000d15 	stw	zero,52(sp)
 8004fb0:	10c5c83a 	sub	r2,r2,r3
 8004fb4:	00c9c83a 	sub	r4,zero,r3
 8004fb8:	d8800815 	stw	r2,32(sp)
 8004fbc:	d9000a15 	stw	r4,40(sp)
 8004fc0:	003d9706 	br	8004620 <_dtoa_r+0x2d4>
 8004fc4:	05adc83a 	sub	r22,zero,r22
 8004fc8:	dd800815 	stw	r22,32(sp)
 8004fcc:	002d883a 	mov	r22,zero
 8004fd0:	003d8e06 	br	800460c <_dtoa_r+0x2c0>
 8004fd4:	d9000517 	ldw	r4,20(sp)
 8004fd8:	800e2880 	call	800e288 <__floatsidf>
 8004fdc:	100d883a 	mov	r6,r2
 8004fe0:	180f883a 	mov	r7,r3
 8004fe4:	a009883a 	mov	r4,r20
 8004fe8:	880b883a 	mov	r5,r17
 8004fec:	800cf9c0 	call	800cf9c <__eqdf2>
 8004ff0:	103d7126 	beq	r2,zero,80045b8 <_dtoa_r+0x26c>
 8004ff4:	d9c00517 	ldw	r7,20(sp)
 8004ff8:	39ffffc4 	addi	r7,r7,-1
 8004ffc:	d9c00515 	stw	r7,20(sp)
 8005000:	003d6d06 	br	80045b8 <_dtoa_r+0x26c>
 8005004:	dd400a17 	ldw	r21,40(sp)
 8005008:	dd000817 	ldw	r20,32(sp)
 800500c:	0023883a 	mov	r17,zero
 8005010:	003f4806 	br	8004d34 <_dtoa_r+0x9e8>
 8005014:	10e3c83a 	sub	r17,r2,r3
 8005018:	9448983a 	sll	r4,r18,r17
 800501c:	003d3206 	br	80044e8 <_dtoa_r+0x19c>
 8005020:	d8000e15 	stw	zero,56(sp)
 8005024:	003d7506 	br	80045fc <_dtoa_r+0x2b0>
 8005028:	b005883a 	mov	r2,r22
 800502c:	003f4506 	br	8004d44 <_dtoa_r+0x9f8>
 8005030:	dc000915 	stw	r16,36(sp)
 8005034:	d9800a17 	ldw	r6,40(sp)
 8005038:	d9400917 	ldw	r5,36(sp)
 800503c:	e009883a 	mov	r4,fp
 8005040:	80080280 	call	8008028 <__pow5mult>
 8005044:	1021883a 	mov	r16,r2
 8005048:	003f5a06 	br	8004db4 <_dtoa_r+0xa68>
 800504c:	01c00044 	movi	r7,1
 8005050:	d9c00b15 	stw	r7,44(sp)
 8005054:	d8802217 	ldw	r2,136(sp)
 8005058:	0081280e 	bge	zero,r2,80054fc <_dtoa_r+0x11b0>
 800505c:	100d883a 	mov	r6,r2
 8005060:	1021883a 	mov	r16,r2
 8005064:	d8800c15 	stw	r2,48(sp)
 8005068:	d8800615 	stw	r2,24(sp)
 800506c:	003d8806 	br	8004690 <_dtoa_r+0x344>
 8005070:	d8800617 	ldw	r2,24(sp)
 8005074:	00be9b16 	blt	zero,r2,8004ae4 <_dtoa_r+0x798>
 8005078:	10010f1e 	bne	r2,zero,80054b8 <_dtoa_r+0x116c>
 800507c:	880b883a 	mov	r5,r17
 8005080:	000d883a 	mov	r6,zero
 8005084:	01d00534 	movhi	r7,16404
 8005088:	8009883a 	mov	r4,r16
 800508c:	800d1f40 	call	800d1f4 <__muldf3>
 8005090:	900d883a 	mov	r6,r18
 8005094:	980f883a 	mov	r7,r19
 8005098:	1009883a 	mov	r4,r2
 800509c:	180b883a 	mov	r5,r3
 80050a0:	800d0240 	call	800d024 <__gedf2>
 80050a4:	002b883a 	mov	r21,zero
 80050a8:	0023883a 	mov	r17,zero
 80050ac:	1000bf16 	blt	r2,zero,80053ac <_dtoa_r+0x1060>
 80050b0:	d9802217 	ldw	r6,136(sp)
 80050b4:	ddc00717 	ldw	r23,28(sp)
 80050b8:	018c303a 	nor	r6,zero,r6
 80050bc:	d9800515 	stw	r6,20(sp)
 80050c0:	a80b883a 	mov	r5,r21
 80050c4:	e009883a 	mov	r4,fp
 80050c8:	8007a900 	call	8007a90 <_Bfree>
 80050cc:	883e4926 	beq	r17,zero,80049f4 <_dtoa_r+0x6a8>
 80050d0:	003fad06 	br	8004f88 <_dtoa_r+0xc3c>
 80050d4:	d9c01117 	ldw	r7,68(sp)
 80050d8:	3801bc26 	beq	r7,zero,80057cc <_dtoa_r+0x1480>
 80050dc:	10810cc4 	addi	r2,r2,1075
 80050e0:	dd400a17 	ldw	r21,40(sp)
 80050e4:	dd000817 	ldw	r20,32(sp)
 80050e8:	003f0a06 	br	8004d14 <_dtoa_r+0x9c8>
 80050ec:	00800704 	movi	r2,28
 80050f0:	d9000817 	ldw	r4,32(sp)
 80050f4:	a0a9883a 	add	r20,r20,r2
 80050f8:	b0ad883a 	add	r22,r22,r2
 80050fc:	2089883a 	add	r4,r4,r2
 8005100:	d9000815 	stw	r4,32(sp)
 8005104:	003f5106 	br	8004e4c <_dtoa_r+0xb00>
 8005108:	d8c00317 	ldw	r3,12(sp)
 800510c:	b8c1fc0e 	bge	r23,r3,8005900 <_dtoa_r+0x15b4>
 8005110:	0027883a 	mov	r19,zero
 8005114:	b805883a 	mov	r2,r23
 8005118:	003f3e06 	br	8004e14 <_dtoa_r+0xac8>
 800511c:	880b883a 	mov	r5,r17
 8005120:	e009883a 	mov	r4,fp
 8005124:	000f883a 	mov	r7,zero
 8005128:	01800284 	movi	r6,10
 800512c:	8007ab80 	call	8007ab8 <__multadd>
 8005130:	d9000c17 	ldw	r4,48(sp)
 8005134:	1023883a 	mov	r17,r2
 8005138:	0102040e 	bge	zero,r4,800594c <_dtoa_r+0x1600>
 800513c:	d9000615 	stw	r4,24(sp)
 8005140:	0500050e 	bge	zero,r20,8005158 <_dtoa_r+0xe0c>
 8005144:	880b883a 	mov	r5,r17
 8005148:	a00d883a 	mov	r6,r20
 800514c:	e009883a 	mov	r4,fp
 8005150:	80081680 	call	8008168 <__lshift>
 8005154:	1023883a 	mov	r17,r2
 8005158:	9801241e 	bne	r19,zero,80055ec <_dtoa_r+0x12a0>
 800515c:	8829883a 	mov	r20,r17
 8005160:	d9000617 	ldw	r4,24(sp)
 8005164:	dcc00717 	ldw	r19,28(sp)
 8005168:	9480004c 	andi	r18,r18,1
 800516c:	20bfffc4 	addi	r2,r4,-1
 8005170:	9885883a 	add	r2,r19,r2
 8005174:	d8800415 	stw	r2,16(sp)
 8005178:	dc800615 	stw	r18,24(sp)
 800517c:	a80b883a 	mov	r5,r21
 8005180:	8009883a 	mov	r4,r16
 8005184:	800414c0 	call	800414c <quorem>
 8005188:	880b883a 	mov	r5,r17
 800518c:	8009883a 	mov	r4,r16
 8005190:	102f883a 	mov	r23,r2
 8005194:	80082b00 	call	80082b0 <__mcmp>
 8005198:	a80b883a 	mov	r5,r21
 800519c:	a00d883a 	mov	r6,r20
 80051a0:	e009883a 	mov	r4,fp
 80051a4:	102d883a 	mov	r22,r2
 80051a8:	80083100 	call	8008310 <__mdiff>
 80051ac:	1007883a 	mov	r3,r2
 80051b0:	10800317 	ldw	r2,12(r2)
 80051b4:	bc800c04 	addi	r18,r23,48
 80051b8:	180b883a 	mov	r5,r3
 80051bc:	10004e1e 	bne	r2,zero,80052f8 <_dtoa_r+0xfac>
 80051c0:	8009883a 	mov	r4,r16
 80051c4:	d8c01615 	stw	r3,88(sp)
 80051c8:	80082b00 	call	80082b0 <__mcmp>
 80051cc:	d8c01617 	ldw	r3,88(sp)
 80051d0:	e009883a 	mov	r4,fp
 80051d4:	d8801615 	stw	r2,88(sp)
 80051d8:	180b883a 	mov	r5,r3
 80051dc:	8007a900 	call	8007a90 <_Bfree>
 80051e0:	d8801617 	ldw	r2,88(sp)
 80051e4:	1000041e 	bne	r2,zero,80051f8 <_dtoa_r+0xeac>
 80051e8:	d9800317 	ldw	r6,12(sp)
 80051ec:	3000021e 	bne	r6,zero,80051f8 <_dtoa_r+0xeac>
 80051f0:	d8c00617 	ldw	r3,24(sp)
 80051f4:	18003726 	beq	r3,zero,80052d4 <_dtoa_r+0xf88>
 80051f8:	b0002016 	blt	r22,zero,800527c <_dtoa_r+0xf30>
 80051fc:	b000041e 	bne	r22,zero,8005210 <_dtoa_r+0xec4>
 8005200:	d9000317 	ldw	r4,12(sp)
 8005204:	2000021e 	bne	r4,zero,8005210 <_dtoa_r+0xec4>
 8005208:	d8c00617 	ldw	r3,24(sp)
 800520c:	18001b26 	beq	r3,zero,800527c <_dtoa_r+0xf30>
 8005210:	00810716 	blt	zero,r2,8005630 <_dtoa_r+0x12e4>
 8005214:	d8c00417 	ldw	r3,16(sp)
 8005218:	9d800044 	addi	r22,r19,1
 800521c:	9c800005 	stb	r18,0(r19)
 8005220:	b02f883a 	mov	r23,r22
 8005224:	98c10626 	beq	r19,r3,8005640 <_dtoa_r+0x12f4>
 8005228:	800b883a 	mov	r5,r16
 800522c:	000f883a 	mov	r7,zero
 8005230:	01800284 	movi	r6,10
 8005234:	e009883a 	mov	r4,fp
 8005238:	8007ab80 	call	8007ab8 <__multadd>
 800523c:	1021883a 	mov	r16,r2
 8005240:	000f883a 	mov	r7,zero
 8005244:	01800284 	movi	r6,10
 8005248:	880b883a 	mov	r5,r17
 800524c:	e009883a 	mov	r4,fp
 8005250:	8d002526 	beq	r17,r20,80052e8 <_dtoa_r+0xf9c>
 8005254:	8007ab80 	call	8007ab8 <__multadd>
 8005258:	a00b883a 	mov	r5,r20
 800525c:	000f883a 	mov	r7,zero
 8005260:	01800284 	movi	r6,10
 8005264:	e009883a 	mov	r4,fp
 8005268:	1023883a 	mov	r17,r2
 800526c:	8007ab80 	call	8007ab8 <__multadd>
 8005270:	1029883a 	mov	r20,r2
 8005274:	b027883a 	mov	r19,r22
 8005278:	003fc006 	br	800517c <_dtoa_r+0xe30>
 800527c:	9011883a 	mov	r8,r18
 8005280:	00800e0e 	bge	zero,r2,80052bc <_dtoa_r+0xf70>
 8005284:	800b883a 	mov	r5,r16
 8005288:	01800044 	movi	r6,1
 800528c:	e009883a 	mov	r4,fp
 8005290:	da001715 	stw	r8,92(sp)
 8005294:	80081680 	call	8008168 <__lshift>
 8005298:	a80b883a 	mov	r5,r21
 800529c:	1009883a 	mov	r4,r2
 80052a0:	1021883a 	mov	r16,r2
 80052a4:	80082b00 	call	80082b0 <__mcmp>
 80052a8:	da001717 	ldw	r8,92(sp)
 80052ac:	0081960e 	bge	zero,r2,8005908 <_dtoa_r+0x15bc>
 80052b0:	00800e44 	movi	r2,57
 80052b4:	40817026 	beq	r8,r2,8005878 <_dtoa_r+0x152c>
 80052b8:	ba000c44 	addi	r8,r23,49
 80052bc:	8825883a 	mov	r18,r17
 80052c0:	9dc00044 	addi	r23,r19,1
 80052c4:	9a000005 	stb	r8,0(r19)
 80052c8:	a023883a 	mov	r17,r20
 80052cc:	dc000915 	stw	r16,36(sp)
 80052d0:	003f2406 	br	8004f64 <_dtoa_r+0xc18>
 80052d4:	00800e44 	movi	r2,57
 80052d8:	9011883a 	mov	r8,r18
 80052dc:	90816626 	beq	r18,r2,8005878 <_dtoa_r+0x152c>
 80052e0:	05bff516 	blt	zero,r22,80052b8 <_dtoa_r+0xf6c>
 80052e4:	003ff506 	br	80052bc <_dtoa_r+0xf70>
 80052e8:	8007ab80 	call	8007ab8 <__multadd>
 80052ec:	1023883a 	mov	r17,r2
 80052f0:	1029883a 	mov	r20,r2
 80052f4:	003fdf06 	br	8005274 <_dtoa_r+0xf28>
 80052f8:	e009883a 	mov	r4,fp
 80052fc:	8007a900 	call	8007a90 <_Bfree>
 8005300:	00800044 	movi	r2,1
 8005304:	003fbc06 	br	80051f8 <_dtoa_r+0xeac>
 8005308:	a80b883a 	mov	r5,r21
 800530c:	8009883a 	mov	r4,r16
 8005310:	80082b00 	call	80082b0 <__mcmp>
 8005314:	103edb0e 	bge	r2,zero,8004e84 <_dtoa_r+0xb38>
 8005318:	800b883a 	mov	r5,r16
 800531c:	000f883a 	mov	r7,zero
 8005320:	01800284 	movi	r6,10
 8005324:	e009883a 	mov	r4,fp
 8005328:	8007ab80 	call	8007ab8 <__multadd>
 800532c:	1021883a 	mov	r16,r2
 8005330:	d8800517 	ldw	r2,20(sp)
 8005334:	d8c00b17 	ldw	r3,44(sp)
 8005338:	10bfffc4 	addi	r2,r2,-1
 800533c:	d8800515 	stw	r2,20(sp)
 8005340:	183f761e 	bne	r3,zero,800511c <_dtoa_r+0xdd0>
 8005344:	d9000c17 	ldw	r4,48(sp)
 8005348:	0101730e 	bge	zero,r4,8005918 <_dtoa_r+0x15cc>
 800534c:	d9000615 	stw	r4,24(sp)
 8005350:	003ed006 	br	8004e94 <_dtoa_r+0xb48>
 8005354:	00800084 	movi	r2,2
 8005358:	3081861e 	bne	r6,r2,8005974 <_dtoa_r+0x1628>
 800535c:	d8000b15 	stw	zero,44(sp)
 8005360:	003f3c06 	br	8005054 <_dtoa_r+0xd08>
 8005364:	dc000917 	ldw	r16,36(sp)
 8005368:	003e9206 	br	8004db4 <_dtoa_r+0xa68>
 800536c:	d9c00317 	ldw	r7,12(sp)
 8005370:	00800084 	movi	r2,2
 8005374:	11fec50e 	bge	r2,r7,8004e8c <_dtoa_r+0xb40>
 8005378:	d9000617 	ldw	r4,24(sp)
 800537c:	20013c1e 	bne	r4,zero,8005870 <_dtoa_r+0x1524>
 8005380:	a80b883a 	mov	r5,r21
 8005384:	000f883a 	mov	r7,zero
 8005388:	01800144 	movi	r6,5
 800538c:	e009883a 	mov	r4,fp
 8005390:	8007ab80 	call	8007ab8 <__multadd>
 8005394:	100b883a 	mov	r5,r2
 8005398:	8009883a 	mov	r4,r16
 800539c:	102b883a 	mov	r21,r2
 80053a0:	80082b00 	call	80082b0 <__mcmp>
 80053a4:	dc000915 	stw	r16,36(sp)
 80053a8:	00bf410e 	bge	zero,r2,80050b0 <_dtoa_r+0xd64>
 80053ac:	d9c00717 	ldw	r7,28(sp)
 80053b0:	00800c44 	movi	r2,49
 80053b4:	38800005 	stb	r2,0(r7)
 80053b8:	d8800517 	ldw	r2,20(sp)
 80053bc:	3dc00044 	addi	r23,r7,1
 80053c0:	10800044 	addi	r2,r2,1
 80053c4:	d8800515 	stw	r2,20(sp)
 80053c8:	003f3d06 	br	80050c0 <_dtoa_r+0xd74>
 80053cc:	d9800517 	ldw	r6,20(sp)
 80053d0:	d9c00717 	ldw	r7,28(sp)
 80053d4:	00800c44 	movi	r2,49
 80053d8:	31800044 	addi	r6,r6,1
 80053dc:	d9800515 	stw	r6,20(sp)
 80053e0:	38800005 	stb	r2,0(r7)
 80053e4:	003edf06 	br	8004f64 <_dtoa_r+0xc18>
 80053e8:	d8000b15 	stw	zero,44(sp)
 80053ec:	003c9f06 	br	800466c <_dtoa_r+0x320>
 80053f0:	903e7e1e 	bne	r18,zero,8004dec <_dtoa_r+0xaa0>
 80053f4:	00800434 	movhi	r2,16
 80053f8:	10bfffc4 	addi	r2,r2,-1
 80053fc:	9884703a 	and	r2,r19,r2
 8005400:	1000ea1e 	bne	r2,zero,80057ac <_dtoa_r+0x1460>
 8005404:	9cdffc2c 	andhi	r19,r19,32752
 8005408:	9800e826 	beq	r19,zero,80057ac <_dtoa_r+0x1460>
 800540c:	d9c00817 	ldw	r7,32(sp)
 8005410:	b5800044 	addi	r22,r22,1
 8005414:	04c00044 	movi	r19,1
 8005418:	39c00044 	addi	r7,r7,1
 800541c:	d9c00815 	stw	r7,32(sp)
 8005420:	d8800d17 	ldw	r2,52(sp)
 8005424:	103e721e 	bne	r2,zero,8004df0 <_dtoa_r+0xaa4>
 8005428:	00800044 	movi	r2,1
 800542c:	003e7906 	br	8004e14 <_dtoa_r+0xac8>
 8005430:	8009883a 	mov	r4,r16
 8005434:	800e2880 	call	800e288 <__floatsidf>
 8005438:	d9800f17 	ldw	r6,60(sp)
 800543c:	d9c01017 	ldw	r7,64(sp)
 8005440:	1009883a 	mov	r4,r2
 8005444:	180b883a 	mov	r5,r3
 8005448:	800d1f40 	call	800d1f4 <__muldf3>
 800544c:	000d883a 	mov	r6,zero
 8005450:	01d00734 	movhi	r7,16412
 8005454:	1009883a 	mov	r4,r2
 8005458:	180b883a 	mov	r5,r3
 800545c:	800be080 	call	800be08 <__adddf3>
 8005460:	047f3034 	movhi	r17,64704
 8005464:	1021883a 	mov	r16,r2
 8005468:	1c63883a 	add	r17,r3,r17
 800546c:	d9000f17 	ldw	r4,60(sp)
 8005470:	d9401017 	ldw	r5,64(sp)
 8005474:	000d883a 	mov	r6,zero
 8005478:	01d00534 	movhi	r7,16404
 800547c:	800d90c0 	call	800d90c <__subdf3>
 8005480:	800d883a 	mov	r6,r16
 8005484:	880f883a 	mov	r7,r17
 8005488:	1009883a 	mov	r4,r2
 800548c:	180b883a 	mov	r5,r3
 8005490:	102b883a 	mov	r21,r2
 8005494:	1829883a 	mov	r20,r3
 8005498:	800d0240 	call	800d024 <__gedf2>
 800549c:	00806c16 	blt	zero,r2,8005650 <_dtoa_r+0x1304>
 80054a0:	89e0003c 	xorhi	r7,r17,32768
 80054a4:	800d883a 	mov	r6,r16
 80054a8:	a809883a 	mov	r4,r21
 80054ac:	a00b883a 	mov	r5,r20
 80054b0:	800d1000 	call	800d100 <__ledf2>
 80054b4:	103d7e0e 	bge	r2,zero,8004ab0 <_dtoa_r+0x764>
 80054b8:	002b883a 	mov	r21,zero
 80054bc:	0023883a 	mov	r17,zero
 80054c0:	003efb06 	br	80050b0 <_dtoa_r+0xd64>
 80054c4:	d8800717 	ldw	r2,28(sp)
 80054c8:	003bd006 	br	800440c <_dtoa_r+0xc0>
 80054cc:	d9000a17 	ldw	r4,40(sp)
 80054d0:	d9800d17 	ldw	r6,52(sp)
 80054d4:	dd400a15 	stw	r21,40(sp)
 80054d8:	a905c83a 	sub	r2,r21,r4
 80054dc:	308d883a 	add	r6,r6,r2
 80054e0:	d9800d15 	stw	r6,52(sp)
 80054e4:	002b883a 	mov	r21,zero
 80054e8:	003e0606 	br	8004d04 <_dtoa_r+0x9b8>
 80054ec:	9023883a 	mov	r17,r18
 80054f0:	9829883a 	mov	r20,r19
 80054f4:	04000084 	movi	r16,2
 80054f8:	003c9206 	br	8004744 <_dtoa_r+0x3f8>
 80054fc:	04000044 	movi	r16,1
 8005500:	dc000c15 	stw	r16,48(sp)
 8005504:	dc000615 	stw	r16,24(sp)
 8005508:	dc002215 	stw	r16,136(sp)
 800550c:	e0001115 	stw	zero,68(fp)
 8005510:	000b883a 	mov	r5,zero
 8005514:	003c6906 	br	80046bc <_dtoa_r+0x370>
 8005518:	3021883a 	mov	r16,r6
 800551c:	003ffb06 	br	800550c <_dtoa_r+0x11c0>
 8005520:	1000021e 	bne	r2,zero,800552c <_dtoa_r+0x11e0>
 8005524:	4200004c 	andi	r8,r8,1
 8005528:	403e7d1e 	bne	r8,zero,8004f20 <_dtoa_r+0xbd4>
 800552c:	01000c04 	movi	r4,48
 8005530:	00000106 	br	8005538 <_dtoa_r+0x11ec>
 8005534:	102f883a 	mov	r23,r2
 8005538:	b8bfffc4 	addi	r2,r23,-1
 800553c:	10c00007 	ldb	r3,0(r2)
 8005540:	193ffc26 	beq	r3,r4,8005534 <_dtoa_r+0x11e8>
 8005544:	003e8706 	br	8004f64 <_dtoa_r+0xc18>
 8005548:	d8800517 	ldw	r2,20(sp)
 800554c:	00a3c83a 	sub	r17,zero,r2
 8005550:	8800a426 	beq	r17,zero,80057e4 <_dtoa_r+0x1498>
 8005554:	888003cc 	andi	r2,r17,15
 8005558:	100490fa 	slli	r2,r2,3
 800555c:	00c20074 	movhi	r3,2049
 8005560:	18c39b04 	addi	r3,r3,3692
 8005564:	1885883a 	add	r2,r3,r2
 8005568:	11800017 	ldw	r6,0(r2)
 800556c:	11c00117 	ldw	r7,4(r2)
 8005570:	9009883a 	mov	r4,r18
 8005574:	980b883a 	mov	r5,r19
 8005578:	8823d13a 	srai	r17,r17,4
 800557c:	800d1f40 	call	800d1f4 <__muldf3>
 8005580:	d8800f15 	stw	r2,60(sp)
 8005584:	d8c01015 	stw	r3,64(sp)
 8005588:	8800e826 	beq	r17,zero,800592c <_dtoa_r+0x15e0>
 800558c:	05020074 	movhi	r20,2049
 8005590:	a5039104 	addi	r20,r20,3652
 8005594:	04000084 	movi	r16,2
 8005598:	8980004c 	andi	r6,r17,1
 800559c:	1009883a 	mov	r4,r2
 80055a0:	8823d07a 	srai	r17,r17,1
 80055a4:	180b883a 	mov	r5,r3
 80055a8:	30000426 	beq	r6,zero,80055bc <_dtoa_r+0x1270>
 80055ac:	a1800017 	ldw	r6,0(r20)
 80055b0:	a1c00117 	ldw	r7,4(r20)
 80055b4:	84000044 	addi	r16,r16,1
 80055b8:	800d1f40 	call	800d1f4 <__muldf3>
 80055bc:	a5000204 	addi	r20,r20,8
 80055c0:	883ff51e 	bne	r17,zero,8005598 <_dtoa_r+0x124c>
 80055c4:	d8800f15 	stw	r2,60(sp)
 80055c8:	d8c01015 	stw	r3,64(sp)
 80055cc:	003c7606 	br	80047a8 <_dtoa_r+0x45c>
 80055d0:	00c00c04 	movi	r3,48
 80055d4:	10c00005 	stb	r3,0(r2)
 80055d8:	d8c00517 	ldw	r3,20(sp)
 80055dc:	bd3fffc3 	ldbu	r20,-1(r23)
 80055e0:	18c00044 	addi	r3,r3,1
 80055e4:	d8c00515 	stw	r3,20(sp)
 80055e8:	003db906 	br	8004cd0 <_dtoa_r+0x984>
 80055ec:	89400117 	ldw	r5,4(r17)
 80055f0:	e009883a 	mov	r4,fp
 80055f4:	80079e80 	call	80079e8 <_Balloc>
 80055f8:	89800417 	ldw	r6,16(r17)
 80055fc:	89400304 	addi	r5,r17,12
 8005600:	11000304 	addi	r4,r2,12
 8005604:	31800084 	addi	r6,r6,2
 8005608:	318d883a 	add	r6,r6,r6
 800560c:	318d883a 	add	r6,r6,r6
 8005610:	1027883a 	mov	r19,r2
 8005614:	800761c0 	call	800761c <memcpy>
 8005618:	01800044 	movi	r6,1
 800561c:	980b883a 	mov	r5,r19
 8005620:	e009883a 	mov	r4,fp
 8005624:	80081680 	call	8008168 <__lshift>
 8005628:	1029883a 	mov	r20,r2
 800562c:	003ecc06 	br	8005160 <_dtoa_r+0xe14>
 8005630:	00800e44 	movi	r2,57
 8005634:	90809026 	beq	r18,r2,8005878 <_dtoa_r+0x152c>
 8005638:	92000044 	addi	r8,r18,1
 800563c:	003f1f06 	br	80052bc <_dtoa_r+0xf70>
 8005640:	9011883a 	mov	r8,r18
 8005644:	8825883a 	mov	r18,r17
 8005648:	a023883a 	mov	r17,r20
 800564c:	003e2906 	br	8004ef4 <_dtoa_r+0xba8>
 8005650:	002b883a 	mov	r21,zero
 8005654:	0023883a 	mov	r17,zero
 8005658:	003f5406 	br	80053ac <_dtoa_r+0x1060>
 800565c:	61bfffc4 	addi	r6,r12,-1
 8005660:	300490fa 	slli	r2,r6,3
 8005664:	00c20074 	movhi	r3,2049
 8005668:	18c39b04 	addi	r3,r3,3692
 800566c:	1885883a 	add	r2,r3,r2
 8005670:	11000017 	ldw	r4,0(r2)
 8005674:	11400117 	ldw	r5,4(r2)
 8005678:	d8800717 	ldw	r2,28(sp)
 800567c:	880f883a 	mov	r7,r17
 8005680:	d9801215 	stw	r6,72(sp)
 8005684:	800d883a 	mov	r6,r16
 8005688:	db001615 	stw	r12,88(sp)
 800568c:	15c00044 	addi	r23,r2,1
 8005690:	800d1f40 	call	800d1f4 <__muldf3>
 8005694:	d9401017 	ldw	r5,64(sp)
 8005698:	d9000f17 	ldw	r4,60(sp)
 800569c:	d8c01515 	stw	r3,84(sp)
 80056a0:	d8801415 	stw	r2,80(sp)
 80056a4:	800e2080 	call	800e208 <__fixdfsi>
 80056a8:	1009883a 	mov	r4,r2
 80056ac:	1021883a 	mov	r16,r2
 80056b0:	800e2880 	call	800e288 <__floatsidf>
 80056b4:	d9000f17 	ldw	r4,60(sp)
 80056b8:	d9401017 	ldw	r5,64(sp)
 80056bc:	100d883a 	mov	r6,r2
 80056c0:	180f883a 	mov	r7,r3
 80056c4:	800d90c0 	call	800d90c <__subdf3>
 80056c8:	1829883a 	mov	r20,r3
 80056cc:	d8c00717 	ldw	r3,28(sp)
 80056d0:	84000c04 	addi	r16,r16,48
 80056d4:	1023883a 	mov	r17,r2
 80056d8:	1c000005 	stb	r16,0(r3)
 80056dc:	db001617 	ldw	r12,88(sp)
 80056e0:	00800044 	movi	r2,1
 80056e4:	60802226 	beq	r12,r2,8005770 <_dtoa_r+0x1424>
 80056e8:	d9c00717 	ldw	r7,28(sp)
 80056ec:	8805883a 	mov	r2,r17
 80056f0:	b82b883a 	mov	r21,r23
 80056f4:	3b19883a 	add	r12,r7,r12
 80056f8:	6023883a 	mov	r17,r12
 80056fc:	a007883a 	mov	r3,r20
 8005700:	dc800f15 	stw	r18,60(sp)
 8005704:	000d883a 	mov	r6,zero
 8005708:	01d00934 	movhi	r7,16420
 800570c:	1009883a 	mov	r4,r2
 8005710:	180b883a 	mov	r5,r3
 8005714:	800d1f40 	call	800d1f4 <__muldf3>
 8005718:	180b883a 	mov	r5,r3
 800571c:	1009883a 	mov	r4,r2
 8005720:	1829883a 	mov	r20,r3
 8005724:	1025883a 	mov	r18,r2
 8005728:	800e2080 	call	800e208 <__fixdfsi>
 800572c:	1009883a 	mov	r4,r2
 8005730:	1021883a 	mov	r16,r2
 8005734:	800e2880 	call	800e288 <__floatsidf>
 8005738:	100d883a 	mov	r6,r2
 800573c:	180f883a 	mov	r7,r3
 8005740:	9009883a 	mov	r4,r18
 8005744:	a00b883a 	mov	r5,r20
 8005748:	84000c04 	addi	r16,r16,48
 800574c:	800d90c0 	call	800d90c <__subdf3>
 8005750:	ad400044 	addi	r21,r21,1
 8005754:	ac3fffc5 	stb	r16,-1(r21)
 8005758:	ac7fea1e 	bne	r21,r17,8005704 <_dtoa_r+0x13b8>
 800575c:	1023883a 	mov	r17,r2
 8005760:	d8801217 	ldw	r2,72(sp)
 8005764:	dc800f17 	ldw	r18,60(sp)
 8005768:	1829883a 	mov	r20,r3
 800576c:	b8af883a 	add	r23,r23,r2
 8005770:	d9001417 	ldw	r4,80(sp)
 8005774:	d9401517 	ldw	r5,84(sp)
 8005778:	000d883a 	mov	r6,zero
 800577c:	01cff834 	movhi	r7,16352
 8005780:	800be080 	call	800be08 <__adddf3>
 8005784:	880d883a 	mov	r6,r17
 8005788:	a00f883a 	mov	r7,r20
 800578c:	1009883a 	mov	r4,r2
 8005790:	180b883a 	mov	r5,r3
 8005794:	800d1000 	call	800d100 <__ledf2>
 8005798:	10003e0e 	bge	r2,zero,8005894 <_dtoa_r+0x1548>
 800579c:	d9001317 	ldw	r4,76(sp)
 80057a0:	bd3fffc3 	ldbu	r20,-1(r23)
 80057a4:	d9000515 	stw	r4,20(sp)
 80057a8:	003d3b06 	br	8004c98 <_dtoa_r+0x94c>
 80057ac:	0027883a 	mov	r19,zero
 80057b0:	003f1b06 	br	8005420 <_dtoa_r+0x10d4>
 80057b4:	d8800817 	ldw	r2,32(sp)
 80057b8:	11e9c83a 	sub	r20,r2,r7
 80057bc:	0005883a 	mov	r2,zero
 80057c0:	003d5406 	br	8004d14 <_dtoa_r+0x9c8>
 80057c4:	00800044 	movi	r2,1
 80057c8:	003dc706 	br	8004ee8 <_dtoa_r+0xb9c>
 80057cc:	d8c00217 	ldw	r3,8(sp)
 80057d0:	00800d84 	movi	r2,54
 80057d4:	dd400a17 	ldw	r21,40(sp)
 80057d8:	10c5c83a 	sub	r2,r2,r3
 80057dc:	dd000817 	ldw	r20,32(sp)
 80057e0:	003d4c06 	br	8004d14 <_dtoa_r+0x9c8>
 80057e4:	dc800f15 	stw	r18,60(sp)
 80057e8:	dcc01015 	stw	r19,64(sp)
 80057ec:	04000084 	movi	r16,2
 80057f0:	003bed06 	br	80047a8 <_dtoa_r+0x45c>
 80057f4:	d9000617 	ldw	r4,24(sp)
 80057f8:	203f0d26 	beq	r4,zero,8005430 <_dtoa_r+0x10e4>
 80057fc:	d9800c17 	ldw	r6,48(sp)
 8005800:	01bcab0e 	bge	zero,r6,8004ab0 <_dtoa_r+0x764>
 8005804:	d9401017 	ldw	r5,64(sp)
 8005808:	d9000f17 	ldw	r4,60(sp)
 800580c:	000d883a 	mov	r6,zero
 8005810:	01d00934 	movhi	r7,16420
 8005814:	800d1f40 	call	800d1f4 <__muldf3>
 8005818:	81000044 	addi	r4,r16,1
 800581c:	d8800f15 	stw	r2,60(sp)
 8005820:	d8c01015 	stw	r3,64(sp)
 8005824:	800e2880 	call	800e288 <__floatsidf>
 8005828:	d9800f17 	ldw	r6,60(sp)
 800582c:	d9c01017 	ldw	r7,64(sp)
 8005830:	1009883a 	mov	r4,r2
 8005834:	180b883a 	mov	r5,r3
 8005838:	800d1f40 	call	800d1f4 <__muldf3>
 800583c:	01d00734 	movhi	r7,16412
 8005840:	000d883a 	mov	r6,zero
 8005844:	1009883a 	mov	r4,r2
 8005848:	180b883a 	mov	r5,r3
 800584c:	800be080 	call	800be08 <__adddf3>
 8005850:	d9c00517 	ldw	r7,20(sp)
 8005854:	047f3034 	movhi	r17,64704
 8005858:	1021883a 	mov	r16,r2
 800585c:	39ffffc4 	addi	r7,r7,-1
 8005860:	d9c01315 	stw	r7,76(sp)
 8005864:	1c63883a 	add	r17,r3,r17
 8005868:	db000c17 	ldw	r12,48(sp)
 800586c:	003bea06 	br	8004818 <_dtoa_r+0x4cc>
 8005870:	dc000915 	stw	r16,36(sp)
 8005874:	003e0e06 	br	80050b0 <_dtoa_r+0xd64>
 8005878:	01000e44 	movi	r4,57
 800587c:	8825883a 	mov	r18,r17
 8005880:	9dc00044 	addi	r23,r19,1
 8005884:	99000005 	stb	r4,0(r19)
 8005888:	a023883a 	mov	r17,r20
 800588c:	dc000915 	stw	r16,36(sp)
 8005890:	003da406 	br	8004f24 <_dtoa_r+0xbd8>
 8005894:	d9801417 	ldw	r6,80(sp)
 8005898:	d9c01517 	ldw	r7,84(sp)
 800589c:	0009883a 	mov	r4,zero
 80058a0:	014ff834 	movhi	r5,16352
 80058a4:	800d90c0 	call	800d90c <__subdf3>
 80058a8:	880d883a 	mov	r6,r17
 80058ac:	a00f883a 	mov	r7,r20
 80058b0:	1009883a 	mov	r4,r2
 80058b4:	180b883a 	mov	r5,r3
 80058b8:	800d0240 	call	800d024 <__gedf2>
 80058bc:	00bc7c0e 	bge	zero,r2,8004ab0 <_dtoa_r+0x764>
 80058c0:	01000c04 	movi	r4,48
 80058c4:	00000106 	br	80058cc <_dtoa_r+0x1580>
 80058c8:	102f883a 	mov	r23,r2
 80058cc:	b8bfffc4 	addi	r2,r23,-1
 80058d0:	10c00007 	ldb	r3,0(r2)
 80058d4:	193ffc26 	beq	r3,r4,80058c8 <_dtoa_r+0x157c>
 80058d8:	d9801317 	ldw	r6,76(sp)
 80058dc:	d9800515 	stw	r6,20(sp)
 80058e0:	003c4406 	br	80049f4 <_dtoa_r+0x6a8>
 80058e4:	d9801317 	ldw	r6,76(sp)
 80058e8:	d9800515 	stw	r6,20(sp)
 80058ec:	003cea06 	br	8004c98 <_dtoa_r+0x94c>
 80058f0:	dd800f17 	ldw	r22,60(sp)
 80058f4:	dcc01017 	ldw	r19,64(sp)
 80058f8:	dc801217 	ldw	r18,72(sp)
 80058fc:	003c6c06 	br	8004ab0 <_dtoa_r+0x764>
 8005900:	903e031e 	bne	r18,zero,8005110 <_dtoa_r+0xdc4>
 8005904:	003ebb06 	br	80053f4 <_dtoa_r+0x10a8>
 8005908:	103e6c1e 	bne	r2,zero,80052bc <_dtoa_r+0xf70>
 800590c:	4080004c 	andi	r2,r8,1
 8005910:	103e6a26 	beq	r2,zero,80052bc <_dtoa_r+0xf70>
 8005914:	003e6606 	br	80052b0 <_dtoa_r+0xf64>
 8005918:	d8c00317 	ldw	r3,12(sp)
 800591c:	00800084 	movi	r2,2
 8005920:	10c02916 	blt	r2,r3,80059c8 <_dtoa_r+0x167c>
 8005924:	d9000c17 	ldw	r4,48(sp)
 8005928:	003e8806 	br	800534c <_dtoa_r+0x1000>
 800592c:	04000084 	movi	r16,2
 8005930:	003b9d06 	br	80047a8 <_dtoa_r+0x45c>
 8005934:	d9001317 	ldw	r4,76(sp)
 8005938:	d9000515 	stw	r4,20(sp)
 800593c:	003cd606 	br	8004c98 <_dtoa_r+0x94c>
 8005940:	d8801317 	ldw	r2,76(sp)
 8005944:	d8800515 	stw	r2,20(sp)
 8005948:	003c2a06 	br	80049f4 <_dtoa_r+0x6a8>
 800594c:	d9800317 	ldw	r6,12(sp)
 8005950:	00800084 	movi	r2,2
 8005954:	11801516 	blt	r2,r6,80059ac <_dtoa_r+0x1660>
 8005958:	d9c00c17 	ldw	r7,48(sp)
 800595c:	d9c00615 	stw	r7,24(sp)
 8005960:	003df706 	br	8005140 <_dtoa_r+0xdf4>
 8005964:	193d3926 	beq	r3,r4,8004e4c <_dtoa_r+0xb00>
 8005968:	00c00f04 	movi	r3,60
 800596c:	1885c83a 	sub	r2,r3,r2
 8005970:	003ddf06 	br	80050f0 <_dtoa_r+0xda4>
 8005974:	e009883a 	mov	r4,fp
 8005978:	e0001115 	stw	zero,68(fp)
 800597c:	000b883a 	mov	r5,zero
 8005980:	80079e80 	call	80079e8 <_Balloc>
 8005984:	d8800715 	stw	r2,28(sp)
 8005988:	d8c00717 	ldw	r3,28(sp)
 800598c:	00bfffc4 	movi	r2,-1
 8005990:	01000044 	movi	r4,1
 8005994:	d8800c15 	stw	r2,48(sp)
 8005998:	e0c01015 	stw	r3,64(fp)
 800599c:	d9000b15 	stw	r4,44(sp)
 80059a0:	d8800615 	stw	r2,24(sp)
 80059a4:	d8002215 	stw	zero,136(sp)
 80059a8:	003c4106 	br	8004ab0 <_dtoa_r+0x764>
 80059ac:	d8c00c17 	ldw	r3,48(sp)
 80059b0:	d8c00615 	stw	r3,24(sp)
 80059b4:	003e7006 	br	8005378 <_dtoa_r+0x102c>
 80059b8:	04400044 	movi	r17,1
 80059bc:	003b2006 	br	8004640 <_dtoa_r+0x2f4>
 80059c0:	000b883a 	mov	r5,zero
 80059c4:	003b3d06 	br	80046bc <_dtoa_r+0x370>
 80059c8:	d8800c17 	ldw	r2,48(sp)
 80059cc:	d8800615 	stw	r2,24(sp)
 80059d0:	003e6906 	br	8005378 <_dtoa_r+0x102c>

080059d4 <__sflush_r>:
 80059d4:	2880030b 	ldhu	r2,12(r5)
 80059d8:	defffb04 	addi	sp,sp,-20
 80059dc:	dcc00315 	stw	r19,12(sp)
 80059e0:	dc400115 	stw	r17,4(sp)
 80059e4:	dfc00415 	stw	ra,16(sp)
 80059e8:	dc800215 	stw	r18,8(sp)
 80059ec:	dc000015 	stw	r16,0(sp)
 80059f0:	10c0020c 	andi	r3,r2,8
 80059f4:	2823883a 	mov	r17,r5
 80059f8:	2027883a 	mov	r19,r4
 80059fc:	1800311e 	bne	r3,zero,8005ac4 <__sflush_r+0xf0>
 8005a00:	28c00117 	ldw	r3,4(r5)
 8005a04:	10820014 	ori	r2,r2,2048
 8005a08:	2880030d 	sth	r2,12(r5)
 8005a0c:	00c04b0e 	bge	zero,r3,8005b3c <__sflush_r+0x168>
 8005a10:	8a000a17 	ldw	r8,40(r17)
 8005a14:	40002326 	beq	r8,zero,8005aa4 <__sflush_r+0xd0>
 8005a18:	9c000017 	ldw	r16,0(r19)
 8005a1c:	10c4000c 	andi	r3,r2,4096
 8005a20:	98000015 	stw	zero,0(r19)
 8005a24:	18004826 	beq	r3,zero,8005b48 <__sflush_r+0x174>
 8005a28:	89801417 	ldw	r6,80(r17)
 8005a2c:	10c0010c 	andi	r3,r2,4
 8005a30:	18000626 	beq	r3,zero,8005a4c <__sflush_r+0x78>
 8005a34:	88c00117 	ldw	r3,4(r17)
 8005a38:	88800c17 	ldw	r2,48(r17)
 8005a3c:	30cdc83a 	sub	r6,r6,r3
 8005a40:	10000226 	beq	r2,zero,8005a4c <__sflush_r+0x78>
 8005a44:	88800f17 	ldw	r2,60(r17)
 8005a48:	308dc83a 	sub	r6,r6,r2
 8005a4c:	89400717 	ldw	r5,28(r17)
 8005a50:	000f883a 	mov	r7,zero
 8005a54:	9809883a 	mov	r4,r19
 8005a58:	403ee83a 	callr	r8
 8005a5c:	00ffffc4 	movi	r3,-1
 8005a60:	10c04426 	beq	r2,r3,8005b74 <__sflush_r+0x1a0>
 8005a64:	88c0030b 	ldhu	r3,12(r17)
 8005a68:	89000417 	ldw	r4,16(r17)
 8005a6c:	88000115 	stw	zero,4(r17)
 8005a70:	197dffcc 	andi	r5,r3,63487
 8005a74:	8940030d 	sth	r5,12(r17)
 8005a78:	89000015 	stw	r4,0(r17)
 8005a7c:	18c4000c 	andi	r3,r3,4096
 8005a80:	18002c1e 	bne	r3,zero,8005b34 <__sflush_r+0x160>
 8005a84:	89400c17 	ldw	r5,48(r17)
 8005a88:	9c000015 	stw	r16,0(r19)
 8005a8c:	28000526 	beq	r5,zero,8005aa4 <__sflush_r+0xd0>
 8005a90:	88801004 	addi	r2,r17,64
 8005a94:	28800226 	beq	r5,r2,8005aa0 <__sflush_r+0xcc>
 8005a98:	9809883a 	mov	r4,r19
 8005a9c:	80061400 	call	8006140 <_free_r>
 8005aa0:	88000c15 	stw	zero,48(r17)
 8005aa4:	0005883a 	mov	r2,zero
 8005aa8:	dfc00417 	ldw	ra,16(sp)
 8005aac:	dcc00317 	ldw	r19,12(sp)
 8005ab0:	dc800217 	ldw	r18,8(sp)
 8005ab4:	dc400117 	ldw	r17,4(sp)
 8005ab8:	dc000017 	ldw	r16,0(sp)
 8005abc:	dec00504 	addi	sp,sp,20
 8005ac0:	f800283a 	ret
 8005ac4:	2c800417 	ldw	r18,16(r5)
 8005ac8:	903ff626 	beq	r18,zero,8005aa4 <__sflush_r+0xd0>
 8005acc:	2c000017 	ldw	r16,0(r5)
 8005ad0:	108000cc 	andi	r2,r2,3
 8005ad4:	2c800015 	stw	r18,0(r5)
 8005ad8:	84a1c83a 	sub	r16,r16,r18
 8005adc:	1000131e 	bne	r2,zero,8005b2c <__sflush_r+0x158>
 8005ae0:	28800517 	ldw	r2,20(r5)
 8005ae4:	88800215 	stw	r2,8(r17)
 8005ae8:	04000316 	blt	zero,r16,8005af8 <__sflush_r+0x124>
 8005aec:	003fed06 	br	8005aa4 <__sflush_r+0xd0>
 8005af0:	90a5883a 	add	r18,r18,r2
 8005af4:	043feb0e 	bge	zero,r16,8005aa4 <__sflush_r+0xd0>
 8005af8:	88800917 	ldw	r2,36(r17)
 8005afc:	89400717 	ldw	r5,28(r17)
 8005b00:	800f883a 	mov	r7,r16
 8005b04:	900d883a 	mov	r6,r18
 8005b08:	9809883a 	mov	r4,r19
 8005b0c:	103ee83a 	callr	r2
 8005b10:	80a1c83a 	sub	r16,r16,r2
 8005b14:	00bff616 	blt	zero,r2,8005af0 <__sflush_r+0x11c>
 8005b18:	88c0030b 	ldhu	r3,12(r17)
 8005b1c:	00bfffc4 	movi	r2,-1
 8005b20:	18c01014 	ori	r3,r3,64
 8005b24:	88c0030d 	sth	r3,12(r17)
 8005b28:	003fdf06 	br	8005aa8 <__sflush_r+0xd4>
 8005b2c:	0005883a 	mov	r2,zero
 8005b30:	003fec06 	br	8005ae4 <__sflush_r+0x110>
 8005b34:	88801415 	stw	r2,80(r17)
 8005b38:	003fd206 	br	8005a84 <__sflush_r+0xb0>
 8005b3c:	28c00f17 	ldw	r3,60(r5)
 8005b40:	00ffb316 	blt	zero,r3,8005a10 <__sflush_r+0x3c>
 8005b44:	003fd706 	br	8005aa4 <__sflush_r+0xd0>
 8005b48:	89400717 	ldw	r5,28(r17)
 8005b4c:	000d883a 	mov	r6,zero
 8005b50:	01c00044 	movi	r7,1
 8005b54:	9809883a 	mov	r4,r19
 8005b58:	403ee83a 	callr	r8
 8005b5c:	100d883a 	mov	r6,r2
 8005b60:	00bfffc4 	movi	r2,-1
 8005b64:	30801426 	beq	r6,r2,8005bb8 <__sflush_r+0x1e4>
 8005b68:	8880030b 	ldhu	r2,12(r17)
 8005b6c:	8a000a17 	ldw	r8,40(r17)
 8005b70:	003fae06 	br	8005a2c <__sflush_r+0x58>
 8005b74:	98c00017 	ldw	r3,0(r19)
 8005b78:	183fba26 	beq	r3,zero,8005a64 <__sflush_r+0x90>
 8005b7c:	01000744 	movi	r4,29
 8005b80:	19000626 	beq	r3,r4,8005b9c <__sflush_r+0x1c8>
 8005b84:	01000584 	movi	r4,22
 8005b88:	19000426 	beq	r3,r4,8005b9c <__sflush_r+0x1c8>
 8005b8c:	88c0030b 	ldhu	r3,12(r17)
 8005b90:	18c01014 	ori	r3,r3,64
 8005b94:	88c0030d 	sth	r3,12(r17)
 8005b98:	003fc306 	br	8005aa8 <__sflush_r+0xd4>
 8005b9c:	8880030b 	ldhu	r2,12(r17)
 8005ba0:	88c00417 	ldw	r3,16(r17)
 8005ba4:	88000115 	stw	zero,4(r17)
 8005ba8:	10bdffcc 	andi	r2,r2,63487
 8005bac:	8880030d 	sth	r2,12(r17)
 8005bb0:	88c00015 	stw	r3,0(r17)
 8005bb4:	003fb306 	br	8005a84 <__sflush_r+0xb0>
 8005bb8:	98800017 	ldw	r2,0(r19)
 8005bbc:	103fea26 	beq	r2,zero,8005b68 <__sflush_r+0x194>
 8005bc0:	00c00744 	movi	r3,29
 8005bc4:	10c00226 	beq	r2,r3,8005bd0 <__sflush_r+0x1fc>
 8005bc8:	00c00584 	movi	r3,22
 8005bcc:	10c0031e 	bne	r2,r3,8005bdc <__sflush_r+0x208>
 8005bd0:	9c000015 	stw	r16,0(r19)
 8005bd4:	0005883a 	mov	r2,zero
 8005bd8:	003fb306 	br	8005aa8 <__sflush_r+0xd4>
 8005bdc:	88c0030b 	ldhu	r3,12(r17)
 8005be0:	3005883a 	mov	r2,r6
 8005be4:	18c01014 	ori	r3,r3,64
 8005be8:	88c0030d 	sth	r3,12(r17)
 8005bec:	003fae06 	br	8005aa8 <__sflush_r+0xd4>

08005bf0 <_fflush_r>:
 8005bf0:	defffd04 	addi	sp,sp,-12
 8005bf4:	dc000115 	stw	r16,4(sp)
 8005bf8:	dfc00215 	stw	ra,8(sp)
 8005bfc:	2021883a 	mov	r16,r4
 8005c00:	20000226 	beq	r4,zero,8005c0c <_fflush_r+0x1c>
 8005c04:	20800e17 	ldw	r2,56(r4)
 8005c08:	10000c26 	beq	r2,zero,8005c3c <_fflush_r+0x4c>
 8005c0c:	2880030f 	ldh	r2,12(r5)
 8005c10:	1000051e 	bne	r2,zero,8005c28 <_fflush_r+0x38>
 8005c14:	0005883a 	mov	r2,zero
 8005c18:	dfc00217 	ldw	ra,8(sp)
 8005c1c:	dc000117 	ldw	r16,4(sp)
 8005c20:	dec00304 	addi	sp,sp,12
 8005c24:	f800283a 	ret
 8005c28:	8009883a 	mov	r4,r16
 8005c2c:	dfc00217 	ldw	ra,8(sp)
 8005c30:	dc000117 	ldw	r16,4(sp)
 8005c34:	dec00304 	addi	sp,sp,12
 8005c38:	80059d41 	jmpi	80059d4 <__sflush_r>
 8005c3c:	d9400015 	stw	r5,0(sp)
 8005c40:	8005fcc0 	call	8005fcc <__sinit>
 8005c44:	d9400017 	ldw	r5,0(sp)
 8005c48:	003ff006 	br	8005c0c <_fflush_r+0x1c>

08005c4c <fflush>:
 8005c4c:	20000526 	beq	r4,zero,8005c64 <fflush+0x18>
 8005c50:	00820074 	movhi	r2,2049
 8005c54:	108a9204 	addi	r2,r2,10824
 8005c58:	200b883a 	mov	r5,r4
 8005c5c:	11000017 	ldw	r4,0(r2)
 8005c60:	8005bf01 	jmpi	8005bf0 <_fflush_r>
 8005c64:	00820074 	movhi	r2,2049
 8005c68:	108a9104 	addi	r2,r2,10820
 8005c6c:	11000017 	ldw	r4,0(r2)
 8005c70:	01420034 	movhi	r5,2048
 8005c74:	2956fc04 	addi	r5,r5,23536
 8005c78:	80069d01 	jmpi	80069d0 <_fwalk_reent>

08005c7c <__fp_unlock>:
 8005c7c:	0005883a 	mov	r2,zero
 8005c80:	f800283a 	ret

08005c84 <_cleanup_r>:
 8005c84:	01420074 	movhi	r5,2049
 8005c88:	296a7a04 	addi	r5,r5,-22040
 8005c8c:	80069d01 	jmpi	80069d0 <_fwalk_reent>

08005c90 <__sinit.part.1>:
 8005c90:	defff704 	addi	sp,sp,-36
 8005c94:	00c20034 	movhi	r3,2048
 8005c98:	dfc00815 	stw	ra,32(sp)
 8005c9c:	ddc00715 	stw	r23,28(sp)
 8005ca0:	dd800615 	stw	r22,24(sp)
 8005ca4:	dd400515 	stw	r21,20(sp)
 8005ca8:	dd000415 	stw	r20,16(sp)
 8005cac:	dcc00315 	stw	r19,12(sp)
 8005cb0:	dc800215 	stw	r18,8(sp)
 8005cb4:	dc400115 	stw	r17,4(sp)
 8005cb8:	dc000015 	stw	r16,0(sp)
 8005cbc:	18d72104 	addi	r3,r3,23684
 8005cc0:	24000117 	ldw	r16,4(r4)
 8005cc4:	20c00f15 	stw	r3,60(r4)
 8005cc8:	2080bb04 	addi	r2,r4,748
 8005ccc:	00c000c4 	movi	r3,3
 8005cd0:	20c0b915 	stw	r3,740(r4)
 8005cd4:	2080ba15 	stw	r2,744(r4)
 8005cd8:	2000b815 	stw	zero,736(r4)
 8005cdc:	05c00204 	movi	r23,8
 8005ce0:	00800104 	movi	r2,4
 8005ce4:	2025883a 	mov	r18,r4
 8005ce8:	b80d883a 	mov	r6,r23
 8005cec:	81001704 	addi	r4,r16,92
 8005cf0:	000b883a 	mov	r5,zero
 8005cf4:	80000015 	stw	zero,0(r16)
 8005cf8:	80000115 	stw	zero,4(r16)
 8005cfc:	80000215 	stw	zero,8(r16)
 8005d00:	8080030d 	sth	r2,12(r16)
 8005d04:	80001915 	stw	zero,100(r16)
 8005d08:	8000038d 	sth	zero,14(r16)
 8005d0c:	80000415 	stw	zero,16(r16)
 8005d10:	80000515 	stw	zero,20(r16)
 8005d14:	80000615 	stw	zero,24(r16)
 8005d18:	80078c00 	call	80078c0 <memset>
 8005d1c:	05820074 	movhi	r22,2049
 8005d20:	94400217 	ldw	r17,8(r18)
 8005d24:	05420074 	movhi	r21,2049
 8005d28:	05020074 	movhi	r20,2049
 8005d2c:	04c20074 	movhi	r19,2049
 8005d30:	b5a40404 	addi	r22,r22,-28656
 8005d34:	ad641b04 	addi	r21,r21,-28564
 8005d38:	a5243a04 	addi	r20,r20,-28440
 8005d3c:	9ce45104 	addi	r19,r19,-28348
 8005d40:	85800815 	stw	r22,32(r16)
 8005d44:	85400915 	stw	r21,36(r16)
 8005d48:	85000a15 	stw	r20,40(r16)
 8005d4c:	84c00b15 	stw	r19,44(r16)
 8005d50:	84000715 	stw	r16,28(r16)
 8005d54:	00800284 	movi	r2,10
 8005d58:	8880030d 	sth	r2,12(r17)
 8005d5c:	00800044 	movi	r2,1
 8005d60:	b80d883a 	mov	r6,r23
 8005d64:	89001704 	addi	r4,r17,92
 8005d68:	000b883a 	mov	r5,zero
 8005d6c:	88000015 	stw	zero,0(r17)
 8005d70:	88000115 	stw	zero,4(r17)
 8005d74:	88000215 	stw	zero,8(r17)
 8005d78:	88001915 	stw	zero,100(r17)
 8005d7c:	8880038d 	sth	r2,14(r17)
 8005d80:	88000415 	stw	zero,16(r17)
 8005d84:	88000515 	stw	zero,20(r17)
 8005d88:	88000615 	stw	zero,24(r17)
 8005d8c:	80078c00 	call	80078c0 <memset>
 8005d90:	94000317 	ldw	r16,12(r18)
 8005d94:	00800484 	movi	r2,18
 8005d98:	8c400715 	stw	r17,28(r17)
 8005d9c:	8d800815 	stw	r22,32(r17)
 8005da0:	8d400915 	stw	r21,36(r17)
 8005da4:	8d000a15 	stw	r20,40(r17)
 8005da8:	8cc00b15 	stw	r19,44(r17)
 8005dac:	8080030d 	sth	r2,12(r16)
 8005db0:	00800084 	movi	r2,2
 8005db4:	80000015 	stw	zero,0(r16)
 8005db8:	80000115 	stw	zero,4(r16)
 8005dbc:	80000215 	stw	zero,8(r16)
 8005dc0:	80001915 	stw	zero,100(r16)
 8005dc4:	8080038d 	sth	r2,14(r16)
 8005dc8:	80000415 	stw	zero,16(r16)
 8005dcc:	80000515 	stw	zero,20(r16)
 8005dd0:	80000615 	stw	zero,24(r16)
 8005dd4:	b80d883a 	mov	r6,r23
 8005dd8:	000b883a 	mov	r5,zero
 8005ddc:	81001704 	addi	r4,r16,92
 8005de0:	80078c00 	call	80078c0 <memset>
 8005de4:	00800044 	movi	r2,1
 8005de8:	84000715 	stw	r16,28(r16)
 8005dec:	85800815 	stw	r22,32(r16)
 8005df0:	85400915 	stw	r21,36(r16)
 8005df4:	85000a15 	stw	r20,40(r16)
 8005df8:	84c00b15 	stw	r19,44(r16)
 8005dfc:	90800e15 	stw	r2,56(r18)
 8005e00:	dfc00817 	ldw	ra,32(sp)
 8005e04:	ddc00717 	ldw	r23,28(sp)
 8005e08:	dd800617 	ldw	r22,24(sp)
 8005e0c:	dd400517 	ldw	r21,20(sp)
 8005e10:	dd000417 	ldw	r20,16(sp)
 8005e14:	dcc00317 	ldw	r19,12(sp)
 8005e18:	dc800217 	ldw	r18,8(sp)
 8005e1c:	dc400117 	ldw	r17,4(sp)
 8005e20:	dc000017 	ldw	r16,0(sp)
 8005e24:	dec00904 	addi	sp,sp,36
 8005e28:	f800283a 	ret

08005e2c <__fp_lock>:
 8005e2c:	0005883a 	mov	r2,zero
 8005e30:	f800283a 	ret

08005e34 <__sfmoreglue>:
 8005e34:	defffc04 	addi	sp,sp,-16
 8005e38:	dc400115 	stw	r17,4(sp)
 8005e3c:	2c7fffc4 	addi	r17,r5,-1
 8005e40:	8c401a24 	muli	r17,r17,104
 8005e44:	dc800215 	stw	r18,8(sp)
 8005e48:	2825883a 	mov	r18,r5
 8005e4c:	89401d04 	addi	r5,r17,116
 8005e50:	dc000015 	stw	r16,0(sp)
 8005e54:	dfc00315 	stw	ra,12(sp)
 8005e58:	8006d2c0 	call	8006d2c <_malloc_r>
 8005e5c:	1021883a 	mov	r16,r2
 8005e60:	10000726 	beq	r2,zero,8005e80 <__sfmoreglue+0x4c>
 8005e64:	11000304 	addi	r4,r2,12
 8005e68:	10000015 	stw	zero,0(r2)
 8005e6c:	14800115 	stw	r18,4(r2)
 8005e70:	11000215 	stw	r4,8(r2)
 8005e74:	89801a04 	addi	r6,r17,104
 8005e78:	000b883a 	mov	r5,zero
 8005e7c:	80078c00 	call	80078c0 <memset>
 8005e80:	8005883a 	mov	r2,r16
 8005e84:	dfc00317 	ldw	ra,12(sp)
 8005e88:	dc800217 	ldw	r18,8(sp)
 8005e8c:	dc400117 	ldw	r17,4(sp)
 8005e90:	dc000017 	ldw	r16,0(sp)
 8005e94:	dec00404 	addi	sp,sp,16
 8005e98:	f800283a 	ret

08005e9c <__sfp>:
 8005e9c:	defffb04 	addi	sp,sp,-20
 8005ea0:	dc000015 	stw	r16,0(sp)
 8005ea4:	04020074 	movhi	r16,2049
 8005ea8:	840a9104 	addi	r16,r16,10820
 8005eac:	dcc00315 	stw	r19,12(sp)
 8005eb0:	2027883a 	mov	r19,r4
 8005eb4:	81000017 	ldw	r4,0(r16)
 8005eb8:	dfc00415 	stw	ra,16(sp)
 8005ebc:	dc800215 	stw	r18,8(sp)
 8005ec0:	20800e17 	ldw	r2,56(r4)
 8005ec4:	dc400115 	stw	r17,4(sp)
 8005ec8:	1000021e 	bne	r2,zero,8005ed4 <__sfp+0x38>
 8005ecc:	8005c900 	call	8005c90 <__sinit.part.1>
 8005ed0:	81000017 	ldw	r4,0(r16)
 8005ed4:	2480b804 	addi	r18,r4,736
 8005ed8:	047fffc4 	movi	r17,-1
 8005edc:	91000117 	ldw	r4,4(r18)
 8005ee0:	94000217 	ldw	r16,8(r18)
 8005ee4:	213fffc4 	addi	r4,r4,-1
 8005ee8:	20000a16 	blt	r4,zero,8005f14 <__sfp+0x78>
 8005eec:	8080030f 	ldh	r2,12(r16)
 8005ef0:	10000c26 	beq	r2,zero,8005f24 <__sfp+0x88>
 8005ef4:	80c01d04 	addi	r3,r16,116
 8005ef8:	00000206 	br	8005f04 <__sfp+0x68>
 8005efc:	18bfe60f 	ldh	r2,-104(r3)
 8005f00:	10000826 	beq	r2,zero,8005f24 <__sfp+0x88>
 8005f04:	213fffc4 	addi	r4,r4,-1
 8005f08:	1c3ffd04 	addi	r16,r3,-12
 8005f0c:	18c01a04 	addi	r3,r3,104
 8005f10:	247ffa1e 	bne	r4,r17,8005efc <__sfp+0x60>
 8005f14:	90800017 	ldw	r2,0(r18)
 8005f18:	10001d26 	beq	r2,zero,8005f90 <__sfp+0xf4>
 8005f1c:	1025883a 	mov	r18,r2
 8005f20:	003fee06 	br	8005edc <__sfp+0x40>
 8005f24:	00bfffc4 	movi	r2,-1
 8005f28:	8080038d 	sth	r2,14(r16)
 8005f2c:	00800044 	movi	r2,1
 8005f30:	8080030d 	sth	r2,12(r16)
 8005f34:	80001915 	stw	zero,100(r16)
 8005f38:	80000015 	stw	zero,0(r16)
 8005f3c:	80000215 	stw	zero,8(r16)
 8005f40:	80000115 	stw	zero,4(r16)
 8005f44:	80000415 	stw	zero,16(r16)
 8005f48:	80000515 	stw	zero,20(r16)
 8005f4c:	80000615 	stw	zero,24(r16)
 8005f50:	01800204 	movi	r6,8
 8005f54:	000b883a 	mov	r5,zero
 8005f58:	81001704 	addi	r4,r16,92
 8005f5c:	80078c00 	call	80078c0 <memset>
 8005f60:	8005883a 	mov	r2,r16
 8005f64:	80000c15 	stw	zero,48(r16)
 8005f68:	80000d15 	stw	zero,52(r16)
 8005f6c:	80001115 	stw	zero,68(r16)
 8005f70:	80001215 	stw	zero,72(r16)
 8005f74:	dfc00417 	ldw	ra,16(sp)
 8005f78:	dcc00317 	ldw	r19,12(sp)
 8005f7c:	dc800217 	ldw	r18,8(sp)
 8005f80:	dc400117 	ldw	r17,4(sp)
 8005f84:	dc000017 	ldw	r16,0(sp)
 8005f88:	dec00504 	addi	sp,sp,20
 8005f8c:	f800283a 	ret
 8005f90:	01400104 	movi	r5,4
 8005f94:	9809883a 	mov	r4,r19
 8005f98:	8005e340 	call	8005e34 <__sfmoreglue>
 8005f9c:	90800015 	stw	r2,0(r18)
 8005fa0:	103fde1e 	bne	r2,zero,8005f1c <__sfp+0x80>
 8005fa4:	00800304 	movi	r2,12
 8005fa8:	98800015 	stw	r2,0(r19)
 8005fac:	0005883a 	mov	r2,zero
 8005fb0:	003ff006 	br	8005f74 <__sfp+0xd8>

08005fb4 <_cleanup>:
 8005fb4:	00820074 	movhi	r2,2049
 8005fb8:	108a9104 	addi	r2,r2,10820
 8005fbc:	11000017 	ldw	r4,0(r2)
 8005fc0:	01420074 	movhi	r5,2049
 8005fc4:	296a7a04 	addi	r5,r5,-22040
 8005fc8:	80069d01 	jmpi	80069d0 <_fwalk_reent>

08005fcc <__sinit>:
 8005fcc:	20800e17 	ldw	r2,56(r4)
 8005fd0:	10000126 	beq	r2,zero,8005fd8 <__sinit+0xc>
 8005fd4:	f800283a 	ret
 8005fd8:	8005c901 	jmpi	8005c90 <__sinit.part.1>

08005fdc <__sfp_lock_acquire>:
 8005fdc:	f800283a 	ret

08005fe0 <__sfp_lock_release>:
 8005fe0:	f800283a 	ret

08005fe4 <__sinit_lock_acquire>:
 8005fe4:	f800283a 	ret

08005fe8 <__sinit_lock_release>:
 8005fe8:	f800283a 	ret

08005fec <__fp_lock_all>:
 8005fec:	00820074 	movhi	r2,2049
 8005ff0:	108a9204 	addi	r2,r2,10824
 8005ff4:	11000017 	ldw	r4,0(r2)
 8005ff8:	01420034 	movhi	r5,2048
 8005ffc:	29578b04 	addi	r5,r5,24108
 8006000:	800690c1 	jmpi	800690c <_fwalk>

08006004 <__fp_unlock_all>:
 8006004:	00820074 	movhi	r2,2049
 8006008:	108a9204 	addi	r2,r2,10824
 800600c:	11000017 	ldw	r4,0(r2)
 8006010:	01420034 	movhi	r5,2048
 8006014:	29571f04 	addi	r5,r5,23676
 8006018:	800690c1 	jmpi	800690c <_fwalk>

0800601c <_malloc_trim_r>:
 800601c:	defffb04 	addi	sp,sp,-20
 8006020:	dcc00315 	stw	r19,12(sp)
 8006024:	04c20074 	movhi	r19,2049
 8006028:	dc800215 	stw	r18,8(sp)
 800602c:	dc400115 	stw	r17,4(sp)
 8006030:	dc000015 	stw	r16,0(sp)
 8006034:	dfc00415 	stw	ra,16(sp)
 8006038:	2821883a 	mov	r16,r5
 800603c:	9cc50904 	addi	r19,r19,5156
 8006040:	2025883a 	mov	r18,r4
 8006044:	800e9880 	call	800e988 <__malloc_lock>
 8006048:	98800217 	ldw	r2,8(r19)
 800604c:	14400117 	ldw	r17,4(r2)
 8006050:	00bfff04 	movi	r2,-4
 8006054:	88a2703a 	and	r17,r17,r2
 8006058:	8c21c83a 	sub	r16,r17,r16
 800605c:	8403fbc4 	addi	r16,r16,4079
 8006060:	8020d33a 	srli	r16,r16,12
 8006064:	0083ffc4 	movi	r2,4095
 8006068:	843fffc4 	addi	r16,r16,-1
 800606c:	8020933a 	slli	r16,r16,12
 8006070:	1400060e 	bge	r2,r16,800608c <_malloc_trim_r+0x70>
 8006074:	000b883a 	mov	r5,zero
 8006078:	9009883a 	mov	r4,r18
 800607c:	8008fbc0 	call	8008fbc <_sbrk_r>
 8006080:	98c00217 	ldw	r3,8(r19)
 8006084:	1c47883a 	add	r3,r3,r17
 8006088:	10c00a26 	beq	r2,r3,80060b4 <_malloc_trim_r+0x98>
 800608c:	9009883a 	mov	r4,r18
 8006090:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8006094:	0005883a 	mov	r2,zero
 8006098:	dfc00417 	ldw	ra,16(sp)
 800609c:	dcc00317 	ldw	r19,12(sp)
 80060a0:	dc800217 	ldw	r18,8(sp)
 80060a4:	dc400117 	ldw	r17,4(sp)
 80060a8:	dc000017 	ldw	r16,0(sp)
 80060ac:	dec00504 	addi	sp,sp,20
 80060b0:	f800283a 	ret
 80060b4:	040bc83a 	sub	r5,zero,r16
 80060b8:	9009883a 	mov	r4,r18
 80060bc:	8008fbc0 	call	8008fbc <_sbrk_r>
 80060c0:	00ffffc4 	movi	r3,-1
 80060c4:	10c00d26 	beq	r2,r3,80060fc <_malloc_trim_r+0xe0>
 80060c8:	00c20074 	movhi	r3,2049
 80060cc:	18d17104 	addi	r3,r3,17860
 80060d0:	18800017 	ldw	r2,0(r3)
 80060d4:	99000217 	ldw	r4,8(r19)
 80060d8:	8c23c83a 	sub	r17,r17,r16
 80060dc:	8c400054 	ori	r17,r17,1
 80060e0:	1421c83a 	sub	r16,r2,r16
 80060e4:	24400115 	stw	r17,4(r4)
 80060e8:	9009883a 	mov	r4,r18
 80060ec:	1c000015 	stw	r16,0(r3)
 80060f0:	800e9ac0 	call	800e9ac <__malloc_unlock>
 80060f4:	00800044 	movi	r2,1
 80060f8:	003fe706 	br	8006098 <_malloc_trim_r+0x7c>
 80060fc:	000b883a 	mov	r5,zero
 8006100:	9009883a 	mov	r4,r18
 8006104:	8008fbc0 	call	8008fbc <_sbrk_r>
 8006108:	99000217 	ldw	r4,8(r19)
 800610c:	014003c4 	movi	r5,15
 8006110:	1107c83a 	sub	r3,r2,r4
 8006114:	28ffdd0e 	bge	r5,r3,800608c <_malloc_trim_r+0x70>
 8006118:	01420074 	movhi	r5,2049
 800611c:	294a9404 	addi	r5,r5,10832
 8006120:	29400017 	ldw	r5,0(r5)
 8006124:	18c00054 	ori	r3,r3,1
 8006128:	20c00115 	stw	r3,4(r4)
 800612c:	00c20074 	movhi	r3,2049
 8006130:	1145c83a 	sub	r2,r2,r5
 8006134:	18d17104 	addi	r3,r3,17860
 8006138:	18800015 	stw	r2,0(r3)
 800613c:	003fd306 	br	800608c <_malloc_trim_r+0x70>

08006140 <_free_r>:
 8006140:	28004126 	beq	r5,zero,8006248 <_free_r+0x108>
 8006144:	defffd04 	addi	sp,sp,-12
 8006148:	dc400115 	stw	r17,4(sp)
 800614c:	dc000015 	stw	r16,0(sp)
 8006150:	2023883a 	mov	r17,r4
 8006154:	2821883a 	mov	r16,r5
 8006158:	dfc00215 	stw	ra,8(sp)
 800615c:	800e9880 	call	800e988 <__malloc_lock>
 8006160:	81ffff17 	ldw	r7,-4(r16)
 8006164:	00bfff84 	movi	r2,-2
 8006168:	01020074 	movhi	r4,2049
 800616c:	81bffe04 	addi	r6,r16,-8
 8006170:	3884703a 	and	r2,r7,r2
 8006174:	21050904 	addi	r4,r4,5156
 8006178:	308b883a 	add	r5,r6,r2
 800617c:	2a400117 	ldw	r9,4(r5)
 8006180:	22000217 	ldw	r8,8(r4)
 8006184:	00ffff04 	movi	r3,-4
 8006188:	48c6703a 	and	r3,r9,r3
 800618c:	2a005726 	beq	r5,r8,80062ec <_free_r+0x1ac>
 8006190:	28c00115 	stw	r3,4(r5)
 8006194:	39c0004c 	andi	r7,r7,1
 8006198:	3800091e 	bne	r7,zero,80061c0 <_free_r+0x80>
 800619c:	823ffe17 	ldw	r8,-8(r16)
 80061a0:	22400204 	addi	r9,r4,8
 80061a4:	320dc83a 	sub	r6,r6,r8
 80061a8:	31c00217 	ldw	r7,8(r6)
 80061ac:	1205883a 	add	r2,r2,r8
 80061b0:	3a406526 	beq	r7,r9,8006348 <_free_r+0x208>
 80061b4:	32000317 	ldw	r8,12(r6)
 80061b8:	3a000315 	stw	r8,12(r7)
 80061bc:	41c00215 	stw	r7,8(r8)
 80061c0:	28cf883a 	add	r7,r5,r3
 80061c4:	39c00117 	ldw	r7,4(r7)
 80061c8:	39c0004c 	andi	r7,r7,1
 80061cc:	38003a26 	beq	r7,zero,80062b8 <_free_r+0x178>
 80061d0:	10c00054 	ori	r3,r2,1
 80061d4:	30c00115 	stw	r3,4(r6)
 80061d8:	3087883a 	add	r3,r6,r2
 80061dc:	18800015 	stw	r2,0(r3)
 80061e0:	00c07fc4 	movi	r3,511
 80061e4:	18801936 	bltu	r3,r2,800624c <_free_r+0x10c>
 80061e8:	1004d0fa 	srli	r2,r2,3
 80061ec:	01c00044 	movi	r7,1
 80061f0:	21400117 	ldw	r5,4(r4)
 80061f4:	10c00044 	addi	r3,r2,1
 80061f8:	18c7883a 	add	r3,r3,r3
 80061fc:	1005d0ba 	srai	r2,r2,2
 8006200:	18c7883a 	add	r3,r3,r3
 8006204:	18c7883a 	add	r3,r3,r3
 8006208:	1907883a 	add	r3,r3,r4
 800620c:	3884983a 	sll	r2,r7,r2
 8006210:	19c00017 	ldw	r7,0(r3)
 8006214:	1a3ffe04 	addi	r8,r3,-8
 8006218:	1144b03a 	or	r2,r2,r5
 800621c:	32000315 	stw	r8,12(r6)
 8006220:	31c00215 	stw	r7,8(r6)
 8006224:	20800115 	stw	r2,4(r4)
 8006228:	19800015 	stw	r6,0(r3)
 800622c:	39800315 	stw	r6,12(r7)
 8006230:	8809883a 	mov	r4,r17
 8006234:	dfc00217 	ldw	ra,8(sp)
 8006238:	dc400117 	ldw	r17,4(sp)
 800623c:	dc000017 	ldw	r16,0(sp)
 8006240:	dec00304 	addi	sp,sp,12
 8006244:	800e9ac1 	jmpi	800e9ac <__malloc_unlock>
 8006248:	f800283a 	ret
 800624c:	100ad27a 	srli	r5,r2,9
 8006250:	00c00104 	movi	r3,4
 8006254:	19404a36 	bltu	r3,r5,8006380 <_free_r+0x240>
 8006258:	100ad1ba 	srli	r5,r2,6
 800625c:	28c00e44 	addi	r3,r5,57
 8006260:	18c7883a 	add	r3,r3,r3
 8006264:	29400e04 	addi	r5,r5,56
 8006268:	18c7883a 	add	r3,r3,r3
 800626c:	18c7883a 	add	r3,r3,r3
 8006270:	1909883a 	add	r4,r3,r4
 8006274:	20c00017 	ldw	r3,0(r4)
 8006278:	01c20074 	movhi	r7,2049
 800627c:	213ffe04 	addi	r4,r4,-8
 8006280:	39c50904 	addi	r7,r7,5156
 8006284:	20c04426 	beq	r4,r3,8006398 <_free_r+0x258>
 8006288:	01ffff04 	movi	r7,-4
 800628c:	19400117 	ldw	r5,4(r3)
 8006290:	29ca703a 	and	r5,r5,r7
 8006294:	1140022e 	bgeu	r2,r5,80062a0 <_free_r+0x160>
 8006298:	18c00217 	ldw	r3,8(r3)
 800629c:	20fffb1e 	bne	r4,r3,800628c <_free_r+0x14c>
 80062a0:	19000317 	ldw	r4,12(r3)
 80062a4:	31000315 	stw	r4,12(r6)
 80062a8:	30c00215 	stw	r3,8(r6)
 80062ac:	21800215 	stw	r6,8(r4)
 80062b0:	19800315 	stw	r6,12(r3)
 80062b4:	003fde06 	br	8006230 <_free_r+0xf0>
 80062b8:	29c00217 	ldw	r7,8(r5)
 80062bc:	10c5883a 	add	r2,r2,r3
 80062c0:	00c20074 	movhi	r3,2049
 80062c4:	18c50b04 	addi	r3,r3,5164
 80062c8:	38c03b26 	beq	r7,r3,80063b8 <_free_r+0x278>
 80062cc:	2a000317 	ldw	r8,12(r5)
 80062d0:	11400054 	ori	r5,r2,1
 80062d4:	3087883a 	add	r3,r6,r2
 80062d8:	3a000315 	stw	r8,12(r7)
 80062dc:	41c00215 	stw	r7,8(r8)
 80062e0:	31400115 	stw	r5,4(r6)
 80062e4:	18800015 	stw	r2,0(r3)
 80062e8:	003fbd06 	br	80061e0 <_free_r+0xa0>
 80062ec:	39c0004c 	andi	r7,r7,1
 80062f0:	10c5883a 	add	r2,r2,r3
 80062f4:	3800071e 	bne	r7,zero,8006314 <_free_r+0x1d4>
 80062f8:	81fffe17 	ldw	r7,-8(r16)
 80062fc:	31cdc83a 	sub	r6,r6,r7
 8006300:	30c00317 	ldw	r3,12(r6)
 8006304:	31400217 	ldw	r5,8(r6)
 8006308:	11c5883a 	add	r2,r2,r7
 800630c:	28c00315 	stw	r3,12(r5)
 8006310:	19400215 	stw	r5,8(r3)
 8006314:	10c00054 	ori	r3,r2,1
 8006318:	30c00115 	stw	r3,4(r6)
 800631c:	00c20074 	movhi	r3,2049
 8006320:	18ca9504 	addi	r3,r3,10836
 8006324:	18c00017 	ldw	r3,0(r3)
 8006328:	21800215 	stw	r6,8(r4)
 800632c:	10ffc036 	bltu	r2,r3,8006230 <_free_r+0xf0>
 8006330:	00820074 	movhi	r2,2049
 8006334:	10916804 	addi	r2,r2,17824
 8006338:	11400017 	ldw	r5,0(r2)
 800633c:	8809883a 	mov	r4,r17
 8006340:	800601c0 	call	800601c <_malloc_trim_r>
 8006344:	003fba06 	br	8006230 <_free_r+0xf0>
 8006348:	28c9883a 	add	r4,r5,r3
 800634c:	21000117 	ldw	r4,4(r4)
 8006350:	2100004c 	andi	r4,r4,1
 8006354:	2000391e 	bne	r4,zero,800643c <_free_r+0x2fc>
 8006358:	29c00217 	ldw	r7,8(r5)
 800635c:	29000317 	ldw	r4,12(r5)
 8006360:	1885883a 	add	r2,r3,r2
 8006364:	10c00054 	ori	r3,r2,1
 8006368:	39000315 	stw	r4,12(r7)
 800636c:	21c00215 	stw	r7,8(r4)
 8006370:	30c00115 	stw	r3,4(r6)
 8006374:	308d883a 	add	r6,r6,r2
 8006378:	30800015 	stw	r2,0(r6)
 800637c:	003fac06 	br	8006230 <_free_r+0xf0>
 8006380:	00c00504 	movi	r3,20
 8006384:	19401536 	bltu	r3,r5,80063dc <_free_r+0x29c>
 8006388:	28c01704 	addi	r3,r5,92
 800638c:	18c7883a 	add	r3,r3,r3
 8006390:	294016c4 	addi	r5,r5,91
 8006394:	003fb406 	br	8006268 <_free_r+0x128>
 8006398:	280bd0ba 	srai	r5,r5,2
 800639c:	00c00044 	movi	r3,1
 80063a0:	38800117 	ldw	r2,4(r7)
 80063a4:	194a983a 	sll	r5,r3,r5
 80063a8:	2007883a 	mov	r3,r4
 80063ac:	2884b03a 	or	r2,r5,r2
 80063b0:	38800115 	stw	r2,4(r7)
 80063b4:	003fbb06 	br	80062a4 <_free_r+0x164>
 80063b8:	21800515 	stw	r6,20(r4)
 80063bc:	21800415 	stw	r6,16(r4)
 80063c0:	10c00054 	ori	r3,r2,1
 80063c4:	31c00315 	stw	r7,12(r6)
 80063c8:	31c00215 	stw	r7,8(r6)
 80063cc:	30c00115 	stw	r3,4(r6)
 80063d0:	308d883a 	add	r6,r6,r2
 80063d4:	30800015 	stw	r2,0(r6)
 80063d8:	003f9506 	br	8006230 <_free_r+0xf0>
 80063dc:	00c01504 	movi	r3,84
 80063e0:	19400536 	bltu	r3,r5,80063f8 <_free_r+0x2b8>
 80063e4:	100ad33a 	srli	r5,r2,12
 80063e8:	28c01bc4 	addi	r3,r5,111
 80063ec:	18c7883a 	add	r3,r3,r3
 80063f0:	29401b84 	addi	r5,r5,110
 80063f4:	003f9c06 	br	8006268 <_free_r+0x128>
 80063f8:	00c05504 	movi	r3,340
 80063fc:	19400536 	bltu	r3,r5,8006414 <_free_r+0x2d4>
 8006400:	100ad3fa 	srli	r5,r2,15
 8006404:	28c01e04 	addi	r3,r5,120
 8006408:	18c7883a 	add	r3,r3,r3
 800640c:	29401dc4 	addi	r5,r5,119
 8006410:	003f9506 	br	8006268 <_free_r+0x128>
 8006414:	00c15504 	movi	r3,1364
 8006418:	19400536 	bltu	r3,r5,8006430 <_free_r+0x2f0>
 800641c:	100ad4ba 	srli	r5,r2,18
 8006420:	28c01f44 	addi	r3,r5,125
 8006424:	18c7883a 	add	r3,r3,r3
 8006428:	29401f04 	addi	r5,r5,124
 800642c:	003f8e06 	br	8006268 <_free_r+0x128>
 8006430:	00c03f84 	movi	r3,254
 8006434:	01401f84 	movi	r5,126
 8006438:	003f8b06 	br	8006268 <_free_r+0x128>
 800643c:	10c00054 	ori	r3,r2,1
 8006440:	30c00115 	stw	r3,4(r6)
 8006444:	308d883a 	add	r6,r6,r2
 8006448:	30800015 	stw	r2,0(r6)
 800644c:	003f7806 	br	8006230 <_free_r+0xf0>

08006450 <__sfvwrite_r>:
 8006450:	30800217 	ldw	r2,8(r6)
 8006454:	10006726 	beq	r2,zero,80065f4 <__sfvwrite_r+0x1a4>
 8006458:	28c0030b 	ldhu	r3,12(r5)
 800645c:	defff404 	addi	sp,sp,-48
 8006460:	dd400715 	stw	r21,28(sp)
 8006464:	dd000615 	stw	r20,24(sp)
 8006468:	dc000215 	stw	r16,8(sp)
 800646c:	dfc00b15 	stw	ra,44(sp)
 8006470:	df000a15 	stw	fp,40(sp)
 8006474:	ddc00915 	stw	r23,36(sp)
 8006478:	dd800815 	stw	r22,32(sp)
 800647c:	dcc00515 	stw	r19,20(sp)
 8006480:	dc800415 	stw	r18,16(sp)
 8006484:	dc400315 	stw	r17,12(sp)
 8006488:	1880020c 	andi	r2,r3,8
 800648c:	2821883a 	mov	r16,r5
 8006490:	202b883a 	mov	r21,r4
 8006494:	3029883a 	mov	r20,r6
 8006498:	10002726 	beq	r2,zero,8006538 <__sfvwrite_r+0xe8>
 800649c:	28800417 	ldw	r2,16(r5)
 80064a0:	10002526 	beq	r2,zero,8006538 <__sfvwrite_r+0xe8>
 80064a4:	1880008c 	andi	r2,r3,2
 80064a8:	a4400017 	ldw	r17,0(r20)
 80064ac:	10002a26 	beq	r2,zero,8006558 <__sfvwrite_r+0x108>
 80064b0:	05a00034 	movhi	r22,32768
 80064b4:	0027883a 	mov	r19,zero
 80064b8:	0025883a 	mov	r18,zero
 80064bc:	b5bf0004 	addi	r22,r22,-1024
 80064c0:	980d883a 	mov	r6,r19
 80064c4:	a809883a 	mov	r4,r21
 80064c8:	90004626 	beq	r18,zero,80065e4 <__sfvwrite_r+0x194>
 80064cc:	900f883a 	mov	r7,r18
 80064d0:	b480022e 	bgeu	r22,r18,80064dc <__sfvwrite_r+0x8c>
 80064d4:	01e00034 	movhi	r7,32768
 80064d8:	39ff0004 	addi	r7,r7,-1024
 80064dc:	80800917 	ldw	r2,36(r16)
 80064e0:	81400717 	ldw	r5,28(r16)
 80064e4:	103ee83a 	callr	r2
 80064e8:	0080570e 	bge	zero,r2,8006648 <__sfvwrite_r+0x1f8>
 80064ec:	a0c00217 	ldw	r3,8(r20)
 80064f0:	98a7883a 	add	r19,r19,r2
 80064f4:	90a5c83a 	sub	r18,r18,r2
 80064f8:	1885c83a 	sub	r2,r3,r2
 80064fc:	a0800215 	stw	r2,8(r20)
 8006500:	103fef1e 	bne	r2,zero,80064c0 <__sfvwrite_r+0x70>
 8006504:	0005883a 	mov	r2,zero
 8006508:	dfc00b17 	ldw	ra,44(sp)
 800650c:	df000a17 	ldw	fp,40(sp)
 8006510:	ddc00917 	ldw	r23,36(sp)
 8006514:	dd800817 	ldw	r22,32(sp)
 8006518:	dd400717 	ldw	r21,28(sp)
 800651c:	dd000617 	ldw	r20,24(sp)
 8006520:	dcc00517 	ldw	r19,20(sp)
 8006524:	dc800417 	ldw	r18,16(sp)
 8006528:	dc400317 	ldw	r17,12(sp)
 800652c:	dc000217 	ldw	r16,8(sp)
 8006530:	dec00c04 	addi	sp,sp,48
 8006534:	f800283a 	ret
 8006538:	800b883a 	mov	r5,r16
 800653c:	a809883a 	mov	r4,r21
 8006540:	8003ff80 	call	8003ff8 <__swsetup_r>
 8006544:	1000eb1e 	bne	r2,zero,80068f4 <__sfvwrite_r+0x4a4>
 8006548:	80c0030b 	ldhu	r3,12(r16)
 800654c:	a4400017 	ldw	r17,0(r20)
 8006550:	1880008c 	andi	r2,r3,2
 8006554:	103fd61e 	bne	r2,zero,80064b0 <__sfvwrite_r+0x60>
 8006558:	1880004c 	andi	r2,r3,1
 800655c:	10003f1e 	bne	r2,zero,800665c <__sfvwrite_r+0x20c>
 8006560:	0039883a 	mov	fp,zero
 8006564:	0025883a 	mov	r18,zero
 8006568:	90001a26 	beq	r18,zero,80065d4 <__sfvwrite_r+0x184>
 800656c:	1880800c 	andi	r2,r3,512
 8006570:	84c00217 	ldw	r19,8(r16)
 8006574:	10002126 	beq	r2,zero,80065fc <__sfvwrite_r+0x1ac>
 8006578:	982f883a 	mov	r23,r19
 800657c:	94c09336 	bltu	r18,r19,80067cc <__sfvwrite_r+0x37c>
 8006580:	1881200c 	andi	r2,r3,1152
 8006584:	10009e1e 	bne	r2,zero,8006800 <__sfvwrite_r+0x3b0>
 8006588:	81000017 	ldw	r4,0(r16)
 800658c:	b80d883a 	mov	r6,r23
 8006590:	e00b883a 	mov	r5,fp
 8006594:	80077640 	call	8007764 <memmove>
 8006598:	80c00217 	ldw	r3,8(r16)
 800659c:	81000017 	ldw	r4,0(r16)
 80065a0:	9005883a 	mov	r2,r18
 80065a4:	1ce7c83a 	sub	r19,r3,r19
 80065a8:	25cf883a 	add	r7,r4,r23
 80065ac:	84c00215 	stw	r19,8(r16)
 80065b0:	81c00015 	stw	r7,0(r16)
 80065b4:	a0c00217 	ldw	r3,8(r20)
 80065b8:	e0b9883a 	add	fp,fp,r2
 80065bc:	90a5c83a 	sub	r18,r18,r2
 80065c0:	18a7c83a 	sub	r19,r3,r2
 80065c4:	a4c00215 	stw	r19,8(r20)
 80065c8:	983fce26 	beq	r19,zero,8006504 <__sfvwrite_r+0xb4>
 80065cc:	80c0030b 	ldhu	r3,12(r16)
 80065d0:	903fe61e 	bne	r18,zero,800656c <__sfvwrite_r+0x11c>
 80065d4:	8f000017 	ldw	fp,0(r17)
 80065d8:	8c800117 	ldw	r18,4(r17)
 80065dc:	8c400204 	addi	r17,r17,8
 80065e0:	003fe106 	br	8006568 <__sfvwrite_r+0x118>
 80065e4:	8cc00017 	ldw	r19,0(r17)
 80065e8:	8c800117 	ldw	r18,4(r17)
 80065ec:	8c400204 	addi	r17,r17,8
 80065f0:	003fb306 	br	80064c0 <__sfvwrite_r+0x70>
 80065f4:	0005883a 	mov	r2,zero
 80065f8:	f800283a 	ret
 80065fc:	81000017 	ldw	r4,0(r16)
 8006600:	80800417 	ldw	r2,16(r16)
 8006604:	11005736 	bltu	r2,r4,8006764 <__sfvwrite_r+0x314>
 8006608:	85c00517 	ldw	r23,20(r16)
 800660c:	95c05536 	bltu	r18,r23,8006764 <__sfvwrite_r+0x314>
 8006610:	00a00034 	movhi	r2,32768
 8006614:	10bfffc4 	addi	r2,r2,-1
 8006618:	9009883a 	mov	r4,r18
 800661c:	1480012e 	bgeu	r2,r18,8006624 <__sfvwrite_r+0x1d4>
 8006620:	1009883a 	mov	r4,r2
 8006624:	b80b883a 	mov	r5,r23
 8006628:	800bc540 	call	800bc54 <__divsi3>
 800662c:	15cf383a 	mul	r7,r2,r23
 8006630:	81400717 	ldw	r5,28(r16)
 8006634:	80800917 	ldw	r2,36(r16)
 8006638:	e00d883a 	mov	r6,fp
 800663c:	a809883a 	mov	r4,r21
 8006640:	103ee83a 	callr	r2
 8006644:	00bfdb16 	blt	zero,r2,80065b4 <__sfvwrite_r+0x164>
 8006648:	8080030b 	ldhu	r2,12(r16)
 800664c:	10801014 	ori	r2,r2,64
 8006650:	8080030d 	sth	r2,12(r16)
 8006654:	00bfffc4 	movi	r2,-1
 8006658:	003fab06 	br	8006508 <__sfvwrite_r+0xb8>
 800665c:	0027883a 	mov	r19,zero
 8006660:	0011883a 	mov	r8,zero
 8006664:	0039883a 	mov	fp,zero
 8006668:	0025883a 	mov	r18,zero
 800666c:	90001f26 	beq	r18,zero,80066ec <__sfvwrite_r+0x29c>
 8006670:	40005a26 	beq	r8,zero,80067dc <__sfvwrite_r+0x38c>
 8006674:	982d883a 	mov	r22,r19
 8006678:	94c0012e 	bgeu	r18,r19,8006680 <__sfvwrite_r+0x230>
 800667c:	902d883a 	mov	r22,r18
 8006680:	81000017 	ldw	r4,0(r16)
 8006684:	80800417 	ldw	r2,16(r16)
 8006688:	b02f883a 	mov	r23,r22
 800668c:	81c00517 	ldw	r7,20(r16)
 8006690:	1100032e 	bgeu	r2,r4,80066a0 <__sfvwrite_r+0x250>
 8006694:	80c00217 	ldw	r3,8(r16)
 8006698:	38c7883a 	add	r3,r7,r3
 800669c:	1d801816 	blt	r3,r22,8006700 <__sfvwrite_r+0x2b0>
 80066a0:	b1c03e16 	blt	r22,r7,800679c <__sfvwrite_r+0x34c>
 80066a4:	80800917 	ldw	r2,36(r16)
 80066a8:	81400717 	ldw	r5,28(r16)
 80066ac:	e00d883a 	mov	r6,fp
 80066b0:	da000115 	stw	r8,4(sp)
 80066b4:	a809883a 	mov	r4,r21
 80066b8:	103ee83a 	callr	r2
 80066bc:	102f883a 	mov	r23,r2
 80066c0:	da000117 	ldw	r8,4(sp)
 80066c4:	00bfe00e 	bge	zero,r2,8006648 <__sfvwrite_r+0x1f8>
 80066c8:	9de7c83a 	sub	r19,r19,r23
 80066cc:	98001f26 	beq	r19,zero,800674c <__sfvwrite_r+0x2fc>
 80066d0:	a0800217 	ldw	r2,8(r20)
 80066d4:	e5f9883a 	add	fp,fp,r23
 80066d8:	95e5c83a 	sub	r18,r18,r23
 80066dc:	15efc83a 	sub	r23,r2,r23
 80066e0:	a5c00215 	stw	r23,8(r20)
 80066e4:	b83f8726 	beq	r23,zero,8006504 <__sfvwrite_r+0xb4>
 80066e8:	903fe11e 	bne	r18,zero,8006670 <__sfvwrite_r+0x220>
 80066ec:	8f000017 	ldw	fp,0(r17)
 80066f0:	8c800117 	ldw	r18,4(r17)
 80066f4:	0011883a 	mov	r8,zero
 80066f8:	8c400204 	addi	r17,r17,8
 80066fc:	003fdb06 	br	800666c <__sfvwrite_r+0x21c>
 8006700:	180d883a 	mov	r6,r3
 8006704:	e00b883a 	mov	r5,fp
 8006708:	da000115 	stw	r8,4(sp)
 800670c:	d8c00015 	stw	r3,0(sp)
 8006710:	80077640 	call	8007764 <memmove>
 8006714:	d8c00017 	ldw	r3,0(sp)
 8006718:	80800017 	ldw	r2,0(r16)
 800671c:	800b883a 	mov	r5,r16
 8006720:	a809883a 	mov	r4,r21
 8006724:	10c5883a 	add	r2,r2,r3
 8006728:	80800015 	stw	r2,0(r16)
 800672c:	d8c00015 	stw	r3,0(sp)
 8006730:	8005bf00 	call	8005bf0 <_fflush_r>
 8006734:	d8c00017 	ldw	r3,0(sp)
 8006738:	da000117 	ldw	r8,4(sp)
 800673c:	103fc21e 	bne	r2,zero,8006648 <__sfvwrite_r+0x1f8>
 8006740:	182f883a 	mov	r23,r3
 8006744:	9de7c83a 	sub	r19,r19,r23
 8006748:	983fe11e 	bne	r19,zero,80066d0 <__sfvwrite_r+0x280>
 800674c:	800b883a 	mov	r5,r16
 8006750:	a809883a 	mov	r4,r21
 8006754:	8005bf00 	call	8005bf0 <_fflush_r>
 8006758:	103fbb1e 	bne	r2,zero,8006648 <__sfvwrite_r+0x1f8>
 800675c:	0011883a 	mov	r8,zero
 8006760:	003fdb06 	br	80066d0 <__sfvwrite_r+0x280>
 8006764:	94c0012e 	bgeu	r18,r19,800676c <__sfvwrite_r+0x31c>
 8006768:	9027883a 	mov	r19,r18
 800676c:	980d883a 	mov	r6,r19
 8006770:	e00b883a 	mov	r5,fp
 8006774:	80077640 	call	8007764 <memmove>
 8006778:	80800217 	ldw	r2,8(r16)
 800677c:	80c00017 	ldw	r3,0(r16)
 8006780:	14c5c83a 	sub	r2,r2,r19
 8006784:	1cc7883a 	add	r3,r3,r19
 8006788:	80800215 	stw	r2,8(r16)
 800678c:	80c00015 	stw	r3,0(r16)
 8006790:	10004326 	beq	r2,zero,80068a0 <__sfvwrite_r+0x450>
 8006794:	9805883a 	mov	r2,r19
 8006798:	003f8606 	br	80065b4 <__sfvwrite_r+0x164>
 800679c:	b00d883a 	mov	r6,r22
 80067a0:	e00b883a 	mov	r5,fp
 80067a4:	da000115 	stw	r8,4(sp)
 80067a8:	80077640 	call	8007764 <memmove>
 80067ac:	80800217 	ldw	r2,8(r16)
 80067b0:	80c00017 	ldw	r3,0(r16)
 80067b4:	da000117 	ldw	r8,4(sp)
 80067b8:	1585c83a 	sub	r2,r2,r22
 80067bc:	1dad883a 	add	r22,r3,r22
 80067c0:	80800215 	stw	r2,8(r16)
 80067c4:	85800015 	stw	r22,0(r16)
 80067c8:	003fbf06 	br	80066c8 <__sfvwrite_r+0x278>
 80067cc:	81000017 	ldw	r4,0(r16)
 80067d0:	9027883a 	mov	r19,r18
 80067d4:	902f883a 	mov	r23,r18
 80067d8:	003f6c06 	br	800658c <__sfvwrite_r+0x13c>
 80067dc:	900d883a 	mov	r6,r18
 80067e0:	01400284 	movi	r5,10
 80067e4:	e009883a 	mov	r4,fp
 80067e8:	80075380 	call	8007538 <memchr>
 80067ec:	10003e26 	beq	r2,zero,80068e8 <__sfvwrite_r+0x498>
 80067f0:	10800044 	addi	r2,r2,1
 80067f4:	1727c83a 	sub	r19,r2,fp
 80067f8:	02000044 	movi	r8,1
 80067fc:	003f9d06 	br	8006674 <__sfvwrite_r+0x224>
 8006800:	80800517 	ldw	r2,20(r16)
 8006804:	81400417 	ldw	r5,16(r16)
 8006808:	81c00017 	ldw	r7,0(r16)
 800680c:	10a7883a 	add	r19,r2,r2
 8006810:	9885883a 	add	r2,r19,r2
 8006814:	1026d7fa 	srli	r19,r2,31
 8006818:	396dc83a 	sub	r22,r7,r5
 800681c:	b1000044 	addi	r4,r22,1
 8006820:	9885883a 	add	r2,r19,r2
 8006824:	1027d07a 	srai	r19,r2,1
 8006828:	2485883a 	add	r2,r4,r18
 800682c:	980d883a 	mov	r6,r19
 8006830:	9880022e 	bgeu	r19,r2,800683c <__sfvwrite_r+0x3ec>
 8006834:	1027883a 	mov	r19,r2
 8006838:	100d883a 	mov	r6,r2
 800683c:	18c1000c 	andi	r3,r3,1024
 8006840:	18001c26 	beq	r3,zero,80068b4 <__sfvwrite_r+0x464>
 8006844:	300b883a 	mov	r5,r6
 8006848:	a809883a 	mov	r4,r21
 800684c:	8006d2c0 	call	8006d2c <_malloc_r>
 8006850:	102f883a 	mov	r23,r2
 8006854:	10002926 	beq	r2,zero,80068fc <__sfvwrite_r+0x4ac>
 8006858:	81400417 	ldw	r5,16(r16)
 800685c:	b00d883a 	mov	r6,r22
 8006860:	1009883a 	mov	r4,r2
 8006864:	800761c0 	call	800761c <memcpy>
 8006868:	8080030b 	ldhu	r2,12(r16)
 800686c:	00fedfc4 	movi	r3,-1153
 8006870:	10c4703a 	and	r2,r2,r3
 8006874:	10802014 	ori	r2,r2,128
 8006878:	8080030d 	sth	r2,12(r16)
 800687c:	bd89883a 	add	r4,r23,r22
 8006880:	9d8fc83a 	sub	r7,r19,r22
 8006884:	85c00415 	stw	r23,16(r16)
 8006888:	84c00515 	stw	r19,20(r16)
 800688c:	81000015 	stw	r4,0(r16)
 8006890:	9027883a 	mov	r19,r18
 8006894:	81c00215 	stw	r7,8(r16)
 8006898:	902f883a 	mov	r23,r18
 800689c:	003f3b06 	br	800658c <__sfvwrite_r+0x13c>
 80068a0:	800b883a 	mov	r5,r16
 80068a4:	a809883a 	mov	r4,r21
 80068a8:	8005bf00 	call	8005bf0 <_fflush_r>
 80068ac:	103fb926 	beq	r2,zero,8006794 <__sfvwrite_r+0x344>
 80068b0:	003f6506 	br	8006648 <__sfvwrite_r+0x1f8>
 80068b4:	a809883a 	mov	r4,r21
 80068b8:	80089e40 	call	80089e4 <_realloc_r>
 80068bc:	102f883a 	mov	r23,r2
 80068c0:	103fee1e 	bne	r2,zero,800687c <__sfvwrite_r+0x42c>
 80068c4:	81400417 	ldw	r5,16(r16)
 80068c8:	a809883a 	mov	r4,r21
 80068cc:	80061400 	call	8006140 <_free_r>
 80068d0:	8080030b 	ldhu	r2,12(r16)
 80068d4:	00ffdfc4 	movi	r3,-129
 80068d8:	1884703a 	and	r2,r3,r2
 80068dc:	00c00304 	movi	r3,12
 80068e0:	a8c00015 	stw	r3,0(r21)
 80068e4:	003f5906 	br	800664c <__sfvwrite_r+0x1fc>
 80068e8:	94c00044 	addi	r19,r18,1
 80068ec:	02000044 	movi	r8,1
 80068f0:	003f6006 	br	8006674 <__sfvwrite_r+0x224>
 80068f4:	00bfffc4 	movi	r2,-1
 80068f8:	003f0306 	br	8006508 <__sfvwrite_r+0xb8>
 80068fc:	00800304 	movi	r2,12
 8006900:	a8800015 	stw	r2,0(r21)
 8006904:	8080030b 	ldhu	r2,12(r16)
 8006908:	003f5006 	br	800664c <__sfvwrite_r+0x1fc>

0800690c <_fwalk>:
 800690c:	defff704 	addi	sp,sp,-36
 8006910:	dd000415 	stw	r20,16(sp)
 8006914:	dfc00815 	stw	ra,32(sp)
 8006918:	ddc00715 	stw	r23,28(sp)
 800691c:	dd800615 	stw	r22,24(sp)
 8006920:	dd400515 	stw	r21,20(sp)
 8006924:	dcc00315 	stw	r19,12(sp)
 8006928:	dc800215 	stw	r18,8(sp)
 800692c:	dc400115 	stw	r17,4(sp)
 8006930:	dc000015 	stw	r16,0(sp)
 8006934:	2500b804 	addi	r20,r4,736
 8006938:	a0002326 	beq	r20,zero,80069c8 <_fwalk+0xbc>
 800693c:	282b883a 	mov	r21,r5
 8006940:	002f883a 	mov	r23,zero
 8006944:	05800044 	movi	r22,1
 8006948:	04ffffc4 	movi	r19,-1
 800694c:	a4400117 	ldw	r17,4(r20)
 8006950:	a4800217 	ldw	r18,8(r20)
 8006954:	8c7fffc4 	addi	r17,r17,-1
 8006958:	88000d16 	blt	r17,zero,8006990 <_fwalk+0x84>
 800695c:	94000304 	addi	r16,r18,12
 8006960:	94800384 	addi	r18,r18,14
 8006964:	8080000b 	ldhu	r2,0(r16)
 8006968:	8c7fffc4 	addi	r17,r17,-1
 800696c:	813ffd04 	addi	r4,r16,-12
 8006970:	b080042e 	bgeu	r22,r2,8006984 <_fwalk+0x78>
 8006974:	9080000f 	ldh	r2,0(r18)
 8006978:	14c00226 	beq	r2,r19,8006984 <_fwalk+0x78>
 800697c:	a83ee83a 	callr	r21
 8006980:	b8aeb03a 	or	r23,r23,r2
 8006984:	84001a04 	addi	r16,r16,104
 8006988:	94801a04 	addi	r18,r18,104
 800698c:	8cfff51e 	bne	r17,r19,8006964 <_fwalk+0x58>
 8006990:	a5000017 	ldw	r20,0(r20)
 8006994:	a03fed1e 	bne	r20,zero,800694c <_fwalk+0x40>
 8006998:	b805883a 	mov	r2,r23
 800699c:	dfc00817 	ldw	ra,32(sp)
 80069a0:	ddc00717 	ldw	r23,28(sp)
 80069a4:	dd800617 	ldw	r22,24(sp)
 80069a8:	dd400517 	ldw	r21,20(sp)
 80069ac:	dd000417 	ldw	r20,16(sp)
 80069b0:	dcc00317 	ldw	r19,12(sp)
 80069b4:	dc800217 	ldw	r18,8(sp)
 80069b8:	dc400117 	ldw	r17,4(sp)
 80069bc:	dc000017 	ldw	r16,0(sp)
 80069c0:	dec00904 	addi	sp,sp,36
 80069c4:	f800283a 	ret
 80069c8:	002f883a 	mov	r23,zero
 80069cc:	003ff206 	br	8006998 <_fwalk+0x8c>

080069d0 <_fwalk_reent>:
 80069d0:	defff704 	addi	sp,sp,-36
 80069d4:	dd000415 	stw	r20,16(sp)
 80069d8:	dfc00815 	stw	ra,32(sp)
 80069dc:	ddc00715 	stw	r23,28(sp)
 80069e0:	dd800615 	stw	r22,24(sp)
 80069e4:	dd400515 	stw	r21,20(sp)
 80069e8:	dcc00315 	stw	r19,12(sp)
 80069ec:	dc800215 	stw	r18,8(sp)
 80069f0:	dc400115 	stw	r17,4(sp)
 80069f4:	dc000015 	stw	r16,0(sp)
 80069f8:	2500b804 	addi	r20,r4,736
 80069fc:	a0002326 	beq	r20,zero,8006a8c <_fwalk_reent+0xbc>
 8006a00:	282b883a 	mov	r21,r5
 8006a04:	2027883a 	mov	r19,r4
 8006a08:	002f883a 	mov	r23,zero
 8006a0c:	05800044 	movi	r22,1
 8006a10:	04bfffc4 	movi	r18,-1
 8006a14:	a4400117 	ldw	r17,4(r20)
 8006a18:	a4000217 	ldw	r16,8(r20)
 8006a1c:	8c7fffc4 	addi	r17,r17,-1
 8006a20:	88000c16 	blt	r17,zero,8006a54 <_fwalk_reent+0x84>
 8006a24:	84000304 	addi	r16,r16,12
 8006a28:	8080000b 	ldhu	r2,0(r16)
 8006a2c:	8c7fffc4 	addi	r17,r17,-1
 8006a30:	817ffd04 	addi	r5,r16,-12
 8006a34:	b080052e 	bgeu	r22,r2,8006a4c <_fwalk_reent+0x7c>
 8006a38:	8080008f 	ldh	r2,2(r16)
 8006a3c:	9809883a 	mov	r4,r19
 8006a40:	14800226 	beq	r2,r18,8006a4c <_fwalk_reent+0x7c>
 8006a44:	a83ee83a 	callr	r21
 8006a48:	b8aeb03a 	or	r23,r23,r2
 8006a4c:	84001a04 	addi	r16,r16,104
 8006a50:	8cbff51e 	bne	r17,r18,8006a28 <_fwalk_reent+0x58>
 8006a54:	a5000017 	ldw	r20,0(r20)
 8006a58:	a03fee1e 	bne	r20,zero,8006a14 <_fwalk_reent+0x44>
 8006a5c:	b805883a 	mov	r2,r23
 8006a60:	dfc00817 	ldw	ra,32(sp)
 8006a64:	ddc00717 	ldw	r23,28(sp)
 8006a68:	dd800617 	ldw	r22,24(sp)
 8006a6c:	dd400517 	ldw	r21,20(sp)
 8006a70:	dd000417 	ldw	r20,16(sp)
 8006a74:	dcc00317 	ldw	r19,12(sp)
 8006a78:	dc800217 	ldw	r18,8(sp)
 8006a7c:	dc400117 	ldw	r17,4(sp)
 8006a80:	dc000017 	ldw	r16,0(sp)
 8006a84:	dec00904 	addi	sp,sp,36
 8006a88:	f800283a 	ret
 8006a8c:	002f883a 	mov	r23,zero
 8006a90:	003ff206 	br	8006a5c <_fwalk_reent+0x8c>

08006a94 <_setlocale_r>:
 8006a94:	30001b26 	beq	r6,zero,8006b04 <_setlocale_r+0x70>
 8006a98:	01420074 	movhi	r5,2049
 8006a9c:	defffe04 	addi	sp,sp,-8
 8006aa0:	29438104 	addi	r5,r5,3588
 8006aa4:	3009883a 	mov	r4,r6
 8006aa8:	dc000015 	stw	r16,0(sp)
 8006aac:	dfc00115 	stw	ra,4(sp)
 8006ab0:	3021883a 	mov	r16,r6
 8006ab4:	800914c0 	call	800914c <strcmp>
 8006ab8:	1000061e 	bne	r2,zero,8006ad4 <_setlocale_r+0x40>
 8006abc:	00820074 	movhi	r2,2049
 8006ac0:	10838004 	addi	r2,r2,3584
 8006ac4:	dfc00117 	ldw	ra,4(sp)
 8006ac8:	dc000017 	ldw	r16,0(sp)
 8006acc:	dec00204 	addi	sp,sp,8
 8006ad0:	f800283a 	ret
 8006ad4:	01420074 	movhi	r5,2049
 8006ad8:	29438004 	addi	r5,r5,3584
 8006adc:	8009883a 	mov	r4,r16
 8006ae0:	800914c0 	call	800914c <strcmp>
 8006ae4:	103ff526 	beq	r2,zero,8006abc <_setlocale_r+0x28>
 8006ae8:	01420074 	movhi	r5,2049
 8006aec:	29436b04 	addi	r5,r5,3500
 8006af0:	8009883a 	mov	r4,r16
 8006af4:	800914c0 	call	800914c <strcmp>
 8006af8:	103ff026 	beq	r2,zero,8006abc <_setlocale_r+0x28>
 8006afc:	0005883a 	mov	r2,zero
 8006b00:	003ff006 	br	8006ac4 <_setlocale_r+0x30>
 8006b04:	00820074 	movhi	r2,2049
 8006b08:	10838004 	addi	r2,r2,3584
 8006b0c:	f800283a 	ret

08006b10 <__locale_charset>:
 8006b10:	00820074 	movhi	r2,2049
 8006b14:	1084f304 	addi	r2,r2,5068
 8006b18:	f800283a 	ret

08006b1c <__locale_mb_cur_max>:
 8006b1c:	00820074 	movhi	r2,2049
 8006b20:	108a9304 	addi	r2,r2,10828
 8006b24:	10800017 	ldw	r2,0(r2)
 8006b28:	f800283a 	ret

08006b2c <__locale_msgcharset>:
 8006b2c:	00820074 	movhi	r2,2049
 8006b30:	1084eb04 	addi	r2,r2,5036
 8006b34:	f800283a 	ret

08006b38 <__locale_cjk_lang>:
 8006b38:	0005883a 	mov	r2,zero
 8006b3c:	f800283a 	ret

08006b40 <_localeconv_r>:
 8006b40:	00820074 	movhi	r2,2049
 8006b44:	1084fb04 	addi	r2,r2,5100
 8006b48:	f800283a 	ret

08006b4c <setlocale>:
 8006b4c:	00820074 	movhi	r2,2049
 8006b50:	108a9204 	addi	r2,r2,10824
 8006b54:	280d883a 	mov	r6,r5
 8006b58:	200b883a 	mov	r5,r4
 8006b5c:	11000017 	ldw	r4,0(r2)
 8006b60:	8006a941 	jmpi	8006a94 <_setlocale_r>

08006b64 <localeconv>:
 8006b64:	00820074 	movhi	r2,2049
 8006b68:	1084fb04 	addi	r2,r2,5100
 8006b6c:	f800283a 	ret

08006b70 <__smakebuf_r>:
 8006b70:	2880030b 	ldhu	r2,12(r5)
 8006b74:	10c0008c 	andi	r3,r2,2
 8006b78:	1800411e 	bne	r3,zero,8006c80 <__smakebuf_r+0x110>
 8006b7c:	deffec04 	addi	sp,sp,-80
 8006b80:	dc000f15 	stw	r16,60(sp)
 8006b84:	2821883a 	mov	r16,r5
 8006b88:	2940038f 	ldh	r5,14(r5)
 8006b8c:	dc401015 	stw	r17,64(sp)
 8006b90:	dfc01315 	stw	ra,76(sp)
 8006b94:	dcc01215 	stw	r19,72(sp)
 8006b98:	dc801115 	stw	r18,68(sp)
 8006b9c:	2023883a 	mov	r17,r4
 8006ba0:	28001c16 	blt	r5,zero,8006c14 <__smakebuf_r+0xa4>
 8006ba4:	d80d883a 	mov	r6,sp
 8006ba8:	800acf40 	call	800acf4 <_fstat_r>
 8006bac:	10001816 	blt	r2,zero,8006c10 <__smakebuf_r+0xa0>
 8006bb0:	d8800117 	ldw	r2,4(sp)
 8006bb4:	00e00014 	movui	r3,32768
 8006bb8:	10bc000c 	andi	r2,r2,61440
 8006bbc:	14c80020 	cmpeqi	r19,r2,8192
 8006bc0:	10c03726 	beq	r2,r3,8006ca0 <__smakebuf_r+0x130>
 8006bc4:	80c0030b 	ldhu	r3,12(r16)
 8006bc8:	18c20014 	ori	r3,r3,2048
 8006bcc:	80c0030d 	sth	r3,12(r16)
 8006bd0:	00c80004 	movi	r3,8192
 8006bd4:	10c0521e 	bne	r2,r3,8006d20 <__smakebuf_r+0x1b0>
 8006bd8:	8140038f 	ldh	r5,14(r16)
 8006bdc:	8809883a 	mov	r4,r17
 8006be0:	800ad500 	call	800ad50 <_isatty_r>
 8006be4:	10004c26 	beq	r2,zero,8006d18 <__smakebuf_r+0x1a8>
 8006be8:	8080030b 	ldhu	r2,12(r16)
 8006bec:	80c010c4 	addi	r3,r16,67
 8006bf0:	80c00015 	stw	r3,0(r16)
 8006bf4:	10800054 	ori	r2,r2,1
 8006bf8:	8080030d 	sth	r2,12(r16)
 8006bfc:	00800044 	movi	r2,1
 8006c00:	80c00415 	stw	r3,16(r16)
 8006c04:	80800515 	stw	r2,20(r16)
 8006c08:	04810004 	movi	r18,1024
 8006c0c:	00000706 	br	8006c2c <__smakebuf_r+0xbc>
 8006c10:	8080030b 	ldhu	r2,12(r16)
 8006c14:	10c0200c 	andi	r3,r2,128
 8006c18:	18001f1e 	bne	r3,zero,8006c98 <__smakebuf_r+0x128>
 8006c1c:	04810004 	movi	r18,1024
 8006c20:	10820014 	ori	r2,r2,2048
 8006c24:	8080030d 	sth	r2,12(r16)
 8006c28:	0027883a 	mov	r19,zero
 8006c2c:	900b883a 	mov	r5,r18
 8006c30:	8809883a 	mov	r4,r17
 8006c34:	8006d2c0 	call	8006d2c <_malloc_r>
 8006c38:	10002c26 	beq	r2,zero,8006cec <__smakebuf_r+0x17c>
 8006c3c:	80c0030b 	ldhu	r3,12(r16)
 8006c40:	01020034 	movhi	r4,2048
 8006c44:	21172104 	addi	r4,r4,23684
 8006c48:	89000f15 	stw	r4,60(r17)
 8006c4c:	18c02014 	ori	r3,r3,128
 8006c50:	80c0030d 	sth	r3,12(r16)
 8006c54:	80800015 	stw	r2,0(r16)
 8006c58:	80800415 	stw	r2,16(r16)
 8006c5c:	84800515 	stw	r18,20(r16)
 8006c60:	98001a1e 	bne	r19,zero,8006ccc <__smakebuf_r+0x15c>
 8006c64:	dfc01317 	ldw	ra,76(sp)
 8006c68:	dcc01217 	ldw	r19,72(sp)
 8006c6c:	dc801117 	ldw	r18,68(sp)
 8006c70:	dc401017 	ldw	r17,64(sp)
 8006c74:	dc000f17 	ldw	r16,60(sp)
 8006c78:	dec01404 	addi	sp,sp,80
 8006c7c:	f800283a 	ret
 8006c80:	288010c4 	addi	r2,r5,67
 8006c84:	28800015 	stw	r2,0(r5)
 8006c88:	28800415 	stw	r2,16(r5)
 8006c8c:	00800044 	movi	r2,1
 8006c90:	28800515 	stw	r2,20(r5)
 8006c94:	f800283a 	ret
 8006c98:	04801004 	movi	r18,64
 8006c9c:	003fe006 	br	8006c20 <__smakebuf_r+0xb0>
 8006ca0:	81000a17 	ldw	r4,40(r16)
 8006ca4:	00c20074 	movhi	r3,2049
 8006ca8:	18e43a04 	addi	r3,r3,-28440
 8006cac:	20ffc51e 	bne	r4,r3,8006bc4 <__smakebuf_r+0x54>
 8006cb0:	8080030b 	ldhu	r2,12(r16)
 8006cb4:	04810004 	movi	r18,1024
 8006cb8:	84801315 	stw	r18,76(r16)
 8006cbc:	1484b03a 	or	r2,r2,r18
 8006cc0:	8080030d 	sth	r2,12(r16)
 8006cc4:	0027883a 	mov	r19,zero
 8006cc8:	003fd806 	br	8006c2c <__smakebuf_r+0xbc>
 8006ccc:	8140038f 	ldh	r5,14(r16)
 8006cd0:	8809883a 	mov	r4,r17
 8006cd4:	800ad500 	call	800ad50 <_isatty_r>
 8006cd8:	103fe226 	beq	r2,zero,8006c64 <__smakebuf_r+0xf4>
 8006cdc:	8080030b 	ldhu	r2,12(r16)
 8006ce0:	10800054 	ori	r2,r2,1
 8006ce4:	8080030d 	sth	r2,12(r16)
 8006ce8:	003fde06 	br	8006c64 <__smakebuf_r+0xf4>
 8006cec:	8080030b 	ldhu	r2,12(r16)
 8006cf0:	10c0800c 	andi	r3,r2,512
 8006cf4:	183fdb1e 	bne	r3,zero,8006c64 <__smakebuf_r+0xf4>
 8006cf8:	10800094 	ori	r2,r2,2
 8006cfc:	80c010c4 	addi	r3,r16,67
 8006d00:	8080030d 	sth	r2,12(r16)
 8006d04:	00800044 	movi	r2,1
 8006d08:	80c00015 	stw	r3,0(r16)
 8006d0c:	80c00415 	stw	r3,16(r16)
 8006d10:	80800515 	stw	r2,20(r16)
 8006d14:	003fd306 	br	8006c64 <__smakebuf_r+0xf4>
 8006d18:	04810004 	movi	r18,1024
 8006d1c:	003fc306 	br	8006c2c <__smakebuf_r+0xbc>
 8006d20:	0027883a 	mov	r19,zero
 8006d24:	04810004 	movi	r18,1024
 8006d28:	003fc006 	br	8006c2c <__smakebuf_r+0xbc>

08006d2c <_malloc_r>:
 8006d2c:	defff504 	addi	sp,sp,-44
 8006d30:	dc800315 	stw	r18,12(sp)
 8006d34:	dfc00a15 	stw	ra,40(sp)
 8006d38:	df000915 	stw	fp,36(sp)
 8006d3c:	ddc00815 	stw	r23,32(sp)
 8006d40:	dd800715 	stw	r22,28(sp)
 8006d44:	dd400615 	stw	r21,24(sp)
 8006d48:	dd000515 	stw	r20,20(sp)
 8006d4c:	dcc00415 	stw	r19,16(sp)
 8006d50:	dc400215 	stw	r17,8(sp)
 8006d54:	dc000115 	stw	r16,4(sp)
 8006d58:	288002c4 	addi	r2,r5,11
 8006d5c:	00c00584 	movi	r3,22
 8006d60:	2025883a 	mov	r18,r4
 8006d64:	18807f2e 	bgeu	r3,r2,8006f64 <_malloc_r+0x238>
 8006d68:	047ffe04 	movi	r17,-8
 8006d6c:	1462703a 	and	r17,r2,r17
 8006d70:	8800a316 	blt	r17,zero,8007000 <_malloc_r+0x2d4>
 8006d74:	8940a236 	bltu	r17,r5,8007000 <_malloc_r+0x2d4>
 8006d78:	800e9880 	call	800e988 <__malloc_lock>
 8006d7c:	00807dc4 	movi	r2,503
 8006d80:	1441e92e 	bgeu	r2,r17,8007528 <_malloc_r+0x7fc>
 8006d84:	8804d27a 	srli	r2,r17,9
 8006d88:	1000a126 	beq	r2,zero,8007010 <_malloc_r+0x2e4>
 8006d8c:	00c00104 	movi	r3,4
 8006d90:	18811e36 	bltu	r3,r2,800720c <_malloc_r+0x4e0>
 8006d94:	8804d1ba 	srli	r2,r17,6
 8006d98:	12000e44 	addi	r8,r2,57
 8006d9c:	11c00e04 	addi	r7,r2,56
 8006da0:	4209883a 	add	r4,r8,r8
 8006da4:	04c20074 	movhi	r19,2049
 8006da8:	2109883a 	add	r4,r4,r4
 8006dac:	9cc50904 	addi	r19,r19,5156
 8006db0:	2109883a 	add	r4,r4,r4
 8006db4:	9909883a 	add	r4,r19,r4
 8006db8:	24000117 	ldw	r16,4(r4)
 8006dbc:	213ffe04 	addi	r4,r4,-8
 8006dc0:	24009726 	beq	r4,r16,8007020 <_malloc_r+0x2f4>
 8006dc4:	80800117 	ldw	r2,4(r16)
 8006dc8:	01bfff04 	movi	r6,-4
 8006dcc:	014003c4 	movi	r5,15
 8006dd0:	1184703a 	and	r2,r2,r6
 8006dd4:	1447c83a 	sub	r3,r2,r17
 8006dd8:	28c00716 	blt	r5,r3,8006df8 <_malloc_r+0xcc>
 8006ddc:	1800920e 	bge	r3,zero,8007028 <_malloc_r+0x2fc>
 8006de0:	84000317 	ldw	r16,12(r16)
 8006de4:	24008e26 	beq	r4,r16,8007020 <_malloc_r+0x2f4>
 8006de8:	80800117 	ldw	r2,4(r16)
 8006dec:	1184703a 	and	r2,r2,r6
 8006df0:	1447c83a 	sub	r3,r2,r17
 8006df4:	28fff90e 	bge	r5,r3,8006ddc <_malloc_r+0xb0>
 8006df8:	3809883a 	mov	r4,r7
 8006dfc:	01820074 	movhi	r6,2049
 8006e00:	9c000417 	ldw	r16,16(r19)
 8006e04:	31850904 	addi	r6,r6,5156
 8006e08:	32000204 	addi	r8,r6,8
 8006e0c:	82013426 	beq	r16,r8,80072e0 <_malloc_r+0x5b4>
 8006e10:	80c00117 	ldw	r3,4(r16)
 8006e14:	00bfff04 	movi	r2,-4
 8006e18:	188e703a 	and	r7,r3,r2
 8006e1c:	3c45c83a 	sub	r2,r7,r17
 8006e20:	00c003c4 	movi	r3,15
 8006e24:	18811f16 	blt	r3,r2,80072a4 <_malloc_r+0x578>
 8006e28:	32000515 	stw	r8,20(r6)
 8006e2c:	32000415 	stw	r8,16(r6)
 8006e30:	10007f0e 	bge	r2,zero,8007030 <_malloc_r+0x304>
 8006e34:	00807fc4 	movi	r2,511
 8006e38:	11c0fd36 	bltu	r2,r7,8007230 <_malloc_r+0x504>
 8006e3c:	3806d0fa 	srli	r3,r7,3
 8006e40:	01c00044 	movi	r7,1
 8006e44:	30800117 	ldw	r2,4(r6)
 8006e48:	19400044 	addi	r5,r3,1
 8006e4c:	294b883a 	add	r5,r5,r5
 8006e50:	1807d0ba 	srai	r3,r3,2
 8006e54:	294b883a 	add	r5,r5,r5
 8006e58:	294b883a 	add	r5,r5,r5
 8006e5c:	298b883a 	add	r5,r5,r6
 8006e60:	38c6983a 	sll	r3,r7,r3
 8006e64:	29c00017 	ldw	r7,0(r5)
 8006e68:	2a7ffe04 	addi	r9,r5,-8
 8006e6c:	1886b03a 	or	r3,r3,r2
 8006e70:	82400315 	stw	r9,12(r16)
 8006e74:	81c00215 	stw	r7,8(r16)
 8006e78:	30c00115 	stw	r3,4(r6)
 8006e7c:	2c000015 	stw	r16,0(r5)
 8006e80:	3c000315 	stw	r16,12(r7)
 8006e84:	2005d0ba 	srai	r2,r4,2
 8006e88:	01400044 	movi	r5,1
 8006e8c:	288a983a 	sll	r5,r5,r2
 8006e90:	19406f36 	bltu	r3,r5,8007050 <_malloc_r+0x324>
 8006e94:	28c4703a 	and	r2,r5,r3
 8006e98:	10000a1e 	bne	r2,zero,8006ec4 <_malloc_r+0x198>
 8006e9c:	00bfff04 	movi	r2,-4
 8006ea0:	294b883a 	add	r5,r5,r5
 8006ea4:	2088703a 	and	r4,r4,r2
 8006ea8:	28c4703a 	and	r2,r5,r3
 8006eac:	21000104 	addi	r4,r4,4
 8006eb0:	1000041e 	bne	r2,zero,8006ec4 <_malloc_r+0x198>
 8006eb4:	294b883a 	add	r5,r5,r5
 8006eb8:	28c4703a 	and	r2,r5,r3
 8006ebc:	21000104 	addi	r4,r4,4
 8006ec0:	103ffc26 	beq	r2,zero,8006eb4 <_malloc_r+0x188>
 8006ec4:	02bfff04 	movi	r10,-4
 8006ec8:	024003c4 	movi	r9,15
 8006ecc:	21800044 	addi	r6,r4,1
 8006ed0:	318d883a 	add	r6,r6,r6
 8006ed4:	318d883a 	add	r6,r6,r6
 8006ed8:	318d883a 	add	r6,r6,r6
 8006edc:	998d883a 	add	r6,r19,r6
 8006ee0:	333ffe04 	addi	r12,r6,-8
 8006ee4:	2017883a 	mov	r11,r4
 8006ee8:	31800104 	addi	r6,r6,4
 8006eec:	34000017 	ldw	r16,0(r6)
 8006ef0:	31fffd04 	addi	r7,r6,-12
 8006ef4:	81c0041e 	bne	r16,r7,8006f08 <_malloc_r+0x1dc>
 8006ef8:	0000fb06 	br	80072e8 <_malloc_r+0x5bc>
 8006efc:	1801030e 	bge	r3,zero,800730c <_malloc_r+0x5e0>
 8006f00:	84000317 	ldw	r16,12(r16)
 8006f04:	81c0f826 	beq	r16,r7,80072e8 <_malloc_r+0x5bc>
 8006f08:	80800117 	ldw	r2,4(r16)
 8006f0c:	1284703a 	and	r2,r2,r10
 8006f10:	1447c83a 	sub	r3,r2,r17
 8006f14:	48fff90e 	bge	r9,r3,8006efc <_malloc_r+0x1d0>
 8006f18:	80800317 	ldw	r2,12(r16)
 8006f1c:	81000217 	ldw	r4,8(r16)
 8006f20:	89400054 	ori	r5,r17,1
 8006f24:	81400115 	stw	r5,4(r16)
 8006f28:	20800315 	stw	r2,12(r4)
 8006f2c:	11000215 	stw	r4,8(r2)
 8006f30:	8463883a 	add	r17,r16,r17
 8006f34:	9c400515 	stw	r17,20(r19)
 8006f38:	9c400415 	stw	r17,16(r19)
 8006f3c:	18800054 	ori	r2,r3,1
 8006f40:	88800115 	stw	r2,4(r17)
 8006f44:	8a000315 	stw	r8,12(r17)
 8006f48:	8a000215 	stw	r8,8(r17)
 8006f4c:	88e3883a 	add	r17,r17,r3
 8006f50:	88c00015 	stw	r3,0(r17)
 8006f54:	9009883a 	mov	r4,r18
 8006f58:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8006f5c:	80800204 	addi	r2,r16,8
 8006f60:	00001b06 	br	8006fd0 <_malloc_r+0x2a4>
 8006f64:	04400404 	movi	r17,16
 8006f68:	89402536 	bltu	r17,r5,8007000 <_malloc_r+0x2d4>
 8006f6c:	800e9880 	call	800e988 <__malloc_lock>
 8006f70:	00800184 	movi	r2,6
 8006f74:	01000084 	movi	r4,2
 8006f78:	04c20074 	movhi	r19,2049
 8006f7c:	1085883a 	add	r2,r2,r2
 8006f80:	9cc50904 	addi	r19,r19,5156
 8006f84:	1085883a 	add	r2,r2,r2
 8006f88:	9885883a 	add	r2,r19,r2
 8006f8c:	14000117 	ldw	r16,4(r2)
 8006f90:	10fffe04 	addi	r3,r2,-8
 8006f94:	80c0d926 	beq	r16,r3,80072fc <_malloc_r+0x5d0>
 8006f98:	80c00117 	ldw	r3,4(r16)
 8006f9c:	81000317 	ldw	r4,12(r16)
 8006fa0:	00bfff04 	movi	r2,-4
 8006fa4:	1884703a 	and	r2,r3,r2
 8006fa8:	81400217 	ldw	r5,8(r16)
 8006fac:	8085883a 	add	r2,r16,r2
 8006fb0:	10c00117 	ldw	r3,4(r2)
 8006fb4:	29000315 	stw	r4,12(r5)
 8006fb8:	21400215 	stw	r5,8(r4)
 8006fbc:	18c00054 	ori	r3,r3,1
 8006fc0:	10c00115 	stw	r3,4(r2)
 8006fc4:	9009883a 	mov	r4,r18
 8006fc8:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8006fcc:	80800204 	addi	r2,r16,8
 8006fd0:	dfc00a17 	ldw	ra,40(sp)
 8006fd4:	df000917 	ldw	fp,36(sp)
 8006fd8:	ddc00817 	ldw	r23,32(sp)
 8006fdc:	dd800717 	ldw	r22,28(sp)
 8006fe0:	dd400617 	ldw	r21,24(sp)
 8006fe4:	dd000517 	ldw	r20,20(sp)
 8006fe8:	dcc00417 	ldw	r19,16(sp)
 8006fec:	dc800317 	ldw	r18,12(sp)
 8006ff0:	dc400217 	ldw	r17,8(sp)
 8006ff4:	dc000117 	ldw	r16,4(sp)
 8006ff8:	dec00b04 	addi	sp,sp,44
 8006ffc:	f800283a 	ret
 8007000:	00800304 	movi	r2,12
 8007004:	90800015 	stw	r2,0(r18)
 8007008:	0005883a 	mov	r2,zero
 800700c:	003ff006 	br	8006fd0 <_malloc_r+0x2a4>
 8007010:	01002004 	movi	r4,128
 8007014:	02001004 	movi	r8,64
 8007018:	01c00fc4 	movi	r7,63
 800701c:	003f6106 	br	8006da4 <_malloc_r+0x78>
 8007020:	4009883a 	mov	r4,r8
 8007024:	003f7506 	br	8006dfc <_malloc_r+0xd0>
 8007028:	81000317 	ldw	r4,12(r16)
 800702c:	003fde06 	br	8006fa8 <_malloc_r+0x27c>
 8007030:	81c5883a 	add	r2,r16,r7
 8007034:	11400117 	ldw	r5,4(r2)
 8007038:	9009883a 	mov	r4,r18
 800703c:	29400054 	ori	r5,r5,1
 8007040:	11400115 	stw	r5,4(r2)
 8007044:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8007048:	80800204 	addi	r2,r16,8
 800704c:	003fe006 	br	8006fd0 <_malloc_r+0x2a4>
 8007050:	9c000217 	ldw	r16,8(r19)
 8007054:	00bfff04 	movi	r2,-4
 8007058:	85800117 	ldw	r22,4(r16)
 800705c:	b0ac703a 	and	r22,r22,r2
 8007060:	b4400336 	bltu	r22,r17,8007070 <_malloc_r+0x344>
 8007064:	b445c83a 	sub	r2,r22,r17
 8007068:	00c003c4 	movi	r3,15
 800706c:	18805d16 	blt	r3,r2,80071e4 <_malloc_r+0x4b8>
 8007070:	05c20074 	movhi	r23,2049
 8007074:	00820074 	movhi	r2,2049
 8007078:	10916804 	addi	r2,r2,17824
 800707c:	bdca9404 	addi	r23,r23,10832
 8007080:	15400017 	ldw	r21,0(r2)
 8007084:	b8c00017 	ldw	r3,0(r23)
 8007088:	00bfffc4 	movi	r2,-1
 800708c:	858d883a 	add	r6,r16,r22
 8007090:	8d6b883a 	add	r21,r17,r21
 8007094:	1880ea26 	beq	r3,r2,8007440 <_malloc_r+0x714>
 8007098:	ad4403c4 	addi	r21,r21,4111
 800709c:	00bc0004 	movi	r2,-4096
 80070a0:	a8aa703a 	and	r21,r21,r2
 80070a4:	a80b883a 	mov	r5,r21
 80070a8:	9009883a 	mov	r4,r18
 80070ac:	d9800015 	stw	r6,0(sp)
 80070b0:	8008fbc0 	call	8008fbc <_sbrk_r>
 80070b4:	1029883a 	mov	r20,r2
 80070b8:	00bfffc4 	movi	r2,-1
 80070bc:	d9800017 	ldw	r6,0(sp)
 80070c0:	a080e826 	beq	r20,r2,8007464 <_malloc_r+0x738>
 80070c4:	a180a636 	bltu	r20,r6,8007360 <_malloc_r+0x634>
 80070c8:	07020074 	movhi	fp,2049
 80070cc:	e7117104 	addi	fp,fp,17860
 80070d0:	e0800017 	ldw	r2,0(fp)
 80070d4:	a887883a 	add	r3,r21,r2
 80070d8:	e0c00015 	stw	r3,0(fp)
 80070dc:	3500e626 	beq	r6,r20,8007478 <_malloc_r+0x74c>
 80070e0:	b9000017 	ldw	r4,0(r23)
 80070e4:	00bfffc4 	movi	r2,-1
 80070e8:	2080ee26 	beq	r4,r2,80074a4 <_malloc_r+0x778>
 80070ec:	a185c83a 	sub	r2,r20,r6
 80070f0:	10c5883a 	add	r2,r2,r3
 80070f4:	e0800015 	stw	r2,0(fp)
 80070f8:	a0c001cc 	andi	r3,r20,7
 80070fc:	1800bc26 	beq	r3,zero,80073f0 <_malloc_r+0x6c4>
 8007100:	a0e9c83a 	sub	r20,r20,r3
 8007104:	00840204 	movi	r2,4104
 8007108:	a5000204 	addi	r20,r20,8
 800710c:	10c7c83a 	sub	r3,r2,r3
 8007110:	a545883a 	add	r2,r20,r21
 8007114:	1083ffcc 	andi	r2,r2,4095
 8007118:	18abc83a 	sub	r21,r3,r2
 800711c:	a80b883a 	mov	r5,r21
 8007120:	9009883a 	mov	r4,r18
 8007124:	8008fbc0 	call	8008fbc <_sbrk_r>
 8007128:	00ffffc4 	movi	r3,-1
 800712c:	10c0e126 	beq	r2,r3,80074b4 <_malloc_r+0x788>
 8007130:	1505c83a 	sub	r2,r2,r20
 8007134:	1545883a 	add	r2,r2,r21
 8007138:	10800054 	ori	r2,r2,1
 800713c:	e0c00017 	ldw	r3,0(fp)
 8007140:	9d000215 	stw	r20,8(r19)
 8007144:	a0800115 	stw	r2,4(r20)
 8007148:	a8c7883a 	add	r3,r21,r3
 800714c:	e0c00015 	stw	r3,0(fp)
 8007150:	84c00e26 	beq	r16,r19,800718c <_malloc_r+0x460>
 8007154:	018003c4 	movi	r6,15
 8007158:	3580a72e 	bgeu	r6,r22,80073f8 <_malloc_r+0x6cc>
 800715c:	81400117 	ldw	r5,4(r16)
 8007160:	013ffe04 	movi	r4,-8
 8007164:	b0bffd04 	addi	r2,r22,-12
 8007168:	1104703a 	and	r2,r2,r4
 800716c:	2900004c 	andi	r4,r5,1
 8007170:	2088b03a 	or	r4,r4,r2
 8007174:	81000115 	stw	r4,4(r16)
 8007178:	01400144 	movi	r5,5
 800717c:	8089883a 	add	r4,r16,r2
 8007180:	21400115 	stw	r5,4(r4)
 8007184:	21400215 	stw	r5,8(r4)
 8007188:	3080cd36 	bltu	r6,r2,80074c0 <_malloc_r+0x794>
 800718c:	00820074 	movhi	r2,2049
 8007190:	10916704 	addi	r2,r2,17820
 8007194:	11000017 	ldw	r4,0(r2)
 8007198:	20c0012e 	bgeu	r4,r3,80071a0 <_malloc_r+0x474>
 800719c:	10c00015 	stw	r3,0(r2)
 80071a0:	00820074 	movhi	r2,2049
 80071a4:	10916604 	addi	r2,r2,17816
 80071a8:	11000017 	ldw	r4,0(r2)
 80071ac:	9c000217 	ldw	r16,8(r19)
 80071b0:	20c0012e 	bgeu	r4,r3,80071b8 <_malloc_r+0x48c>
 80071b4:	10c00015 	stw	r3,0(r2)
 80071b8:	80c00117 	ldw	r3,4(r16)
 80071bc:	00bfff04 	movi	r2,-4
 80071c0:	1886703a 	and	r3,r3,r2
 80071c4:	1c45c83a 	sub	r2,r3,r17
 80071c8:	1c400236 	bltu	r3,r17,80071d4 <_malloc_r+0x4a8>
 80071cc:	00c003c4 	movi	r3,15
 80071d0:	18800416 	blt	r3,r2,80071e4 <_malloc_r+0x4b8>
 80071d4:	9009883a 	mov	r4,r18
 80071d8:	800e9ac0 	call	800e9ac <__malloc_unlock>
 80071dc:	0005883a 	mov	r2,zero
 80071e0:	003f7b06 	br	8006fd0 <_malloc_r+0x2a4>
 80071e4:	88c00054 	ori	r3,r17,1
 80071e8:	80c00115 	stw	r3,4(r16)
 80071ec:	8463883a 	add	r17,r16,r17
 80071f0:	10800054 	ori	r2,r2,1
 80071f4:	9c400215 	stw	r17,8(r19)
 80071f8:	88800115 	stw	r2,4(r17)
 80071fc:	9009883a 	mov	r4,r18
 8007200:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8007204:	80800204 	addi	r2,r16,8
 8007208:	003f7106 	br	8006fd0 <_malloc_r+0x2a4>
 800720c:	00c00504 	movi	r3,20
 8007210:	18804a2e 	bgeu	r3,r2,800733c <_malloc_r+0x610>
 8007214:	00c01504 	movi	r3,84
 8007218:	18806e36 	bltu	r3,r2,80073d4 <_malloc_r+0x6a8>
 800721c:	8804d33a 	srli	r2,r17,12
 8007220:	12001bc4 	addi	r8,r2,111
 8007224:	11c01b84 	addi	r7,r2,110
 8007228:	4209883a 	add	r4,r8,r8
 800722c:	003edd06 	br	8006da4 <_malloc_r+0x78>
 8007230:	3804d27a 	srli	r2,r7,9
 8007234:	00c00104 	movi	r3,4
 8007238:	1880442e 	bgeu	r3,r2,800734c <_malloc_r+0x620>
 800723c:	00c00504 	movi	r3,20
 8007240:	18808136 	bltu	r3,r2,8007448 <_malloc_r+0x71c>
 8007244:	11401704 	addi	r5,r2,92
 8007248:	10c016c4 	addi	r3,r2,91
 800724c:	294b883a 	add	r5,r5,r5
 8007250:	294b883a 	add	r5,r5,r5
 8007254:	294b883a 	add	r5,r5,r5
 8007258:	994b883a 	add	r5,r19,r5
 800725c:	28800017 	ldw	r2,0(r5)
 8007260:	01820074 	movhi	r6,2049
 8007264:	297ffe04 	addi	r5,r5,-8
 8007268:	31850904 	addi	r6,r6,5156
 800726c:	28806526 	beq	r5,r2,8007404 <_malloc_r+0x6d8>
 8007270:	01bfff04 	movi	r6,-4
 8007274:	10c00117 	ldw	r3,4(r2)
 8007278:	1986703a 	and	r3,r3,r6
 800727c:	38c0022e 	bgeu	r7,r3,8007288 <_malloc_r+0x55c>
 8007280:	10800217 	ldw	r2,8(r2)
 8007284:	28bffb1e 	bne	r5,r2,8007274 <_malloc_r+0x548>
 8007288:	11400317 	ldw	r5,12(r2)
 800728c:	98c00117 	ldw	r3,4(r19)
 8007290:	81400315 	stw	r5,12(r16)
 8007294:	80800215 	stw	r2,8(r16)
 8007298:	2c000215 	stw	r16,8(r5)
 800729c:	14000315 	stw	r16,12(r2)
 80072a0:	003ef806 	br	8006e84 <_malloc_r+0x158>
 80072a4:	88c00054 	ori	r3,r17,1
 80072a8:	80c00115 	stw	r3,4(r16)
 80072ac:	8463883a 	add	r17,r16,r17
 80072b0:	34400515 	stw	r17,20(r6)
 80072b4:	34400415 	stw	r17,16(r6)
 80072b8:	10c00054 	ori	r3,r2,1
 80072bc:	8a000315 	stw	r8,12(r17)
 80072c0:	8a000215 	stw	r8,8(r17)
 80072c4:	88c00115 	stw	r3,4(r17)
 80072c8:	88a3883a 	add	r17,r17,r2
 80072cc:	88800015 	stw	r2,0(r17)
 80072d0:	9009883a 	mov	r4,r18
 80072d4:	800e9ac0 	call	800e9ac <__malloc_unlock>
 80072d8:	80800204 	addi	r2,r16,8
 80072dc:	003f3c06 	br	8006fd0 <_malloc_r+0x2a4>
 80072e0:	30c00117 	ldw	r3,4(r6)
 80072e4:	003ee706 	br	8006e84 <_malloc_r+0x158>
 80072e8:	5ac00044 	addi	r11,r11,1
 80072ec:	588000cc 	andi	r2,r11,3
 80072f0:	31800204 	addi	r6,r6,8
 80072f4:	103efd1e 	bne	r2,zero,8006eec <_malloc_r+0x1c0>
 80072f8:	00002406 	br	800738c <_malloc_r+0x660>
 80072fc:	14000317 	ldw	r16,12(r2)
 8007300:	143f251e 	bne	r2,r16,8006f98 <_malloc_r+0x26c>
 8007304:	21000084 	addi	r4,r4,2
 8007308:	003ebc06 	br	8006dfc <_malloc_r+0xd0>
 800730c:	8085883a 	add	r2,r16,r2
 8007310:	10c00117 	ldw	r3,4(r2)
 8007314:	81000317 	ldw	r4,12(r16)
 8007318:	81400217 	ldw	r5,8(r16)
 800731c:	18c00054 	ori	r3,r3,1
 8007320:	10c00115 	stw	r3,4(r2)
 8007324:	29000315 	stw	r4,12(r5)
 8007328:	21400215 	stw	r5,8(r4)
 800732c:	9009883a 	mov	r4,r18
 8007330:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8007334:	80800204 	addi	r2,r16,8
 8007338:	003f2506 	br	8006fd0 <_malloc_r+0x2a4>
 800733c:	12001704 	addi	r8,r2,92
 8007340:	11c016c4 	addi	r7,r2,91
 8007344:	4209883a 	add	r4,r8,r8
 8007348:	003e9606 	br	8006da4 <_malloc_r+0x78>
 800734c:	3804d1ba 	srli	r2,r7,6
 8007350:	11400e44 	addi	r5,r2,57
 8007354:	10c00e04 	addi	r3,r2,56
 8007358:	294b883a 	add	r5,r5,r5
 800735c:	003fbc06 	br	8007250 <_malloc_r+0x524>
 8007360:	84ff5926 	beq	r16,r19,80070c8 <_malloc_r+0x39c>
 8007364:	00820074 	movhi	r2,2049
 8007368:	10850904 	addi	r2,r2,5156
 800736c:	14000217 	ldw	r16,8(r2)
 8007370:	00bfff04 	movi	r2,-4
 8007374:	80c00117 	ldw	r3,4(r16)
 8007378:	1886703a 	and	r3,r3,r2
 800737c:	003f9106 	br	80071c4 <_malloc_r+0x498>
 8007380:	60800217 	ldw	r2,8(r12)
 8007384:	213fffc4 	addi	r4,r4,-1
 8007388:	1300651e 	bne	r2,r12,8007520 <_malloc_r+0x7f4>
 800738c:	208000cc 	andi	r2,r4,3
 8007390:	633ffe04 	addi	r12,r12,-8
 8007394:	103ffa1e 	bne	r2,zero,8007380 <_malloc_r+0x654>
 8007398:	98800117 	ldw	r2,4(r19)
 800739c:	0146303a 	nor	r3,zero,r5
 80073a0:	1884703a 	and	r2,r3,r2
 80073a4:	98800115 	stw	r2,4(r19)
 80073a8:	294b883a 	add	r5,r5,r5
 80073ac:	117f2836 	bltu	r2,r5,8007050 <_malloc_r+0x324>
 80073b0:	283f2726 	beq	r5,zero,8007050 <_malloc_r+0x324>
 80073b4:	2886703a 	and	r3,r5,r2
 80073b8:	5809883a 	mov	r4,r11
 80073bc:	183ec31e 	bne	r3,zero,8006ecc <_malloc_r+0x1a0>
 80073c0:	294b883a 	add	r5,r5,r5
 80073c4:	2886703a 	and	r3,r5,r2
 80073c8:	21000104 	addi	r4,r4,4
 80073cc:	183ffc26 	beq	r3,zero,80073c0 <_malloc_r+0x694>
 80073d0:	003ebe06 	br	8006ecc <_malloc_r+0x1a0>
 80073d4:	00c05504 	movi	r3,340
 80073d8:	18801236 	bltu	r3,r2,8007424 <_malloc_r+0x6f8>
 80073dc:	8804d3fa 	srli	r2,r17,15
 80073e0:	12001e04 	addi	r8,r2,120
 80073e4:	11c01dc4 	addi	r7,r2,119
 80073e8:	4209883a 	add	r4,r8,r8
 80073ec:	003e6d06 	br	8006da4 <_malloc_r+0x78>
 80073f0:	00c40004 	movi	r3,4096
 80073f4:	003f4606 	br	8007110 <_malloc_r+0x3e4>
 80073f8:	00800044 	movi	r2,1
 80073fc:	a0800115 	stw	r2,4(r20)
 8007400:	003f7406 	br	80071d4 <_malloc_r+0x4a8>
 8007404:	1805d0ba 	srai	r2,r3,2
 8007408:	01c00044 	movi	r7,1
 800740c:	30c00117 	ldw	r3,4(r6)
 8007410:	388e983a 	sll	r7,r7,r2
 8007414:	2805883a 	mov	r2,r5
 8007418:	38c6b03a 	or	r3,r7,r3
 800741c:	30c00115 	stw	r3,4(r6)
 8007420:	003f9b06 	br	8007290 <_malloc_r+0x564>
 8007424:	00c15504 	movi	r3,1364
 8007428:	18801a36 	bltu	r3,r2,8007494 <_malloc_r+0x768>
 800742c:	8804d4ba 	srli	r2,r17,18
 8007430:	12001f44 	addi	r8,r2,125
 8007434:	11c01f04 	addi	r7,r2,124
 8007438:	4209883a 	add	r4,r8,r8
 800743c:	003e5906 	br	8006da4 <_malloc_r+0x78>
 8007440:	ad400404 	addi	r21,r21,16
 8007444:	003f1706 	br	80070a4 <_malloc_r+0x378>
 8007448:	00c01504 	movi	r3,84
 800744c:	18802336 	bltu	r3,r2,80074dc <_malloc_r+0x7b0>
 8007450:	3804d33a 	srli	r2,r7,12
 8007454:	11401bc4 	addi	r5,r2,111
 8007458:	10c01b84 	addi	r3,r2,110
 800745c:	294b883a 	add	r5,r5,r5
 8007460:	003f7b06 	br	8007250 <_malloc_r+0x524>
 8007464:	9c000217 	ldw	r16,8(r19)
 8007468:	00bfff04 	movi	r2,-4
 800746c:	80c00117 	ldw	r3,4(r16)
 8007470:	1886703a 	and	r3,r3,r2
 8007474:	003f5306 	br	80071c4 <_malloc_r+0x498>
 8007478:	3083ffcc 	andi	r2,r6,4095
 800747c:	103f181e 	bne	r2,zero,80070e0 <_malloc_r+0x3b4>
 8007480:	99000217 	ldw	r4,8(r19)
 8007484:	b545883a 	add	r2,r22,r21
 8007488:	10800054 	ori	r2,r2,1
 800748c:	20800115 	stw	r2,4(r4)
 8007490:	003f3e06 	br	800718c <_malloc_r+0x460>
 8007494:	01003f84 	movi	r4,254
 8007498:	02001fc4 	movi	r8,127
 800749c:	01c01f84 	movi	r7,126
 80074a0:	003e4006 	br	8006da4 <_malloc_r+0x78>
 80074a4:	00820074 	movhi	r2,2049
 80074a8:	108a9404 	addi	r2,r2,10832
 80074ac:	15000015 	stw	r20,0(r2)
 80074b0:	003f1106 	br	80070f8 <_malloc_r+0x3cc>
 80074b4:	00800044 	movi	r2,1
 80074b8:	002b883a 	mov	r21,zero
 80074bc:	003f1f06 	br	800713c <_malloc_r+0x410>
 80074c0:	81400204 	addi	r5,r16,8
 80074c4:	9009883a 	mov	r4,r18
 80074c8:	80061400 	call	8006140 <_free_r>
 80074cc:	00820074 	movhi	r2,2049
 80074d0:	10917104 	addi	r2,r2,17860
 80074d4:	10c00017 	ldw	r3,0(r2)
 80074d8:	003f2c06 	br	800718c <_malloc_r+0x460>
 80074dc:	00c05504 	movi	r3,340
 80074e0:	18800536 	bltu	r3,r2,80074f8 <_malloc_r+0x7cc>
 80074e4:	3804d3fa 	srli	r2,r7,15
 80074e8:	11401e04 	addi	r5,r2,120
 80074ec:	10c01dc4 	addi	r3,r2,119
 80074f0:	294b883a 	add	r5,r5,r5
 80074f4:	003f5606 	br	8007250 <_malloc_r+0x524>
 80074f8:	00c15504 	movi	r3,1364
 80074fc:	18800536 	bltu	r3,r2,8007514 <_malloc_r+0x7e8>
 8007500:	3804d4ba 	srli	r2,r7,18
 8007504:	11401f44 	addi	r5,r2,125
 8007508:	10c01f04 	addi	r3,r2,124
 800750c:	294b883a 	add	r5,r5,r5
 8007510:	003f4f06 	br	8007250 <_malloc_r+0x524>
 8007514:	01403f84 	movi	r5,254
 8007518:	00c01f84 	movi	r3,126
 800751c:	003f4c06 	br	8007250 <_malloc_r+0x524>
 8007520:	98800117 	ldw	r2,4(r19)
 8007524:	003fa006 	br	80073a8 <_malloc_r+0x67c>
 8007528:	8808d0fa 	srli	r4,r17,3
 800752c:	20800044 	addi	r2,r4,1
 8007530:	1085883a 	add	r2,r2,r2
 8007534:	003e9006 	br	8006f78 <_malloc_r+0x24c>

08007538 <memchr>:
 8007538:	208000cc 	andi	r2,r4,3
 800753c:	280f883a 	mov	r7,r5
 8007540:	10003426 	beq	r2,zero,8007614 <memchr+0xdc>
 8007544:	30bfffc4 	addi	r2,r6,-1
 8007548:	30001a26 	beq	r6,zero,80075b4 <memchr+0x7c>
 800754c:	20c00003 	ldbu	r3,0(r4)
 8007550:	29803fcc 	andi	r6,r5,255
 8007554:	30c0051e 	bne	r6,r3,800756c <memchr+0x34>
 8007558:	00001806 	br	80075bc <memchr+0x84>
 800755c:	10001526 	beq	r2,zero,80075b4 <memchr+0x7c>
 8007560:	20c00003 	ldbu	r3,0(r4)
 8007564:	10bfffc4 	addi	r2,r2,-1
 8007568:	30c01426 	beq	r6,r3,80075bc <memchr+0x84>
 800756c:	21000044 	addi	r4,r4,1
 8007570:	20c000cc 	andi	r3,r4,3
 8007574:	183ff91e 	bne	r3,zero,800755c <memchr+0x24>
 8007578:	020000c4 	movi	r8,3
 800757c:	40801136 	bltu	r8,r2,80075c4 <memchr+0x8c>
 8007580:	10000c26 	beq	r2,zero,80075b4 <memchr+0x7c>
 8007584:	20c00003 	ldbu	r3,0(r4)
 8007588:	29403fcc 	andi	r5,r5,255
 800758c:	28c00b26 	beq	r5,r3,80075bc <memchr+0x84>
 8007590:	20c00044 	addi	r3,r4,1
 8007594:	39803fcc 	andi	r6,r7,255
 8007598:	2089883a 	add	r4,r4,r2
 800759c:	00000306 	br	80075ac <memchr+0x74>
 80075a0:	18c00044 	addi	r3,r3,1
 80075a4:	197fffc3 	ldbu	r5,-1(r3)
 80075a8:	31400526 	beq	r6,r5,80075c0 <memchr+0x88>
 80075ac:	1805883a 	mov	r2,r3
 80075b0:	20fffb1e 	bne	r4,r3,80075a0 <memchr+0x68>
 80075b4:	0005883a 	mov	r2,zero
 80075b8:	f800283a 	ret
 80075bc:	2005883a 	mov	r2,r4
 80075c0:	f800283a 	ret
 80075c4:	28c03fcc 	andi	r3,r5,255
 80075c8:	1812923a 	slli	r9,r3,8
 80075cc:	02ffbff4 	movhi	r11,65279
 80075d0:	02a02074 	movhi	r10,32897
 80075d4:	48d2b03a 	or	r9,r9,r3
 80075d8:	4806943a 	slli	r3,r9,16
 80075dc:	5affbfc4 	addi	r11,r11,-257
 80075e0:	52a02004 	addi	r10,r10,-32640
 80075e4:	48d2b03a 	or	r9,r9,r3
 80075e8:	20c00017 	ldw	r3,0(r4)
 80075ec:	48c6f03a 	xor	r3,r9,r3
 80075f0:	1acd883a 	add	r6,r3,r11
 80075f4:	00c6303a 	nor	r3,zero,r3
 80075f8:	30c6703a 	and	r3,r6,r3
 80075fc:	1a86703a 	and	r3,r3,r10
 8007600:	183fe01e 	bne	r3,zero,8007584 <memchr+0x4c>
 8007604:	10bfff04 	addi	r2,r2,-4
 8007608:	21000104 	addi	r4,r4,4
 800760c:	40bff636 	bltu	r8,r2,80075e8 <memchr+0xb0>
 8007610:	003fdb06 	br	8007580 <memchr+0x48>
 8007614:	3005883a 	mov	r2,r6
 8007618:	003fd706 	br	8007578 <memchr+0x40>

0800761c <memcpy>:
 800761c:	defffd04 	addi	sp,sp,-12
 8007620:	dfc00215 	stw	ra,8(sp)
 8007624:	dc400115 	stw	r17,4(sp)
 8007628:	dc000015 	stw	r16,0(sp)
 800762c:	00c003c4 	movi	r3,15
 8007630:	2005883a 	mov	r2,r4
 8007634:	1980452e 	bgeu	r3,r6,800774c <memcpy+0x130>
 8007638:	2906b03a 	or	r3,r5,r4
 800763c:	18c000cc 	andi	r3,r3,3
 8007640:	1800441e 	bne	r3,zero,8007754 <memcpy+0x138>
 8007644:	347ffc04 	addi	r17,r6,-16
 8007648:	8822d13a 	srli	r17,r17,4
 800764c:	28c00104 	addi	r3,r5,4
 8007650:	23400104 	addi	r13,r4,4
 8007654:	8820913a 	slli	r16,r17,4
 8007658:	2b000204 	addi	r12,r5,8
 800765c:	22c00204 	addi	r11,r4,8
 8007660:	84000504 	addi	r16,r16,20
 8007664:	2a800304 	addi	r10,r5,12
 8007668:	22400304 	addi	r9,r4,12
 800766c:	2c21883a 	add	r16,r5,r16
 8007670:	2811883a 	mov	r8,r5
 8007674:	200f883a 	mov	r7,r4
 8007678:	41000017 	ldw	r4,0(r8)
 800767c:	1fc00017 	ldw	ra,0(r3)
 8007680:	63c00017 	ldw	r15,0(r12)
 8007684:	39000015 	stw	r4,0(r7)
 8007688:	53800017 	ldw	r14,0(r10)
 800768c:	6fc00015 	stw	ra,0(r13)
 8007690:	5bc00015 	stw	r15,0(r11)
 8007694:	4b800015 	stw	r14,0(r9)
 8007698:	18c00404 	addi	r3,r3,16
 800769c:	39c00404 	addi	r7,r7,16
 80076a0:	42000404 	addi	r8,r8,16
 80076a4:	6b400404 	addi	r13,r13,16
 80076a8:	63000404 	addi	r12,r12,16
 80076ac:	5ac00404 	addi	r11,r11,16
 80076b0:	52800404 	addi	r10,r10,16
 80076b4:	4a400404 	addi	r9,r9,16
 80076b8:	1c3fef1e 	bne	r3,r16,8007678 <memcpy+0x5c>
 80076bc:	89c00044 	addi	r7,r17,1
 80076c0:	380e913a 	slli	r7,r7,4
 80076c4:	310003cc 	andi	r4,r6,15
 80076c8:	02c000c4 	movi	r11,3
 80076cc:	11c7883a 	add	r3,r2,r7
 80076d0:	29cb883a 	add	r5,r5,r7
 80076d4:	5900212e 	bgeu	r11,r4,800775c <memcpy+0x140>
 80076d8:	1813883a 	mov	r9,r3
 80076dc:	2811883a 	mov	r8,r5
 80076e0:	200f883a 	mov	r7,r4
 80076e4:	42800017 	ldw	r10,0(r8)
 80076e8:	4a400104 	addi	r9,r9,4
 80076ec:	39ffff04 	addi	r7,r7,-4
 80076f0:	4abfff15 	stw	r10,-4(r9)
 80076f4:	42000104 	addi	r8,r8,4
 80076f8:	59fffa36 	bltu	r11,r7,80076e4 <memcpy+0xc8>
 80076fc:	213fff04 	addi	r4,r4,-4
 8007700:	2008d0ba 	srli	r4,r4,2
 8007704:	318000cc 	andi	r6,r6,3
 8007708:	21000044 	addi	r4,r4,1
 800770c:	2109883a 	add	r4,r4,r4
 8007710:	2109883a 	add	r4,r4,r4
 8007714:	1907883a 	add	r3,r3,r4
 8007718:	290b883a 	add	r5,r5,r4
 800771c:	30000626 	beq	r6,zero,8007738 <memcpy+0x11c>
 8007720:	198d883a 	add	r6,r3,r6
 8007724:	29c00003 	ldbu	r7,0(r5)
 8007728:	18c00044 	addi	r3,r3,1
 800772c:	29400044 	addi	r5,r5,1
 8007730:	19ffffc5 	stb	r7,-1(r3)
 8007734:	19bffb1e 	bne	r3,r6,8007724 <memcpy+0x108>
 8007738:	dfc00217 	ldw	ra,8(sp)
 800773c:	dc400117 	ldw	r17,4(sp)
 8007740:	dc000017 	ldw	r16,0(sp)
 8007744:	dec00304 	addi	sp,sp,12
 8007748:	f800283a 	ret
 800774c:	2007883a 	mov	r3,r4
 8007750:	003ff206 	br	800771c <memcpy+0x100>
 8007754:	2007883a 	mov	r3,r4
 8007758:	003ff106 	br	8007720 <memcpy+0x104>
 800775c:	200d883a 	mov	r6,r4
 8007760:	003fee06 	br	800771c <memcpy+0x100>

08007764 <memmove>:
 8007764:	2005883a 	mov	r2,r4
 8007768:	29000b2e 	bgeu	r5,r4,8007798 <memmove+0x34>
 800776c:	298f883a 	add	r7,r5,r6
 8007770:	21c0092e 	bgeu	r4,r7,8007798 <memmove+0x34>
 8007774:	2187883a 	add	r3,r4,r6
 8007778:	198bc83a 	sub	r5,r3,r6
 800777c:	30004826 	beq	r6,zero,80078a0 <memmove+0x13c>
 8007780:	39ffffc4 	addi	r7,r7,-1
 8007784:	39000003 	ldbu	r4,0(r7)
 8007788:	18ffffc4 	addi	r3,r3,-1
 800778c:	19000005 	stb	r4,0(r3)
 8007790:	28fffb1e 	bne	r5,r3,8007780 <memmove+0x1c>
 8007794:	f800283a 	ret
 8007798:	00c003c4 	movi	r3,15
 800779c:	1980412e 	bgeu	r3,r6,80078a4 <memmove+0x140>
 80077a0:	2886b03a 	or	r3,r5,r2
 80077a4:	18c000cc 	andi	r3,r3,3
 80077a8:	1800401e 	bne	r3,zero,80078ac <memmove+0x148>
 80077ac:	33fffc04 	addi	r15,r6,-16
 80077b0:	781ed13a 	srli	r15,r15,4
 80077b4:	28c00104 	addi	r3,r5,4
 80077b8:	13400104 	addi	r13,r2,4
 80077bc:	781c913a 	slli	r14,r15,4
 80077c0:	2b000204 	addi	r12,r5,8
 80077c4:	12c00204 	addi	r11,r2,8
 80077c8:	73800504 	addi	r14,r14,20
 80077cc:	2a800304 	addi	r10,r5,12
 80077d0:	12400304 	addi	r9,r2,12
 80077d4:	2b9d883a 	add	r14,r5,r14
 80077d8:	2811883a 	mov	r8,r5
 80077dc:	100f883a 	mov	r7,r2
 80077e0:	41000017 	ldw	r4,0(r8)
 80077e4:	39c00404 	addi	r7,r7,16
 80077e8:	18c00404 	addi	r3,r3,16
 80077ec:	393ffc15 	stw	r4,-16(r7)
 80077f0:	193ffc17 	ldw	r4,-16(r3)
 80077f4:	6b400404 	addi	r13,r13,16
 80077f8:	5ac00404 	addi	r11,r11,16
 80077fc:	693ffc15 	stw	r4,-16(r13)
 8007800:	61000017 	ldw	r4,0(r12)
 8007804:	4a400404 	addi	r9,r9,16
 8007808:	42000404 	addi	r8,r8,16
 800780c:	593ffc15 	stw	r4,-16(r11)
 8007810:	51000017 	ldw	r4,0(r10)
 8007814:	63000404 	addi	r12,r12,16
 8007818:	52800404 	addi	r10,r10,16
 800781c:	493ffc15 	stw	r4,-16(r9)
 8007820:	1bbfef1e 	bne	r3,r14,80077e0 <memmove+0x7c>
 8007824:	79000044 	addi	r4,r15,1
 8007828:	2008913a 	slli	r4,r4,4
 800782c:	328003cc 	andi	r10,r6,15
 8007830:	02c000c4 	movi	r11,3
 8007834:	1107883a 	add	r3,r2,r4
 8007838:	290b883a 	add	r5,r5,r4
 800783c:	5a801e2e 	bgeu	r11,r10,80078b8 <memmove+0x154>
 8007840:	1813883a 	mov	r9,r3
 8007844:	2811883a 	mov	r8,r5
 8007848:	500f883a 	mov	r7,r10
 800784c:	41000017 	ldw	r4,0(r8)
 8007850:	4a400104 	addi	r9,r9,4
 8007854:	39ffff04 	addi	r7,r7,-4
 8007858:	493fff15 	stw	r4,-4(r9)
 800785c:	42000104 	addi	r8,r8,4
 8007860:	59fffa36 	bltu	r11,r7,800784c <memmove+0xe8>
 8007864:	513fff04 	addi	r4,r10,-4
 8007868:	2008d0ba 	srli	r4,r4,2
 800786c:	318000cc 	andi	r6,r6,3
 8007870:	21000044 	addi	r4,r4,1
 8007874:	2109883a 	add	r4,r4,r4
 8007878:	2109883a 	add	r4,r4,r4
 800787c:	1907883a 	add	r3,r3,r4
 8007880:	290b883a 	add	r5,r5,r4
 8007884:	30000b26 	beq	r6,zero,80078b4 <memmove+0x150>
 8007888:	198d883a 	add	r6,r3,r6
 800788c:	29c00003 	ldbu	r7,0(r5)
 8007890:	18c00044 	addi	r3,r3,1
 8007894:	29400044 	addi	r5,r5,1
 8007898:	19ffffc5 	stb	r7,-1(r3)
 800789c:	19bffb1e 	bne	r3,r6,800788c <memmove+0x128>
 80078a0:	f800283a 	ret
 80078a4:	1007883a 	mov	r3,r2
 80078a8:	003ff606 	br	8007884 <memmove+0x120>
 80078ac:	1007883a 	mov	r3,r2
 80078b0:	003ff506 	br	8007888 <memmove+0x124>
 80078b4:	f800283a 	ret
 80078b8:	500d883a 	mov	r6,r10
 80078bc:	003ff106 	br	8007884 <memmove+0x120>

080078c0 <memset>:
 80078c0:	20c000cc 	andi	r3,r4,3
 80078c4:	2005883a 	mov	r2,r4
 80078c8:	18004426 	beq	r3,zero,80079dc <memset+0x11c>
 80078cc:	31ffffc4 	addi	r7,r6,-1
 80078d0:	30004026 	beq	r6,zero,80079d4 <memset+0x114>
 80078d4:	2813883a 	mov	r9,r5
 80078d8:	200d883a 	mov	r6,r4
 80078dc:	2007883a 	mov	r3,r4
 80078e0:	00000406 	br	80078f4 <memset+0x34>
 80078e4:	3a3fffc4 	addi	r8,r7,-1
 80078e8:	31800044 	addi	r6,r6,1
 80078ec:	38003926 	beq	r7,zero,80079d4 <memset+0x114>
 80078f0:	400f883a 	mov	r7,r8
 80078f4:	18c00044 	addi	r3,r3,1
 80078f8:	32400005 	stb	r9,0(r6)
 80078fc:	1a0000cc 	andi	r8,r3,3
 8007900:	403ff81e 	bne	r8,zero,80078e4 <memset+0x24>
 8007904:	010000c4 	movi	r4,3
 8007908:	21c02d2e 	bgeu	r4,r7,80079c0 <memset+0x100>
 800790c:	29003fcc 	andi	r4,r5,255
 8007910:	200c923a 	slli	r6,r4,8
 8007914:	3108b03a 	or	r4,r6,r4
 8007918:	200c943a 	slli	r6,r4,16
 800791c:	218cb03a 	or	r6,r4,r6
 8007920:	010003c4 	movi	r4,15
 8007924:	21c0182e 	bgeu	r4,r7,8007988 <memset+0xc8>
 8007928:	3b3ffc04 	addi	r12,r7,-16
 800792c:	6018d13a 	srli	r12,r12,4
 8007930:	1a000104 	addi	r8,r3,4
 8007934:	1ac00204 	addi	r11,r3,8
 8007938:	6008913a 	slli	r4,r12,4
 800793c:	1a800304 	addi	r10,r3,12
 8007940:	1813883a 	mov	r9,r3
 8007944:	21000504 	addi	r4,r4,20
 8007948:	1909883a 	add	r4,r3,r4
 800794c:	49800015 	stw	r6,0(r9)
 8007950:	41800015 	stw	r6,0(r8)
 8007954:	59800015 	stw	r6,0(r11)
 8007958:	51800015 	stw	r6,0(r10)
 800795c:	42000404 	addi	r8,r8,16
 8007960:	4a400404 	addi	r9,r9,16
 8007964:	5ac00404 	addi	r11,r11,16
 8007968:	52800404 	addi	r10,r10,16
 800796c:	413ff71e 	bne	r8,r4,800794c <memset+0x8c>
 8007970:	63000044 	addi	r12,r12,1
 8007974:	6018913a 	slli	r12,r12,4
 8007978:	39c003cc 	andi	r7,r7,15
 800797c:	010000c4 	movi	r4,3
 8007980:	1b07883a 	add	r3,r3,r12
 8007984:	21c00e2e 	bgeu	r4,r7,80079c0 <memset+0x100>
 8007988:	1813883a 	mov	r9,r3
 800798c:	3811883a 	mov	r8,r7
 8007990:	010000c4 	movi	r4,3
 8007994:	49800015 	stw	r6,0(r9)
 8007998:	423fff04 	addi	r8,r8,-4
 800799c:	4a400104 	addi	r9,r9,4
 80079a0:	223ffc36 	bltu	r4,r8,8007994 <memset+0xd4>
 80079a4:	393fff04 	addi	r4,r7,-4
 80079a8:	2008d0ba 	srli	r4,r4,2
 80079ac:	39c000cc 	andi	r7,r7,3
 80079b0:	21000044 	addi	r4,r4,1
 80079b4:	2109883a 	add	r4,r4,r4
 80079b8:	2109883a 	add	r4,r4,r4
 80079bc:	1907883a 	add	r3,r3,r4
 80079c0:	38000526 	beq	r7,zero,80079d8 <memset+0x118>
 80079c4:	19cf883a 	add	r7,r3,r7
 80079c8:	19400005 	stb	r5,0(r3)
 80079cc:	18c00044 	addi	r3,r3,1
 80079d0:	38fffd1e 	bne	r7,r3,80079c8 <memset+0x108>
 80079d4:	f800283a 	ret
 80079d8:	f800283a 	ret
 80079dc:	2007883a 	mov	r3,r4
 80079e0:	300f883a 	mov	r7,r6
 80079e4:	003fc706 	br	8007904 <memset+0x44>

080079e8 <_Balloc>:
 80079e8:	20801317 	ldw	r2,76(r4)
 80079ec:	defffc04 	addi	sp,sp,-16
 80079f0:	dc400115 	stw	r17,4(sp)
 80079f4:	dc000015 	stw	r16,0(sp)
 80079f8:	dfc00315 	stw	ra,12(sp)
 80079fc:	dc800215 	stw	r18,8(sp)
 8007a00:	2023883a 	mov	r17,r4
 8007a04:	2821883a 	mov	r16,r5
 8007a08:	10000f26 	beq	r2,zero,8007a48 <_Balloc+0x60>
 8007a0c:	8407883a 	add	r3,r16,r16
 8007a10:	18c7883a 	add	r3,r3,r3
 8007a14:	10c7883a 	add	r3,r2,r3
 8007a18:	18800017 	ldw	r2,0(r3)
 8007a1c:	10001126 	beq	r2,zero,8007a64 <_Balloc+0x7c>
 8007a20:	11000017 	ldw	r4,0(r2)
 8007a24:	19000015 	stw	r4,0(r3)
 8007a28:	10000415 	stw	zero,16(r2)
 8007a2c:	10000315 	stw	zero,12(r2)
 8007a30:	dfc00317 	ldw	ra,12(sp)
 8007a34:	dc800217 	ldw	r18,8(sp)
 8007a38:	dc400117 	ldw	r17,4(sp)
 8007a3c:	dc000017 	ldw	r16,0(sp)
 8007a40:	dec00404 	addi	sp,sp,16
 8007a44:	f800283a 	ret
 8007a48:	01800844 	movi	r6,33
 8007a4c:	01400104 	movi	r5,4
 8007a50:	800a9240 	call	800a924 <_calloc_r>
 8007a54:	88801315 	stw	r2,76(r17)
 8007a58:	103fec1e 	bne	r2,zero,8007a0c <_Balloc+0x24>
 8007a5c:	0005883a 	mov	r2,zero
 8007a60:	003ff306 	br	8007a30 <_Balloc+0x48>
 8007a64:	01400044 	movi	r5,1
 8007a68:	2c24983a 	sll	r18,r5,r16
 8007a6c:	8809883a 	mov	r4,r17
 8007a70:	91800144 	addi	r6,r18,5
 8007a74:	318d883a 	add	r6,r6,r6
 8007a78:	318d883a 	add	r6,r6,r6
 8007a7c:	800a9240 	call	800a924 <_calloc_r>
 8007a80:	103ff626 	beq	r2,zero,8007a5c <_Balloc+0x74>
 8007a84:	14000115 	stw	r16,4(r2)
 8007a88:	14800215 	stw	r18,8(r2)
 8007a8c:	003fe606 	br	8007a28 <_Balloc+0x40>

08007a90 <_Bfree>:
 8007a90:	28000826 	beq	r5,zero,8007ab4 <_Bfree+0x24>
 8007a94:	28c00117 	ldw	r3,4(r5)
 8007a98:	20801317 	ldw	r2,76(r4)
 8007a9c:	18c7883a 	add	r3,r3,r3
 8007aa0:	18c7883a 	add	r3,r3,r3
 8007aa4:	10c5883a 	add	r2,r2,r3
 8007aa8:	10c00017 	ldw	r3,0(r2)
 8007aac:	28c00015 	stw	r3,0(r5)
 8007ab0:	11400015 	stw	r5,0(r2)
 8007ab4:	f800283a 	ret

08007ab8 <__multadd>:
 8007ab8:	defffa04 	addi	sp,sp,-24
 8007abc:	dc800315 	stw	r18,12(sp)
 8007ac0:	dc400215 	stw	r17,8(sp)
 8007ac4:	dc000115 	stw	r16,4(sp)
 8007ac8:	2823883a 	mov	r17,r5
 8007acc:	2c000417 	ldw	r16,16(r5)
 8007ad0:	dfc00515 	stw	ra,20(sp)
 8007ad4:	dcc00415 	stw	r19,16(sp)
 8007ad8:	2025883a 	mov	r18,r4
 8007adc:	29400504 	addi	r5,r5,20
 8007ae0:	0011883a 	mov	r8,zero
 8007ae4:	28c00017 	ldw	r3,0(r5)
 8007ae8:	29400104 	addi	r5,r5,4
 8007aec:	42000044 	addi	r8,r8,1
 8007af0:	18bfffcc 	andi	r2,r3,65535
 8007af4:	1185383a 	mul	r2,r2,r6
 8007af8:	1806d43a 	srli	r3,r3,16
 8007afc:	11cf883a 	add	r7,r2,r7
 8007b00:	3808d43a 	srli	r4,r7,16
 8007b04:	1987383a 	mul	r3,r3,r6
 8007b08:	38bfffcc 	andi	r2,r7,65535
 8007b0c:	1907883a 	add	r3,r3,r4
 8007b10:	1808943a 	slli	r4,r3,16
 8007b14:	180ed43a 	srli	r7,r3,16
 8007b18:	2085883a 	add	r2,r4,r2
 8007b1c:	28bfff15 	stw	r2,-4(r5)
 8007b20:	443ff016 	blt	r8,r16,8007ae4 <__multadd+0x2c>
 8007b24:	38000926 	beq	r7,zero,8007b4c <__multadd+0x94>
 8007b28:	88800217 	ldw	r2,8(r17)
 8007b2c:	80800f0e 	bge	r16,r2,8007b6c <__multadd+0xb4>
 8007b30:	80800144 	addi	r2,r16,5
 8007b34:	1085883a 	add	r2,r2,r2
 8007b38:	1085883a 	add	r2,r2,r2
 8007b3c:	8885883a 	add	r2,r17,r2
 8007b40:	11c00015 	stw	r7,0(r2)
 8007b44:	84000044 	addi	r16,r16,1
 8007b48:	8c000415 	stw	r16,16(r17)
 8007b4c:	8805883a 	mov	r2,r17
 8007b50:	dfc00517 	ldw	ra,20(sp)
 8007b54:	dcc00417 	ldw	r19,16(sp)
 8007b58:	dc800317 	ldw	r18,12(sp)
 8007b5c:	dc400217 	ldw	r17,8(sp)
 8007b60:	dc000117 	ldw	r16,4(sp)
 8007b64:	dec00604 	addi	sp,sp,24
 8007b68:	f800283a 	ret
 8007b6c:	89400117 	ldw	r5,4(r17)
 8007b70:	9009883a 	mov	r4,r18
 8007b74:	d9c00015 	stw	r7,0(sp)
 8007b78:	29400044 	addi	r5,r5,1
 8007b7c:	80079e80 	call	80079e8 <_Balloc>
 8007b80:	89800417 	ldw	r6,16(r17)
 8007b84:	89400304 	addi	r5,r17,12
 8007b88:	11000304 	addi	r4,r2,12
 8007b8c:	31800084 	addi	r6,r6,2
 8007b90:	318d883a 	add	r6,r6,r6
 8007b94:	318d883a 	add	r6,r6,r6
 8007b98:	1027883a 	mov	r19,r2
 8007b9c:	800761c0 	call	800761c <memcpy>
 8007ba0:	d9c00017 	ldw	r7,0(sp)
 8007ba4:	88000a26 	beq	r17,zero,8007bd0 <__multadd+0x118>
 8007ba8:	88c00117 	ldw	r3,4(r17)
 8007bac:	90801317 	ldw	r2,76(r18)
 8007bb0:	18c7883a 	add	r3,r3,r3
 8007bb4:	18c7883a 	add	r3,r3,r3
 8007bb8:	10c5883a 	add	r2,r2,r3
 8007bbc:	10c00017 	ldw	r3,0(r2)
 8007bc0:	88c00015 	stw	r3,0(r17)
 8007bc4:	14400015 	stw	r17,0(r2)
 8007bc8:	9823883a 	mov	r17,r19
 8007bcc:	003fd806 	br	8007b30 <__multadd+0x78>
 8007bd0:	9823883a 	mov	r17,r19
 8007bd4:	003fd606 	br	8007b30 <__multadd+0x78>

08007bd8 <__s2b>:
 8007bd8:	defff904 	addi	sp,sp,-28
 8007bdc:	dc400115 	stw	r17,4(sp)
 8007be0:	dc000015 	stw	r16,0(sp)
 8007be4:	2023883a 	mov	r17,r4
 8007be8:	2821883a 	mov	r16,r5
 8007bec:	39000204 	addi	r4,r7,8
 8007bf0:	01400244 	movi	r5,9
 8007bf4:	dcc00315 	stw	r19,12(sp)
 8007bf8:	dc800215 	stw	r18,8(sp)
 8007bfc:	dfc00615 	stw	ra,24(sp)
 8007c00:	dd400515 	stw	r21,20(sp)
 8007c04:	dd000415 	stw	r20,16(sp)
 8007c08:	3825883a 	mov	r18,r7
 8007c0c:	3027883a 	mov	r19,r6
 8007c10:	800bc540 	call	800bc54 <__divsi3>
 8007c14:	00c00044 	movi	r3,1
 8007c18:	000b883a 	mov	r5,zero
 8007c1c:	1880030e 	bge	r3,r2,8007c2c <__s2b+0x54>
 8007c20:	18c7883a 	add	r3,r3,r3
 8007c24:	29400044 	addi	r5,r5,1
 8007c28:	18bffd16 	blt	r3,r2,8007c20 <__s2b+0x48>
 8007c2c:	8809883a 	mov	r4,r17
 8007c30:	80079e80 	call	80079e8 <_Balloc>
 8007c34:	d8c00717 	ldw	r3,28(sp)
 8007c38:	10c00515 	stw	r3,20(r2)
 8007c3c:	00c00044 	movi	r3,1
 8007c40:	10c00415 	stw	r3,16(r2)
 8007c44:	00c00244 	movi	r3,9
 8007c48:	1cc0210e 	bge	r3,r19,8007cd0 <__s2b+0xf8>
 8007c4c:	80eb883a 	add	r21,r16,r3
 8007c50:	a829883a 	mov	r20,r21
 8007c54:	84e1883a 	add	r16,r16,r19
 8007c58:	a1c00007 	ldb	r7,0(r20)
 8007c5c:	01800284 	movi	r6,10
 8007c60:	a5000044 	addi	r20,r20,1
 8007c64:	100b883a 	mov	r5,r2
 8007c68:	39fff404 	addi	r7,r7,-48
 8007c6c:	8809883a 	mov	r4,r17
 8007c70:	8007ab80 	call	8007ab8 <__multadd>
 8007c74:	a43ff81e 	bne	r20,r16,8007c58 <__s2b+0x80>
 8007c78:	ace1883a 	add	r16,r21,r19
 8007c7c:	843ffe04 	addi	r16,r16,-8
 8007c80:	9c800a0e 	bge	r19,r18,8007cac <__s2b+0xd4>
 8007c84:	94e5c83a 	sub	r18,r18,r19
 8007c88:	84a5883a 	add	r18,r16,r18
 8007c8c:	81c00007 	ldb	r7,0(r16)
 8007c90:	01800284 	movi	r6,10
 8007c94:	84000044 	addi	r16,r16,1
 8007c98:	100b883a 	mov	r5,r2
 8007c9c:	39fff404 	addi	r7,r7,-48
 8007ca0:	8809883a 	mov	r4,r17
 8007ca4:	8007ab80 	call	8007ab8 <__multadd>
 8007ca8:	84bff81e 	bne	r16,r18,8007c8c <__s2b+0xb4>
 8007cac:	dfc00617 	ldw	ra,24(sp)
 8007cb0:	dd400517 	ldw	r21,20(sp)
 8007cb4:	dd000417 	ldw	r20,16(sp)
 8007cb8:	dcc00317 	ldw	r19,12(sp)
 8007cbc:	dc800217 	ldw	r18,8(sp)
 8007cc0:	dc400117 	ldw	r17,4(sp)
 8007cc4:	dc000017 	ldw	r16,0(sp)
 8007cc8:	dec00704 	addi	sp,sp,28
 8007ccc:	f800283a 	ret
 8007cd0:	84000284 	addi	r16,r16,10
 8007cd4:	1827883a 	mov	r19,r3
 8007cd8:	003fe906 	br	8007c80 <__s2b+0xa8>

08007cdc <__hi0bits>:
 8007cdc:	20bfffec 	andhi	r2,r4,65535
 8007ce0:	1000141e 	bne	r2,zero,8007d34 <__hi0bits+0x58>
 8007ce4:	2008943a 	slli	r4,r4,16
 8007ce8:	00800404 	movi	r2,16
 8007cec:	20ffc02c 	andhi	r3,r4,65280
 8007cf0:	1800021e 	bne	r3,zero,8007cfc <__hi0bits+0x20>
 8007cf4:	2008923a 	slli	r4,r4,8
 8007cf8:	10800204 	addi	r2,r2,8
 8007cfc:	20fc002c 	andhi	r3,r4,61440
 8007d00:	1800021e 	bne	r3,zero,8007d0c <__hi0bits+0x30>
 8007d04:	2008913a 	slli	r4,r4,4
 8007d08:	10800104 	addi	r2,r2,4
 8007d0c:	20f0002c 	andhi	r3,r4,49152
 8007d10:	1800031e 	bne	r3,zero,8007d20 <__hi0bits+0x44>
 8007d14:	2109883a 	add	r4,r4,r4
 8007d18:	10800084 	addi	r2,r2,2
 8007d1c:	2109883a 	add	r4,r4,r4
 8007d20:	20000316 	blt	r4,zero,8007d30 <__hi0bits+0x54>
 8007d24:	2110002c 	andhi	r4,r4,16384
 8007d28:	2000041e 	bne	r4,zero,8007d3c <__hi0bits+0x60>
 8007d2c:	00800804 	movi	r2,32
 8007d30:	f800283a 	ret
 8007d34:	0005883a 	mov	r2,zero
 8007d38:	003fec06 	br	8007cec <__hi0bits+0x10>
 8007d3c:	10800044 	addi	r2,r2,1
 8007d40:	f800283a 	ret

08007d44 <__lo0bits>:
 8007d44:	20c00017 	ldw	r3,0(r4)
 8007d48:	188001cc 	andi	r2,r3,7
 8007d4c:	10000826 	beq	r2,zero,8007d70 <__lo0bits+0x2c>
 8007d50:	1880004c 	andi	r2,r3,1
 8007d54:	1000211e 	bne	r2,zero,8007ddc <__lo0bits+0x98>
 8007d58:	1880008c 	andi	r2,r3,2
 8007d5c:	1000211e 	bne	r2,zero,8007de4 <__lo0bits+0xa0>
 8007d60:	1806d0ba 	srli	r3,r3,2
 8007d64:	00800084 	movi	r2,2
 8007d68:	20c00015 	stw	r3,0(r4)
 8007d6c:	f800283a 	ret
 8007d70:	18bfffcc 	andi	r2,r3,65535
 8007d74:	10001326 	beq	r2,zero,8007dc4 <__lo0bits+0x80>
 8007d78:	0005883a 	mov	r2,zero
 8007d7c:	19403fcc 	andi	r5,r3,255
 8007d80:	2800021e 	bne	r5,zero,8007d8c <__lo0bits+0x48>
 8007d84:	1806d23a 	srli	r3,r3,8
 8007d88:	10800204 	addi	r2,r2,8
 8007d8c:	194003cc 	andi	r5,r3,15
 8007d90:	2800021e 	bne	r5,zero,8007d9c <__lo0bits+0x58>
 8007d94:	1806d13a 	srli	r3,r3,4
 8007d98:	10800104 	addi	r2,r2,4
 8007d9c:	194000cc 	andi	r5,r3,3
 8007da0:	2800021e 	bne	r5,zero,8007dac <__lo0bits+0x68>
 8007da4:	1806d0ba 	srli	r3,r3,2
 8007da8:	10800084 	addi	r2,r2,2
 8007dac:	1940004c 	andi	r5,r3,1
 8007db0:	2800081e 	bne	r5,zero,8007dd4 <__lo0bits+0x90>
 8007db4:	1806d07a 	srli	r3,r3,1
 8007db8:	1800051e 	bne	r3,zero,8007dd0 <__lo0bits+0x8c>
 8007dbc:	00800804 	movi	r2,32
 8007dc0:	f800283a 	ret
 8007dc4:	1806d43a 	srli	r3,r3,16
 8007dc8:	00800404 	movi	r2,16
 8007dcc:	003feb06 	br	8007d7c <__lo0bits+0x38>
 8007dd0:	10800044 	addi	r2,r2,1
 8007dd4:	20c00015 	stw	r3,0(r4)
 8007dd8:	f800283a 	ret
 8007ddc:	0005883a 	mov	r2,zero
 8007de0:	f800283a 	ret
 8007de4:	1806d07a 	srli	r3,r3,1
 8007de8:	00800044 	movi	r2,1
 8007dec:	20c00015 	stw	r3,0(r4)
 8007df0:	f800283a 	ret

08007df4 <__i2b>:
 8007df4:	defffd04 	addi	sp,sp,-12
 8007df8:	dc000015 	stw	r16,0(sp)
 8007dfc:	04000044 	movi	r16,1
 8007e00:	dc400115 	stw	r17,4(sp)
 8007e04:	2823883a 	mov	r17,r5
 8007e08:	800b883a 	mov	r5,r16
 8007e0c:	dfc00215 	stw	ra,8(sp)
 8007e10:	80079e80 	call	80079e8 <_Balloc>
 8007e14:	14400515 	stw	r17,20(r2)
 8007e18:	14000415 	stw	r16,16(r2)
 8007e1c:	dfc00217 	ldw	ra,8(sp)
 8007e20:	dc400117 	ldw	r17,4(sp)
 8007e24:	dc000017 	ldw	r16,0(sp)
 8007e28:	dec00304 	addi	sp,sp,12
 8007e2c:	f800283a 	ret

08007e30 <__multiply>:
 8007e30:	defffa04 	addi	sp,sp,-24
 8007e34:	dcc00315 	stw	r19,12(sp)
 8007e38:	dc800215 	stw	r18,8(sp)
 8007e3c:	34c00417 	ldw	r19,16(r6)
 8007e40:	2c800417 	ldw	r18,16(r5)
 8007e44:	dd000415 	stw	r20,16(sp)
 8007e48:	dc400115 	stw	r17,4(sp)
 8007e4c:	dfc00515 	stw	ra,20(sp)
 8007e50:	dc000015 	stw	r16,0(sp)
 8007e54:	2829883a 	mov	r20,r5
 8007e58:	3023883a 	mov	r17,r6
 8007e5c:	94c0050e 	bge	r18,r19,8007e74 <__multiply+0x44>
 8007e60:	9007883a 	mov	r3,r18
 8007e64:	3029883a 	mov	r20,r6
 8007e68:	9825883a 	mov	r18,r19
 8007e6c:	2823883a 	mov	r17,r5
 8007e70:	1827883a 	mov	r19,r3
 8007e74:	a0800217 	ldw	r2,8(r20)
 8007e78:	94e1883a 	add	r16,r18,r19
 8007e7c:	a1400117 	ldw	r5,4(r20)
 8007e80:	1400010e 	bge	r2,r16,8007e88 <__multiply+0x58>
 8007e84:	29400044 	addi	r5,r5,1
 8007e88:	80079e80 	call	80079e8 <_Balloc>
 8007e8c:	8415883a 	add	r10,r16,r16
 8007e90:	12c00504 	addi	r11,r2,20
 8007e94:	5295883a 	add	r10,r10,r10
 8007e98:	5a95883a 	add	r10,r11,r10
 8007e9c:	5807883a 	mov	r3,r11
 8007ea0:	5a80032e 	bgeu	r11,r10,8007eb0 <__multiply+0x80>
 8007ea4:	18000015 	stw	zero,0(r3)
 8007ea8:	18c00104 	addi	r3,r3,4
 8007eac:	1abffd36 	bltu	r3,r10,8007ea4 <__multiply+0x74>
 8007eb0:	9ce7883a 	add	r19,r19,r19
 8007eb4:	94a5883a 	add	r18,r18,r18
 8007eb8:	89800504 	addi	r6,r17,20
 8007ebc:	9ce7883a 	add	r19,r19,r19
 8007ec0:	a3400504 	addi	r13,r20,20
 8007ec4:	94a5883a 	add	r18,r18,r18
 8007ec8:	34d9883a 	add	r12,r6,r19
 8007ecc:	6c93883a 	add	r9,r13,r18
 8007ed0:	3300422e 	bgeu	r6,r12,8007fdc <__multiply+0x1ac>
 8007ed4:	37c00017 	ldw	ra,0(r6)
 8007ed8:	fbffffcc 	andi	r15,ra,65535
 8007edc:	78001b26 	beq	r15,zero,8007f4c <__multiply+0x11c>
 8007ee0:	5811883a 	mov	r8,r11
 8007ee4:	681d883a 	mov	r14,r13
 8007ee8:	000f883a 	mov	r7,zero
 8007eec:	71000017 	ldw	r4,0(r14)
 8007ef0:	40c00017 	ldw	r3,0(r8)
 8007ef4:	73800104 	addi	r14,r14,4
 8007ef8:	217fffcc 	andi	r5,r4,65535
 8007efc:	2bcb383a 	mul	r5,r5,r15
 8007f00:	2008d43a 	srli	r4,r4,16
 8007f04:	1c7fffcc 	andi	r17,r3,65535
 8007f08:	2c4b883a 	add	r5,r5,r17
 8007f0c:	29cb883a 	add	r5,r5,r7
 8007f10:	23c9383a 	mul	r4,r4,r15
 8007f14:	1806d43a 	srli	r3,r3,16
 8007f18:	280ed43a 	srli	r7,r5,16
 8007f1c:	297fffcc 	andi	r5,r5,65535
 8007f20:	20c7883a 	add	r3,r4,r3
 8007f24:	19c7883a 	add	r3,r3,r7
 8007f28:	1808943a 	slli	r4,r3,16
 8007f2c:	4023883a 	mov	r17,r8
 8007f30:	180ed43a 	srli	r7,r3,16
 8007f34:	214ab03a 	or	r5,r4,r5
 8007f38:	41400015 	stw	r5,0(r8)
 8007f3c:	42000104 	addi	r8,r8,4
 8007f40:	727fea36 	bltu	r14,r9,8007eec <__multiply+0xbc>
 8007f44:	89c00115 	stw	r7,4(r17)
 8007f48:	37c00017 	ldw	ra,0(r6)
 8007f4c:	f83ed43a 	srli	ra,ra,16
 8007f50:	f8001f26 	beq	ra,zero,8007fd0 <__multiply+0x1a0>
 8007f54:	58c00017 	ldw	r3,0(r11)
 8007f58:	681d883a 	mov	r14,r13
 8007f5c:	581f883a 	mov	r15,r11
 8007f60:	1811883a 	mov	r8,r3
 8007f64:	5825883a 	mov	r18,r11
 8007f68:	000f883a 	mov	r7,zero
 8007f6c:	00000106 	br	8007f74 <__multiply+0x144>
 8007f70:	8825883a 	mov	r18,r17
 8007f74:	7140000b 	ldhu	r5,0(r14)
 8007f78:	4010d43a 	srli	r8,r8,16
 8007f7c:	193fffcc 	andi	r4,r3,65535
 8007f80:	2fcb383a 	mul	r5,r5,ra
 8007f84:	7bc00104 	addi	r15,r15,4
 8007f88:	73800104 	addi	r14,r14,4
 8007f8c:	2a0b883a 	add	r5,r5,r8
 8007f90:	29cb883a 	add	r5,r5,r7
 8007f94:	2806943a 	slli	r3,r5,16
 8007f98:	94400104 	addi	r17,r18,4
 8007f9c:	280ad43a 	srli	r5,r5,16
 8007fa0:	1908b03a 	or	r4,r3,r4
 8007fa4:	793fff15 	stw	r4,-4(r15)
 8007fa8:	70ffff17 	ldw	r3,-4(r14)
 8007fac:	8a000017 	ldw	r8,0(r17)
 8007fb0:	1806d43a 	srli	r3,r3,16
 8007fb4:	413fffcc 	andi	r4,r8,65535
 8007fb8:	1fc7383a 	mul	r3,r3,ra
 8007fbc:	1907883a 	add	r3,r3,r4
 8007fc0:	1947883a 	add	r3,r3,r5
 8007fc4:	180ed43a 	srli	r7,r3,16
 8007fc8:	727fe936 	bltu	r14,r9,8007f70 <__multiply+0x140>
 8007fcc:	90c00115 	stw	r3,4(r18)
 8007fd0:	31800104 	addi	r6,r6,4
 8007fd4:	5ac00104 	addi	r11,r11,4
 8007fd8:	333fbe36 	bltu	r6,r12,8007ed4 <__multiply+0xa4>
 8007fdc:	0400090e 	bge	zero,r16,8008004 <__multiply+0x1d4>
 8007fe0:	50ffff17 	ldw	r3,-4(r10)
 8007fe4:	52bfff04 	addi	r10,r10,-4
 8007fe8:	18000326 	beq	r3,zero,8007ff8 <__multiply+0x1c8>
 8007fec:	00000506 	br	8008004 <__multiply+0x1d4>
 8007ff0:	50c00017 	ldw	r3,0(r10)
 8007ff4:	1800031e 	bne	r3,zero,8008004 <__multiply+0x1d4>
 8007ff8:	843fffc4 	addi	r16,r16,-1
 8007ffc:	52bfff04 	addi	r10,r10,-4
 8008000:	803ffb1e 	bne	r16,zero,8007ff0 <__multiply+0x1c0>
 8008004:	14000415 	stw	r16,16(r2)
 8008008:	dfc00517 	ldw	ra,20(sp)
 800800c:	dd000417 	ldw	r20,16(sp)
 8008010:	dcc00317 	ldw	r19,12(sp)
 8008014:	dc800217 	ldw	r18,8(sp)
 8008018:	dc400117 	ldw	r17,4(sp)
 800801c:	dc000017 	ldw	r16,0(sp)
 8008020:	dec00604 	addi	sp,sp,24
 8008024:	f800283a 	ret

08008028 <__pow5mult>:
 8008028:	defffa04 	addi	sp,sp,-24
 800802c:	dcc00315 	stw	r19,12(sp)
 8008030:	dc000015 	stw	r16,0(sp)
 8008034:	dfc00515 	stw	ra,20(sp)
 8008038:	dd000415 	stw	r20,16(sp)
 800803c:	dc800215 	stw	r18,8(sp)
 8008040:	dc400115 	stw	r17,4(sp)
 8008044:	308000cc 	andi	r2,r6,3
 8008048:	3021883a 	mov	r16,r6
 800804c:	2027883a 	mov	r19,r4
 8008050:	10002f1e 	bne	r2,zero,8008110 <__pow5mult+0xe8>
 8008054:	2825883a 	mov	r18,r5
 8008058:	8021d0ba 	srai	r16,r16,2
 800805c:	80001a26 	beq	r16,zero,80080c8 <__pow5mult+0xa0>
 8008060:	9c401217 	ldw	r17,72(r19)
 8008064:	8800061e 	bne	r17,zero,8008080 <__pow5mult+0x58>
 8008068:	00003406 	br	800813c <__pow5mult+0x114>
 800806c:	8021d07a 	srai	r16,r16,1
 8008070:	80001526 	beq	r16,zero,80080c8 <__pow5mult+0xa0>
 8008074:	88800017 	ldw	r2,0(r17)
 8008078:	10001c26 	beq	r2,zero,80080ec <__pow5mult+0xc4>
 800807c:	1023883a 	mov	r17,r2
 8008080:	8080004c 	andi	r2,r16,1
 8008084:	103ff926 	beq	r2,zero,800806c <__pow5mult+0x44>
 8008088:	880d883a 	mov	r6,r17
 800808c:	900b883a 	mov	r5,r18
 8008090:	9809883a 	mov	r4,r19
 8008094:	8007e300 	call	8007e30 <__multiply>
 8008098:	90001b26 	beq	r18,zero,8008108 <__pow5mult+0xe0>
 800809c:	91000117 	ldw	r4,4(r18)
 80080a0:	98c01317 	ldw	r3,76(r19)
 80080a4:	8021d07a 	srai	r16,r16,1
 80080a8:	2109883a 	add	r4,r4,r4
 80080ac:	2109883a 	add	r4,r4,r4
 80080b0:	1907883a 	add	r3,r3,r4
 80080b4:	19000017 	ldw	r4,0(r3)
 80080b8:	91000015 	stw	r4,0(r18)
 80080bc:	1c800015 	stw	r18,0(r3)
 80080c0:	1025883a 	mov	r18,r2
 80080c4:	803feb1e 	bne	r16,zero,8008074 <__pow5mult+0x4c>
 80080c8:	9005883a 	mov	r2,r18
 80080cc:	dfc00517 	ldw	ra,20(sp)
 80080d0:	dd000417 	ldw	r20,16(sp)
 80080d4:	dcc00317 	ldw	r19,12(sp)
 80080d8:	dc800217 	ldw	r18,8(sp)
 80080dc:	dc400117 	ldw	r17,4(sp)
 80080e0:	dc000017 	ldw	r16,0(sp)
 80080e4:	dec00604 	addi	sp,sp,24
 80080e8:	f800283a 	ret
 80080ec:	880d883a 	mov	r6,r17
 80080f0:	880b883a 	mov	r5,r17
 80080f4:	9809883a 	mov	r4,r19
 80080f8:	8007e300 	call	8007e30 <__multiply>
 80080fc:	88800015 	stw	r2,0(r17)
 8008100:	10000015 	stw	zero,0(r2)
 8008104:	003fdd06 	br	800807c <__pow5mult+0x54>
 8008108:	1025883a 	mov	r18,r2
 800810c:	003fd706 	br	800806c <__pow5mult+0x44>
 8008110:	10bfffc4 	addi	r2,r2,-1
 8008114:	1085883a 	add	r2,r2,r2
 8008118:	00c20074 	movhi	r3,2049
 800811c:	18c38404 	addi	r3,r3,3600
 8008120:	1085883a 	add	r2,r2,r2
 8008124:	1885883a 	add	r2,r3,r2
 8008128:	11800017 	ldw	r6,0(r2)
 800812c:	000f883a 	mov	r7,zero
 8008130:	8007ab80 	call	8007ab8 <__multadd>
 8008134:	1025883a 	mov	r18,r2
 8008138:	003fc706 	br	8008058 <__pow5mult+0x30>
 800813c:	05000044 	movi	r20,1
 8008140:	a00b883a 	mov	r5,r20
 8008144:	9809883a 	mov	r4,r19
 8008148:	80079e80 	call	80079e8 <_Balloc>
 800814c:	1023883a 	mov	r17,r2
 8008150:	00809c44 	movi	r2,625
 8008154:	88800515 	stw	r2,20(r17)
 8008158:	8d000415 	stw	r20,16(r17)
 800815c:	9c401215 	stw	r17,72(r19)
 8008160:	88000015 	stw	zero,0(r17)
 8008164:	003fc606 	br	8008080 <__pow5mult+0x58>

08008168 <__lshift>:
 8008168:	defff904 	addi	sp,sp,-28
 800816c:	dd400515 	stw	r21,20(sp)
 8008170:	dcc00315 	stw	r19,12(sp)
 8008174:	302bd17a 	srai	r21,r6,5
 8008178:	2cc00417 	ldw	r19,16(r5)
 800817c:	28800217 	ldw	r2,8(r5)
 8008180:	dd000415 	stw	r20,16(sp)
 8008184:	ace7883a 	add	r19,r21,r19
 8008188:	dc800215 	stw	r18,8(sp)
 800818c:	dc400115 	stw	r17,4(sp)
 8008190:	dc000015 	stw	r16,0(sp)
 8008194:	dfc00615 	stw	ra,24(sp)
 8008198:	9c000044 	addi	r16,r19,1
 800819c:	2823883a 	mov	r17,r5
 80081a0:	3029883a 	mov	r20,r6
 80081a4:	2025883a 	mov	r18,r4
 80081a8:	29400117 	ldw	r5,4(r5)
 80081ac:	1400030e 	bge	r2,r16,80081bc <__lshift+0x54>
 80081b0:	1085883a 	add	r2,r2,r2
 80081b4:	29400044 	addi	r5,r5,1
 80081b8:	143ffd16 	blt	r2,r16,80081b0 <__lshift+0x48>
 80081bc:	9009883a 	mov	r4,r18
 80081c0:	80079e80 	call	80079e8 <_Balloc>
 80081c4:	10c00504 	addi	r3,r2,20
 80081c8:	0540070e 	bge	zero,r21,80081e8 <__lshift+0x80>
 80081cc:	ad6b883a 	add	r21,r21,r21
 80081d0:	ad6b883a 	add	r21,r21,r21
 80081d4:	1809883a 	mov	r4,r3
 80081d8:	1d47883a 	add	r3,r3,r21
 80081dc:	20000015 	stw	zero,0(r4)
 80081e0:	21000104 	addi	r4,r4,4
 80081e4:	193ffd1e 	bne	r3,r4,80081dc <__lshift+0x74>
 80081e8:	8a000417 	ldw	r8,16(r17)
 80081ec:	89000504 	addi	r4,r17,20
 80081f0:	a18007cc 	andi	r6,r20,31
 80081f4:	4211883a 	add	r8,r8,r8
 80081f8:	4211883a 	add	r8,r8,r8
 80081fc:	2211883a 	add	r8,r4,r8
 8008200:	30002326 	beq	r6,zero,8008290 <__lshift+0x128>
 8008204:	02400804 	movi	r9,32
 8008208:	4993c83a 	sub	r9,r9,r6
 800820c:	000b883a 	mov	r5,zero
 8008210:	21c00017 	ldw	r7,0(r4)
 8008214:	1815883a 	mov	r10,r3
 8008218:	18c00104 	addi	r3,r3,4
 800821c:	398e983a 	sll	r7,r7,r6
 8008220:	21000104 	addi	r4,r4,4
 8008224:	394ab03a 	or	r5,r7,r5
 8008228:	197fff15 	stw	r5,-4(r3)
 800822c:	217fff17 	ldw	r5,-4(r4)
 8008230:	2a4ad83a 	srl	r5,r5,r9
 8008234:	223ff636 	bltu	r4,r8,8008210 <__lshift+0xa8>
 8008238:	51400115 	stw	r5,4(r10)
 800823c:	28001a1e 	bne	r5,zero,80082a8 <__lshift+0x140>
 8008240:	843fffc4 	addi	r16,r16,-1
 8008244:	14000415 	stw	r16,16(r2)
 8008248:	88000826 	beq	r17,zero,800826c <__lshift+0x104>
 800824c:	89000117 	ldw	r4,4(r17)
 8008250:	90c01317 	ldw	r3,76(r18)
 8008254:	2109883a 	add	r4,r4,r4
 8008258:	2109883a 	add	r4,r4,r4
 800825c:	1907883a 	add	r3,r3,r4
 8008260:	19000017 	ldw	r4,0(r3)
 8008264:	89000015 	stw	r4,0(r17)
 8008268:	1c400015 	stw	r17,0(r3)
 800826c:	dfc00617 	ldw	ra,24(sp)
 8008270:	dd400517 	ldw	r21,20(sp)
 8008274:	dd000417 	ldw	r20,16(sp)
 8008278:	dcc00317 	ldw	r19,12(sp)
 800827c:	dc800217 	ldw	r18,8(sp)
 8008280:	dc400117 	ldw	r17,4(sp)
 8008284:	dc000017 	ldw	r16,0(sp)
 8008288:	dec00704 	addi	sp,sp,28
 800828c:	f800283a 	ret
 8008290:	21400017 	ldw	r5,0(r4)
 8008294:	18c00104 	addi	r3,r3,4
 8008298:	21000104 	addi	r4,r4,4
 800829c:	197fff15 	stw	r5,-4(r3)
 80082a0:	223ffb36 	bltu	r4,r8,8008290 <__lshift+0x128>
 80082a4:	003fe606 	br	8008240 <__lshift+0xd8>
 80082a8:	9c000084 	addi	r16,r19,2
 80082ac:	003fe406 	br	8008240 <__lshift+0xd8>

080082b0 <__mcmp>:
 80082b0:	20800417 	ldw	r2,16(r4)
 80082b4:	28c00417 	ldw	r3,16(r5)
 80082b8:	10c5c83a 	sub	r2,r2,r3
 80082bc:	1000111e 	bne	r2,zero,8008304 <__mcmp+0x54>
 80082c0:	18c7883a 	add	r3,r3,r3
 80082c4:	18c7883a 	add	r3,r3,r3
 80082c8:	21000504 	addi	r4,r4,20
 80082cc:	29400504 	addi	r5,r5,20
 80082d0:	20c5883a 	add	r2,r4,r3
 80082d4:	28cb883a 	add	r5,r5,r3
 80082d8:	00000106 	br	80082e0 <__mcmp+0x30>
 80082dc:	20800a2e 	bgeu	r4,r2,8008308 <__mcmp+0x58>
 80082e0:	10bfff04 	addi	r2,r2,-4
 80082e4:	297fff04 	addi	r5,r5,-4
 80082e8:	11800017 	ldw	r6,0(r2)
 80082ec:	28c00017 	ldw	r3,0(r5)
 80082f0:	30fffa26 	beq	r6,r3,80082dc <__mcmp+0x2c>
 80082f4:	30c00236 	bltu	r6,r3,8008300 <__mcmp+0x50>
 80082f8:	00800044 	movi	r2,1
 80082fc:	f800283a 	ret
 8008300:	00bfffc4 	movi	r2,-1
 8008304:	f800283a 	ret
 8008308:	0005883a 	mov	r2,zero
 800830c:	f800283a 	ret

08008310 <__mdiff>:
 8008310:	28c00417 	ldw	r3,16(r5)
 8008314:	30800417 	ldw	r2,16(r6)
 8008318:	defffa04 	addi	sp,sp,-24
 800831c:	dcc00315 	stw	r19,12(sp)
 8008320:	dc800215 	stw	r18,8(sp)
 8008324:	dfc00515 	stw	ra,20(sp)
 8008328:	dd000415 	stw	r20,16(sp)
 800832c:	dc400115 	stw	r17,4(sp)
 8008330:	dc000015 	stw	r16,0(sp)
 8008334:	1887c83a 	sub	r3,r3,r2
 8008338:	2825883a 	mov	r18,r5
 800833c:	3027883a 	mov	r19,r6
 8008340:	1800141e 	bne	r3,zero,8008394 <__mdiff+0x84>
 8008344:	1085883a 	add	r2,r2,r2
 8008348:	1085883a 	add	r2,r2,r2
 800834c:	2a000504 	addi	r8,r5,20
 8008350:	34000504 	addi	r16,r6,20
 8008354:	4087883a 	add	r3,r8,r2
 8008358:	8085883a 	add	r2,r16,r2
 800835c:	00000106 	br	8008364 <__mdiff+0x54>
 8008360:	40c0592e 	bgeu	r8,r3,80084c8 <__mdiff+0x1b8>
 8008364:	18ffff04 	addi	r3,r3,-4
 8008368:	10bfff04 	addi	r2,r2,-4
 800836c:	19c00017 	ldw	r7,0(r3)
 8008370:	11400017 	ldw	r5,0(r2)
 8008374:	397ffa26 	beq	r7,r5,8008360 <__mdiff+0x50>
 8008378:	3940592e 	bgeu	r7,r5,80084e0 <__mdiff+0x1d0>
 800837c:	9005883a 	mov	r2,r18
 8008380:	4023883a 	mov	r17,r8
 8008384:	9825883a 	mov	r18,r19
 8008388:	05000044 	movi	r20,1
 800838c:	1027883a 	mov	r19,r2
 8008390:	00000406 	br	80083a4 <__mdiff+0x94>
 8008394:	18005616 	blt	r3,zero,80084f0 <__mdiff+0x1e0>
 8008398:	34400504 	addi	r17,r6,20
 800839c:	2c000504 	addi	r16,r5,20
 80083a0:	0029883a 	mov	r20,zero
 80083a4:	91400117 	ldw	r5,4(r18)
 80083a8:	80079e80 	call	80079e8 <_Balloc>
 80083ac:	92400417 	ldw	r9,16(r18)
 80083b0:	9b000417 	ldw	r12,16(r19)
 80083b4:	12c00504 	addi	r11,r2,20
 80083b8:	4a51883a 	add	r8,r9,r9
 80083bc:	6319883a 	add	r12,r12,r12
 80083c0:	4211883a 	add	r8,r8,r8
 80083c4:	6319883a 	add	r12,r12,r12
 80083c8:	15000315 	stw	r20,12(r2)
 80083cc:	8211883a 	add	r8,r16,r8
 80083d0:	8b19883a 	add	r12,r17,r12
 80083d4:	0007883a 	mov	r3,zero
 80083d8:	81400017 	ldw	r5,0(r16)
 80083dc:	89c00017 	ldw	r7,0(r17)
 80083e0:	59800104 	addi	r6,r11,4
 80083e4:	293fffcc 	andi	r4,r5,65535
 80083e8:	20c7883a 	add	r3,r4,r3
 80083ec:	393fffcc 	andi	r4,r7,65535
 80083f0:	1909c83a 	sub	r4,r3,r4
 80083f4:	280ad43a 	srli	r5,r5,16
 80083f8:	380ed43a 	srli	r7,r7,16
 80083fc:	2007d43a 	srai	r3,r4,16
 8008400:	213fffcc 	andi	r4,r4,65535
 8008404:	29cbc83a 	sub	r5,r5,r7
 8008408:	28c7883a 	add	r3,r5,r3
 800840c:	180a943a 	slli	r5,r3,16
 8008410:	8c400104 	addi	r17,r17,4
 8008414:	84000104 	addi	r16,r16,4
 8008418:	2908b03a 	or	r4,r5,r4
 800841c:	59000015 	stw	r4,0(r11)
 8008420:	1807d43a 	srai	r3,r3,16
 8008424:	3015883a 	mov	r10,r6
 8008428:	3017883a 	mov	r11,r6
 800842c:	8b3fea36 	bltu	r17,r12,80083d8 <__mdiff+0xc8>
 8008430:	8200162e 	bgeu	r16,r8,800848c <__mdiff+0x17c>
 8008434:	8017883a 	mov	r11,r16
 8008438:	59400017 	ldw	r5,0(r11)
 800843c:	31800104 	addi	r6,r6,4
 8008440:	5ac00104 	addi	r11,r11,4
 8008444:	293fffcc 	andi	r4,r5,65535
 8008448:	20c7883a 	add	r3,r4,r3
 800844c:	280ed43a 	srli	r7,r5,16
 8008450:	180bd43a 	srai	r5,r3,16
 8008454:	193fffcc 	andi	r4,r3,65535
 8008458:	3947883a 	add	r3,r7,r5
 800845c:	180a943a 	slli	r5,r3,16
 8008460:	1807d43a 	srai	r3,r3,16
 8008464:	2908b03a 	or	r4,r5,r4
 8008468:	313fff15 	stw	r4,-4(r6)
 800846c:	5a3ff236 	bltu	r11,r8,8008438 <__mdiff+0x128>
 8008470:	0406303a 	nor	r3,zero,r16
 8008474:	1a07883a 	add	r3,r3,r8
 8008478:	1806d0ba 	srli	r3,r3,2
 800847c:	18c00044 	addi	r3,r3,1
 8008480:	18c7883a 	add	r3,r3,r3
 8008484:	18c7883a 	add	r3,r3,r3
 8008488:	50d5883a 	add	r10,r10,r3
 800848c:	50ffff04 	addi	r3,r10,-4
 8008490:	2000041e 	bne	r4,zero,80084a4 <__mdiff+0x194>
 8008494:	18ffff04 	addi	r3,r3,-4
 8008498:	19000017 	ldw	r4,0(r3)
 800849c:	4a7fffc4 	addi	r9,r9,-1
 80084a0:	203ffc26 	beq	r4,zero,8008494 <__mdiff+0x184>
 80084a4:	12400415 	stw	r9,16(r2)
 80084a8:	dfc00517 	ldw	ra,20(sp)
 80084ac:	dd000417 	ldw	r20,16(sp)
 80084b0:	dcc00317 	ldw	r19,12(sp)
 80084b4:	dc800217 	ldw	r18,8(sp)
 80084b8:	dc400117 	ldw	r17,4(sp)
 80084bc:	dc000017 	ldw	r16,0(sp)
 80084c0:	dec00604 	addi	sp,sp,24
 80084c4:	f800283a 	ret
 80084c8:	000b883a 	mov	r5,zero
 80084cc:	80079e80 	call	80079e8 <_Balloc>
 80084d0:	00c00044 	movi	r3,1
 80084d4:	10c00415 	stw	r3,16(r2)
 80084d8:	10000515 	stw	zero,20(r2)
 80084dc:	003ff206 	br	80084a8 <__mdiff+0x198>
 80084e0:	8023883a 	mov	r17,r16
 80084e4:	0029883a 	mov	r20,zero
 80084e8:	4021883a 	mov	r16,r8
 80084ec:	003fad06 	br	80083a4 <__mdiff+0x94>
 80084f0:	9005883a 	mov	r2,r18
 80084f4:	94400504 	addi	r17,r18,20
 80084f8:	9c000504 	addi	r16,r19,20
 80084fc:	9825883a 	mov	r18,r19
 8008500:	05000044 	movi	r20,1
 8008504:	1027883a 	mov	r19,r2
 8008508:	003fa606 	br	80083a4 <__mdiff+0x94>

0800850c <__ulp>:
 800850c:	295ffc2c 	andhi	r5,r5,32752
 8008510:	00bf3034 	movhi	r2,64704
 8008514:	2887883a 	add	r3,r5,r2
 8008518:	00c0020e 	bge	zero,r3,8008524 <__ulp+0x18>
 800851c:	0005883a 	mov	r2,zero
 8008520:	f800283a 	ret
 8008524:	00c7c83a 	sub	r3,zero,r3
 8008528:	1807d53a 	srai	r3,r3,20
 800852c:	008004c4 	movi	r2,19
 8008530:	10c00b0e 	bge	r2,r3,8008560 <__ulp+0x54>
 8008534:	18bffb04 	addi	r2,r3,-20
 8008538:	01000784 	movi	r4,30
 800853c:	0007883a 	mov	r3,zero
 8008540:	20800516 	blt	r4,r2,8008558 <__ulp+0x4c>
 8008544:	010007c4 	movi	r4,31
 8008548:	2089c83a 	sub	r4,r4,r2
 800854c:	00800044 	movi	r2,1
 8008550:	1104983a 	sll	r2,r2,r4
 8008554:	f800283a 	ret
 8008558:	00800044 	movi	r2,1
 800855c:	f800283a 	ret
 8008560:	01400234 	movhi	r5,8
 8008564:	28c7d83a 	sra	r3,r5,r3
 8008568:	0005883a 	mov	r2,zero
 800856c:	f800283a 	ret

08008570 <__b2d>:
 8008570:	defffa04 	addi	sp,sp,-24
 8008574:	dc000015 	stw	r16,0(sp)
 8008578:	24000417 	ldw	r16,16(r4)
 800857c:	dc400115 	stw	r17,4(sp)
 8008580:	24400504 	addi	r17,r4,20
 8008584:	8421883a 	add	r16,r16,r16
 8008588:	8421883a 	add	r16,r16,r16
 800858c:	8c21883a 	add	r16,r17,r16
 8008590:	dc800215 	stw	r18,8(sp)
 8008594:	84bfff17 	ldw	r18,-4(r16)
 8008598:	dd000415 	stw	r20,16(sp)
 800859c:	dcc00315 	stw	r19,12(sp)
 80085a0:	9009883a 	mov	r4,r18
 80085a4:	2829883a 	mov	r20,r5
 80085a8:	dfc00515 	stw	ra,20(sp)
 80085ac:	8007cdc0 	call	8007cdc <__hi0bits>
 80085b0:	00c00804 	movi	r3,32
 80085b4:	1889c83a 	sub	r4,r3,r2
 80085b8:	a1000015 	stw	r4,0(r20)
 80085bc:	01000284 	movi	r4,10
 80085c0:	84ffff04 	addi	r19,r16,-4
 80085c4:	20801216 	blt	r4,r2,8008610 <__b2d+0xa0>
 80085c8:	018002c4 	movi	r6,11
 80085cc:	308dc83a 	sub	r6,r6,r2
 80085d0:	9186d83a 	srl	r3,r18,r6
 80085d4:	18cffc34 	orhi	r3,r3,16368
 80085d8:	8cc0212e 	bgeu	r17,r19,8008660 <__b2d+0xf0>
 80085dc:	813ffe17 	ldw	r4,-8(r16)
 80085e0:	218cd83a 	srl	r6,r4,r6
 80085e4:	10800544 	addi	r2,r2,21
 80085e8:	9084983a 	sll	r2,r18,r2
 80085ec:	1184b03a 	or	r2,r2,r6
 80085f0:	dfc00517 	ldw	ra,20(sp)
 80085f4:	dd000417 	ldw	r20,16(sp)
 80085f8:	dcc00317 	ldw	r19,12(sp)
 80085fc:	dc800217 	ldw	r18,8(sp)
 8008600:	dc400117 	ldw	r17,4(sp)
 8008604:	dc000017 	ldw	r16,0(sp)
 8008608:	dec00604 	addi	sp,sp,24
 800860c:	f800283a 	ret
 8008610:	8cc00f2e 	bgeu	r17,r19,8008650 <__b2d+0xe0>
 8008614:	117ffd44 	addi	r5,r2,-11
 8008618:	80bffe17 	ldw	r2,-8(r16)
 800861c:	28000e26 	beq	r5,zero,8008658 <__b2d+0xe8>
 8008620:	1949c83a 	sub	r4,r3,r5
 8008624:	9164983a 	sll	r18,r18,r5
 8008628:	1106d83a 	srl	r3,r2,r4
 800862c:	81bffe04 	addi	r6,r16,-8
 8008630:	948ffc34 	orhi	r18,r18,16368
 8008634:	90c6b03a 	or	r3,r18,r3
 8008638:	89800e2e 	bgeu	r17,r6,8008674 <__b2d+0x104>
 800863c:	81bffd17 	ldw	r6,-12(r16)
 8008640:	1144983a 	sll	r2,r2,r5
 8008644:	310ad83a 	srl	r5,r6,r4
 8008648:	2884b03a 	or	r2,r5,r2
 800864c:	003fe806 	br	80085f0 <__b2d+0x80>
 8008650:	10bffd44 	addi	r2,r2,-11
 8008654:	1000041e 	bne	r2,zero,8008668 <__b2d+0xf8>
 8008658:	90cffc34 	orhi	r3,r18,16368
 800865c:	003fe406 	br	80085f0 <__b2d+0x80>
 8008660:	000d883a 	mov	r6,zero
 8008664:	003fdf06 	br	80085e4 <__b2d+0x74>
 8008668:	90a4983a 	sll	r18,r18,r2
 800866c:	0005883a 	mov	r2,zero
 8008670:	003ff906 	br	8008658 <__b2d+0xe8>
 8008674:	1144983a 	sll	r2,r2,r5
 8008678:	003fdd06 	br	80085f0 <__b2d+0x80>

0800867c <__d2b>:
 800867c:	defff804 	addi	sp,sp,-32
 8008680:	dc000215 	stw	r16,8(sp)
 8008684:	3021883a 	mov	r16,r6
 8008688:	dc400315 	stw	r17,12(sp)
 800868c:	8022907a 	slli	r17,r16,1
 8008690:	dd000615 	stw	r20,24(sp)
 8008694:	2829883a 	mov	r20,r5
 8008698:	01400044 	movi	r5,1
 800869c:	dcc00515 	stw	r19,20(sp)
 80086a0:	dc800415 	stw	r18,16(sp)
 80086a4:	dfc00715 	stw	ra,28(sp)
 80086a8:	3825883a 	mov	r18,r7
 80086ac:	8822d57a 	srli	r17,r17,21
 80086b0:	80079e80 	call	80079e8 <_Balloc>
 80086b4:	1027883a 	mov	r19,r2
 80086b8:	00800434 	movhi	r2,16
 80086bc:	10bfffc4 	addi	r2,r2,-1
 80086c0:	808c703a 	and	r6,r16,r2
 80086c4:	88000126 	beq	r17,zero,80086cc <__d2b+0x50>
 80086c8:	31800434 	orhi	r6,r6,16
 80086cc:	d9800015 	stw	r6,0(sp)
 80086d0:	a0002426 	beq	r20,zero,8008764 <__d2b+0xe8>
 80086d4:	d9000104 	addi	r4,sp,4
 80086d8:	dd000115 	stw	r20,4(sp)
 80086dc:	8007d440 	call	8007d44 <__lo0bits>
 80086e0:	d8c00017 	ldw	r3,0(sp)
 80086e4:	10002f1e 	bne	r2,zero,80087a4 <__d2b+0x128>
 80086e8:	d9000117 	ldw	r4,4(sp)
 80086ec:	99000515 	stw	r4,20(r19)
 80086f0:	1821003a 	cmpeq	r16,r3,zero
 80086f4:	01000084 	movi	r4,2
 80086f8:	2421c83a 	sub	r16,r4,r16
 80086fc:	98c00615 	stw	r3,24(r19)
 8008700:	9c000415 	stw	r16,16(r19)
 8008704:	88001f1e 	bne	r17,zero,8008784 <__d2b+0x108>
 8008708:	10bef384 	addi	r2,r2,-1074
 800870c:	90800015 	stw	r2,0(r18)
 8008710:	00900034 	movhi	r2,16384
 8008714:	10bfffc4 	addi	r2,r2,-1
 8008718:	8085883a 	add	r2,r16,r2
 800871c:	1085883a 	add	r2,r2,r2
 8008720:	1085883a 	add	r2,r2,r2
 8008724:	9885883a 	add	r2,r19,r2
 8008728:	11000517 	ldw	r4,20(r2)
 800872c:	8020917a 	slli	r16,r16,5
 8008730:	8007cdc0 	call	8007cdc <__hi0bits>
 8008734:	d8c00817 	ldw	r3,32(sp)
 8008738:	8085c83a 	sub	r2,r16,r2
 800873c:	18800015 	stw	r2,0(r3)
 8008740:	9805883a 	mov	r2,r19
 8008744:	dfc00717 	ldw	ra,28(sp)
 8008748:	dd000617 	ldw	r20,24(sp)
 800874c:	dcc00517 	ldw	r19,20(sp)
 8008750:	dc800417 	ldw	r18,16(sp)
 8008754:	dc400317 	ldw	r17,12(sp)
 8008758:	dc000217 	ldw	r16,8(sp)
 800875c:	dec00804 	addi	sp,sp,32
 8008760:	f800283a 	ret
 8008764:	d809883a 	mov	r4,sp
 8008768:	8007d440 	call	8007d44 <__lo0bits>
 800876c:	d8c00017 	ldw	r3,0(sp)
 8008770:	04000044 	movi	r16,1
 8008774:	9c000415 	stw	r16,16(r19)
 8008778:	98c00515 	stw	r3,20(r19)
 800877c:	10800804 	addi	r2,r2,32
 8008780:	883fe126 	beq	r17,zero,8008708 <__d2b+0x8c>
 8008784:	00c00d44 	movi	r3,53
 8008788:	8c7ef344 	addi	r17,r17,-1075
 800878c:	88a3883a 	add	r17,r17,r2
 8008790:	1885c83a 	sub	r2,r3,r2
 8008794:	d8c00817 	ldw	r3,32(sp)
 8008798:	94400015 	stw	r17,0(r18)
 800879c:	18800015 	stw	r2,0(r3)
 80087a0:	003fe706 	br	8008740 <__d2b+0xc4>
 80087a4:	01000804 	movi	r4,32
 80087a8:	2089c83a 	sub	r4,r4,r2
 80087ac:	1908983a 	sll	r4,r3,r4
 80087b0:	d9400117 	ldw	r5,4(sp)
 80087b4:	1886d83a 	srl	r3,r3,r2
 80087b8:	2148b03a 	or	r4,r4,r5
 80087bc:	99000515 	stw	r4,20(r19)
 80087c0:	d8c00015 	stw	r3,0(sp)
 80087c4:	003fca06 	br	80086f0 <__d2b+0x74>

080087c8 <__ratio>:
 80087c8:	defff904 	addi	sp,sp,-28
 80087cc:	dc400315 	stw	r17,12(sp)
 80087d0:	2823883a 	mov	r17,r5
 80087d4:	d9400104 	addi	r5,sp,4
 80087d8:	dfc00615 	stw	ra,24(sp)
 80087dc:	dcc00515 	stw	r19,20(sp)
 80087e0:	dc800415 	stw	r18,16(sp)
 80087e4:	2027883a 	mov	r19,r4
 80087e8:	dc000215 	stw	r16,8(sp)
 80087ec:	80085700 	call	8008570 <__b2d>
 80087f0:	d80b883a 	mov	r5,sp
 80087f4:	8809883a 	mov	r4,r17
 80087f8:	1025883a 	mov	r18,r2
 80087fc:	1821883a 	mov	r16,r3
 8008800:	80085700 	call	8008570 <__b2d>
 8008804:	8a000417 	ldw	r8,16(r17)
 8008808:	99000417 	ldw	r4,16(r19)
 800880c:	d9400117 	ldw	r5,4(sp)
 8008810:	2209c83a 	sub	r4,r4,r8
 8008814:	2010917a 	slli	r8,r4,5
 8008818:	d9000017 	ldw	r4,0(sp)
 800881c:	2909c83a 	sub	r4,r5,r4
 8008820:	4109883a 	add	r4,r8,r4
 8008824:	01000e0e 	bge	zero,r4,8008860 <__ratio+0x98>
 8008828:	2008953a 	slli	r4,r4,20
 800882c:	2421883a 	add	r16,r4,r16
 8008830:	100d883a 	mov	r6,r2
 8008834:	180f883a 	mov	r7,r3
 8008838:	9009883a 	mov	r4,r18
 800883c:	800b883a 	mov	r5,r16
 8008840:	800c6b40 	call	800c6b4 <__divdf3>
 8008844:	dfc00617 	ldw	ra,24(sp)
 8008848:	dcc00517 	ldw	r19,20(sp)
 800884c:	dc800417 	ldw	r18,16(sp)
 8008850:	dc400317 	ldw	r17,12(sp)
 8008854:	dc000217 	ldw	r16,8(sp)
 8008858:	dec00704 	addi	sp,sp,28
 800885c:	f800283a 	ret
 8008860:	2008953a 	slli	r4,r4,20
 8008864:	1907c83a 	sub	r3,r3,r4
 8008868:	003ff106 	br	8008830 <__ratio+0x68>

0800886c <_mprec_log10>:
 800886c:	defffe04 	addi	sp,sp,-8
 8008870:	dc000015 	stw	r16,0(sp)
 8008874:	dfc00115 	stw	ra,4(sp)
 8008878:	008005c4 	movi	r2,23
 800887c:	2021883a 	mov	r16,r4
 8008880:	11000d0e 	bge	r2,r4,80088b8 <_mprec_log10+0x4c>
 8008884:	0005883a 	mov	r2,zero
 8008888:	00cffc34 	movhi	r3,16368
 800888c:	843fffc4 	addi	r16,r16,-1
 8008890:	000d883a 	mov	r6,zero
 8008894:	01d00934 	movhi	r7,16420
 8008898:	1009883a 	mov	r4,r2
 800889c:	180b883a 	mov	r5,r3
 80088a0:	800d1f40 	call	800d1f4 <__muldf3>
 80088a4:	803ff91e 	bne	r16,zero,800888c <_mprec_log10+0x20>
 80088a8:	dfc00117 	ldw	ra,4(sp)
 80088ac:	dc000017 	ldw	r16,0(sp)
 80088b0:	dec00204 	addi	sp,sp,8
 80088b4:	f800283a 	ret
 80088b8:	202090fa 	slli	r16,r4,3
 80088bc:	00820074 	movhi	r2,2049
 80088c0:	10839b04 	addi	r2,r2,3692
 80088c4:	1421883a 	add	r16,r2,r16
 80088c8:	80800017 	ldw	r2,0(r16)
 80088cc:	80c00117 	ldw	r3,4(r16)
 80088d0:	dfc00117 	ldw	ra,4(sp)
 80088d4:	dc000017 	ldw	r16,0(sp)
 80088d8:	dec00204 	addi	sp,sp,8
 80088dc:	f800283a 	ret

080088e0 <__copybits>:
 80088e0:	297fffc4 	addi	r5,r5,-1
 80088e4:	280fd17a 	srai	r7,r5,5
 80088e8:	30c00417 	ldw	r3,16(r6)
 80088ec:	30800504 	addi	r2,r6,20
 80088f0:	39c00044 	addi	r7,r7,1
 80088f4:	18c7883a 	add	r3,r3,r3
 80088f8:	39cf883a 	add	r7,r7,r7
 80088fc:	18c7883a 	add	r3,r3,r3
 8008900:	39cf883a 	add	r7,r7,r7
 8008904:	10c7883a 	add	r3,r2,r3
 8008908:	21cf883a 	add	r7,r4,r7
 800890c:	10c00d2e 	bgeu	r2,r3,8008944 <__copybits+0x64>
 8008910:	200b883a 	mov	r5,r4
 8008914:	12000017 	ldw	r8,0(r2)
 8008918:	29400104 	addi	r5,r5,4
 800891c:	10800104 	addi	r2,r2,4
 8008920:	2a3fff15 	stw	r8,-4(r5)
 8008924:	10fffb36 	bltu	r2,r3,8008914 <__copybits+0x34>
 8008928:	1985c83a 	sub	r2,r3,r6
 800892c:	10bffac4 	addi	r2,r2,-21
 8008930:	1004d0ba 	srli	r2,r2,2
 8008934:	10800044 	addi	r2,r2,1
 8008938:	1085883a 	add	r2,r2,r2
 800893c:	1085883a 	add	r2,r2,r2
 8008940:	2089883a 	add	r4,r4,r2
 8008944:	21c0032e 	bgeu	r4,r7,8008954 <__copybits+0x74>
 8008948:	20000015 	stw	zero,0(r4)
 800894c:	21000104 	addi	r4,r4,4
 8008950:	21fffd36 	bltu	r4,r7,8008948 <__copybits+0x68>
 8008954:	f800283a 	ret

08008958 <__any_on>:
 8008958:	20c00417 	ldw	r3,16(r4)
 800895c:	2805d17a 	srai	r2,r5,5
 8008960:	21000504 	addi	r4,r4,20
 8008964:	18800d0e 	bge	r3,r2,800899c <__any_on+0x44>
 8008968:	18c7883a 	add	r3,r3,r3
 800896c:	18c7883a 	add	r3,r3,r3
 8008970:	20c7883a 	add	r3,r4,r3
 8008974:	20c0192e 	bgeu	r4,r3,80089dc <__any_on+0x84>
 8008978:	18bfff17 	ldw	r2,-4(r3)
 800897c:	18ffff04 	addi	r3,r3,-4
 8008980:	1000041e 	bne	r2,zero,8008994 <__any_on+0x3c>
 8008984:	20c0142e 	bgeu	r4,r3,80089d8 <__any_on+0x80>
 8008988:	18ffff04 	addi	r3,r3,-4
 800898c:	19400017 	ldw	r5,0(r3)
 8008990:	283ffc26 	beq	r5,zero,8008984 <__any_on+0x2c>
 8008994:	00800044 	movi	r2,1
 8008998:	f800283a 	ret
 800899c:	10c00a0e 	bge	r2,r3,80089c8 <__any_on+0x70>
 80089a0:	1085883a 	add	r2,r2,r2
 80089a4:	1085883a 	add	r2,r2,r2
 80089a8:	294007cc 	andi	r5,r5,31
 80089ac:	2087883a 	add	r3,r4,r2
 80089b0:	283ff026 	beq	r5,zero,8008974 <__any_on+0x1c>
 80089b4:	19800017 	ldw	r6,0(r3)
 80089b8:	3144d83a 	srl	r2,r6,r5
 80089bc:	114a983a 	sll	r5,r2,r5
 80089c0:	317ff41e 	bne	r6,r5,8008994 <__any_on+0x3c>
 80089c4:	003feb06 	br	8008974 <__any_on+0x1c>
 80089c8:	1085883a 	add	r2,r2,r2
 80089cc:	1085883a 	add	r2,r2,r2
 80089d0:	2087883a 	add	r3,r4,r2
 80089d4:	003fe706 	br	8008974 <__any_on+0x1c>
 80089d8:	f800283a 	ret
 80089dc:	0005883a 	mov	r2,zero
 80089e0:	f800283a 	ret

080089e4 <_realloc_r>:
 80089e4:	defff604 	addi	sp,sp,-40
 80089e8:	dc800215 	stw	r18,8(sp)
 80089ec:	dfc00915 	stw	ra,36(sp)
 80089f0:	df000815 	stw	fp,32(sp)
 80089f4:	ddc00715 	stw	r23,28(sp)
 80089f8:	dd800615 	stw	r22,24(sp)
 80089fc:	dd400515 	stw	r21,20(sp)
 8008a00:	dd000415 	stw	r20,16(sp)
 8008a04:	dcc00315 	stw	r19,12(sp)
 8008a08:	dc400115 	stw	r17,4(sp)
 8008a0c:	dc000015 	stw	r16,0(sp)
 8008a10:	3025883a 	mov	r18,r6
 8008a14:	2800b726 	beq	r5,zero,8008cf4 <_realloc_r+0x310>
 8008a18:	282b883a 	mov	r21,r5
 8008a1c:	2029883a 	mov	r20,r4
 8008a20:	800e9880 	call	800e988 <__malloc_lock>
 8008a24:	a8bfff17 	ldw	r2,-4(r21)
 8008a28:	043fff04 	movi	r16,-4
 8008a2c:	90c002c4 	addi	r3,r18,11
 8008a30:	01000584 	movi	r4,22
 8008a34:	acfffe04 	addi	r19,r21,-8
 8008a38:	1420703a 	and	r16,r2,r16
 8008a3c:	20c0332e 	bgeu	r4,r3,8008b0c <_realloc_r+0x128>
 8008a40:	047ffe04 	movi	r17,-8
 8008a44:	1c62703a 	and	r17,r3,r17
 8008a48:	8807883a 	mov	r3,r17
 8008a4c:	88005816 	blt	r17,zero,8008bb0 <_realloc_r+0x1cc>
 8008a50:	8c805736 	bltu	r17,r18,8008bb0 <_realloc_r+0x1cc>
 8008a54:	80c0300e 	bge	r16,r3,8008b18 <_realloc_r+0x134>
 8008a58:	07020074 	movhi	fp,2049
 8008a5c:	e7050904 	addi	fp,fp,5156
 8008a60:	e1c00217 	ldw	r7,8(fp)
 8008a64:	9c09883a 	add	r4,r19,r16
 8008a68:	22000117 	ldw	r8,4(r4)
 8008a6c:	21c06326 	beq	r4,r7,8008bfc <_realloc_r+0x218>
 8008a70:	017fff84 	movi	r5,-2
 8008a74:	414a703a 	and	r5,r8,r5
 8008a78:	214b883a 	add	r5,r4,r5
 8008a7c:	29800117 	ldw	r6,4(r5)
 8008a80:	3180004c 	andi	r6,r6,1
 8008a84:	30003f26 	beq	r6,zero,8008b84 <_realloc_r+0x1a0>
 8008a88:	1080004c 	andi	r2,r2,1
 8008a8c:	10008326 	beq	r2,zero,8008c9c <_realloc_r+0x2b8>
 8008a90:	900b883a 	mov	r5,r18
 8008a94:	a009883a 	mov	r4,r20
 8008a98:	8006d2c0 	call	8006d2c <_malloc_r>
 8008a9c:	1025883a 	mov	r18,r2
 8008aa0:	10011e26 	beq	r2,zero,8008f1c <_realloc_r+0x538>
 8008aa4:	a93fff17 	ldw	r4,-4(r21)
 8008aa8:	10fffe04 	addi	r3,r2,-8
 8008aac:	00bfff84 	movi	r2,-2
 8008ab0:	2084703a 	and	r2,r4,r2
 8008ab4:	9885883a 	add	r2,r19,r2
 8008ab8:	1880ee26 	beq	r3,r2,8008e74 <_realloc_r+0x490>
 8008abc:	81bfff04 	addi	r6,r16,-4
 8008ac0:	00800904 	movi	r2,36
 8008ac4:	1180b836 	bltu	r2,r6,8008da8 <_realloc_r+0x3c4>
 8008ac8:	00c004c4 	movi	r3,19
 8008acc:	19809636 	bltu	r3,r6,8008d28 <_realloc_r+0x344>
 8008ad0:	9005883a 	mov	r2,r18
 8008ad4:	a807883a 	mov	r3,r21
 8008ad8:	19000017 	ldw	r4,0(r3)
 8008adc:	11000015 	stw	r4,0(r2)
 8008ae0:	19000117 	ldw	r4,4(r3)
 8008ae4:	11000115 	stw	r4,4(r2)
 8008ae8:	18c00217 	ldw	r3,8(r3)
 8008aec:	10c00215 	stw	r3,8(r2)
 8008af0:	a80b883a 	mov	r5,r21
 8008af4:	a009883a 	mov	r4,r20
 8008af8:	80061400 	call	8006140 <_free_r>
 8008afc:	a009883a 	mov	r4,r20
 8008b00:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8008b04:	9005883a 	mov	r2,r18
 8008b08:	00001206 	br	8008b54 <_realloc_r+0x170>
 8008b0c:	00c00404 	movi	r3,16
 8008b10:	1823883a 	mov	r17,r3
 8008b14:	003fce06 	br	8008a50 <_realloc_r+0x6c>
 8008b18:	a825883a 	mov	r18,r21
 8008b1c:	8445c83a 	sub	r2,r16,r17
 8008b20:	00c003c4 	movi	r3,15
 8008b24:	18802636 	bltu	r3,r2,8008bc0 <_realloc_r+0x1dc>
 8008b28:	99800117 	ldw	r6,4(r19)
 8008b2c:	9c07883a 	add	r3,r19,r16
 8008b30:	3180004c 	andi	r6,r6,1
 8008b34:	3420b03a 	or	r16,r6,r16
 8008b38:	9c000115 	stw	r16,4(r19)
 8008b3c:	18800117 	ldw	r2,4(r3)
 8008b40:	10800054 	ori	r2,r2,1
 8008b44:	18800115 	stw	r2,4(r3)
 8008b48:	a009883a 	mov	r4,r20
 8008b4c:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8008b50:	9005883a 	mov	r2,r18
 8008b54:	dfc00917 	ldw	ra,36(sp)
 8008b58:	df000817 	ldw	fp,32(sp)
 8008b5c:	ddc00717 	ldw	r23,28(sp)
 8008b60:	dd800617 	ldw	r22,24(sp)
 8008b64:	dd400517 	ldw	r21,20(sp)
 8008b68:	dd000417 	ldw	r20,16(sp)
 8008b6c:	dcc00317 	ldw	r19,12(sp)
 8008b70:	dc800217 	ldw	r18,8(sp)
 8008b74:	dc400117 	ldw	r17,4(sp)
 8008b78:	dc000017 	ldw	r16,0(sp)
 8008b7c:	dec00a04 	addi	sp,sp,40
 8008b80:	f800283a 	ret
 8008b84:	017fff04 	movi	r5,-4
 8008b88:	414a703a 	and	r5,r8,r5
 8008b8c:	814d883a 	add	r6,r16,r5
 8008b90:	30c01f16 	blt	r6,r3,8008c10 <_realloc_r+0x22c>
 8008b94:	20800317 	ldw	r2,12(r4)
 8008b98:	20c00217 	ldw	r3,8(r4)
 8008b9c:	a825883a 	mov	r18,r21
 8008ba0:	3021883a 	mov	r16,r6
 8008ba4:	18800315 	stw	r2,12(r3)
 8008ba8:	10c00215 	stw	r3,8(r2)
 8008bac:	003fdb06 	br	8008b1c <_realloc_r+0x138>
 8008bb0:	00800304 	movi	r2,12
 8008bb4:	a0800015 	stw	r2,0(r20)
 8008bb8:	0005883a 	mov	r2,zero
 8008bbc:	003fe506 	br	8008b54 <_realloc_r+0x170>
 8008bc0:	98c00117 	ldw	r3,4(r19)
 8008bc4:	9c4b883a 	add	r5,r19,r17
 8008bc8:	11000054 	ori	r4,r2,1
 8008bcc:	18c0004c 	andi	r3,r3,1
 8008bd0:	1c62b03a 	or	r17,r3,r17
 8008bd4:	9c400115 	stw	r17,4(r19)
 8008bd8:	29000115 	stw	r4,4(r5)
 8008bdc:	2885883a 	add	r2,r5,r2
 8008be0:	10c00117 	ldw	r3,4(r2)
 8008be4:	29400204 	addi	r5,r5,8
 8008be8:	a009883a 	mov	r4,r20
 8008bec:	18c00054 	ori	r3,r3,1
 8008bf0:	10c00115 	stw	r3,4(r2)
 8008bf4:	80061400 	call	8006140 <_free_r>
 8008bf8:	003fd306 	br	8008b48 <_realloc_r+0x164>
 8008bfc:	017fff04 	movi	r5,-4
 8008c00:	414a703a 	and	r5,r8,r5
 8008c04:	89800404 	addi	r6,r17,16
 8008c08:	8151883a 	add	r8,r16,r5
 8008c0c:	4180590e 	bge	r8,r6,8008d74 <_realloc_r+0x390>
 8008c10:	1080004c 	andi	r2,r2,1
 8008c14:	103f9e1e 	bne	r2,zero,8008a90 <_realloc_r+0xac>
 8008c18:	adbffe17 	ldw	r22,-8(r21)
 8008c1c:	00bfff04 	movi	r2,-4
 8008c20:	9dadc83a 	sub	r22,r19,r22
 8008c24:	b1800117 	ldw	r6,4(r22)
 8008c28:	3084703a 	and	r2,r6,r2
 8008c2c:	20002026 	beq	r4,zero,8008cb0 <_realloc_r+0x2cc>
 8008c30:	80af883a 	add	r23,r16,r2
 8008c34:	b96f883a 	add	r23,r23,r5
 8008c38:	21c05f26 	beq	r4,r7,8008db8 <_realloc_r+0x3d4>
 8008c3c:	b8c01c16 	blt	r23,r3,8008cb0 <_realloc_r+0x2cc>
 8008c40:	20800317 	ldw	r2,12(r4)
 8008c44:	20c00217 	ldw	r3,8(r4)
 8008c48:	81bfff04 	addi	r6,r16,-4
 8008c4c:	01000904 	movi	r4,36
 8008c50:	18800315 	stw	r2,12(r3)
 8008c54:	10c00215 	stw	r3,8(r2)
 8008c58:	b0c00217 	ldw	r3,8(r22)
 8008c5c:	b0800317 	ldw	r2,12(r22)
 8008c60:	b4800204 	addi	r18,r22,8
 8008c64:	18800315 	stw	r2,12(r3)
 8008c68:	10c00215 	stw	r3,8(r2)
 8008c6c:	21801b36 	bltu	r4,r6,8008cdc <_realloc_r+0x2f8>
 8008c70:	008004c4 	movi	r2,19
 8008c74:	1180352e 	bgeu	r2,r6,8008d4c <_realloc_r+0x368>
 8008c78:	a8800017 	ldw	r2,0(r21)
 8008c7c:	b0800215 	stw	r2,8(r22)
 8008c80:	a8800117 	ldw	r2,4(r21)
 8008c84:	b0800315 	stw	r2,12(r22)
 8008c88:	008006c4 	movi	r2,27
 8008c8c:	11807f36 	bltu	r2,r6,8008e8c <_realloc_r+0x4a8>
 8008c90:	b0800404 	addi	r2,r22,16
 8008c94:	ad400204 	addi	r21,r21,8
 8008c98:	00002d06 	br	8008d50 <_realloc_r+0x36c>
 8008c9c:	adbffe17 	ldw	r22,-8(r21)
 8008ca0:	00bfff04 	movi	r2,-4
 8008ca4:	9dadc83a 	sub	r22,r19,r22
 8008ca8:	b1000117 	ldw	r4,4(r22)
 8008cac:	2084703a 	and	r2,r4,r2
 8008cb0:	b03f7726 	beq	r22,zero,8008a90 <_realloc_r+0xac>
 8008cb4:	80af883a 	add	r23,r16,r2
 8008cb8:	b8ff7516 	blt	r23,r3,8008a90 <_realloc_r+0xac>
 8008cbc:	b0800317 	ldw	r2,12(r22)
 8008cc0:	b0c00217 	ldw	r3,8(r22)
 8008cc4:	81bfff04 	addi	r6,r16,-4
 8008cc8:	01000904 	movi	r4,36
 8008ccc:	18800315 	stw	r2,12(r3)
 8008cd0:	10c00215 	stw	r3,8(r2)
 8008cd4:	b4800204 	addi	r18,r22,8
 8008cd8:	21bfe52e 	bgeu	r4,r6,8008c70 <_realloc_r+0x28c>
 8008cdc:	a80b883a 	mov	r5,r21
 8008ce0:	9009883a 	mov	r4,r18
 8008ce4:	80077640 	call	8007764 <memmove>
 8008ce8:	b821883a 	mov	r16,r23
 8008cec:	b027883a 	mov	r19,r22
 8008cf0:	003f8a06 	br	8008b1c <_realloc_r+0x138>
 8008cf4:	300b883a 	mov	r5,r6
 8008cf8:	dfc00917 	ldw	ra,36(sp)
 8008cfc:	df000817 	ldw	fp,32(sp)
 8008d00:	ddc00717 	ldw	r23,28(sp)
 8008d04:	dd800617 	ldw	r22,24(sp)
 8008d08:	dd400517 	ldw	r21,20(sp)
 8008d0c:	dd000417 	ldw	r20,16(sp)
 8008d10:	dcc00317 	ldw	r19,12(sp)
 8008d14:	dc800217 	ldw	r18,8(sp)
 8008d18:	dc400117 	ldw	r17,4(sp)
 8008d1c:	dc000017 	ldw	r16,0(sp)
 8008d20:	dec00a04 	addi	sp,sp,40
 8008d24:	8006d2c1 	jmpi	8006d2c <_malloc_r>
 8008d28:	a8c00017 	ldw	r3,0(r21)
 8008d2c:	90c00015 	stw	r3,0(r18)
 8008d30:	a8c00117 	ldw	r3,4(r21)
 8008d34:	90c00115 	stw	r3,4(r18)
 8008d38:	00c006c4 	movi	r3,27
 8008d3c:	19804536 	bltu	r3,r6,8008e54 <_realloc_r+0x470>
 8008d40:	90800204 	addi	r2,r18,8
 8008d44:	a8c00204 	addi	r3,r21,8
 8008d48:	003f6306 	br	8008ad8 <_realloc_r+0xf4>
 8008d4c:	9005883a 	mov	r2,r18
 8008d50:	a8c00017 	ldw	r3,0(r21)
 8008d54:	b821883a 	mov	r16,r23
 8008d58:	b027883a 	mov	r19,r22
 8008d5c:	10c00015 	stw	r3,0(r2)
 8008d60:	a8c00117 	ldw	r3,4(r21)
 8008d64:	10c00115 	stw	r3,4(r2)
 8008d68:	a8c00217 	ldw	r3,8(r21)
 8008d6c:	10c00215 	stw	r3,8(r2)
 8008d70:	003f6a06 	br	8008b1c <_realloc_r+0x138>
 8008d74:	9c67883a 	add	r19,r19,r17
 8008d78:	4445c83a 	sub	r2,r8,r17
 8008d7c:	e4c00215 	stw	r19,8(fp)
 8008d80:	10800054 	ori	r2,r2,1
 8008d84:	98800115 	stw	r2,4(r19)
 8008d88:	a8bfff17 	ldw	r2,-4(r21)
 8008d8c:	a009883a 	mov	r4,r20
 8008d90:	1080004c 	andi	r2,r2,1
 8008d94:	1462b03a 	or	r17,r2,r17
 8008d98:	ac7fff15 	stw	r17,-4(r21)
 8008d9c:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8008da0:	a805883a 	mov	r2,r21
 8008da4:	003f6b06 	br	8008b54 <_realloc_r+0x170>
 8008da8:	a80b883a 	mov	r5,r21
 8008dac:	9009883a 	mov	r4,r18
 8008db0:	80077640 	call	8007764 <memmove>
 8008db4:	003f4e06 	br	8008af0 <_realloc_r+0x10c>
 8008db8:	89000404 	addi	r4,r17,16
 8008dbc:	b93fbc16 	blt	r23,r4,8008cb0 <_realloc_r+0x2cc>
 8008dc0:	b0800317 	ldw	r2,12(r22)
 8008dc4:	b0c00217 	ldw	r3,8(r22)
 8008dc8:	81bfff04 	addi	r6,r16,-4
 8008dcc:	01000904 	movi	r4,36
 8008dd0:	18800315 	stw	r2,12(r3)
 8008dd4:	10c00215 	stw	r3,8(r2)
 8008dd8:	b4800204 	addi	r18,r22,8
 8008ddc:	21804336 	bltu	r4,r6,8008eec <_realloc_r+0x508>
 8008de0:	008004c4 	movi	r2,19
 8008de4:	11803f2e 	bgeu	r2,r6,8008ee4 <_realloc_r+0x500>
 8008de8:	a8800017 	ldw	r2,0(r21)
 8008dec:	b0800215 	stw	r2,8(r22)
 8008df0:	a8800117 	ldw	r2,4(r21)
 8008df4:	b0800315 	stw	r2,12(r22)
 8008df8:	008006c4 	movi	r2,27
 8008dfc:	11803f36 	bltu	r2,r6,8008efc <_realloc_r+0x518>
 8008e00:	b0800404 	addi	r2,r22,16
 8008e04:	ad400204 	addi	r21,r21,8
 8008e08:	a8c00017 	ldw	r3,0(r21)
 8008e0c:	10c00015 	stw	r3,0(r2)
 8008e10:	a8c00117 	ldw	r3,4(r21)
 8008e14:	10c00115 	stw	r3,4(r2)
 8008e18:	a8c00217 	ldw	r3,8(r21)
 8008e1c:	10c00215 	stw	r3,8(r2)
 8008e20:	b447883a 	add	r3,r22,r17
 8008e24:	bc45c83a 	sub	r2,r23,r17
 8008e28:	e0c00215 	stw	r3,8(fp)
 8008e2c:	10800054 	ori	r2,r2,1
 8008e30:	18800115 	stw	r2,4(r3)
 8008e34:	b0800117 	ldw	r2,4(r22)
 8008e38:	a009883a 	mov	r4,r20
 8008e3c:	1080004c 	andi	r2,r2,1
 8008e40:	1462b03a 	or	r17,r2,r17
 8008e44:	b4400115 	stw	r17,4(r22)
 8008e48:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8008e4c:	9005883a 	mov	r2,r18
 8008e50:	003f4006 	br	8008b54 <_realloc_r+0x170>
 8008e54:	a8c00217 	ldw	r3,8(r21)
 8008e58:	90c00215 	stw	r3,8(r18)
 8008e5c:	a8c00317 	ldw	r3,12(r21)
 8008e60:	90c00315 	stw	r3,12(r18)
 8008e64:	30801126 	beq	r6,r2,8008eac <_realloc_r+0x4c8>
 8008e68:	90800404 	addi	r2,r18,16
 8008e6c:	a8c00404 	addi	r3,r21,16
 8008e70:	003f1906 	br	8008ad8 <_realloc_r+0xf4>
 8008e74:	90ffff17 	ldw	r3,-4(r18)
 8008e78:	00bfff04 	movi	r2,-4
 8008e7c:	a825883a 	mov	r18,r21
 8008e80:	1884703a 	and	r2,r3,r2
 8008e84:	80a1883a 	add	r16,r16,r2
 8008e88:	003f2406 	br	8008b1c <_realloc_r+0x138>
 8008e8c:	a8800217 	ldw	r2,8(r21)
 8008e90:	b0800415 	stw	r2,16(r22)
 8008e94:	a8800317 	ldw	r2,12(r21)
 8008e98:	b0800515 	stw	r2,20(r22)
 8008e9c:	31000a26 	beq	r6,r4,8008ec8 <_realloc_r+0x4e4>
 8008ea0:	b0800604 	addi	r2,r22,24
 8008ea4:	ad400404 	addi	r21,r21,16
 8008ea8:	003fa906 	br	8008d50 <_realloc_r+0x36c>
 8008eac:	a9000417 	ldw	r4,16(r21)
 8008eb0:	90800604 	addi	r2,r18,24
 8008eb4:	a8c00604 	addi	r3,r21,24
 8008eb8:	91000415 	stw	r4,16(r18)
 8008ebc:	a9000517 	ldw	r4,20(r21)
 8008ec0:	91000515 	stw	r4,20(r18)
 8008ec4:	003f0406 	br	8008ad8 <_realloc_r+0xf4>
 8008ec8:	a8c00417 	ldw	r3,16(r21)
 8008ecc:	ad400604 	addi	r21,r21,24
 8008ed0:	b0800804 	addi	r2,r22,32
 8008ed4:	b0c00615 	stw	r3,24(r22)
 8008ed8:	a8ffff17 	ldw	r3,-4(r21)
 8008edc:	b0c00715 	stw	r3,28(r22)
 8008ee0:	003f9b06 	br	8008d50 <_realloc_r+0x36c>
 8008ee4:	9005883a 	mov	r2,r18
 8008ee8:	003fc706 	br	8008e08 <_realloc_r+0x424>
 8008eec:	a80b883a 	mov	r5,r21
 8008ef0:	9009883a 	mov	r4,r18
 8008ef4:	80077640 	call	8007764 <memmove>
 8008ef8:	003fc906 	br	8008e20 <_realloc_r+0x43c>
 8008efc:	a8800217 	ldw	r2,8(r21)
 8008f00:	b0800415 	stw	r2,16(r22)
 8008f04:	a8800317 	ldw	r2,12(r21)
 8008f08:	b0800515 	stw	r2,20(r22)
 8008f0c:	31000726 	beq	r6,r4,8008f2c <_realloc_r+0x548>
 8008f10:	b0800604 	addi	r2,r22,24
 8008f14:	ad400404 	addi	r21,r21,16
 8008f18:	003fbb06 	br	8008e08 <_realloc_r+0x424>
 8008f1c:	a009883a 	mov	r4,r20
 8008f20:	800e9ac0 	call	800e9ac <__malloc_unlock>
 8008f24:	0005883a 	mov	r2,zero
 8008f28:	003f0a06 	br	8008b54 <_realloc_r+0x170>
 8008f2c:	a8c00417 	ldw	r3,16(r21)
 8008f30:	ad400604 	addi	r21,r21,24
 8008f34:	b0800804 	addi	r2,r22,32
 8008f38:	b0c00615 	stw	r3,24(r22)
 8008f3c:	a8ffff17 	ldw	r3,-4(r21)
 8008f40:	b0c00715 	stw	r3,28(r22)
 8008f44:	003fb006 	br	8008e08 <_realloc_r+0x424>

08008f48 <__fpclassifyd>:
 8008f48:	00a00034 	movhi	r2,32768
 8008f4c:	10bfffc4 	addi	r2,r2,-1
 8008f50:	2884703a 	and	r2,r5,r2
 8008f54:	10000726 	beq	r2,zero,8008f74 <__fpclassifyd+0x2c>
 8008f58:	00fffc34 	movhi	r3,65520
 8008f5c:	019ff834 	movhi	r6,32736
 8008f60:	28c7883a 	add	r3,r5,r3
 8008f64:	31bfffc4 	addi	r6,r6,-1
 8008f68:	30c00536 	bltu	r6,r3,8008f80 <__fpclassifyd+0x38>
 8008f6c:	00800104 	movi	r2,4
 8008f70:	f800283a 	ret
 8008f74:	2000021e 	bne	r4,zero,8008f80 <__fpclassifyd+0x38>
 8008f78:	00800084 	movi	r2,2
 8008f7c:	f800283a 	ret
 8008f80:	00dffc34 	movhi	r3,32752
 8008f84:	019ff834 	movhi	r6,32736
 8008f88:	28cb883a 	add	r5,r5,r3
 8008f8c:	31bfffc4 	addi	r6,r6,-1
 8008f90:	317ff62e 	bgeu	r6,r5,8008f6c <__fpclassifyd+0x24>
 8008f94:	01400434 	movhi	r5,16
 8008f98:	297fffc4 	addi	r5,r5,-1
 8008f9c:	28800236 	bltu	r5,r2,8008fa8 <__fpclassifyd+0x60>
 8008fa0:	008000c4 	movi	r2,3
 8008fa4:	f800283a 	ret
 8008fa8:	10c00226 	beq	r2,r3,8008fb4 <__fpclassifyd+0x6c>
 8008fac:	0005883a 	mov	r2,zero
 8008fb0:	f800283a 	ret
 8008fb4:	2005003a 	cmpeq	r2,r4,zero
 8008fb8:	f800283a 	ret

08008fbc <_sbrk_r>:
 8008fbc:	defffd04 	addi	sp,sp,-12
 8008fc0:	dc000015 	stw	r16,0(sp)
 8008fc4:	04020074 	movhi	r16,2049
 8008fc8:	dc400115 	stw	r17,4(sp)
 8008fcc:	84116904 	addi	r16,r16,17828
 8008fd0:	2023883a 	mov	r17,r4
 8008fd4:	2809883a 	mov	r4,r5
 8008fd8:	dfc00215 	stw	ra,8(sp)
 8008fdc:	80000015 	stw	zero,0(r16)
 8008fe0:	800eb6c0 	call	800eb6c <sbrk>
 8008fe4:	00ffffc4 	movi	r3,-1
 8008fe8:	10c00526 	beq	r2,r3,8009000 <_sbrk_r+0x44>
 8008fec:	dfc00217 	ldw	ra,8(sp)
 8008ff0:	dc400117 	ldw	r17,4(sp)
 8008ff4:	dc000017 	ldw	r16,0(sp)
 8008ff8:	dec00304 	addi	sp,sp,12
 8008ffc:	f800283a 	ret
 8009000:	80c00017 	ldw	r3,0(r16)
 8009004:	183ff926 	beq	r3,zero,8008fec <_sbrk_r+0x30>
 8009008:	88c00015 	stw	r3,0(r17)
 800900c:	003ff706 	br	8008fec <_sbrk_r+0x30>

08009010 <__sread>:
 8009010:	defffe04 	addi	sp,sp,-8
 8009014:	dc000015 	stw	r16,0(sp)
 8009018:	2821883a 	mov	r16,r5
 800901c:	2940038f 	ldh	r5,14(r5)
 8009020:	dfc00115 	stw	ra,4(sp)
 8009024:	800ae040 	call	800ae04 <_read_r>
 8009028:	10000716 	blt	r2,zero,8009048 <__sread+0x38>
 800902c:	80c01417 	ldw	r3,80(r16)
 8009030:	1887883a 	add	r3,r3,r2
 8009034:	80c01415 	stw	r3,80(r16)
 8009038:	dfc00117 	ldw	ra,4(sp)
 800903c:	dc000017 	ldw	r16,0(sp)
 8009040:	dec00204 	addi	sp,sp,8
 8009044:	f800283a 	ret
 8009048:	80c0030b 	ldhu	r3,12(r16)
 800904c:	18fbffcc 	andi	r3,r3,61439
 8009050:	80c0030d 	sth	r3,12(r16)
 8009054:	dfc00117 	ldw	ra,4(sp)
 8009058:	dc000017 	ldw	r16,0(sp)
 800905c:	dec00204 	addi	sp,sp,8
 8009060:	f800283a 	ret

08009064 <__seofread>:
 8009064:	0005883a 	mov	r2,zero
 8009068:	f800283a 	ret

0800906c <__swrite>:
 800906c:	2880030b 	ldhu	r2,12(r5)
 8009070:	defffb04 	addi	sp,sp,-20
 8009074:	dcc00315 	stw	r19,12(sp)
 8009078:	dc800215 	stw	r18,8(sp)
 800907c:	dc400115 	stw	r17,4(sp)
 8009080:	dc000015 	stw	r16,0(sp)
 8009084:	dfc00415 	stw	ra,16(sp)
 8009088:	10c0400c 	andi	r3,r2,256
 800908c:	2821883a 	mov	r16,r5
 8009090:	2023883a 	mov	r17,r4
 8009094:	3025883a 	mov	r18,r6
 8009098:	3827883a 	mov	r19,r7
 800909c:	18000526 	beq	r3,zero,80090b4 <__swrite+0x48>
 80090a0:	2940038f 	ldh	r5,14(r5)
 80090a4:	01c00084 	movi	r7,2
 80090a8:	000d883a 	mov	r6,zero
 80090ac:	800ada40 	call	800ada4 <_lseek_r>
 80090b0:	8080030b 	ldhu	r2,12(r16)
 80090b4:	8140038f 	ldh	r5,14(r16)
 80090b8:	10bbffcc 	andi	r2,r2,61439
 80090bc:	980f883a 	mov	r7,r19
 80090c0:	900d883a 	mov	r6,r18
 80090c4:	8809883a 	mov	r4,r17
 80090c8:	8080030d 	sth	r2,12(r16)
 80090cc:	dfc00417 	ldw	ra,16(sp)
 80090d0:	dcc00317 	ldw	r19,12(sp)
 80090d4:	dc800217 	ldw	r18,8(sp)
 80090d8:	dc400117 	ldw	r17,4(sp)
 80090dc:	dc000017 	ldw	r16,0(sp)
 80090e0:	dec00504 	addi	sp,sp,20
 80090e4:	800a8701 	jmpi	800a870 <_write_r>

080090e8 <__sseek>:
 80090e8:	defffe04 	addi	sp,sp,-8
 80090ec:	dc000015 	stw	r16,0(sp)
 80090f0:	2821883a 	mov	r16,r5
 80090f4:	2940038f 	ldh	r5,14(r5)
 80090f8:	dfc00115 	stw	ra,4(sp)
 80090fc:	800ada40 	call	800ada4 <_lseek_r>
 8009100:	00ffffc4 	movi	r3,-1
 8009104:	10c00826 	beq	r2,r3,8009128 <__sseek+0x40>
 8009108:	80c0030b 	ldhu	r3,12(r16)
 800910c:	80801415 	stw	r2,80(r16)
 8009110:	18c40014 	ori	r3,r3,4096
 8009114:	80c0030d 	sth	r3,12(r16)
 8009118:	dfc00117 	ldw	ra,4(sp)
 800911c:	dc000017 	ldw	r16,0(sp)
 8009120:	dec00204 	addi	sp,sp,8
 8009124:	f800283a 	ret
 8009128:	80c0030b 	ldhu	r3,12(r16)
 800912c:	18fbffcc 	andi	r3,r3,61439
 8009130:	80c0030d 	sth	r3,12(r16)
 8009134:	dfc00117 	ldw	ra,4(sp)
 8009138:	dc000017 	ldw	r16,0(sp)
 800913c:	dec00204 	addi	sp,sp,8
 8009140:	f800283a 	ret

08009144 <__sclose>:
 8009144:	2940038f 	ldh	r5,14(r5)
 8009148:	800a8d01 	jmpi	800a8d0 <_close_r>

0800914c <strcmp>:
 800914c:	2144b03a 	or	r2,r4,r5
 8009150:	108000cc 	andi	r2,r2,3
 8009154:	1000171e 	bne	r2,zero,80091b4 <strcmp+0x68>
 8009158:	20800017 	ldw	r2,0(r4)
 800915c:	28c00017 	ldw	r3,0(r5)
 8009160:	10c0141e 	bne	r2,r3,80091b4 <strcmp+0x68>
 8009164:	027fbff4 	movhi	r9,65279
 8009168:	4a7fbfc4 	addi	r9,r9,-257
 800916c:	0086303a 	nor	r3,zero,r2
 8009170:	02202074 	movhi	r8,32897
 8009174:	1245883a 	add	r2,r2,r9
 8009178:	42202004 	addi	r8,r8,-32640
 800917c:	10c4703a 	and	r2,r2,r3
 8009180:	1204703a 	and	r2,r2,r8
 8009184:	10000226 	beq	r2,zero,8009190 <strcmp+0x44>
 8009188:	00002306 	br	8009218 <strcmp+0xcc>
 800918c:	1000221e 	bne	r2,zero,8009218 <strcmp+0xcc>
 8009190:	21000104 	addi	r4,r4,4
 8009194:	20c00017 	ldw	r3,0(r4)
 8009198:	29400104 	addi	r5,r5,4
 800919c:	29800017 	ldw	r6,0(r5)
 80091a0:	1a4f883a 	add	r7,r3,r9
 80091a4:	00c4303a 	nor	r2,zero,r3
 80091a8:	3884703a 	and	r2,r7,r2
 80091ac:	1204703a 	and	r2,r2,r8
 80091b0:	19bff626 	beq	r3,r6,800918c <strcmp+0x40>
 80091b4:	20800003 	ldbu	r2,0(r4)
 80091b8:	10c03fcc 	andi	r3,r2,255
 80091bc:	18c0201c 	xori	r3,r3,128
 80091c0:	18ffe004 	addi	r3,r3,-128
 80091c4:	18000c26 	beq	r3,zero,80091f8 <strcmp+0xac>
 80091c8:	29800007 	ldb	r6,0(r5)
 80091cc:	19800326 	beq	r3,r6,80091dc <strcmp+0x90>
 80091d0:	00001306 	br	8009220 <strcmp+0xd4>
 80091d4:	29800007 	ldb	r6,0(r5)
 80091d8:	11800b1e 	bne	r2,r6,8009208 <strcmp+0xbc>
 80091dc:	21000044 	addi	r4,r4,1
 80091e0:	20c00003 	ldbu	r3,0(r4)
 80091e4:	29400044 	addi	r5,r5,1
 80091e8:	18803fcc 	andi	r2,r3,255
 80091ec:	1080201c 	xori	r2,r2,128
 80091f0:	10bfe004 	addi	r2,r2,-128
 80091f4:	103ff71e 	bne	r2,zero,80091d4 <strcmp+0x88>
 80091f8:	0007883a 	mov	r3,zero
 80091fc:	28800003 	ldbu	r2,0(r5)
 8009200:	1885c83a 	sub	r2,r3,r2
 8009204:	f800283a 	ret
 8009208:	28800003 	ldbu	r2,0(r5)
 800920c:	18c03fcc 	andi	r3,r3,255
 8009210:	1885c83a 	sub	r2,r3,r2
 8009214:	f800283a 	ret
 8009218:	0005883a 	mov	r2,zero
 800921c:	f800283a 	ret
 8009220:	10c03fcc 	andi	r3,r2,255
 8009224:	003ff506 	br	80091fc <strcmp+0xb0>

08009228 <__sprint_r.part.0>:
 8009228:	28801917 	ldw	r2,100(r5)
 800922c:	defff604 	addi	sp,sp,-40
 8009230:	dd400515 	stw	r21,20(sp)
 8009234:	dfc00915 	stw	ra,36(sp)
 8009238:	df000815 	stw	fp,32(sp)
 800923c:	ddc00715 	stw	r23,28(sp)
 8009240:	dd800615 	stw	r22,24(sp)
 8009244:	dd000415 	stw	r20,16(sp)
 8009248:	dcc00315 	stw	r19,12(sp)
 800924c:	dc800215 	stw	r18,8(sp)
 8009250:	dc400115 	stw	r17,4(sp)
 8009254:	dc000015 	stw	r16,0(sp)
 8009258:	1088000c 	andi	r2,r2,8192
 800925c:	302b883a 	mov	r21,r6
 8009260:	10002e26 	beq	r2,zero,800931c <__sprint_r.part.0+0xf4>
 8009264:	30800217 	ldw	r2,8(r6)
 8009268:	35800017 	ldw	r22,0(r6)
 800926c:	10002926 	beq	r2,zero,8009314 <__sprint_r.part.0+0xec>
 8009270:	2827883a 	mov	r19,r5
 8009274:	2029883a 	mov	r20,r4
 8009278:	b5c00104 	addi	r23,r22,4
 800927c:	04bfffc4 	movi	r18,-1
 8009280:	bc400017 	ldw	r17,0(r23)
 8009284:	b4000017 	ldw	r16,0(r22)
 8009288:	0039883a 	mov	fp,zero
 800928c:	8822d0ba 	srli	r17,r17,2
 8009290:	8800031e 	bne	r17,zero,80092a0 <__sprint_r.part.0+0x78>
 8009294:	00001806 	br	80092f8 <__sprint_r.part.0+0xd0>
 8009298:	84000104 	addi	r16,r16,4
 800929c:	8f001526 	beq	r17,fp,80092f4 <__sprint_r.part.0+0xcc>
 80092a0:	81400017 	ldw	r5,0(r16)
 80092a4:	980d883a 	mov	r6,r19
 80092a8:	a009883a 	mov	r4,r20
 80092ac:	800ac500 	call	800ac50 <_fputwc_r>
 80092b0:	e7000044 	addi	fp,fp,1
 80092b4:	14bff81e 	bne	r2,r18,8009298 <__sprint_r.part.0+0x70>
 80092b8:	9005883a 	mov	r2,r18
 80092bc:	a8000215 	stw	zero,8(r21)
 80092c0:	a8000115 	stw	zero,4(r21)
 80092c4:	dfc00917 	ldw	ra,36(sp)
 80092c8:	df000817 	ldw	fp,32(sp)
 80092cc:	ddc00717 	ldw	r23,28(sp)
 80092d0:	dd800617 	ldw	r22,24(sp)
 80092d4:	dd400517 	ldw	r21,20(sp)
 80092d8:	dd000417 	ldw	r20,16(sp)
 80092dc:	dcc00317 	ldw	r19,12(sp)
 80092e0:	dc800217 	ldw	r18,8(sp)
 80092e4:	dc400117 	ldw	r17,4(sp)
 80092e8:	dc000017 	ldw	r16,0(sp)
 80092ec:	dec00a04 	addi	sp,sp,40
 80092f0:	f800283a 	ret
 80092f4:	a8800217 	ldw	r2,8(r21)
 80092f8:	8c63883a 	add	r17,r17,r17
 80092fc:	8c63883a 	add	r17,r17,r17
 8009300:	1445c83a 	sub	r2,r2,r17
 8009304:	a8800215 	stw	r2,8(r21)
 8009308:	b5800204 	addi	r22,r22,8
 800930c:	bdc00204 	addi	r23,r23,8
 8009310:	103fdb1e 	bne	r2,zero,8009280 <__sprint_r.part.0+0x58>
 8009314:	0005883a 	mov	r2,zero
 8009318:	003fe806 	br	80092bc <__sprint_r.part.0+0x94>
 800931c:	80064500 	call	8006450 <__sfvwrite_r>
 8009320:	003fe606 	br	80092bc <__sprint_r.part.0+0x94>

08009324 <__sprint_r>:
 8009324:	30c00217 	ldw	r3,8(r6)
 8009328:	18000126 	beq	r3,zero,8009330 <__sprint_r+0xc>
 800932c:	80092281 	jmpi	8009228 <__sprint_r.part.0>
 8009330:	30000115 	stw	zero,4(r6)
 8009334:	0005883a 	mov	r2,zero
 8009338:	f800283a 	ret

0800933c <___vfiprintf_internal_r>:
 800933c:	deffc904 	addi	sp,sp,-220
 8009340:	df003515 	stw	fp,212(sp)
 8009344:	dd003115 	stw	r20,196(sp)
 8009348:	dfc03615 	stw	ra,216(sp)
 800934c:	ddc03415 	stw	r23,208(sp)
 8009350:	dd803315 	stw	r22,204(sp)
 8009354:	dd403215 	stw	r21,200(sp)
 8009358:	dcc03015 	stw	r19,192(sp)
 800935c:	dc802f15 	stw	r18,188(sp)
 8009360:	dc402e15 	stw	r17,184(sp)
 8009364:	dc002d15 	stw	r16,180(sp)
 8009368:	d9002015 	stw	r4,128(sp)
 800936c:	d9c02215 	stw	r7,136(sp)
 8009370:	2829883a 	mov	r20,r5
 8009374:	3039883a 	mov	fp,r6
 8009378:	20000226 	beq	r4,zero,8009384 <___vfiprintf_internal_r+0x48>
 800937c:	20800e17 	ldw	r2,56(r4)
 8009380:	1000cf26 	beq	r2,zero,80096c0 <___vfiprintf_internal_r+0x384>
 8009384:	a080030b 	ldhu	r2,12(r20)
 8009388:	10c8000c 	andi	r3,r2,8192
 800938c:	1800061e 	bne	r3,zero,80093a8 <___vfiprintf_internal_r+0x6c>
 8009390:	a1001917 	ldw	r4,100(r20)
 8009394:	00f7ffc4 	movi	r3,-8193
 8009398:	10880014 	ori	r2,r2,8192
 800939c:	20c6703a 	and	r3,r4,r3
 80093a0:	a080030d 	sth	r2,12(r20)
 80093a4:	a0c01915 	stw	r3,100(r20)
 80093a8:	10c0020c 	andi	r3,r2,8
 80093ac:	1800a926 	beq	r3,zero,8009654 <___vfiprintf_internal_r+0x318>
 80093b0:	a0c00417 	ldw	r3,16(r20)
 80093b4:	1800a726 	beq	r3,zero,8009654 <___vfiprintf_internal_r+0x318>
 80093b8:	1080068c 	andi	r2,r2,26
 80093bc:	00c00284 	movi	r3,10
 80093c0:	10c0ac26 	beq	r2,r3,8009674 <___vfiprintf_internal_r+0x338>
 80093c4:	da801a04 	addi	r10,sp,104
 80093c8:	da801e15 	stw	r10,120(sp)
 80093cc:	d8801e17 	ldw	r2,120(sp)
 80093d0:	da8019c4 	addi	r10,sp,103
 80093d4:	05820074 	movhi	r22,2049
 80093d8:	05c20074 	movhi	r23,2049
 80093dc:	da801f15 	stw	r10,124(sp)
 80093e0:	1295c83a 	sub	r10,r2,r10
 80093e4:	b583d104 	addi	r22,r22,3908
 80093e8:	bdc3cd04 	addi	r23,r23,3892
 80093ec:	dec01a15 	stw	sp,104(sp)
 80093f0:	d8001c15 	stw	zero,112(sp)
 80093f4:	d8001b15 	stw	zero,108(sp)
 80093f8:	d8002615 	stw	zero,152(sp)
 80093fc:	d8002315 	stw	zero,140(sp)
 8009400:	da802715 	stw	r10,156(sp)
 8009404:	d811883a 	mov	r8,sp
 8009408:	dd002115 	stw	r20,132(sp)
 800940c:	e021883a 	mov	r16,fp
 8009410:	80800007 	ldb	r2,0(r16)
 8009414:	1003ea26 	beq	r2,zero,800a3c0 <___vfiprintf_internal_r+0x1084>
 8009418:	00c00944 	movi	r3,37
 800941c:	8025883a 	mov	r18,r16
 8009420:	10c0021e 	bne	r2,r3,800942c <___vfiprintf_internal_r+0xf0>
 8009424:	00001606 	br	8009480 <___vfiprintf_internal_r+0x144>
 8009428:	10c00326 	beq	r2,r3,8009438 <___vfiprintf_internal_r+0xfc>
 800942c:	94800044 	addi	r18,r18,1
 8009430:	90800007 	ldb	r2,0(r18)
 8009434:	103ffc1e 	bne	r2,zero,8009428 <___vfiprintf_internal_r+0xec>
 8009438:	9423c83a 	sub	r17,r18,r16
 800943c:	88001026 	beq	r17,zero,8009480 <___vfiprintf_internal_r+0x144>
 8009440:	d8c01c17 	ldw	r3,112(sp)
 8009444:	d8801b17 	ldw	r2,108(sp)
 8009448:	44000015 	stw	r16,0(r8)
 800944c:	88c7883a 	add	r3,r17,r3
 8009450:	10800044 	addi	r2,r2,1
 8009454:	44400115 	stw	r17,4(r8)
 8009458:	d8c01c15 	stw	r3,112(sp)
 800945c:	d8801b15 	stw	r2,108(sp)
 8009460:	010001c4 	movi	r4,7
 8009464:	2080760e 	bge	r4,r2,8009640 <___vfiprintf_internal_r+0x304>
 8009468:	1803821e 	bne	r3,zero,800a274 <___vfiprintf_internal_r+0xf38>
 800946c:	da802317 	ldw	r10,140(sp)
 8009470:	d8001b15 	stw	zero,108(sp)
 8009474:	d811883a 	mov	r8,sp
 8009478:	5455883a 	add	r10,r10,r17
 800947c:	da802315 	stw	r10,140(sp)
 8009480:	90800007 	ldb	r2,0(r18)
 8009484:	10044626 	beq	r2,zero,800a5a0 <___vfiprintf_internal_r+0x1264>
 8009488:	90c00047 	ldb	r3,1(r18)
 800948c:	94000044 	addi	r16,r18,1
 8009490:	d8001d85 	stb	zero,118(sp)
 8009494:	0009883a 	mov	r4,zero
 8009498:	000f883a 	mov	r7,zero
 800949c:	027fffc4 	movi	r9,-1
 80094a0:	0023883a 	mov	r17,zero
 80094a4:	0029883a 	mov	r20,zero
 80094a8:	01401604 	movi	r5,88
 80094ac:	01800244 	movi	r6,9
 80094b0:	03400a84 	movi	r13,42
 80094b4:	03001b04 	movi	r12,108
 80094b8:	84000044 	addi	r16,r16,1
 80094bc:	18bff804 	addi	r2,r3,-32
 80094c0:	28827336 	bltu	r5,r2,8009e90 <___vfiprintf_internal_r+0xb54>
 80094c4:	100490ba 	slli	r2,r2,2
 80094c8:	02820074 	movhi	r10,2049
 80094cc:	52a53704 	addi	r10,r10,-27428
 80094d0:	1285883a 	add	r2,r2,r10
 80094d4:	10800017 	ldw	r2,0(r2)
 80094d8:	1000683a 	jmp	r2
 80094dc:	08009bc4 	addi	zero,at,623
 80094e0:	08009e90 	cmplti	zero,at,634
 80094e4:	08009e90 	cmplti	zero,at,634
 80094e8:	08009be4 	muli	zero,at,623
 80094ec:	08009e90 	cmplti	zero,at,634
 80094f0:	08009e90 	cmplti	zero,at,634
 80094f4:	08009e90 	cmplti	zero,at,634
 80094f8:	08009e90 	cmplti	zero,at,634
 80094fc:	08009e90 	cmplti	zero,at,634
 8009500:	08009e90 	cmplti	zero,at,634
 8009504:	08009dcc 	andi	zero,at,631
 8009508:	08009de8 	cmpgeui	zero,at,631
 800950c:	08009e90 	cmplti	zero,at,634
 8009510:	080096d0 	cmplti	zero,at,603
 8009514:	08009df8 	rdprs	zero,at,631
 8009518:	08009e90 	cmplti	zero,at,634
 800951c:	08009bf0 	cmpltui	zero,at,623
 8009520:	08009bfc 	xorhi	zero,at,623
 8009524:	08009bfc 	xorhi	zero,at,623
 8009528:	08009bfc 	xorhi	zero,at,623
 800952c:	08009bfc 	xorhi	zero,at,623
 8009530:	08009bfc 	xorhi	zero,at,623
 8009534:	08009bfc 	xorhi	zero,at,623
 8009538:	08009bfc 	xorhi	zero,at,623
 800953c:	08009bfc 	xorhi	zero,at,623
 8009540:	08009bfc 	xorhi	zero,at,623
 8009544:	08009e90 	cmplti	zero,at,634
 8009548:	08009e90 	cmplti	zero,at,634
 800954c:	08009e90 	cmplti	zero,at,634
 8009550:	08009e90 	cmplti	zero,at,634
 8009554:	08009e90 	cmplti	zero,at,634
 8009558:	08009e90 	cmplti	zero,at,634
 800955c:	08009e90 	cmplti	zero,at,634
 8009560:	08009e90 	cmplti	zero,at,634
 8009564:	08009e90 	cmplti	zero,at,634
 8009568:	08009e90 	cmplti	zero,at,634
 800956c:	08009c28 	cmpgeui	zero,at,624
 8009570:	08009e90 	cmplti	zero,at,634
 8009574:	08009e90 	cmplti	zero,at,634
 8009578:	08009e90 	cmplti	zero,at,634
 800957c:	08009e90 	cmplti	zero,at,634
 8009580:	08009e90 	cmplti	zero,at,634
 8009584:	08009e90 	cmplti	zero,at,634
 8009588:	08009e90 	cmplti	zero,at,634
 800958c:	08009e90 	cmplti	zero,at,634
 8009590:	08009e90 	cmplti	zero,at,634
 8009594:	08009e90 	cmplti	zero,at,634
 8009598:	08009c60 	cmpeqi	zero,at,625
 800959c:	08009e90 	cmplti	zero,at,634
 80095a0:	08009e90 	cmplti	zero,at,634
 80095a4:	08009e90 	cmplti	zero,at,634
 80095a8:	08009e90 	cmplti	zero,at,634
 80095ac:	08009e90 	cmplti	zero,at,634
 80095b0:	08009cb8 	rdprs	zero,at,626
 80095b4:	08009e90 	cmplti	zero,at,634
 80095b8:	08009e90 	cmplti	zero,at,634
 80095bc:	08009d28 	cmpgeui	zero,at,628
 80095c0:	08009e90 	cmplti	zero,at,634
 80095c4:	08009e90 	cmplti	zero,at,634
 80095c8:	08009e90 	cmplti	zero,at,634
 80095cc:	08009e90 	cmplti	zero,at,634
 80095d0:	08009e90 	cmplti	zero,at,634
 80095d4:	08009e90 	cmplti	zero,at,634
 80095d8:	08009e90 	cmplti	zero,at,634
 80095dc:	08009e90 	cmplti	zero,at,634
 80095e0:	08009e90 	cmplti	zero,at,634
 80095e4:	08009e90 	cmplti	zero,at,634
 80095e8:	08009ad4 	ori	zero,at,619
 80095ec:	08009b00 	call	8009b0 <__alt_mem_new_sdram_controller_0-0x77ff650>
 80095f0:	08009e90 	cmplti	zero,at,634
 80095f4:	08009e90 	cmplti	zero,at,634
 80095f8:	08009e90 	cmplti	zero,at,634
 80095fc:	08009e38 	rdprs	zero,at,632
 8009600:	08009b00 	call	8009b0 <__alt_mem_new_sdram_controller_0-0x77ff650>
 8009604:	08009e90 	cmplti	zero,at,634
 8009608:	08009e90 	cmplti	zero,at,634
 800960c:	08009994 	ori	zero,at,614
 8009610:	08009e90 	cmplti	zero,at,634
 8009614:	080099a4 	muli	zero,at,614
 8009618:	080099e0 	cmpeqi	zero,at,615
 800961c:	080096dc 	xori	zero,at,603
 8009620:	08009988 	cmpgei	zero,at,614
 8009624:	08009e90 	cmplti	zero,at,634
 8009628:	08009d64 	muli	zero,at,629
 800962c:	08009e90 	cmplti	zero,at,634
 8009630:	08009dbc 	xorhi	zero,at,630
 8009634:	08009e90 	cmplti	zero,at,634
 8009638:	08009e90 	cmplti	zero,at,634
 800963c:	08009a80 	call	8009a8 <__alt_mem_new_sdram_controller_0-0x77ff658>
 8009640:	42000204 	addi	r8,r8,8
 8009644:	da802317 	ldw	r10,140(sp)
 8009648:	5455883a 	add	r10,r10,r17
 800964c:	da802315 	stw	r10,140(sp)
 8009650:	003f8b06 	br	8009480 <___vfiprintf_internal_r+0x144>
 8009654:	d9002017 	ldw	r4,128(sp)
 8009658:	a00b883a 	mov	r5,r20
 800965c:	8003ff80 	call	8003ff8 <__swsetup_r>
 8009660:	1003b11e 	bne	r2,zero,800a528 <___vfiprintf_internal_r+0x11ec>
 8009664:	a080030b 	ldhu	r2,12(r20)
 8009668:	00c00284 	movi	r3,10
 800966c:	1080068c 	andi	r2,r2,26
 8009670:	10ff541e 	bne	r2,r3,80093c4 <___vfiprintf_internal_r+0x88>
 8009674:	a080038f 	ldh	r2,14(r20)
 8009678:	103f5216 	blt	r2,zero,80093c4 <___vfiprintf_internal_r+0x88>
 800967c:	d9c02217 	ldw	r7,136(sp)
 8009680:	d9002017 	ldw	r4,128(sp)
 8009684:	e00d883a 	mov	r6,fp
 8009688:	a00b883a 	mov	r5,r20
 800968c:	800a7b40 	call	800a7b4 <__sbprintf>
 8009690:	dfc03617 	ldw	ra,216(sp)
 8009694:	df003517 	ldw	fp,212(sp)
 8009698:	ddc03417 	ldw	r23,208(sp)
 800969c:	dd803317 	ldw	r22,204(sp)
 80096a0:	dd403217 	ldw	r21,200(sp)
 80096a4:	dd003117 	ldw	r20,196(sp)
 80096a8:	dcc03017 	ldw	r19,192(sp)
 80096ac:	dc802f17 	ldw	r18,188(sp)
 80096b0:	dc402e17 	ldw	r17,184(sp)
 80096b4:	dc002d17 	ldw	r16,180(sp)
 80096b8:	dec03704 	addi	sp,sp,220
 80096bc:	f800283a 	ret
 80096c0:	8005fcc0 	call	8005fcc <__sinit>
 80096c4:	003f2f06 	br	8009384 <___vfiprintf_internal_r+0x48>
 80096c8:	0463c83a 	sub	r17,zero,r17
 80096cc:	d8802215 	stw	r2,136(sp)
 80096d0:	a5000114 	ori	r20,r20,4
 80096d4:	80c00007 	ldb	r3,0(r16)
 80096d8:	003f7706 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 80096dc:	00800c04 	movi	r2,48
 80096e0:	da802217 	ldw	r10,136(sp)
 80096e4:	d8801d05 	stb	r2,116(sp)
 80096e8:	00801e04 	movi	r2,120
 80096ec:	d8801d45 	stb	r2,117(sp)
 80096f0:	d8001d85 	stb	zero,118(sp)
 80096f4:	50c00104 	addi	r3,r10,4
 80096f8:	54800017 	ldw	r18,0(r10)
 80096fc:	0027883a 	mov	r19,zero
 8009700:	a0800094 	ori	r2,r20,2
 8009704:	48030b16 	blt	r9,zero,800a334 <___vfiprintf_internal_r+0xff8>
 8009708:	00bfdfc4 	movi	r2,-129
 800970c:	a096703a 	and	r11,r20,r2
 8009710:	d8c02215 	stw	r3,136(sp)
 8009714:	5d000094 	ori	r20,r11,2
 8009718:	90032b1e 	bne	r18,zero,800a3c8 <___vfiprintf_internal_r+0x108c>
 800971c:	00820074 	movhi	r2,2049
 8009720:	10836c04 	addi	r2,r2,3504
 8009724:	d8802615 	stw	r2,152(sp)
 8009728:	0039883a 	mov	fp,zero
 800972c:	48017b1e 	bne	r9,zero,8009d1c <___vfiprintf_internal_r+0x9e0>
 8009730:	0013883a 	mov	r9,zero
 8009734:	0027883a 	mov	r19,zero
 8009738:	dd401a04 	addi	r21,sp,104
 800973c:	4825883a 	mov	r18,r9
 8009740:	4cc0010e 	bge	r9,r19,8009748 <___vfiprintf_internal_r+0x40c>
 8009744:	9825883a 	mov	r18,r19
 8009748:	e7003fcc 	andi	fp,fp,255
 800974c:	e700201c 	xori	fp,fp,128
 8009750:	e73fe004 	addi	fp,fp,-128
 8009754:	e0000126 	beq	fp,zero,800975c <___vfiprintf_internal_r+0x420>
 8009758:	94800044 	addi	r18,r18,1
 800975c:	a380008c 	andi	r14,r20,2
 8009760:	70000126 	beq	r14,zero,8009768 <___vfiprintf_internal_r+0x42c>
 8009764:	94800084 	addi	r18,r18,2
 8009768:	a700210c 	andi	fp,r20,132
 800976c:	e001df1e 	bne	fp,zero,8009eec <___vfiprintf_internal_r+0xbb0>
 8009770:	8c87c83a 	sub	r3,r17,r18
 8009774:	00c1dd0e 	bge	zero,r3,8009eec <___vfiprintf_internal_r+0xbb0>
 8009778:	01c00404 	movi	r7,16
 800977c:	d8801c17 	ldw	r2,112(sp)
 8009780:	38c3ad0e 	bge	r7,r3,800a638 <___vfiprintf_internal_r+0x12fc>
 8009784:	02820074 	movhi	r10,2049
 8009788:	5283d104 	addi	r10,r10,3908
 800978c:	dc002915 	stw	r16,164(sp)
 8009790:	d9801b17 	ldw	r6,108(sp)
 8009794:	da802415 	stw	r10,144(sp)
 8009798:	03c001c4 	movi	r15,7
 800979c:	da402515 	stw	r9,148(sp)
 80097a0:	db802815 	stw	r14,160(sp)
 80097a4:	1821883a 	mov	r16,r3
 80097a8:	00000506 	br	80097c0 <___vfiprintf_internal_r+0x484>
 80097ac:	31400084 	addi	r5,r6,2
 80097b0:	42000204 	addi	r8,r8,8
 80097b4:	200d883a 	mov	r6,r4
 80097b8:	843ffc04 	addi	r16,r16,-16
 80097bc:	3c000d0e 	bge	r7,r16,80097f4 <___vfiprintf_internal_r+0x4b8>
 80097c0:	10800404 	addi	r2,r2,16
 80097c4:	31000044 	addi	r4,r6,1
 80097c8:	45800015 	stw	r22,0(r8)
 80097cc:	41c00115 	stw	r7,4(r8)
 80097d0:	d8801c15 	stw	r2,112(sp)
 80097d4:	d9001b15 	stw	r4,108(sp)
 80097d8:	793ff40e 	bge	r15,r4,80097ac <___vfiprintf_internal_r+0x470>
 80097dc:	1001b51e 	bne	r2,zero,8009eb4 <___vfiprintf_internal_r+0xb78>
 80097e0:	843ffc04 	addi	r16,r16,-16
 80097e4:	000d883a 	mov	r6,zero
 80097e8:	01400044 	movi	r5,1
 80097ec:	d811883a 	mov	r8,sp
 80097f0:	3c3ff316 	blt	r7,r16,80097c0 <___vfiprintf_internal_r+0x484>
 80097f4:	8007883a 	mov	r3,r16
 80097f8:	da402517 	ldw	r9,148(sp)
 80097fc:	db802817 	ldw	r14,160(sp)
 8009800:	dc002917 	ldw	r16,164(sp)
 8009804:	da802417 	ldw	r10,144(sp)
 8009808:	1885883a 	add	r2,r3,r2
 800980c:	40c00115 	stw	r3,4(r8)
 8009810:	42800015 	stw	r10,0(r8)
 8009814:	d8801c15 	stw	r2,112(sp)
 8009818:	d9401b15 	stw	r5,108(sp)
 800981c:	00c001c4 	movi	r3,7
 8009820:	19426016 	blt	r3,r5,800a1a4 <___vfiprintf_internal_r+0xe68>
 8009824:	d8c01d87 	ldb	r3,118(sp)
 8009828:	42000204 	addi	r8,r8,8
 800982c:	29000044 	addi	r4,r5,1
 8009830:	1801b31e 	bne	r3,zero,8009f00 <___vfiprintf_internal_r+0xbc4>
 8009834:	7001c026 	beq	r14,zero,8009f38 <___vfiprintf_internal_r+0xbfc>
 8009838:	d8c01d04 	addi	r3,sp,116
 800983c:	10800084 	addi	r2,r2,2
 8009840:	40c00015 	stw	r3,0(r8)
 8009844:	00c00084 	movi	r3,2
 8009848:	40c00115 	stw	r3,4(r8)
 800984c:	d8801c15 	stw	r2,112(sp)
 8009850:	d9001b15 	stw	r4,108(sp)
 8009854:	00c001c4 	movi	r3,7
 8009858:	1902650e 	bge	r3,r4,800a1f0 <___vfiprintf_internal_r+0xeb4>
 800985c:	10029a1e 	bne	r2,zero,800a2c8 <___vfiprintf_internal_r+0xf8c>
 8009860:	00c02004 	movi	r3,128
 8009864:	01000044 	movi	r4,1
 8009868:	000b883a 	mov	r5,zero
 800986c:	d811883a 	mov	r8,sp
 8009870:	e0c1b31e 	bne	fp,r3,8009f40 <___vfiprintf_internal_r+0xc04>
 8009874:	8cb9c83a 	sub	fp,r17,r18
 8009878:	0701b10e 	bge	zero,fp,8009f40 <___vfiprintf_internal_r+0xc04>
 800987c:	01c00404 	movi	r7,16
 8009880:	3f03890e 	bge	r7,fp,800a6a8 <___vfiprintf_internal_r+0x136c>
 8009884:	00c20074 	movhi	r3,2049
 8009888:	18c3cd04 	addi	r3,r3,3892
 800988c:	d8c02415 	stw	r3,144(sp)
 8009890:	8007883a 	mov	r3,r16
 8009894:	034001c4 	movi	r13,7
 8009898:	e021883a 	mov	r16,fp
 800989c:	da402515 	stw	r9,148(sp)
 80098a0:	1839883a 	mov	fp,r3
 80098a4:	00000506 	br	80098bc <___vfiprintf_internal_r+0x580>
 80098a8:	29800084 	addi	r6,r5,2
 80098ac:	42000204 	addi	r8,r8,8
 80098b0:	180b883a 	mov	r5,r3
 80098b4:	843ffc04 	addi	r16,r16,-16
 80098b8:	3c000d0e 	bge	r7,r16,80098f0 <___vfiprintf_internal_r+0x5b4>
 80098bc:	10800404 	addi	r2,r2,16
 80098c0:	28c00044 	addi	r3,r5,1
 80098c4:	45c00015 	stw	r23,0(r8)
 80098c8:	41c00115 	stw	r7,4(r8)
 80098cc:	d8801c15 	stw	r2,112(sp)
 80098d0:	d8c01b15 	stw	r3,108(sp)
 80098d4:	68fff40e 	bge	r13,r3,80098a8 <___vfiprintf_internal_r+0x56c>
 80098d8:	1002241e 	bne	r2,zero,800a16c <___vfiprintf_internal_r+0xe30>
 80098dc:	843ffc04 	addi	r16,r16,-16
 80098e0:	01800044 	movi	r6,1
 80098e4:	000b883a 	mov	r5,zero
 80098e8:	d811883a 	mov	r8,sp
 80098ec:	3c3ff316 	blt	r7,r16,80098bc <___vfiprintf_internal_r+0x580>
 80098f0:	da402517 	ldw	r9,148(sp)
 80098f4:	e007883a 	mov	r3,fp
 80098f8:	8039883a 	mov	fp,r16
 80098fc:	1821883a 	mov	r16,r3
 8009900:	d8c02417 	ldw	r3,144(sp)
 8009904:	1705883a 	add	r2,r2,fp
 8009908:	47000115 	stw	fp,4(r8)
 800990c:	40c00015 	stw	r3,0(r8)
 8009910:	d8801c15 	stw	r2,112(sp)
 8009914:	d9801b15 	stw	r6,108(sp)
 8009918:	00c001c4 	movi	r3,7
 800991c:	19827616 	blt	r3,r6,800a2f8 <___vfiprintf_internal_r+0xfbc>
 8009920:	4cf9c83a 	sub	fp,r9,r19
 8009924:	42000204 	addi	r8,r8,8
 8009928:	31000044 	addi	r4,r6,1
 800992c:	300b883a 	mov	r5,r6
 8009930:	07018516 	blt	zero,fp,8009f48 <___vfiprintf_internal_r+0xc0c>
 8009934:	9885883a 	add	r2,r19,r2
 8009938:	45400015 	stw	r21,0(r8)
 800993c:	44c00115 	stw	r19,4(r8)
 8009940:	d8801c15 	stw	r2,112(sp)
 8009944:	d9001b15 	stw	r4,108(sp)
 8009948:	00c001c4 	movi	r3,7
 800994c:	1901dd0e 	bge	r3,r4,800a0c4 <___vfiprintf_internal_r+0xd88>
 8009950:	1002401e 	bne	r2,zero,800a254 <___vfiprintf_internal_r+0xf18>
 8009954:	d8001b15 	stw	zero,108(sp)
 8009958:	a2c0010c 	andi	r11,r20,4
 800995c:	58000226 	beq	r11,zero,8009968 <___vfiprintf_internal_r+0x62c>
 8009960:	8ca7c83a 	sub	r19,r17,r18
 8009964:	04c2f216 	blt	zero,r19,800a530 <___vfiprintf_internal_r+0x11f4>
 8009968:	8c80010e 	bge	r17,r18,8009970 <___vfiprintf_internal_r+0x634>
 800996c:	9023883a 	mov	r17,r18
 8009970:	da802317 	ldw	r10,140(sp)
 8009974:	5455883a 	add	r10,r10,r17
 8009978:	da802315 	stw	r10,140(sp)
 800997c:	d8001b15 	stw	zero,108(sp)
 8009980:	d811883a 	mov	r8,sp
 8009984:	003ea206 	br	8009410 <___vfiprintf_internal_r+0xd4>
 8009988:	a5000814 	ori	r20,r20,32
 800998c:	80c00007 	ldb	r3,0(r16)
 8009990:	003ec906 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009994:	80c00007 	ldb	r3,0(r16)
 8009998:	1b030926 	beq	r3,r12,800a5c0 <___vfiprintf_internal_r+0x1284>
 800999c:	a5000414 	ori	r20,r20,16
 80099a0:	003ec506 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 80099a4:	21003fcc 	andi	r4,r4,255
 80099a8:	20035e1e 	bne	r4,zero,800a724 <___vfiprintf_internal_r+0x13e8>
 80099ac:	a080080c 	andi	r2,r20,32
 80099b0:	1002a526 	beq	r2,zero,800a448 <___vfiprintf_internal_r+0x110c>
 80099b4:	da802217 	ldw	r10,136(sp)
 80099b8:	50800017 	ldw	r2,0(r10)
 80099bc:	da802317 	ldw	r10,140(sp)
 80099c0:	5007d7fa 	srai	r3,r10,31
 80099c4:	da802217 	ldw	r10,136(sp)
 80099c8:	10c00115 	stw	r3,4(r2)
 80099cc:	52800104 	addi	r10,r10,4
 80099d0:	da802215 	stw	r10,136(sp)
 80099d4:	da802317 	ldw	r10,140(sp)
 80099d8:	12800015 	stw	r10,0(r2)
 80099dc:	003e8c06 	br	8009410 <___vfiprintf_internal_r+0xd4>
 80099e0:	21003fcc 	andi	r4,r4,255
 80099e4:	2003511e 	bne	r4,zero,800a72c <___vfiprintf_internal_r+0x13f0>
 80099e8:	a080080c 	andi	r2,r20,32
 80099ec:	1000a126 	beq	r2,zero,8009c74 <___vfiprintf_internal_r+0x938>
 80099f0:	da802217 	ldw	r10,136(sp)
 80099f4:	d8001d85 	stb	zero,118(sp)
 80099f8:	50800204 	addi	r2,r10,8
 80099fc:	54800017 	ldw	r18,0(r10)
 8009a00:	54c00117 	ldw	r19,4(r10)
 8009a04:	4802b416 	blt	r9,zero,800a4d8 <___vfiprintf_internal_r+0x119c>
 8009a08:	013fdfc4 	movi	r4,-129
 8009a0c:	94c6b03a 	or	r3,r18,r19
 8009a10:	d8802215 	stw	r2,136(sp)
 8009a14:	a128703a 	and	r20,r20,r4
 8009a18:	1800a226 	beq	r3,zero,8009ca4 <___vfiprintf_internal_r+0x968>
 8009a1c:	0039883a 	mov	fp,zero
 8009a20:	dd401a04 	addi	r21,sp,104
 8009a24:	9006d0fa 	srli	r3,r18,3
 8009a28:	9808977a 	slli	r4,r19,29
 8009a2c:	9826d0fa 	srli	r19,r19,3
 8009a30:	948001cc 	andi	r18,r18,7
 8009a34:	90800c04 	addi	r2,r18,48
 8009a38:	ad7fffc4 	addi	r21,r21,-1
 8009a3c:	20e4b03a 	or	r18,r4,r3
 8009a40:	a8800005 	stb	r2,0(r21)
 8009a44:	94c6b03a 	or	r3,r18,r19
 8009a48:	183ff61e 	bne	r3,zero,8009a24 <___vfiprintf_internal_r+0x6e8>
 8009a4c:	a0c0004c 	andi	r3,r20,1
 8009a50:	18005926 	beq	r3,zero,8009bb8 <___vfiprintf_internal_r+0x87c>
 8009a54:	10803fcc 	andi	r2,r2,255
 8009a58:	1080201c 	xori	r2,r2,128
 8009a5c:	10bfe004 	addi	r2,r2,-128
 8009a60:	00c00c04 	movi	r3,48
 8009a64:	10c05426 	beq	r2,r3,8009bb8 <___vfiprintf_internal_r+0x87c>
 8009a68:	da801e17 	ldw	r10,120(sp)
 8009a6c:	a8bfffc4 	addi	r2,r21,-1
 8009a70:	a8ffffc5 	stb	r3,-1(r21)
 8009a74:	50a7c83a 	sub	r19,r10,r2
 8009a78:	102b883a 	mov	r21,r2
 8009a7c:	003f2f06 	br	800973c <___vfiprintf_internal_r+0x400>
 8009a80:	21003fcc 	andi	r4,r4,255
 8009a84:	2003421e 	bne	r4,zero,800a790 <___vfiprintf_internal_r+0x1454>
 8009a88:	00820074 	movhi	r2,2049
 8009a8c:	10836c04 	addi	r2,r2,3504
 8009a90:	d8802615 	stw	r2,152(sp)
 8009a94:	a080080c 	andi	r2,r20,32
 8009a98:	1000aa26 	beq	r2,zero,8009d44 <___vfiprintf_internal_r+0xa08>
 8009a9c:	da802217 	ldw	r10,136(sp)
 8009aa0:	54800017 	ldw	r18,0(r10)
 8009aa4:	54c00117 	ldw	r19,4(r10)
 8009aa8:	52800204 	addi	r10,r10,8
 8009aac:	da802215 	stw	r10,136(sp)
 8009ab0:	a080004c 	andi	r2,r20,1
 8009ab4:	1001d226 	beq	r2,zero,800a200 <___vfiprintf_internal_r+0xec4>
 8009ab8:	94c4b03a 	or	r2,r18,r19
 8009abc:	1002351e 	bne	r2,zero,800a394 <___vfiprintf_internal_r+0x1058>
 8009ac0:	d8001d85 	stb	zero,118(sp)
 8009ac4:	48022216 	blt	r9,zero,800a350 <___vfiprintf_internal_r+0x1014>
 8009ac8:	00bfdfc4 	movi	r2,-129
 8009acc:	a0a8703a 	and	r20,r20,r2
 8009ad0:	003f1506 	br	8009728 <___vfiprintf_internal_r+0x3ec>
 8009ad4:	da802217 	ldw	r10,136(sp)
 8009ad8:	04800044 	movi	r18,1
 8009adc:	d8001d85 	stb	zero,118(sp)
 8009ae0:	50800017 	ldw	r2,0(r10)
 8009ae4:	52800104 	addi	r10,r10,4
 8009ae8:	da802215 	stw	r10,136(sp)
 8009aec:	d8801005 	stb	r2,64(sp)
 8009af0:	9027883a 	mov	r19,r18
 8009af4:	dd401004 	addi	r21,sp,64
 8009af8:	0013883a 	mov	r9,zero
 8009afc:	003f1706 	br	800975c <___vfiprintf_internal_r+0x420>
 8009b00:	21003fcc 	andi	r4,r4,255
 8009b04:	2003201e 	bne	r4,zero,800a788 <___vfiprintf_internal_r+0x144c>
 8009b08:	a080080c 	andi	r2,r20,32
 8009b0c:	10004b26 	beq	r2,zero,8009c3c <___vfiprintf_internal_r+0x900>
 8009b10:	da802217 	ldw	r10,136(sp)
 8009b14:	50800117 	ldw	r2,4(r10)
 8009b18:	54800017 	ldw	r18,0(r10)
 8009b1c:	52800204 	addi	r10,r10,8
 8009b20:	da802215 	stw	r10,136(sp)
 8009b24:	1027883a 	mov	r19,r2
 8009b28:	10022c16 	blt	r2,zero,800a3dc <___vfiprintf_internal_r+0x10a0>
 8009b2c:	df001d83 	ldbu	fp,118(sp)
 8009b30:	48007216 	blt	r9,zero,8009cfc <___vfiprintf_internal_r+0x9c0>
 8009b34:	00ffdfc4 	movi	r3,-129
 8009b38:	94c4b03a 	or	r2,r18,r19
 8009b3c:	a0e8703a 	and	r20,r20,r3
 8009b40:	1000cc26 	beq	r2,zero,8009e74 <___vfiprintf_internal_r+0xb38>
 8009b44:	98021026 	beq	r19,zero,800a388 <___vfiprintf_internal_r+0x104c>
 8009b48:	dc402415 	stw	r17,144(sp)
 8009b4c:	dc002515 	stw	r16,148(sp)
 8009b50:	9823883a 	mov	r17,r19
 8009b54:	9021883a 	mov	r16,r18
 8009b58:	dd401a04 	addi	r21,sp,104
 8009b5c:	4825883a 	mov	r18,r9
 8009b60:	4027883a 	mov	r19,r8
 8009b64:	8009883a 	mov	r4,r16
 8009b68:	880b883a 	mov	r5,r17
 8009b6c:	01800284 	movi	r6,10
 8009b70:	000f883a 	mov	r7,zero
 8009b74:	800b71c0 	call	800b71c <__umoddi3>
 8009b78:	10800c04 	addi	r2,r2,48
 8009b7c:	ad7fffc4 	addi	r21,r21,-1
 8009b80:	8009883a 	mov	r4,r16
 8009b84:	880b883a 	mov	r5,r17
 8009b88:	a8800005 	stb	r2,0(r21)
 8009b8c:	01800284 	movi	r6,10
 8009b90:	000f883a 	mov	r7,zero
 8009b94:	800b1a40 	call	800b1a4 <__udivdi3>
 8009b98:	1021883a 	mov	r16,r2
 8009b9c:	10c4b03a 	or	r2,r2,r3
 8009ba0:	1823883a 	mov	r17,r3
 8009ba4:	103fef1e 	bne	r2,zero,8009b64 <___vfiprintf_internal_r+0x828>
 8009ba8:	dc402417 	ldw	r17,144(sp)
 8009bac:	dc002517 	ldw	r16,148(sp)
 8009bb0:	9013883a 	mov	r9,r18
 8009bb4:	9811883a 	mov	r8,r19
 8009bb8:	da801e17 	ldw	r10,120(sp)
 8009bbc:	5567c83a 	sub	r19,r10,r21
 8009bc0:	003ede06 	br	800973c <___vfiprintf_internal_r+0x400>
 8009bc4:	38803fcc 	andi	r2,r7,255
 8009bc8:	1080201c 	xori	r2,r2,128
 8009bcc:	10bfe004 	addi	r2,r2,-128
 8009bd0:	1002371e 	bne	r2,zero,800a4b0 <___vfiprintf_internal_r+0x1174>
 8009bd4:	01000044 	movi	r4,1
 8009bd8:	01c00804 	movi	r7,32
 8009bdc:	80c00007 	ldb	r3,0(r16)
 8009be0:	003e3506 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009be4:	a5000054 	ori	r20,r20,1
 8009be8:	80c00007 	ldb	r3,0(r16)
 8009bec:	003e3206 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009bf0:	a5002014 	ori	r20,r20,128
 8009bf4:	80c00007 	ldb	r3,0(r16)
 8009bf8:	003e2f06 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009bfc:	8015883a 	mov	r10,r16
 8009c00:	0023883a 	mov	r17,zero
 8009c04:	18bff404 	addi	r2,r3,-48
 8009c08:	50c00007 	ldb	r3,0(r10)
 8009c0c:	8c4002a4 	muli	r17,r17,10
 8009c10:	84000044 	addi	r16,r16,1
 8009c14:	8015883a 	mov	r10,r16
 8009c18:	1463883a 	add	r17,r2,r17
 8009c1c:	18bff404 	addi	r2,r3,-48
 8009c20:	30bff92e 	bgeu	r6,r2,8009c08 <___vfiprintf_internal_r+0x8cc>
 8009c24:	003e2506 	br	80094bc <___vfiprintf_internal_r+0x180>
 8009c28:	21003fcc 	andi	r4,r4,255
 8009c2c:	2002d41e 	bne	r4,zero,800a780 <___vfiprintf_internal_r+0x1444>
 8009c30:	a5000414 	ori	r20,r20,16
 8009c34:	a080080c 	andi	r2,r20,32
 8009c38:	103fb51e 	bne	r2,zero,8009b10 <___vfiprintf_internal_r+0x7d4>
 8009c3c:	a080040c 	andi	r2,r20,16
 8009c40:	1001f826 	beq	r2,zero,800a424 <___vfiprintf_internal_r+0x10e8>
 8009c44:	da802217 	ldw	r10,136(sp)
 8009c48:	54800017 	ldw	r18,0(r10)
 8009c4c:	52800104 	addi	r10,r10,4
 8009c50:	da802215 	stw	r10,136(sp)
 8009c54:	9027d7fa 	srai	r19,r18,31
 8009c58:	9805883a 	mov	r2,r19
 8009c5c:	003fb206 	br	8009b28 <___vfiprintf_internal_r+0x7ec>
 8009c60:	21003fcc 	andi	r4,r4,255
 8009c64:	2002c41e 	bne	r4,zero,800a778 <___vfiprintf_internal_r+0x143c>
 8009c68:	a5000414 	ori	r20,r20,16
 8009c6c:	a080080c 	andi	r2,r20,32
 8009c70:	103f5f1e 	bne	r2,zero,80099f0 <___vfiprintf_internal_r+0x6b4>
 8009c74:	a080040c 	andi	r2,r20,16
 8009c78:	10020f26 	beq	r2,zero,800a4b8 <___vfiprintf_internal_r+0x117c>
 8009c7c:	da802217 	ldw	r10,136(sp)
 8009c80:	d8001d85 	stb	zero,118(sp)
 8009c84:	0027883a 	mov	r19,zero
 8009c88:	50800104 	addi	r2,r10,4
 8009c8c:	54800017 	ldw	r18,0(r10)
 8009c90:	48021116 	blt	r9,zero,800a4d8 <___vfiprintf_internal_r+0x119c>
 8009c94:	00ffdfc4 	movi	r3,-129
 8009c98:	d8802215 	stw	r2,136(sp)
 8009c9c:	a0e8703a 	and	r20,r20,r3
 8009ca0:	903f5e1e 	bne	r18,zero,8009a1c <___vfiprintf_internal_r+0x6e0>
 8009ca4:	0039883a 	mov	fp,zero
 8009ca8:	4802a626 	beq	r9,zero,800a744 <___vfiprintf_internal_r+0x1408>
 8009cac:	0025883a 	mov	r18,zero
 8009cb0:	0027883a 	mov	r19,zero
 8009cb4:	003f5a06 	br	8009a20 <___vfiprintf_internal_r+0x6e4>
 8009cb8:	21003fcc 	andi	r4,r4,255
 8009cbc:	20029f1e 	bne	r4,zero,800a73c <___vfiprintf_internal_r+0x1400>
 8009cc0:	a5000414 	ori	r20,r20,16
 8009cc4:	a080080c 	andi	r2,r20,32
 8009cc8:	10005e1e 	bne	r2,zero,8009e44 <___vfiprintf_internal_r+0xb08>
 8009ccc:	a080040c 	andi	r2,r20,16
 8009cd0:	1001a21e 	bne	r2,zero,800a35c <___vfiprintf_internal_r+0x1020>
 8009cd4:	a080100c 	andi	r2,r20,64
 8009cd8:	d8001d85 	stb	zero,118(sp)
 8009cdc:	da802217 	ldw	r10,136(sp)
 8009ce0:	1002231e 	bne	r2,zero,800a570 <___vfiprintf_internal_r+0x1234>
 8009ce4:	50800104 	addi	r2,r10,4
 8009ce8:	54800017 	ldw	r18,0(r10)
 8009cec:	0027883a 	mov	r19,zero
 8009cf0:	4801a00e 	bge	r9,zero,800a374 <___vfiprintf_internal_r+0x1038>
 8009cf4:	d8802215 	stw	r2,136(sp)
 8009cf8:	0039883a 	mov	fp,zero
 8009cfc:	94c4b03a 	or	r2,r18,r19
 8009d00:	103f901e 	bne	r2,zero,8009b44 <___vfiprintf_internal_r+0x808>
 8009d04:	00800044 	movi	r2,1
 8009d08:	10803fcc 	andi	r2,r2,255
 8009d0c:	00c00044 	movi	r3,1
 8009d10:	10c05926 	beq	r2,r3,8009e78 <___vfiprintf_internal_r+0xb3c>
 8009d14:	00c00084 	movi	r3,2
 8009d18:	10ffe41e 	bne	r2,r3,8009cac <___vfiprintf_internal_r+0x970>
 8009d1c:	0025883a 	mov	r18,zero
 8009d20:	0027883a 	mov	r19,zero
 8009d24:	00013d06 	br	800a21c <___vfiprintf_internal_r+0xee0>
 8009d28:	21003fcc 	andi	r4,r4,255
 8009d2c:	2002811e 	bne	r4,zero,800a734 <___vfiprintf_internal_r+0x13f8>
 8009d30:	00820074 	movhi	r2,2049
 8009d34:	10836704 	addi	r2,r2,3484
 8009d38:	d8802615 	stw	r2,152(sp)
 8009d3c:	a080080c 	andi	r2,r20,32
 8009d40:	103f561e 	bne	r2,zero,8009a9c <___vfiprintf_internal_r+0x760>
 8009d44:	a080040c 	andi	r2,r20,16
 8009d48:	1001d126 	beq	r2,zero,800a490 <___vfiprintf_internal_r+0x1154>
 8009d4c:	da802217 	ldw	r10,136(sp)
 8009d50:	0027883a 	mov	r19,zero
 8009d54:	54800017 	ldw	r18,0(r10)
 8009d58:	52800104 	addi	r10,r10,4
 8009d5c:	da802215 	stw	r10,136(sp)
 8009d60:	003f5306 	br	8009ab0 <___vfiprintf_internal_r+0x774>
 8009d64:	da802217 	ldw	r10,136(sp)
 8009d68:	d8001d85 	stb	zero,118(sp)
 8009d6c:	55400017 	ldw	r21,0(r10)
 8009d70:	50c00104 	addi	r3,r10,4
 8009d74:	a8024226 	beq	r21,zero,800a680 <___vfiprintf_internal_r+0x1344>
 8009d78:	48021816 	blt	r9,zero,800a5dc <___vfiprintf_internal_r+0x12a0>
 8009d7c:	480d883a 	mov	r6,r9
 8009d80:	000b883a 	mov	r5,zero
 8009d84:	a809883a 	mov	r4,r21
 8009d88:	d8c02a15 	stw	r3,168(sp)
 8009d8c:	da002b15 	stw	r8,172(sp)
 8009d90:	da402c15 	stw	r9,176(sp)
 8009d94:	80075380 	call	8007538 <memchr>
 8009d98:	d8c02a17 	ldw	r3,168(sp)
 8009d9c:	da002b17 	ldw	r8,172(sp)
 8009da0:	da402c17 	ldw	r9,176(sp)
 8009da4:	10024826 	beq	r2,zero,800a6c8 <___vfiprintf_internal_r+0x138c>
 8009da8:	1567c83a 	sub	r19,r2,r21
 8009dac:	df001d83 	ldbu	fp,118(sp)
 8009db0:	d8c02215 	stw	r3,136(sp)
 8009db4:	0013883a 	mov	r9,zero
 8009db8:	003e6006 	br	800973c <___vfiprintf_internal_r+0x400>
 8009dbc:	21003fcc 	andi	r4,r4,255
 8009dc0:	203fc026 	beq	r4,zero,8009cc4 <___vfiprintf_internal_r+0x988>
 8009dc4:	d9c01d85 	stb	r7,118(sp)
 8009dc8:	003fbe06 	br	8009cc4 <___vfiprintf_internal_r+0x988>
 8009dcc:	da802217 	ldw	r10,136(sp)
 8009dd0:	54400017 	ldw	r17,0(r10)
 8009dd4:	50800104 	addi	r2,r10,4
 8009dd8:	883e3b16 	blt	r17,zero,80096c8 <___vfiprintf_internal_r+0x38c>
 8009ddc:	d8802215 	stw	r2,136(sp)
 8009de0:	80c00007 	ldb	r3,0(r16)
 8009de4:	003db406 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009de8:	01000044 	movi	r4,1
 8009dec:	01c00ac4 	movi	r7,43
 8009df0:	80c00007 	ldb	r3,0(r16)
 8009df4:	003db006 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009df8:	80c00007 	ldb	r3,0(r16)
 8009dfc:	82800044 	addi	r10,r16,1
 8009e00:	1b423c26 	beq	r3,r13,800a6f4 <___vfiprintf_internal_r+0x13b8>
 8009e04:	18bff404 	addi	r2,r3,-48
 8009e08:	0013883a 	mov	r9,zero
 8009e0c:	30822b36 	bltu	r6,r2,800a6bc <___vfiprintf_internal_r+0x1380>
 8009e10:	50c00007 	ldb	r3,0(r10)
 8009e14:	4a4002a4 	muli	r9,r9,10
 8009e18:	54000044 	addi	r16,r10,1
 8009e1c:	8015883a 	mov	r10,r16
 8009e20:	4893883a 	add	r9,r9,r2
 8009e24:	18bff404 	addi	r2,r3,-48
 8009e28:	30bff92e 	bgeu	r6,r2,8009e10 <___vfiprintf_internal_r+0xad4>
 8009e2c:	483da30e 	bge	r9,zero,80094bc <___vfiprintf_internal_r+0x180>
 8009e30:	027fffc4 	movi	r9,-1
 8009e34:	003da106 	br	80094bc <___vfiprintf_internal_r+0x180>
 8009e38:	a5001014 	ori	r20,r20,64
 8009e3c:	80c00007 	ldb	r3,0(r16)
 8009e40:	003d9d06 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 8009e44:	da802217 	ldw	r10,136(sp)
 8009e48:	d8001d85 	stb	zero,118(sp)
 8009e4c:	50c00204 	addi	r3,r10,8
 8009e50:	54800017 	ldw	r18,0(r10)
 8009e54:	54c00117 	ldw	r19,4(r10)
 8009e58:	4801ca16 	blt	r9,zero,800a584 <___vfiprintf_internal_r+0x1248>
 8009e5c:	013fdfc4 	movi	r4,-129
 8009e60:	94c4b03a 	or	r2,r18,r19
 8009e64:	d8c02215 	stw	r3,136(sp)
 8009e68:	a128703a 	and	r20,r20,r4
 8009e6c:	0039883a 	mov	fp,zero
 8009e70:	103f341e 	bne	r2,zero,8009b44 <___vfiprintf_internal_r+0x808>
 8009e74:	483e2e26 	beq	r9,zero,8009730 <___vfiprintf_internal_r+0x3f4>
 8009e78:	0025883a 	mov	r18,zero
 8009e7c:	94800c04 	addi	r18,r18,48
 8009e80:	dc8019c5 	stb	r18,103(sp)
 8009e84:	dcc02717 	ldw	r19,156(sp)
 8009e88:	dd4019c4 	addi	r21,sp,103
 8009e8c:	003e2b06 	br	800973c <___vfiprintf_internal_r+0x400>
 8009e90:	21003fcc 	andi	r4,r4,255
 8009e94:	2002361e 	bne	r4,zero,800a770 <___vfiprintf_internal_r+0x1434>
 8009e98:	1801c126 	beq	r3,zero,800a5a0 <___vfiprintf_internal_r+0x1264>
 8009e9c:	04800044 	movi	r18,1
 8009ea0:	d8c01005 	stb	r3,64(sp)
 8009ea4:	d8001d85 	stb	zero,118(sp)
 8009ea8:	9027883a 	mov	r19,r18
 8009eac:	dd401004 	addi	r21,sp,64
 8009eb0:	003f1106 	br	8009af8 <___vfiprintf_internal_r+0x7bc>
 8009eb4:	d9402117 	ldw	r5,132(sp)
 8009eb8:	d9002017 	ldw	r4,128(sp)
 8009ebc:	d9801a04 	addi	r6,sp,104
 8009ec0:	d9c02b15 	stw	r7,172(sp)
 8009ec4:	dbc02a15 	stw	r15,168(sp)
 8009ec8:	80092280 	call	8009228 <__sprint_r.part.0>
 8009ecc:	d9c02b17 	ldw	r7,172(sp)
 8009ed0:	dbc02a17 	ldw	r15,168(sp)
 8009ed4:	10006d1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 8009ed8:	d9801b17 	ldw	r6,108(sp)
 8009edc:	d8801c17 	ldw	r2,112(sp)
 8009ee0:	d811883a 	mov	r8,sp
 8009ee4:	31400044 	addi	r5,r6,1
 8009ee8:	003e3306 	br	80097b8 <___vfiprintf_internal_r+0x47c>
 8009eec:	d9401b17 	ldw	r5,108(sp)
 8009ef0:	d8801c17 	ldw	r2,112(sp)
 8009ef4:	29000044 	addi	r4,r5,1
 8009ef8:	d8c01d87 	ldb	r3,118(sp)
 8009efc:	183e4d26 	beq	r3,zero,8009834 <___vfiprintf_internal_r+0x4f8>
 8009f00:	00c00044 	movi	r3,1
 8009f04:	d9401d84 	addi	r5,sp,118
 8009f08:	10c5883a 	add	r2,r2,r3
 8009f0c:	41400015 	stw	r5,0(r8)
 8009f10:	40c00115 	stw	r3,4(r8)
 8009f14:	d8801c15 	stw	r2,112(sp)
 8009f18:	d9001b15 	stw	r4,108(sp)
 8009f1c:	014001c4 	movi	r5,7
 8009f20:	2900a90e 	bge	r5,r4,800a1c8 <___vfiprintf_internal_r+0xe8c>
 8009f24:	1000da1e 	bne	r2,zero,800a290 <___vfiprintf_internal_r+0xf54>
 8009f28:	7000ab1e 	bne	r14,zero,800a1d8 <___vfiprintf_internal_r+0xe9c>
 8009f2c:	000b883a 	mov	r5,zero
 8009f30:	1809883a 	mov	r4,r3
 8009f34:	d811883a 	mov	r8,sp
 8009f38:	00c02004 	movi	r3,128
 8009f3c:	e0fe4d26 	beq	fp,r3,8009874 <___vfiprintf_internal_r+0x538>
 8009f40:	4cf9c83a 	sub	fp,r9,r19
 8009f44:	073e7b0e 	bge	zero,fp,8009934 <___vfiprintf_internal_r+0x5f8>
 8009f48:	01c00404 	movi	r7,16
 8009f4c:	3f01900e 	bge	r7,fp,800a590 <___vfiprintf_internal_r+0x1254>
 8009f50:	00c20074 	movhi	r3,2049
 8009f54:	18c3cd04 	addi	r3,r3,3892
 8009f58:	d8c02415 	stw	r3,144(sp)
 8009f5c:	034001c4 	movi	r13,7
 8009f60:	00000506 	br	8009f78 <___vfiprintf_internal_r+0xc3c>
 8009f64:	29000084 	addi	r4,r5,2
 8009f68:	42000204 	addi	r8,r8,8
 8009f6c:	180b883a 	mov	r5,r3
 8009f70:	e73ffc04 	addi	fp,fp,-16
 8009f74:	3f000d0e 	bge	r7,fp,8009fac <___vfiprintf_internal_r+0xc70>
 8009f78:	10800404 	addi	r2,r2,16
 8009f7c:	28c00044 	addi	r3,r5,1
 8009f80:	45c00015 	stw	r23,0(r8)
 8009f84:	41c00115 	stw	r7,4(r8)
 8009f88:	d8801c15 	stw	r2,112(sp)
 8009f8c:	d8c01b15 	stw	r3,108(sp)
 8009f90:	68fff40e 	bge	r13,r3,8009f64 <___vfiprintf_internal_r+0xc28>
 8009f94:	1000101e 	bne	r2,zero,8009fd8 <___vfiprintf_internal_r+0xc9c>
 8009f98:	e73ffc04 	addi	fp,fp,-16
 8009f9c:	01000044 	movi	r4,1
 8009fa0:	000b883a 	mov	r5,zero
 8009fa4:	d811883a 	mov	r8,sp
 8009fa8:	3f3ff316 	blt	r7,fp,8009f78 <___vfiprintf_internal_r+0xc3c>
 8009fac:	da802417 	ldw	r10,144(sp)
 8009fb0:	1705883a 	add	r2,r2,fp
 8009fb4:	47000115 	stw	fp,4(r8)
 8009fb8:	42800015 	stw	r10,0(r8)
 8009fbc:	d8801c15 	stw	r2,112(sp)
 8009fc0:	d9001b15 	stw	r4,108(sp)
 8009fc4:	00c001c4 	movi	r3,7
 8009fc8:	19003616 	blt	r3,r4,800a0a4 <___vfiprintf_internal_r+0xd68>
 8009fcc:	42000204 	addi	r8,r8,8
 8009fd0:	21000044 	addi	r4,r4,1
 8009fd4:	003e5706 	br	8009934 <___vfiprintf_internal_r+0x5f8>
 8009fd8:	d9402117 	ldw	r5,132(sp)
 8009fdc:	d9002017 	ldw	r4,128(sp)
 8009fe0:	d9801a04 	addi	r6,sp,104
 8009fe4:	d9c02b15 	stw	r7,172(sp)
 8009fe8:	db402a15 	stw	r13,168(sp)
 8009fec:	80092280 	call	8009228 <__sprint_r.part.0>
 8009ff0:	d9c02b17 	ldw	r7,172(sp)
 8009ff4:	db402a17 	ldw	r13,168(sp)
 8009ff8:	1000241e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 8009ffc:	d9401b17 	ldw	r5,108(sp)
 800a000:	d8801c17 	ldw	r2,112(sp)
 800a004:	d811883a 	mov	r8,sp
 800a008:	29000044 	addi	r4,r5,1
 800a00c:	003fd806 	br	8009f70 <___vfiprintf_internal_r+0xc34>
 800a010:	d9401b17 	ldw	r5,108(sp)
 800a014:	00c20074 	movhi	r3,2049
 800a018:	18c3d104 	addi	r3,r3,3908
 800a01c:	d8c02415 	stw	r3,144(sp)
 800a020:	29400044 	addi	r5,r5,1
 800a024:	d8c02417 	ldw	r3,144(sp)
 800a028:	14c5883a 	add	r2,r2,r19
 800a02c:	44c00115 	stw	r19,4(r8)
 800a030:	40c00015 	stw	r3,0(r8)
 800a034:	d8801c15 	stw	r2,112(sp)
 800a038:	d9401b15 	stw	r5,108(sp)
 800a03c:	00c001c4 	movi	r3,7
 800a040:	1940070e 	bge	r3,r5,800a060 <___vfiprintf_internal_r+0xd24>
 800a044:	103e4826 	beq	r2,zero,8009968 <___vfiprintf_internal_r+0x62c>
 800a048:	d9402117 	ldw	r5,132(sp)
 800a04c:	d9002017 	ldw	r4,128(sp)
 800a050:	d9801a04 	addi	r6,sp,104
 800a054:	80092280 	call	8009228 <__sprint_r.part.0>
 800a058:	10000c1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a05c:	d8801c17 	ldw	r2,112(sp)
 800a060:	8c80010e 	bge	r17,r18,800a068 <___vfiprintf_internal_r+0xd2c>
 800a064:	9023883a 	mov	r17,r18
 800a068:	da802317 	ldw	r10,140(sp)
 800a06c:	5455883a 	add	r10,r10,r17
 800a070:	da802315 	stw	r10,140(sp)
 800a074:	103e4126 	beq	r2,zero,800997c <___vfiprintf_internal_r+0x640>
 800a078:	d9402117 	ldw	r5,132(sp)
 800a07c:	d9002017 	ldw	r4,128(sp)
 800a080:	d9801a04 	addi	r6,sp,104
 800a084:	80092280 	call	8009228 <__sprint_r.part.0>
 800a088:	103e3c26 	beq	r2,zero,800997c <___vfiprintf_internal_r+0x640>
 800a08c:	dd002117 	ldw	r20,132(sp)
 800a090:	a080030b 	ldhu	r2,12(r20)
 800a094:	1080100c 	andi	r2,r2,64
 800a098:	1001231e 	bne	r2,zero,800a528 <___vfiprintf_internal_r+0x11ec>
 800a09c:	d8802317 	ldw	r2,140(sp)
 800a0a0:	003d7b06 	br	8009690 <___vfiprintf_internal_r+0x354>
 800a0a4:	1000991e 	bne	r2,zero,800a30c <___vfiprintf_internal_r+0xfd0>
 800a0a8:	00c00044 	movi	r3,1
 800a0ac:	9805883a 	mov	r2,r19
 800a0b0:	dd400015 	stw	r21,0(sp)
 800a0b4:	dcc00115 	stw	r19,4(sp)
 800a0b8:	dcc01c15 	stw	r19,112(sp)
 800a0bc:	d8c01b15 	stw	r3,108(sp)
 800a0c0:	d811883a 	mov	r8,sp
 800a0c4:	42000204 	addi	r8,r8,8
 800a0c8:	a2c0010c 	andi	r11,r20,4
 800a0cc:	583fe426 	beq	r11,zero,800a060 <___vfiprintf_internal_r+0xd24>
 800a0d0:	8ca7c83a 	sub	r19,r17,r18
 800a0d4:	04ffe20e 	bge	zero,r19,800a060 <___vfiprintf_internal_r+0xd24>
 800a0d8:	01c00404 	movi	r7,16
 800a0dc:	3cffcc0e 	bge	r7,r19,800a010 <___vfiprintf_internal_r+0xcd4>
 800a0e0:	02820074 	movhi	r10,2049
 800a0e4:	5283d104 	addi	r10,r10,3908
 800a0e8:	d9001b17 	ldw	r4,108(sp)
 800a0ec:	da802415 	stw	r10,144(sp)
 800a0f0:	382b883a 	mov	r21,r7
 800a0f4:	050001c4 	movi	r20,7
 800a0f8:	df002017 	ldw	fp,128(sp)
 800a0fc:	00000506 	br	800a114 <___vfiprintf_internal_r+0xdd8>
 800a100:	21400084 	addi	r5,r4,2
 800a104:	42000204 	addi	r8,r8,8
 800a108:	1809883a 	mov	r4,r3
 800a10c:	9cfffc04 	addi	r19,r19,-16
 800a110:	acffc40e 	bge	r21,r19,800a024 <___vfiprintf_internal_r+0xce8>
 800a114:	10800404 	addi	r2,r2,16
 800a118:	20c00044 	addi	r3,r4,1
 800a11c:	45800015 	stw	r22,0(r8)
 800a120:	45400115 	stw	r21,4(r8)
 800a124:	d8801c15 	stw	r2,112(sp)
 800a128:	d8c01b15 	stw	r3,108(sp)
 800a12c:	a0fff40e 	bge	r20,r3,800a100 <___vfiprintf_internal_r+0xdc4>
 800a130:	1000041e 	bne	r2,zero,800a144 <___vfiprintf_internal_r+0xe08>
 800a134:	01400044 	movi	r5,1
 800a138:	0009883a 	mov	r4,zero
 800a13c:	d811883a 	mov	r8,sp
 800a140:	003ff206 	br	800a10c <___vfiprintf_internal_r+0xdd0>
 800a144:	d9402117 	ldw	r5,132(sp)
 800a148:	d9801a04 	addi	r6,sp,104
 800a14c:	e009883a 	mov	r4,fp
 800a150:	80092280 	call	8009228 <__sprint_r.part.0>
 800a154:	103fcd1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a158:	d9001b17 	ldw	r4,108(sp)
 800a15c:	d8801c17 	ldw	r2,112(sp)
 800a160:	d811883a 	mov	r8,sp
 800a164:	21400044 	addi	r5,r4,1
 800a168:	003fe806 	br	800a10c <___vfiprintf_internal_r+0xdd0>
 800a16c:	d9402117 	ldw	r5,132(sp)
 800a170:	d9002017 	ldw	r4,128(sp)
 800a174:	d9801a04 	addi	r6,sp,104
 800a178:	d9c02b15 	stw	r7,172(sp)
 800a17c:	db402a15 	stw	r13,168(sp)
 800a180:	80092280 	call	8009228 <__sprint_r.part.0>
 800a184:	d9c02b17 	ldw	r7,172(sp)
 800a188:	db402a17 	ldw	r13,168(sp)
 800a18c:	103fbf1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a190:	d9401b17 	ldw	r5,108(sp)
 800a194:	d8801c17 	ldw	r2,112(sp)
 800a198:	d811883a 	mov	r8,sp
 800a19c:	29800044 	addi	r6,r5,1
 800a1a0:	003dc406 	br	80098b4 <___vfiprintf_internal_r+0x578>
 800a1a4:	1000d21e 	bne	r2,zero,800a4f0 <___vfiprintf_internal_r+0x11b4>
 800a1a8:	d8c01d87 	ldb	r3,118(sp)
 800a1ac:	18009526 	beq	r3,zero,800a404 <___vfiprintf_internal_r+0x10c8>
 800a1b0:	00800044 	movi	r2,1
 800a1b4:	d8c01d84 	addi	r3,sp,118
 800a1b8:	1009883a 	mov	r4,r2
 800a1bc:	d8c00015 	stw	r3,0(sp)
 800a1c0:	d8800115 	stw	r2,4(sp)
 800a1c4:	d811883a 	mov	r8,sp
 800a1c8:	200b883a 	mov	r5,r4
 800a1cc:	42000204 	addi	r8,r8,8
 800a1d0:	21000044 	addi	r4,r4,1
 800a1d4:	003d9706 	br	8009834 <___vfiprintf_internal_r+0x4f8>
 800a1d8:	d9001d04 	addi	r4,sp,116
 800a1dc:	00800084 	movi	r2,2
 800a1e0:	d9000015 	stw	r4,0(sp)
 800a1e4:	d8800115 	stw	r2,4(sp)
 800a1e8:	1809883a 	mov	r4,r3
 800a1ec:	d811883a 	mov	r8,sp
 800a1f0:	200b883a 	mov	r5,r4
 800a1f4:	42000204 	addi	r8,r8,8
 800a1f8:	21000044 	addi	r4,r4,1
 800a1fc:	003f4e06 	br	8009f38 <___vfiprintf_internal_r+0xbfc>
 800a200:	d8001d85 	stb	zero,118(sp)
 800a204:	48005016 	blt	r9,zero,800a348 <___vfiprintf_internal_r+0x100c>
 800a208:	00ffdfc4 	movi	r3,-129
 800a20c:	94c4b03a 	or	r2,r18,r19
 800a210:	a0e8703a 	and	r20,r20,r3
 800a214:	103d4426 	beq	r2,zero,8009728 <___vfiprintf_internal_r+0x3ec>
 800a218:	0039883a 	mov	fp,zero
 800a21c:	d9002617 	ldw	r4,152(sp)
 800a220:	dd401a04 	addi	r21,sp,104
 800a224:	908003cc 	andi	r2,r18,15
 800a228:	9806973a 	slli	r3,r19,28
 800a22c:	2085883a 	add	r2,r4,r2
 800a230:	9024d13a 	srli	r18,r18,4
 800a234:	10800003 	ldbu	r2,0(r2)
 800a238:	9826d13a 	srli	r19,r19,4
 800a23c:	ad7fffc4 	addi	r21,r21,-1
 800a240:	1ca4b03a 	or	r18,r3,r18
 800a244:	a8800005 	stb	r2,0(r21)
 800a248:	94c4b03a 	or	r2,r18,r19
 800a24c:	103ff51e 	bne	r2,zero,800a224 <___vfiprintf_internal_r+0xee8>
 800a250:	003e5906 	br	8009bb8 <___vfiprintf_internal_r+0x87c>
 800a254:	d9402117 	ldw	r5,132(sp)
 800a258:	d9002017 	ldw	r4,128(sp)
 800a25c:	d9801a04 	addi	r6,sp,104
 800a260:	80092280 	call	8009228 <__sprint_r.part.0>
 800a264:	103f891e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a268:	d8801c17 	ldw	r2,112(sp)
 800a26c:	d811883a 	mov	r8,sp
 800a270:	003f9506 	br	800a0c8 <___vfiprintf_internal_r+0xd8c>
 800a274:	d9402117 	ldw	r5,132(sp)
 800a278:	d9002017 	ldw	r4,128(sp)
 800a27c:	d9801a04 	addi	r6,sp,104
 800a280:	80092280 	call	8009228 <__sprint_r.part.0>
 800a284:	103f811e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a288:	d811883a 	mov	r8,sp
 800a28c:	003ced06 	br	8009644 <___vfiprintf_internal_r+0x308>
 800a290:	d9402117 	ldw	r5,132(sp)
 800a294:	d9002017 	ldw	r4,128(sp)
 800a298:	d9801a04 	addi	r6,sp,104
 800a29c:	da402c15 	stw	r9,176(sp)
 800a2a0:	db802a15 	stw	r14,168(sp)
 800a2a4:	80092280 	call	8009228 <__sprint_r.part.0>
 800a2a8:	da402c17 	ldw	r9,176(sp)
 800a2ac:	db802a17 	ldw	r14,168(sp)
 800a2b0:	103f761e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a2b4:	d9401b17 	ldw	r5,108(sp)
 800a2b8:	d8801c17 	ldw	r2,112(sp)
 800a2bc:	d811883a 	mov	r8,sp
 800a2c0:	29000044 	addi	r4,r5,1
 800a2c4:	003d5b06 	br	8009834 <___vfiprintf_internal_r+0x4f8>
 800a2c8:	d9402117 	ldw	r5,132(sp)
 800a2cc:	d9002017 	ldw	r4,128(sp)
 800a2d0:	d9801a04 	addi	r6,sp,104
 800a2d4:	da402c15 	stw	r9,176(sp)
 800a2d8:	80092280 	call	8009228 <__sprint_r.part.0>
 800a2dc:	da402c17 	ldw	r9,176(sp)
 800a2e0:	103f6a1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a2e4:	d9401b17 	ldw	r5,108(sp)
 800a2e8:	d8801c17 	ldw	r2,112(sp)
 800a2ec:	d811883a 	mov	r8,sp
 800a2f0:	29000044 	addi	r4,r5,1
 800a2f4:	003f1006 	br	8009f38 <___vfiprintf_internal_r+0xbfc>
 800a2f8:	1000c31e 	bne	r2,zero,800a608 <___vfiprintf_internal_r+0x12cc>
 800a2fc:	01000044 	movi	r4,1
 800a300:	000b883a 	mov	r5,zero
 800a304:	d811883a 	mov	r8,sp
 800a308:	003f0d06 	br	8009f40 <___vfiprintf_internal_r+0xc04>
 800a30c:	d9402117 	ldw	r5,132(sp)
 800a310:	d9002017 	ldw	r4,128(sp)
 800a314:	d9801a04 	addi	r6,sp,104
 800a318:	80092280 	call	8009228 <__sprint_r.part.0>
 800a31c:	103f5b1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a320:	d9001b17 	ldw	r4,108(sp)
 800a324:	d8801c17 	ldw	r2,112(sp)
 800a328:	d811883a 	mov	r8,sp
 800a32c:	21000044 	addi	r4,r4,1
 800a330:	003d8006 	br	8009934 <___vfiprintf_internal_r+0x5f8>
 800a334:	01020074 	movhi	r4,2049
 800a338:	21036c04 	addi	r4,r4,3504
 800a33c:	d9002615 	stw	r4,152(sp)
 800a340:	d8c02215 	stw	r3,136(sp)
 800a344:	1029883a 	mov	r20,r2
 800a348:	94c4b03a 	or	r2,r18,r19
 800a34c:	103fb21e 	bne	r2,zero,800a218 <___vfiprintf_internal_r+0xedc>
 800a350:	0039883a 	mov	fp,zero
 800a354:	00800084 	movi	r2,2
 800a358:	003e6b06 	br	8009d08 <___vfiprintf_internal_r+0x9cc>
 800a35c:	da802217 	ldw	r10,136(sp)
 800a360:	d8001d85 	stb	zero,118(sp)
 800a364:	0027883a 	mov	r19,zero
 800a368:	50800104 	addi	r2,r10,4
 800a36c:	54800017 	ldw	r18,0(r10)
 800a370:	483e6016 	blt	r9,zero,8009cf4 <___vfiprintf_internal_r+0x9b8>
 800a374:	00ffdfc4 	movi	r3,-129
 800a378:	d8802215 	stw	r2,136(sp)
 800a37c:	a0e8703a 	and	r20,r20,r3
 800a380:	0039883a 	mov	fp,zero
 800a384:	903ebb26 	beq	r18,zero,8009e74 <___vfiprintf_internal_r+0xb38>
 800a388:	00800244 	movi	r2,9
 800a38c:	14bdee36 	bltu	r2,r18,8009b48 <___vfiprintf_internal_r+0x80c>
 800a390:	003eba06 	br	8009e7c <___vfiprintf_internal_r+0xb40>
 800a394:	00800c04 	movi	r2,48
 800a398:	d8c01d45 	stb	r3,117(sp)
 800a39c:	d8801d05 	stb	r2,116(sp)
 800a3a0:	d8001d85 	stb	zero,118(sp)
 800a3a4:	a0c00094 	ori	r3,r20,2
 800a3a8:	4800a916 	blt	r9,zero,800a650 <___vfiprintf_internal_r+0x1314>
 800a3ac:	00bfdfc4 	movi	r2,-129
 800a3b0:	a096703a 	and	r11,r20,r2
 800a3b4:	5d000094 	ori	r20,r11,2
 800a3b8:	0039883a 	mov	fp,zero
 800a3bc:	003f9706 	br	800a21c <___vfiprintf_internal_r+0xee0>
 800a3c0:	8025883a 	mov	r18,r16
 800a3c4:	003c2e06 	br	8009480 <___vfiprintf_internal_r+0x144>
 800a3c8:	00820074 	movhi	r2,2049
 800a3cc:	10836c04 	addi	r2,r2,3504
 800a3d0:	0039883a 	mov	fp,zero
 800a3d4:	d8802615 	stw	r2,152(sp)
 800a3d8:	003f9006 	br	800a21c <___vfiprintf_internal_r+0xee0>
 800a3dc:	04a5c83a 	sub	r18,zero,r18
 800a3e0:	07000b44 	movi	fp,45
 800a3e4:	9004c03a 	cmpne	r2,r18,zero
 800a3e8:	04e7c83a 	sub	r19,zero,r19
 800a3ec:	df001d85 	stb	fp,118(sp)
 800a3f0:	98a7c83a 	sub	r19,r19,r2
 800a3f4:	48009f16 	blt	r9,zero,800a674 <___vfiprintf_internal_r+0x1338>
 800a3f8:	00bfdfc4 	movi	r2,-129
 800a3fc:	a0a8703a 	and	r20,r20,r2
 800a400:	003dd006 	br	8009b44 <___vfiprintf_internal_r+0x808>
 800a404:	70004c26 	beq	r14,zero,800a538 <___vfiprintf_internal_r+0x11fc>
 800a408:	00800084 	movi	r2,2
 800a40c:	d8c01d04 	addi	r3,sp,116
 800a410:	d8c00015 	stw	r3,0(sp)
 800a414:	d8800115 	stw	r2,4(sp)
 800a418:	01000044 	movi	r4,1
 800a41c:	d811883a 	mov	r8,sp
 800a420:	003f7306 	br	800a1f0 <___vfiprintf_internal_r+0xeb4>
 800a424:	a080100c 	andi	r2,r20,64
 800a428:	da802217 	ldw	r10,136(sp)
 800a42c:	103e0626 	beq	r2,zero,8009c48 <___vfiprintf_internal_r+0x90c>
 800a430:	5480000f 	ldh	r18,0(r10)
 800a434:	52800104 	addi	r10,r10,4
 800a438:	da802215 	stw	r10,136(sp)
 800a43c:	9027d7fa 	srai	r19,r18,31
 800a440:	9805883a 	mov	r2,r19
 800a444:	003db806 	br	8009b28 <___vfiprintf_internal_r+0x7ec>
 800a448:	a080040c 	andi	r2,r20,16
 800a44c:	1000091e 	bne	r2,zero,800a474 <___vfiprintf_internal_r+0x1138>
 800a450:	a2c0100c 	andi	r11,r20,64
 800a454:	58000726 	beq	r11,zero,800a474 <___vfiprintf_internal_r+0x1138>
 800a458:	da802217 	ldw	r10,136(sp)
 800a45c:	50800017 	ldw	r2,0(r10)
 800a460:	52800104 	addi	r10,r10,4
 800a464:	da802215 	stw	r10,136(sp)
 800a468:	da802317 	ldw	r10,140(sp)
 800a46c:	1280000d 	sth	r10,0(r2)
 800a470:	003be706 	br	8009410 <___vfiprintf_internal_r+0xd4>
 800a474:	da802217 	ldw	r10,136(sp)
 800a478:	50800017 	ldw	r2,0(r10)
 800a47c:	52800104 	addi	r10,r10,4
 800a480:	da802215 	stw	r10,136(sp)
 800a484:	da802317 	ldw	r10,140(sp)
 800a488:	12800015 	stw	r10,0(r2)
 800a48c:	003be006 	br	8009410 <___vfiprintf_internal_r+0xd4>
 800a490:	a080100c 	andi	r2,r20,64
 800a494:	da802217 	ldw	r10,136(sp)
 800a498:	10003026 	beq	r2,zero,800a55c <___vfiprintf_internal_r+0x1220>
 800a49c:	5480000b 	ldhu	r18,0(r10)
 800a4a0:	52800104 	addi	r10,r10,4
 800a4a4:	0027883a 	mov	r19,zero
 800a4a8:	da802215 	stw	r10,136(sp)
 800a4ac:	003d8006 	br	8009ab0 <___vfiprintf_internal_r+0x774>
 800a4b0:	80c00007 	ldb	r3,0(r16)
 800a4b4:	003c0006 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 800a4b8:	a080100c 	andi	r2,r20,64
 800a4bc:	d8001d85 	stb	zero,118(sp)
 800a4c0:	da802217 	ldw	r10,136(sp)
 800a4c4:	1000201e 	bne	r2,zero,800a548 <___vfiprintf_internal_r+0x120c>
 800a4c8:	50800104 	addi	r2,r10,4
 800a4cc:	54800017 	ldw	r18,0(r10)
 800a4d0:	0027883a 	mov	r19,zero
 800a4d4:	483def0e 	bge	r9,zero,8009c94 <___vfiprintf_internal_r+0x958>
 800a4d8:	94c6b03a 	or	r3,r18,r19
 800a4dc:	d8802215 	stw	r2,136(sp)
 800a4e0:	183d4e1e 	bne	r3,zero,8009a1c <___vfiprintf_internal_r+0x6e0>
 800a4e4:	0039883a 	mov	fp,zero
 800a4e8:	0005883a 	mov	r2,zero
 800a4ec:	003e0606 	br	8009d08 <___vfiprintf_internal_r+0x9cc>
 800a4f0:	d9402117 	ldw	r5,132(sp)
 800a4f4:	d9002017 	ldw	r4,128(sp)
 800a4f8:	d9801a04 	addi	r6,sp,104
 800a4fc:	da402c15 	stw	r9,176(sp)
 800a500:	db802a15 	stw	r14,168(sp)
 800a504:	80092280 	call	8009228 <__sprint_r.part.0>
 800a508:	da402c17 	ldw	r9,176(sp)
 800a50c:	db802a17 	ldw	r14,168(sp)
 800a510:	103ede1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a514:	d9401b17 	ldw	r5,108(sp)
 800a518:	d8801c17 	ldw	r2,112(sp)
 800a51c:	d811883a 	mov	r8,sp
 800a520:	29000044 	addi	r4,r5,1
 800a524:	003e7406 	br	8009ef8 <___vfiprintf_internal_r+0xbbc>
 800a528:	00bfffc4 	movi	r2,-1
 800a52c:	003c5806 	br	8009690 <___vfiprintf_internal_r+0x354>
 800a530:	d811883a 	mov	r8,sp
 800a534:	003ee806 	br	800a0d8 <___vfiprintf_internal_r+0xd9c>
 800a538:	000b883a 	mov	r5,zero
 800a53c:	01000044 	movi	r4,1
 800a540:	d811883a 	mov	r8,sp
 800a544:	003e7c06 	br	8009f38 <___vfiprintf_internal_r+0xbfc>
 800a548:	50800104 	addi	r2,r10,4
 800a54c:	5480000b 	ldhu	r18,0(r10)
 800a550:	0027883a 	mov	r19,zero
 800a554:	483dcf0e 	bge	r9,zero,8009c94 <___vfiprintf_internal_r+0x958>
 800a558:	003fdf06 	br	800a4d8 <___vfiprintf_internal_r+0x119c>
 800a55c:	54800017 	ldw	r18,0(r10)
 800a560:	52800104 	addi	r10,r10,4
 800a564:	0027883a 	mov	r19,zero
 800a568:	da802215 	stw	r10,136(sp)
 800a56c:	003d5006 	br	8009ab0 <___vfiprintf_internal_r+0x774>
 800a570:	50800104 	addi	r2,r10,4
 800a574:	5480000b 	ldhu	r18,0(r10)
 800a578:	0027883a 	mov	r19,zero
 800a57c:	483f7d0e 	bge	r9,zero,800a374 <___vfiprintf_internal_r+0x1038>
 800a580:	003ddc06 	br	8009cf4 <___vfiprintf_internal_r+0x9b8>
 800a584:	d8c02215 	stw	r3,136(sp)
 800a588:	0039883a 	mov	fp,zero
 800a58c:	003ddb06 	br	8009cfc <___vfiprintf_internal_r+0x9c0>
 800a590:	02820074 	movhi	r10,2049
 800a594:	5283cd04 	addi	r10,r10,3892
 800a598:	da802415 	stw	r10,144(sp)
 800a59c:	003e8306 	br	8009fac <___vfiprintf_internal_r+0xc70>
 800a5a0:	d8801c17 	ldw	r2,112(sp)
 800a5a4:	dd002117 	ldw	r20,132(sp)
 800a5a8:	103eb926 	beq	r2,zero,800a090 <___vfiprintf_internal_r+0xd54>
 800a5ac:	d9002017 	ldw	r4,128(sp)
 800a5b0:	d9801a04 	addi	r6,sp,104
 800a5b4:	a00b883a 	mov	r5,r20
 800a5b8:	80092280 	call	8009228 <__sprint_r.part.0>
 800a5bc:	003eb406 	br	800a090 <___vfiprintf_internal_r+0xd54>
 800a5c0:	80c00043 	ldbu	r3,1(r16)
 800a5c4:	a5000814 	ori	r20,r20,32
 800a5c8:	84000044 	addi	r16,r16,1
 800a5cc:	18c03fcc 	andi	r3,r3,255
 800a5d0:	18c0201c 	xori	r3,r3,128
 800a5d4:	18ffe004 	addi	r3,r3,-128
 800a5d8:	003bb706 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 800a5dc:	a809883a 	mov	r4,r21
 800a5e0:	d8c02a15 	stw	r3,168(sp)
 800a5e4:	da002b15 	stw	r8,172(sp)
 800a5e8:	8001c900 	call	8001c90 <strlen>
 800a5ec:	d8c02a17 	ldw	r3,168(sp)
 800a5f0:	1027883a 	mov	r19,r2
 800a5f4:	df001d83 	ldbu	fp,118(sp)
 800a5f8:	d8c02215 	stw	r3,136(sp)
 800a5fc:	0013883a 	mov	r9,zero
 800a600:	da002b17 	ldw	r8,172(sp)
 800a604:	003c4d06 	br	800973c <___vfiprintf_internal_r+0x400>
 800a608:	d9402117 	ldw	r5,132(sp)
 800a60c:	d9002017 	ldw	r4,128(sp)
 800a610:	d9801a04 	addi	r6,sp,104
 800a614:	da402c15 	stw	r9,176(sp)
 800a618:	80092280 	call	8009228 <__sprint_r.part.0>
 800a61c:	da402c17 	ldw	r9,176(sp)
 800a620:	103e9a1e 	bne	r2,zero,800a08c <___vfiprintf_internal_r+0xd50>
 800a624:	d9401b17 	ldw	r5,108(sp)
 800a628:	d8801c17 	ldw	r2,112(sp)
 800a62c:	d811883a 	mov	r8,sp
 800a630:	29000044 	addi	r4,r5,1
 800a634:	003e4206 	br	8009f40 <___vfiprintf_internal_r+0xc04>
 800a638:	d9401b17 	ldw	r5,108(sp)
 800a63c:	01020074 	movhi	r4,2049
 800a640:	2103d104 	addi	r4,r4,3908
 800a644:	d9002415 	stw	r4,144(sp)
 800a648:	29400044 	addi	r5,r5,1
 800a64c:	003c6d06 	br	8009804 <___vfiprintf_internal_r+0x4c8>
 800a650:	0039883a 	mov	fp,zero
 800a654:	00800084 	movi	r2,2
 800a658:	10803fcc 	andi	r2,r2,255
 800a65c:	01000044 	movi	r4,1
 800a660:	11001e26 	beq	r2,r4,800a6dc <___vfiprintf_internal_r+0x13a0>
 800a664:	01000084 	movi	r4,2
 800a668:	11001e1e 	bne	r2,r4,800a6e4 <___vfiprintf_internal_r+0x13a8>
 800a66c:	1829883a 	mov	r20,r3
 800a670:	003eea06 	br	800a21c <___vfiprintf_internal_r+0xee0>
 800a674:	a007883a 	mov	r3,r20
 800a678:	00800044 	movi	r2,1
 800a67c:	003ff606 	br	800a658 <___vfiprintf_internal_r+0x131c>
 800a680:	00800184 	movi	r2,6
 800a684:	1240012e 	bgeu	r2,r9,800a68c <___vfiprintf_internal_r+0x1350>
 800a688:	1013883a 	mov	r9,r2
 800a68c:	4827883a 	mov	r19,r9
 800a690:	4825883a 	mov	r18,r9
 800a694:	48001516 	blt	r9,zero,800a6ec <___vfiprintf_internal_r+0x13b0>
 800a698:	05420074 	movhi	r21,2049
 800a69c:	d8c02215 	stw	r3,136(sp)
 800a6a0:	ad437104 	addi	r21,r21,3524
 800a6a4:	003d1406 	br	8009af8 <___vfiprintf_internal_r+0x7bc>
 800a6a8:	02820074 	movhi	r10,2049
 800a6ac:	5283cd04 	addi	r10,r10,3892
 800a6b0:	da802415 	stw	r10,144(sp)
 800a6b4:	200d883a 	mov	r6,r4
 800a6b8:	003c9106 	br	8009900 <___vfiprintf_internal_r+0x5c4>
 800a6bc:	5021883a 	mov	r16,r10
 800a6c0:	0013883a 	mov	r9,zero
 800a6c4:	003b7d06 	br	80094bc <___vfiprintf_internal_r+0x180>
 800a6c8:	4827883a 	mov	r19,r9
 800a6cc:	df001d83 	ldbu	fp,118(sp)
 800a6d0:	d8c02215 	stw	r3,136(sp)
 800a6d4:	0013883a 	mov	r9,zero
 800a6d8:	003c1806 	br	800973c <___vfiprintf_internal_r+0x400>
 800a6dc:	1829883a 	mov	r20,r3
 800a6e0:	003d1806 	br	8009b44 <___vfiprintf_internal_r+0x808>
 800a6e4:	1829883a 	mov	r20,r3
 800a6e8:	003ccd06 	br	8009a20 <___vfiprintf_internal_r+0x6e4>
 800a6ec:	0025883a 	mov	r18,zero
 800a6f0:	003fe906 	br	800a698 <___vfiprintf_internal_r+0x135c>
 800a6f4:	d8802217 	ldw	r2,136(sp)
 800a6f8:	80c00043 	ldbu	r3,1(r16)
 800a6fc:	5021883a 	mov	r16,r10
 800a700:	12400017 	ldw	r9,0(r2)
 800a704:	10800104 	addi	r2,r2,4
 800a708:	d8802215 	stw	r2,136(sp)
 800a70c:	483faf0e 	bge	r9,zero,800a5cc <___vfiprintf_internal_r+0x1290>
 800a710:	18c03fcc 	andi	r3,r3,255
 800a714:	18c0201c 	xori	r3,r3,128
 800a718:	027fffc4 	movi	r9,-1
 800a71c:	18ffe004 	addi	r3,r3,-128
 800a720:	003b6506 	br	80094b8 <___vfiprintf_internal_r+0x17c>
 800a724:	d9c01d85 	stb	r7,118(sp)
 800a728:	003ca006 	br	80099ac <___vfiprintf_internal_r+0x670>
 800a72c:	d9c01d85 	stb	r7,118(sp)
 800a730:	003cad06 	br	80099e8 <___vfiprintf_internal_r+0x6ac>
 800a734:	d9c01d85 	stb	r7,118(sp)
 800a738:	003d7d06 	br	8009d30 <___vfiprintf_internal_r+0x9f4>
 800a73c:	d9c01d85 	stb	r7,118(sp)
 800a740:	003d5f06 	br	8009cc0 <___vfiprintf_internal_r+0x984>
 800a744:	a080004c 	andi	r2,r20,1
 800a748:	0039883a 	mov	fp,zero
 800a74c:	10000526 	beq	r2,zero,800a764 <___vfiprintf_internal_r+0x1428>
 800a750:	00800c04 	movi	r2,48
 800a754:	d88019c5 	stb	r2,103(sp)
 800a758:	dcc02717 	ldw	r19,156(sp)
 800a75c:	dd4019c4 	addi	r21,sp,103
 800a760:	003bf606 	br	800973c <___vfiprintf_internal_r+0x400>
 800a764:	0027883a 	mov	r19,zero
 800a768:	dd401a04 	addi	r21,sp,104
 800a76c:	003bf306 	br	800973c <___vfiprintf_internal_r+0x400>
 800a770:	d9c01d85 	stb	r7,118(sp)
 800a774:	003dc806 	br	8009e98 <___vfiprintf_internal_r+0xb5c>
 800a778:	d9c01d85 	stb	r7,118(sp)
 800a77c:	003d3a06 	br	8009c68 <___vfiprintf_internal_r+0x92c>
 800a780:	d9c01d85 	stb	r7,118(sp)
 800a784:	003d2a06 	br	8009c30 <___vfiprintf_internal_r+0x8f4>
 800a788:	d9c01d85 	stb	r7,118(sp)
 800a78c:	003cde06 	br	8009b08 <___vfiprintf_internal_r+0x7cc>
 800a790:	d9c01d85 	stb	r7,118(sp)
 800a794:	003cbc06 	br	8009a88 <___vfiprintf_internal_r+0x74c>

0800a798 <__vfiprintf_internal>:
 800a798:	00820074 	movhi	r2,2049
 800a79c:	108a9204 	addi	r2,r2,10824
 800a7a0:	300f883a 	mov	r7,r6
 800a7a4:	280d883a 	mov	r6,r5
 800a7a8:	200b883a 	mov	r5,r4
 800a7ac:	11000017 	ldw	r4,0(r2)
 800a7b0:	800933c1 	jmpi	800933c <___vfiprintf_internal_r>

0800a7b4 <__sbprintf>:
 800a7b4:	2880030b 	ldhu	r2,12(r5)
 800a7b8:	2ac01917 	ldw	r11,100(r5)
 800a7bc:	2a80038b 	ldhu	r10,14(r5)
 800a7c0:	2a400717 	ldw	r9,28(r5)
 800a7c4:	2a000917 	ldw	r8,36(r5)
 800a7c8:	defee204 	addi	sp,sp,-1144
 800a7cc:	00c10004 	movi	r3,1024
 800a7d0:	dc011a15 	stw	r16,1128(sp)
 800a7d4:	10bfff4c 	andi	r2,r2,65533
 800a7d8:	2821883a 	mov	r16,r5
 800a7dc:	d8cb883a 	add	r5,sp,r3
 800a7e0:	dc811c15 	stw	r18,1136(sp)
 800a7e4:	dc411b15 	stw	r17,1132(sp)
 800a7e8:	dfc11d15 	stw	ra,1140(sp)
 800a7ec:	2025883a 	mov	r18,r4
 800a7f0:	d881030d 	sth	r2,1036(sp)
 800a7f4:	dac11915 	stw	r11,1124(sp)
 800a7f8:	da81038d 	sth	r10,1038(sp)
 800a7fc:	da410715 	stw	r9,1052(sp)
 800a800:	da010915 	stw	r8,1060(sp)
 800a804:	dec10015 	stw	sp,1024(sp)
 800a808:	dec10415 	stw	sp,1040(sp)
 800a80c:	d8c10215 	stw	r3,1032(sp)
 800a810:	d8c10515 	stw	r3,1044(sp)
 800a814:	d8010615 	stw	zero,1048(sp)
 800a818:	800933c0 	call	800933c <___vfiprintf_internal_r>
 800a81c:	1023883a 	mov	r17,r2
 800a820:	10000416 	blt	r2,zero,800a834 <__sbprintf+0x80>
 800a824:	d9410004 	addi	r5,sp,1024
 800a828:	9009883a 	mov	r4,r18
 800a82c:	8005bf00 	call	8005bf0 <_fflush_r>
 800a830:	10000d1e 	bne	r2,zero,800a868 <__sbprintf+0xb4>
 800a834:	d881030b 	ldhu	r2,1036(sp)
 800a838:	1080100c 	andi	r2,r2,64
 800a83c:	10000326 	beq	r2,zero,800a84c <__sbprintf+0x98>
 800a840:	8080030b 	ldhu	r2,12(r16)
 800a844:	10801014 	ori	r2,r2,64
 800a848:	8080030d 	sth	r2,12(r16)
 800a84c:	8805883a 	mov	r2,r17
 800a850:	dfc11d17 	ldw	ra,1140(sp)
 800a854:	dc811c17 	ldw	r18,1136(sp)
 800a858:	dc411b17 	ldw	r17,1132(sp)
 800a85c:	dc011a17 	ldw	r16,1128(sp)
 800a860:	dec11e04 	addi	sp,sp,1144
 800a864:	f800283a 	ret
 800a868:	047fffc4 	movi	r17,-1
 800a86c:	003ff106 	br	800a834 <__sbprintf+0x80>

0800a870 <_write_r>:
 800a870:	defffd04 	addi	sp,sp,-12
 800a874:	2805883a 	mov	r2,r5
 800a878:	dc000015 	stw	r16,0(sp)
 800a87c:	04020074 	movhi	r16,2049
 800a880:	dc400115 	stw	r17,4(sp)
 800a884:	300b883a 	mov	r5,r6
 800a888:	84116904 	addi	r16,r16,17828
 800a88c:	2023883a 	mov	r17,r4
 800a890:	380d883a 	mov	r6,r7
 800a894:	1009883a 	mov	r4,r2
 800a898:	dfc00215 	stw	ra,8(sp)
 800a89c:	80000015 	stw	zero,0(r16)
 800a8a0:	800ec880 	call	800ec88 <write>
 800a8a4:	00ffffc4 	movi	r3,-1
 800a8a8:	10c00526 	beq	r2,r3,800a8c0 <_write_r+0x50>
 800a8ac:	dfc00217 	ldw	ra,8(sp)
 800a8b0:	dc400117 	ldw	r17,4(sp)
 800a8b4:	dc000017 	ldw	r16,0(sp)
 800a8b8:	dec00304 	addi	sp,sp,12
 800a8bc:	f800283a 	ret
 800a8c0:	80c00017 	ldw	r3,0(r16)
 800a8c4:	183ff926 	beq	r3,zero,800a8ac <_write_r+0x3c>
 800a8c8:	88c00015 	stw	r3,0(r17)
 800a8cc:	003ff706 	br	800a8ac <_write_r+0x3c>

0800a8d0 <_close_r>:
 800a8d0:	defffd04 	addi	sp,sp,-12
 800a8d4:	dc000015 	stw	r16,0(sp)
 800a8d8:	04020074 	movhi	r16,2049
 800a8dc:	dc400115 	stw	r17,4(sp)
 800a8e0:	84116904 	addi	r16,r16,17828
 800a8e4:	2023883a 	mov	r17,r4
 800a8e8:	2809883a 	mov	r4,r5
 800a8ec:	dfc00215 	stw	ra,8(sp)
 800a8f0:	80000015 	stw	zero,0(r16)
 800a8f4:	800e4480 	call	800e448 <close>
 800a8f8:	00ffffc4 	movi	r3,-1
 800a8fc:	10c00526 	beq	r2,r3,800a914 <_close_r+0x44>
 800a900:	dfc00217 	ldw	ra,8(sp)
 800a904:	dc400117 	ldw	r17,4(sp)
 800a908:	dc000017 	ldw	r16,0(sp)
 800a90c:	dec00304 	addi	sp,sp,12
 800a910:	f800283a 	ret
 800a914:	80c00017 	ldw	r3,0(r16)
 800a918:	183ff926 	beq	r3,zero,800a900 <_close_r+0x30>
 800a91c:	88c00015 	stw	r3,0(r17)
 800a920:	003ff706 	br	800a900 <_close_r+0x30>

0800a924 <_calloc_r>:
 800a924:	298b383a 	mul	r5,r5,r6
 800a928:	defffe04 	addi	sp,sp,-8
 800a92c:	dfc00115 	stw	ra,4(sp)
 800a930:	dc000015 	stw	r16,0(sp)
 800a934:	8006d2c0 	call	8006d2c <_malloc_r>
 800a938:	10002926 	beq	r2,zero,800a9e0 <_calloc_r+0xbc>
 800a93c:	11bfff17 	ldw	r6,-4(r2)
 800a940:	1021883a 	mov	r16,r2
 800a944:	00bfff04 	movi	r2,-4
 800a948:	308c703a 	and	r6,r6,r2
 800a94c:	00c00904 	movi	r3,36
 800a950:	308d883a 	add	r6,r6,r2
 800a954:	19801636 	bltu	r3,r6,800a9b0 <_calloc_r+0x8c>
 800a958:	008004c4 	movi	r2,19
 800a95c:	11800b2e 	bgeu	r2,r6,800a98c <_calloc_r+0x68>
 800a960:	80000015 	stw	zero,0(r16)
 800a964:	80000115 	stw	zero,4(r16)
 800a968:	008006c4 	movi	r2,27
 800a96c:	11801a2e 	bgeu	r2,r6,800a9d8 <_calloc_r+0xb4>
 800a970:	80000215 	stw	zero,8(r16)
 800a974:	80000315 	stw	zero,12(r16)
 800a978:	30c0151e 	bne	r6,r3,800a9d0 <_calloc_r+0xac>
 800a97c:	80000415 	stw	zero,16(r16)
 800a980:	80800604 	addi	r2,r16,24
 800a984:	80000515 	stw	zero,20(r16)
 800a988:	00000106 	br	800a990 <_calloc_r+0x6c>
 800a98c:	8005883a 	mov	r2,r16
 800a990:	10000015 	stw	zero,0(r2)
 800a994:	10000115 	stw	zero,4(r2)
 800a998:	10000215 	stw	zero,8(r2)
 800a99c:	8005883a 	mov	r2,r16
 800a9a0:	dfc00117 	ldw	ra,4(sp)
 800a9a4:	dc000017 	ldw	r16,0(sp)
 800a9a8:	dec00204 	addi	sp,sp,8
 800a9ac:	f800283a 	ret
 800a9b0:	000b883a 	mov	r5,zero
 800a9b4:	8009883a 	mov	r4,r16
 800a9b8:	80078c00 	call	80078c0 <memset>
 800a9bc:	8005883a 	mov	r2,r16
 800a9c0:	dfc00117 	ldw	ra,4(sp)
 800a9c4:	dc000017 	ldw	r16,0(sp)
 800a9c8:	dec00204 	addi	sp,sp,8
 800a9cc:	f800283a 	ret
 800a9d0:	80800404 	addi	r2,r16,16
 800a9d4:	003fee06 	br	800a990 <_calloc_r+0x6c>
 800a9d8:	80800204 	addi	r2,r16,8
 800a9dc:	003fec06 	br	800a990 <_calloc_r+0x6c>
 800a9e0:	0005883a 	mov	r2,zero
 800a9e4:	003fee06 	br	800a9a0 <_calloc_r+0x7c>

0800a9e8 <_fclose_r>:
 800a9e8:	28003926 	beq	r5,zero,800aad0 <_fclose_r+0xe8>
 800a9ec:	defffc04 	addi	sp,sp,-16
 800a9f0:	dc400115 	stw	r17,4(sp)
 800a9f4:	dc000015 	stw	r16,0(sp)
 800a9f8:	dfc00315 	stw	ra,12(sp)
 800a9fc:	dc800215 	stw	r18,8(sp)
 800aa00:	2023883a 	mov	r17,r4
 800aa04:	2821883a 	mov	r16,r5
 800aa08:	20000226 	beq	r4,zero,800aa14 <_fclose_r+0x2c>
 800aa0c:	20800e17 	ldw	r2,56(r4)
 800aa10:	10002726 	beq	r2,zero,800aab0 <_fclose_r+0xc8>
 800aa14:	8080030f 	ldh	r2,12(r16)
 800aa18:	1000071e 	bne	r2,zero,800aa38 <_fclose_r+0x50>
 800aa1c:	0005883a 	mov	r2,zero
 800aa20:	dfc00317 	ldw	ra,12(sp)
 800aa24:	dc800217 	ldw	r18,8(sp)
 800aa28:	dc400117 	ldw	r17,4(sp)
 800aa2c:	dc000017 	ldw	r16,0(sp)
 800aa30:	dec00404 	addi	sp,sp,16
 800aa34:	f800283a 	ret
 800aa38:	800b883a 	mov	r5,r16
 800aa3c:	8809883a 	mov	r4,r17
 800aa40:	80059d40 	call	80059d4 <__sflush_r>
 800aa44:	1025883a 	mov	r18,r2
 800aa48:	80800b17 	ldw	r2,44(r16)
 800aa4c:	10000426 	beq	r2,zero,800aa60 <_fclose_r+0x78>
 800aa50:	81400717 	ldw	r5,28(r16)
 800aa54:	8809883a 	mov	r4,r17
 800aa58:	103ee83a 	callr	r2
 800aa5c:	10001616 	blt	r2,zero,800aab8 <_fclose_r+0xd0>
 800aa60:	8080030b 	ldhu	r2,12(r16)
 800aa64:	1080200c 	andi	r2,r2,128
 800aa68:	1000151e 	bne	r2,zero,800aac0 <_fclose_r+0xd8>
 800aa6c:	81400c17 	ldw	r5,48(r16)
 800aa70:	28000526 	beq	r5,zero,800aa88 <_fclose_r+0xa0>
 800aa74:	80801004 	addi	r2,r16,64
 800aa78:	28800226 	beq	r5,r2,800aa84 <_fclose_r+0x9c>
 800aa7c:	8809883a 	mov	r4,r17
 800aa80:	80061400 	call	8006140 <_free_r>
 800aa84:	80000c15 	stw	zero,48(r16)
 800aa88:	81401117 	ldw	r5,68(r16)
 800aa8c:	28000326 	beq	r5,zero,800aa9c <_fclose_r+0xb4>
 800aa90:	8809883a 	mov	r4,r17
 800aa94:	80061400 	call	8006140 <_free_r>
 800aa98:	80001115 	stw	zero,68(r16)
 800aa9c:	8005fdc0 	call	8005fdc <__sfp_lock_acquire>
 800aaa0:	8000030d 	sth	zero,12(r16)
 800aaa4:	8005fe00 	call	8005fe0 <__sfp_lock_release>
 800aaa8:	9005883a 	mov	r2,r18
 800aaac:	003fdc06 	br	800aa20 <_fclose_r+0x38>
 800aab0:	8005fcc0 	call	8005fcc <__sinit>
 800aab4:	003fd706 	br	800aa14 <_fclose_r+0x2c>
 800aab8:	04bfffc4 	movi	r18,-1
 800aabc:	003fe806 	br	800aa60 <_fclose_r+0x78>
 800aac0:	81400417 	ldw	r5,16(r16)
 800aac4:	8809883a 	mov	r4,r17
 800aac8:	80061400 	call	8006140 <_free_r>
 800aacc:	003fe706 	br	800aa6c <_fclose_r+0x84>
 800aad0:	0005883a 	mov	r2,zero
 800aad4:	f800283a 	ret

0800aad8 <fclose>:
 800aad8:	00820074 	movhi	r2,2049
 800aadc:	108a9204 	addi	r2,r2,10824
 800aae0:	200b883a 	mov	r5,r4
 800aae4:	11000017 	ldw	r4,0(r2)
 800aae8:	800a9e81 	jmpi	800a9e8 <_fclose_r>

0800aaec <__fputwc>:
 800aaec:	defff804 	addi	sp,sp,-32
 800aaf0:	dcc00415 	stw	r19,16(sp)
 800aaf4:	dc800315 	stw	r18,12(sp)
 800aaf8:	dc000115 	stw	r16,4(sp)
 800aafc:	dfc00715 	stw	ra,28(sp)
 800ab00:	dd400615 	stw	r21,24(sp)
 800ab04:	dd000515 	stw	r20,20(sp)
 800ab08:	dc400215 	stw	r17,8(sp)
 800ab0c:	2027883a 	mov	r19,r4
 800ab10:	2825883a 	mov	r18,r5
 800ab14:	3021883a 	mov	r16,r6
 800ab18:	8006b1c0 	call	8006b1c <__locale_mb_cur_max>
 800ab1c:	00c00044 	movi	r3,1
 800ab20:	10c03e26 	beq	r2,r3,800ac1c <__fputwc+0x130>
 800ab24:	81c01704 	addi	r7,r16,92
 800ab28:	900d883a 	mov	r6,r18
 800ab2c:	d80b883a 	mov	r5,sp
 800ab30:	9809883a 	mov	r4,r19
 800ab34:	800afbc0 	call	800afbc <_wcrtomb_r>
 800ab38:	1029883a 	mov	r20,r2
 800ab3c:	00bfffc4 	movi	r2,-1
 800ab40:	a0802026 	beq	r20,r2,800abc4 <__fputwc+0xd8>
 800ab44:	d9400003 	ldbu	r5,0(sp)
 800ab48:	a0001c26 	beq	r20,zero,800abbc <__fputwc+0xd0>
 800ab4c:	0023883a 	mov	r17,zero
 800ab50:	05400284 	movi	r21,10
 800ab54:	00000906 	br	800ab7c <__fputwc+0x90>
 800ab58:	80800017 	ldw	r2,0(r16)
 800ab5c:	11400005 	stb	r5,0(r2)
 800ab60:	80c00017 	ldw	r3,0(r16)
 800ab64:	18c00044 	addi	r3,r3,1
 800ab68:	80c00015 	stw	r3,0(r16)
 800ab6c:	8c400044 	addi	r17,r17,1
 800ab70:	dc45883a 	add	r2,sp,r17
 800ab74:	8d00112e 	bgeu	r17,r20,800abbc <__fputwc+0xd0>
 800ab78:	11400003 	ldbu	r5,0(r2)
 800ab7c:	80c00217 	ldw	r3,8(r16)
 800ab80:	18ffffc4 	addi	r3,r3,-1
 800ab84:	80c00215 	stw	r3,8(r16)
 800ab88:	183ff30e 	bge	r3,zero,800ab58 <__fputwc+0x6c>
 800ab8c:	80800617 	ldw	r2,24(r16)
 800ab90:	18801916 	blt	r3,r2,800abf8 <__fputwc+0x10c>
 800ab94:	80800017 	ldw	r2,0(r16)
 800ab98:	11400005 	stb	r5,0(r2)
 800ab9c:	80800017 	ldw	r2,0(r16)
 800aba0:	10c00003 	ldbu	r3,0(r2)
 800aba4:	10800044 	addi	r2,r2,1
 800aba8:	1d402326 	beq	r3,r21,800ac38 <__fputwc+0x14c>
 800abac:	80800015 	stw	r2,0(r16)
 800abb0:	8c400044 	addi	r17,r17,1
 800abb4:	dc45883a 	add	r2,sp,r17
 800abb8:	8d3fef36 	bltu	r17,r20,800ab78 <__fputwc+0x8c>
 800abbc:	9005883a 	mov	r2,r18
 800abc0:	00000406 	br	800abd4 <__fputwc+0xe8>
 800abc4:	80c0030b 	ldhu	r3,12(r16)
 800abc8:	a005883a 	mov	r2,r20
 800abcc:	18c01014 	ori	r3,r3,64
 800abd0:	80c0030d 	sth	r3,12(r16)
 800abd4:	dfc00717 	ldw	ra,28(sp)
 800abd8:	dd400617 	ldw	r21,24(sp)
 800abdc:	dd000517 	ldw	r20,20(sp)
 800abe0:	dcc00417 	ldw	r19,16(sp)
 800abe4:	dc800317 	ldw	r18,12(sp)
 800abe8:	dc400217 	ldw	r17,8(sp)
 800abec:	dc000117 	ldw	r16,4(sp)
 800abf0:	dec00804 	addi	sp,sp,32
 800abf4:	f800283a 	ret
 800abf8:	800d883a 	mov	r6,r16
 800abfc:	29403fcc 	andi	r5,r5,255
 800ac00:	9809883a 	mov	r4,r19
 800ac04:	800ae640 	call	800ae64 <__swbuf_r>
 800ac08:	10bfffe0 	cmpeqi	r2,r2,-1
 800ac0c:	10803fcc 	andi	r2,r2,255
 800ac10:	103fd626 	beq	r2,zero,800ab6c <__fputwc+0x80>
 800ac14:	00bfffc4 	movi	r2,-1
 800ac18:	003fee06 	br	800abd4 <__fputwc+0xe8>
 800ac1c:	90ffffc4 	addi	r3,r18,-1
 800ac20:	01003f84 	movi	r4,254
 800ac24:	20ffbf36 	bltu	r4,r3,800ab24 <__fputwc+0x38>
 800ac28:	900b883a 	mov	r5,r18
 800ac2c:	dc800005 	stb	r18,0(sp)
 800ac30:	1029883a 	mov	r20,r2
 800ac34:	003fc506 	br	800ab4c <__fputwc+0x60>
 800ac38:	800d883a 	mov	r6,r16
 800ac3c:	a80b883a 	mov	r5,r21
 800ac40:	9809883a 	mov	r4,r19
 800ac44:	800ae640 	call	800ae64 <__swbuf_r>
 800ac48:	10bfffe0 	cmpeqi	r2,r2,-1
 800ac4c:	003fef06 	br	800ac0c <__fputwc+0x120>

0800ac50 <_fputwc_r>:
 800ac50:	3080030b 	ldhu	r2,12(r6)
 800ac54:	10c8000c 	andi	r3,r2,8192
 800ac58:	1800051e 	bne	r3,zero,800ac70 <_fputwc_r+0x20>
 800ac5c:	30c01917 	ldw	r3,100(r6)
 800ac60:	10880014 	ori	r2,r2,8192
 800ac64:	3080030d 	sth	r2,12(r6)
 800ac68:	18880014 	ori	r2,r3,8192
 800ac6c:	30801915 	stw	r2,100(r6)
 800ac70:	800aaec1 	jmpi	800aaec <__fputwc>

0800ac74 <fputwc>:
 800ac74:	00820074 	movhi	r2,2049
 800ac78:	defffc04 	addi	sp,sp,-16
 800ac7c:	108a9204 	addi	r2,r2,10824
 800ac80:	dc000115 	stw	r16,4(sp)
 800ac84:	14000017 	ldw	r16,0(r2)
 800ac88:	dc400215 	stw	r17,8(sp)
 800ac8c:	dfc00315 	stw	ra,12(sp)
 800ac90:	2023883a 	mov	r17,r4
 800ac94:	80000226 	beq	r16,zero,800aca0 <fputwc+0x2c>
 800ac98:	80800e17 	ldw	r2,56(r16)
 800ac9c:	10001026 	beq	r2,zero,800ace0 <fputwc+0x6c>
 800aca0:	2880030b 	ldhu	r2,12(r5)
 800aca4:	10c8000c 	andi	r3,r2,8192
 800aca8:	1800051e 	bne	r3,zero,800acc0 <fputwc+0x4c>
 800acac:	28c01917 	ldw	r3,100(r5)
 800acb0:	10880014 	ori	r2,r2,8192
 800acb4:	2880030d 	sth	r2,12(r5)
 800acb8:	18880014 	ori	r2,r3,8192
 800acbc:	28801915 	stw	r2,100(r5)
 800acc0:	280d883a 	mov	r6,r5
 800acc4:	8009883a 	mov	r4,r16
 800acc8:	880b883a 	mov	r5,r17
 800accc:	dfc00317 	ldw	ra,12(sp)
 800acd0:	dc400217 	ldw	r17,8(sp)
 800acd4:	dc000117 	ldw	r16,4(sp)
 800acd8:	dec00404 	addi	sp,sp,16
 800acdc:	800aaec1 	jmpi	800aaec <__fputwc>
 800ace0:	8009883a 	mov	r4,r16
 800ace4:	d9400015 	stw	r5,0(sp)
 800ace8:	8005fcc0 	call	8005fcc <__sinit>
 800acec:	d9400017 	ldw	r5,0(sp)
 800acf0:	003feb06 	br	800aca0 <fputwc+0x2c>

0800acf4 <_fstat_r>:
 800acf4:	defffd04 	addi	sp,sp,-12
 800acf8:	2805883a 	mov	r2,r5
 800acfc:	dc000015 	stw	r16,0(sp)
 800ad00:	04020074 	movhi	r16,2049
 800ad04:	dc400115 	stw	r17,4(sp)
 800ad08:	84116904 	addi	r16,r16,17828
 800ad0c:	2023883a 	mov	r17,r4
 800ad10:	300b883a 	mov	r5,r6
 800ad14:	1009883a 	mov	r4,r2
 800ad18:	dfc00215 	stw	ra,8(sp)
 800ad1c:	80000015 	stw	zero,0(r16)
 800ad20:	800e5800 	call	800e580 <fstat>
 800ad24:	00ffffc4 	movi	r3,-1
 800ad28:	10c00526 	beq	r2,r3,800ad40 <_fstat_r+0x4c>
 800ad2c:	dfc00217 	ldw	ra,8(sp)
 800ad30:	dc400117 	ldw	r17,4(sp)
 800ad34:	dc000017 	ldw	r16,0(sp)
 800ad38:	dec00304 	addi	sp,sp,12
 800ad3c:	f800283a 	ret
 800ad40:	80c00017 	ldw	r3,0(r16)
 800ad44:	183ff926 	beq	r3,zero,800ad2c <_fstat_r+0x38>
 800ad48:	88c00015 	stw	r3,0(r17)
 800ad4c:	003ff706 	br	800ad2c <_fstat_r+0x38>

0800ad50 <_isatty_r>:
 800ad50:	defffd04 	addi	sp,sp,-12
 800ad54:	dc000015 	stw	r16,0(sp)
 800ad58:	04020074 	movhi	r16,2049
 800ad5c:	dc400115 	stw	r17,4(sp)
 800ad60:	84116904 	addi	r16,r16,17828
 800ad64:	2023883a 	mov	r17,r4
 800ad68:	2809883a 	mov	r4,r5
 800ad6c:	dfc00215 	stw	ra,8(sp)
 800ad70:	80000015 	stw	zero,0(r16)
 800ad74:	800e66c0 	call	800e66c <isatty>
 800ad78:	00ffffc4 	movi	r3,-1
 800ad7c:	10c00526 	beq	r2,r3,800ad94 <_isatty_r+0x44>
 800ad80:	dfc00217 	ldw	ra,8(sp)
 800ad84:	dc400117 	ldw	r17,4(sp)
 800ad88:	dc000017 	ldw	r16,0(sp)
 800ad8c:	dec00304 	addi	sp,sp,12
 800ad90:	f800283a 	ret
 800ad94:	80c00017 	ldw	r3,0(r16)
 800ad98:	183ff926 	beq	r3,zero,800ad80 <_isatty_r+0x30>
 800ad9c:	88c00015 	stw	r3,0(r17)
 800ada0:	003ff706 	br	800ad80 <_isatty_r+0x30>

0800ada4 <_lseek_r>:
 800ada4:	defffd04 	addi	sp,sp,-12
 800ada8:	2805883a 	mov	r2,r5
 800adac:	dc000015 	stw	r16,0(sp)
 800adb0:	04020074 	movhi	r16,2049
 800adb4:	dc400115 	stw	r17,4(sp)
 800adb8:	300b883a 	mov	r5,r6
 800adbc:	84116904 	addi	r16,r16,17828
 800adc0:	2023883a 	mov	r17,r4
 800adc4:	380d883a 	mov	r6,r7
 800adc8:	1009883a 	mov	r4,r2
 800adcc:	dfc00215 	stw	ra,8(sp)
 800add0:	80000015 	stw	zero,0(r16)
 800add4:	800e8380 	call	800e838 <lseek>
 800add8:	00ffffc4 	movi	r3,-1
 800addc:	10c00526 	beq	r2,r3,800adf4 <_lseek_r+0x50>
 800ade0:	dfc00217 	ldw	ra,8(sp)
 800ade4:	dc400117 	ldw	r17,4(sp)
 800ade8:	dc000017 	ldw	r16,0(sp)
 800adec:	dec00304 	addi	sp,sp,12
 800adf0:	f800283a 	ret
 800adf4:	80c00017 	ldw	r3,0(r16)
 800adf8:	183ff926 	beq	r3,zero,800ade0 <_lseek_r+0x3c>
 800adfc:	88c00015 	stw	r3,0(r17)
 800ae00:	003ff706 	br	800ade0 <_lseek_r+0x3c>

0800ae04 <_read_r>:
 800ae04:	defffd04 	addi	sp,sp,-12
 800ae08:	2805883a 	mov	r2,r5
 800ae0c:	dc000015 	stw	r16,0(sp)
 800ae10:	04020074 	movhi	r16,2049
 800ae14:	dc400115 	stw	r17,4(sp)
 800ae18:	300b883a 	mov	r5,r6
 800ae1c:	84116904 	addi	r16,r16,17828
 800ae20:	2023883a 	mov	r17,r4
 800ae24:	380d883a 	mov	r6,r7
 800ae28:	1009883a 	mov	r4,r2
 800ae2c:	dfc00215 	stw	ra,8(sp)
 800ae30:	80000015 	stw	zero,0(r16)
 800ae34:	800ea0c0 	call	800ea0c <read>
 800ae38:	00ffffc4 	movi	r3,-1
 800ae3c:	10c00526 	beq	r2,r3,800ae54 <_read_r+0x50>
 800ae40:	dfc00217 	ldw	ra,8(sp)
 800ae44:	dc400117 	ldw	r17,4(sp)
 800ae48:	dc000017 	ldw	r16,0(sp)
 800ae4c:	dec00304 	addi	sp,sp,12
 800ae50:	f800283a 	ret
 800ae54:	80c00017 	ldw	r3,0(r16)
 800ae58:	183ff926 	beq	r3,zero,800ae40 <_read_r+0x3c>
 800ae5c:	88c00015 	stw	r3,0(r17)
 800ae60:	003ff706 	br	800ae40 <_read_r+0x3c>

0800ae64 <__swbuf_r>:
 800ae64:	defffb04 	addi	sp,sp,-20
 800ae68:	dcc00315 	stw	r19,12(sp)
 800ae6c:	dc800215 	stw	r18,8(sp)
 800ae70:	dc000015 	stw	r16,0(sp)
 800ae74:	dfc00415 	stw	ra,16(sp)
 800ae78:	dc400115 	stw	r17,4(sp)
 800ae7c:	2025883a 	mov	r18,r4
 800ae80:	2827883a 	mov	r19,r5
 800ae84:	3021883a 	mov	r16,r6
 800ae88:	20000226 	beq	r4,zero,800ae94 <__swbuf_r+0x30>
 800ae8c:	20800e17 	ldw	r2,56(r4)
 800ae90:	10004226 	beq	r2,zero,800af9c <__swbuf_r+0x138>
 800ae94:	80800617 	ldw	r2,24(r16)
 800ae98:	8100030b 	ldhu	r4,12(r16)
 800ae9c:	80800215 	stw	r2,8(r16)
 800aea0:	2080020c 	andi	r2,r4,8
 800aea4:	10003626 	beq	r2,zero,800af80 <__swbuf_r+0x11c>
 800aea8:	80c00417 	ldw	r3,16(r16)
 800aeac:	18003426 	beq	r3,zero,800af80 <__swbuf_r+0x11c>
 800aeb0:	2088000c 	andi	r2,r4,8192
 800aeb4:	9c403fcc 	andi	r17,r19,255
 800aeb8:	10001a26 	beq	r2,zero,800af24 <__swbuf_r+0xc0>
 800aebc:	80800017 	ldw	r2,0(r16)
 800aec0:	81000517 	ldw	r4,20(r16)
 800aec4:	10c7c83a 	sub	r3,r2,r3
 800aec8:	1900200e 	bge	r3,r4,800af4c <__swbuf_r+0xe8>
 800aecc:	18c00044 	addi	r3,r3,1
 800aed0:	81000217 	ldw	r4,8(r16)
 800aed4:	11400044 	addi	r5,r2,1
 800aed8:	81400015 	stw	r5,0(r16)
 800aedc:	213fffc4 	addi	r4,r4,-1
 800aee0:	81000215 	stw	r4,8(r16)
 800aee4:	14c00005 	stb	r19,0(r2)
 800aee8:	80800517 	ldw	r2,20(r16)
 800aeec:	10c01e26 	beq	r2,r3,800af68 <__swbuf_r+0x104>
 800aef0:	8080030b 	ldhu	r2,12(r16)
 800aef4:	1080004c 	andi	r2,r2,1
 800aef8:	10000226 	beq	r2,zero,800af04 <__swbuf_r+0xa0>
 800aefc:	00800284 	movi	r2,10
 800af00:	88801926 	beq	r17,r2,800af68 <__swbuf_r+0x104>
 800af04:	8805883a 	mov	r2,r17
 800af08:	dfc00417 	ldw	ra,16(sp)
 800af0c:	dcc00317 	ldw	r19,12(sp)
 800af10:	dc800217 	ldw	r18,8(sp)
 800af14:	dc400117 	ldw	r17,4(sp)
 800af18:	dc000017 	ldw	r16,0(sp)
 800af1c:	dec00504 	addi	sp,sp,20
 800af20:	f800283a 	ret
 800af24:	81401917 	ldw	r5,100(r16)
 800af28:	00b7ffc4 	movi	r2,-8193
 800af2c:	21080014 	ori	r4,r4,8192
 800af30:	2884703a 	and	r2,r5,r2
 800af34:	80801915 	stw	r2,100(r16)
 800af38:	80800017 	ldw	r2,0(r16)
 800af3c:	8100030d 	sth	r4,12(r16)
 800af40:	81000517 	ldw	r4,20(r16)
 800af44:	10c7c83a 	sub	r3,r2,r3
 800af48:	193fe016 	blt	r3,r4,800aecc <__swbuf_r+0x68>
 800af4c:	800b883a 	mov	r5,r16
 800af50:	9009883a 	mov	r4,r18
 800af54:	8005bf00 	call	8005bf0 <_fflush_r>
 800af58:	1000071e 	bne	r2,zero,800af78 <__swbuf_r+0x114>
 800af5c:	80800017 	ldw	r2,0(r16)
 800af60:	00c00044 	movi	r3,1
 800af64:	003fda06 	br	800aed0 <__swbuf_r+0x6c>
 800af68:	800b883a 	mov	r5,r16
 800af6c:	9009883a 	mov	r4,r18
 800af70:	8005bf00 	call	8005bf0 <_fflush_r>
 800af74:	103fe326 	beq	r2,zero,800af04 <__swbuf_r+0xa0>
 800af78:	00bfffc4 	movi	r2,-1
 800af7c:	003fe206 	br	800af08 <__swbuf_r+0xa4>
 800af80:	800b883a 	mov	r5,r16
 800af84:	9009883a 	mov	r4,r18
 800af88:	8003ff80 	call	8003ff8 <__swsetup_r>
 800af8c:	103ffa1e 	bne	r2,zero,800af78 <__swbuf_r+0x114>
 800af90:	8100030b 	ldhu	r4,12(r16)
 800af94:	80c00417 	ldw	r3,16(r16)
 800af98:	003fc506 	br	800aeb0 <__swbuf_r+0x4c>
 800af9c:	8005fcc0 	call	8005fcc <__sinit>
 800afa0:	003fbc06 	br	800ae94 <__swbuf_r+0x30>

0800afa4 <__swbuf>:
 800afa4:	00820074 	movhi	r2,2049
 800afa8:	108a9204 	addi	r2,r2,10824
 800afac:	280d883a 	mov	r6,r5
 800afb0:	200b883a 	mov	r5,r4
 800afb4:	11000017 	ldw	r4,0(r2)
 800afb8:	800ae641 	jmpi	800ae64 <__swbuf_r>

0800afbc <_wcrtomb_r>:
 800afbc:	defff604 	addi	sp,sp,-40
 800afc0:	00820074 	movhi	r2,2049
 800afc4:	dc800815 	stw	r18,32(sp)
 800afc8:	dc400715 	stw	r17,28(sp)
 800afcc:	dc000615 	stw	r16,24(sp)
 800afd0:	108a9604 	addi	r2,r2,10840
 800afd4:	dfc00915 	stw	ra,36(sp)
 800afd8:	2021883a 	mov	r16,r4
 800afdc:	3823883a 	mov	r17,r7
 800afe0:	14800017 	ldw	r18,0(r2)
 800afe4:	28001426 	beq	r5,zero,800b038 <_wcrtomb_r+0x7c>
 800afe8:	d9400415 	stw	r5,16(sp)
 800afec:	d9800515 	stw	r6,20(sp)
 800aff0:	8006b100 	call	8006b10 <__locale_charset>
 800aff4:	d9800517 	ldw	r6,20(sp)
 800aff8:	d9400417 	ldw	r5,16(sp)
 800affc:	100f883a 	mov	r7,r2
 800b000:	dc400015 	stw	r17,0(sp)
 800b004:	8009883a 	mov	r4,r16
 800b008:	903ee83a 	callr	r18
 800b00c:	00ffffc4 	movi	r3,-1
 800b010:	10c0031e 	bne	r2,r3,800b020 <_wcrtomb_r+0x64>
 800b014:	88000015 	stw	zero,0(r17)
 800b018:	00c02284 	movi	r3,138
 800b01c:	80c00015 	stw	r3,0(r16)
 800b020:	dfc00917 	ldw	ra,36(sp)
 800b024:	dc800817 	ldw	r18,32(sp)
 800b028:	dc400717 	ldw	r17,28(sp)
 800b02c:	dc000617 	ldw	r16,24(sp)
 800b030:	dec00a04 	addi	sp,sp,40
 800b034:	f800283a 	ret
 800b038:	8006b100 	call	8006b10 <__locale_charset>
 800b03c:	100f883a 	mov	r7,r2
 800b040:	dc400015 	stw	r17,0(sp)
 800b044:	000d883a 	mov	r6,zero
 800b048:	d9400104 	addi	r5,sp,4
 800b04c:	8009883a 	mov	r4,r16
 800b050:	903ee83a 	callr	r18
 800b054:	003fed06 	br	800b00c <_wcrtomb_r+0x50>

0800b058 <wcrtomb>:
 800b058:	defff604 	addi	sp,sp,-40
 800b05c:	00820074 	movhi	r2,2049
 800b060:	dc800615 	stw	r18,24(sp)
 800b064:	dc400515 	stw	r17,20(sp)
 800b068:	108a9204 	addi	r2,r2,10824
 800b06c:	dfc00915 	stw	ra,36(sp)
 800b070:	dd000815 	stw	r20,32(sp)
 800b074:	dcc00715 	stw	r19,28(sp)
 800b078:	dc000415 	stw	r16,16(sp)
 800b07c:	3025883a 	mov	r18,r6
 800b080:	14400017 	ldw	r17,0(r2)
 800b084:	20001926 	beq	r4,zero,800b0ec <wcrtomb+0x94>
 800b088:	00820074 	movhi	r2,2049
 800b08c:	108a9604 	addi	r2,r2,10840
 800b090:	15000017 	ldw	r20,0(r2)
 800b094:	2021883a 	mov	r16,r4
 800b098:	2827883a 	mov	r19,r5
 800b09c:	8006b100 	call	8006b10 <__locale_charset>
 800b0a0:	100f883a 	mov	r7,r2
 800b0a4:	dc800015 	stw	r18,0(sp)
 800b0a8:	980d883a 	mov	r6,r19
 800b0ac:	800b883a 	mov	r5,r16
 800b0b0:	8809883a 	mov	r4,r17
 800b0b4:	a03ee83a 	callr	r20
 800b0b8:	00ffffc4 	movi	r3,-1
 800b0bc:	10c0031e 	bne	r2,r3,800b0cc <wcrtomb+0x74>
 800b0c0:	90000015 	stw	zero,0(r18)
 800b0c4:	00c02284 	movi	r3,138
 800b0c8:	88c00015 	stw	r3,0(r17)
 800b0cc:	dfc00917 	ldw	ra,36(sp)
 800b0d0:	dd000817 	ldw	r20,32(sp)
 800b0d4:	dcc00717 	ldw	r19,28(sp)
 800b0d8:	dc800617 	ldw	r18,24(sp)
 800b0dc:	dc400517 	ldw	r17,20(sp)
 800b0e0:	dc000417 	ldw	r16,16(sp)
 800b0e4:	dec00a04 	addi	sp,sp,40
 800b0e8:	f800283a 	ret
 800b0ec:	00820074 	movhi	r2,2049
 800b0f0:	108a9604 	addi	r2,r2,10840
 800b0f4:	14000017 	ldw	r16,0(r2)
 800b0f8:	8006b100 	call	8006b10 <__locale_charset>
 800b0fc:	100f883a 	mov	r7,r2
 800b100:	dc800015 	stw	r18,0(sp)
 800b104:	000d883a 	mov	r6,zero
 800b108:	d9400104 	addi	r5,sp,4
 800b10c:	8809883a 	mov	r4,r17
 800b110:	803ee83a 	callr	r16
 800b114:	003fe806 	br	800b0b8 <wcrtomb+0x60>

0800b118 <__ascii_wctomb>:
 800b118:	28000526 	beq	r5,zero,800b130 <__ascii_wctomb+0x18>
 800b11c:	00803fc4 	movi	r2,255
 800b120:	11800536 	bltu	r2,r6,800b138 <__ascii_wctomb+0x20>
 800b124:	29800005 	stb	r6,0(r5)
 800b128:	00800044 	movi	r2,1
 800b12c:	f800283a 	ret
 800b130:	0005883a 	mov	r2,zero
 800b134:	f800283a 	ret
 800b138:	00802284 	movi	r2,138
 800b13c:	20800015 	stw	r2,0(r4)
 800b140:	00bfffc4 	movi	r2,-1
 800b144:	f800283a 	ret

0800b148 <_wctomb_r>:
 800b148:	00820074 	movhi	r2,2049
 800b14c:	defff904 	addi	sp,sp,-28
 800b150:	108a9604 	addi	r2,r2,10840
 800b154:	dfc00615 	stw	ra,24(sp)
 800b158:	dc400515 	stw	r17,20(sp)
 800b15c:	dc000415 	stw	r16,16(sp)
 800b160:	3823883a 	mov	r17,r7
 800b164:	14000017 	ldw	r16,0(r2)
 800b168:	d9000115 	stw	r4,4(sp)
 800b16c:	d9400215 	stw	r5,8(sp)
 800b170:	d9800315 	stw	r6,12(sp)
 800b174:	8006b100 	call	8006b10 <__locale_charset>
 800b178:	d9800317 	ldw	r6,12(sp)
 800b17c:	d9400217 	ldw	r5,8(sp)
 800b180:	d9000117 	ldw	r4,4(sp)
 800b184:	100f883a 	mov	r7,r2
 800b188:	dc400015 	stw	r17,0(sp)
 800b18c:	803ee83a 	callr	r16
 800b190:	dfc00617 	ldw	ra,24(sp)
 800b194:	dc400517 	ldw	r17,20(sp)
 800b198:	dc000417 	ldw	r16,16(sp)
 800b19c:	dec00704 	addi	sp,sp,28
 800b1a0:	f800283a 	ret

0800b1a4 <__udivdi3>:
 800b1a4:	defff504 	addi	sp,sp,-44
 800b1a8:	dcc00415 	stw	r19,16(sp)
 800b1ac:	dc000115 	stw	r16,4(sp)
 800b1b0:	dfc00a15 	stw	ra,40(sp)
 800b1b4:	df000915 	stw	fp,36(sp)
 800b1b8:	ddc00815 	stw	r23,32(sp)
 800b1bc:	dd800715 	stw	r22,28(sp)
 800b1c0:	dd400615 	stw	r21,24(sp)
 800b1c4:	dd000515 	stw	r20,20(sp)
 800b1c8:	dc800315 	stw	r18,12(sp)
 800b1cc:	dc400215 	stw	r17,8(sp)
 800b1d0:	2027883a 	mov	r19,r4
 800b1d4:	2821883a 	mov	r16,r5
 800b1d8:	3800411e 	bne	r7,zero,800b2e0 <__udivdi3+0x13c>
 800b1dc:	3023883a 	mov	r17,r6
 800b1e0:	2025883a 	mov	r18,r4
 800b1e4:	2980522e 	bgeu	r5,r6,800b330 <__udivdi3+0x18c>
 800b1e8:	00bfffd4 	movui	r2,65535
 800b1ec:	282d883a 	mov	r22,r5
 800b1f0:	1180a836 	bltu	r2,r6,800b494 <__udivdi3+0x2f0>
 800b1f4:	00803fc4 	movi	r2,255
 800b1f8:	1185803a 	cmpltu	r2,r2,r6
 800b1fc:	100490fa 	slli	r2,r2,3
 800b200:	3086d83a 	srl	r3,r6,r2
 800b204:	01020074 	movhi	r4,2049
 800b208:	210321c4 	addi	r4,r4,3207
 800b20c:	20c7883a 	add	r3,r4,r3
 800b210:	18c00003 	ldbu	r3,0(r3)
 800b214:	1885883a 	add	r2,r3,r2
 800b218:	00c00804 	movi	r3,32
 800b21c:	1887c83a 	sub	r3,r3,r2
 800b220:	18000526 	beq	r3,zero,800b238 <__udivdi3+0x94>
 800b224:	80e0983a 	sll	r16,r16,r3
 800b228:	9884d83a 	srl	r2,r19,r2
 800b22c:	30e2983a 	sll	r17,r6,r3
 800b230:	98e4983a 	sll	r18,r19,r3
 800b234:	142cb03a 	or	r22,r2,r16
 800b238:	882ad43a 	srli	r21,r17,16
 800b23c:	b009883a 	mov	r4,r22
 800b240:	8d3fffcc 	andi	r20,r17,65535
 800b244:	a80b883a 	mov	r5,r21
 800b248:	800bdb00 	call	800bdb0 <__umodsi3>
 800b24c:	b009883a 	mov	r4,r22
 800b250:	a80b883a 	mov	r5,r21
 800b254:	1027883a 	mov	r19,r2
 800b258:	800bd4c0 	call	800bd4c <__udivsi3>
 800b25c:	102d883a 	mov	r22,r2
 800b260:	9826943a 	slli	r19,r19,16
 800b264:	9004d43a 	srli	r2,r18,16
 800b268:	a5a1383a 	mul	r16,r20,r22
 800b26c:	14c4b03a 	or	r2,r2,r19
 800b270:	1400052e 	bgeu	r2,r16,800b288 <__udivdi3+0xe4>
 800b274:	1445883a 	add	r2,r2,r17
 800b278:	b0ffffc4 	addi	r3,r22,-1
 800b27c:	14400136 	bltu	r2,r17,800b284 <__udivdi3+0xe0>
 800b280:	14012336 	bltu	r2,r16,800b710 <__udivdi3+0x56c>
 800b284:	182d883a 	mov	r22,r3
 800b288:	1421c83a 	sub	r16,r2,r16
 800b28c:	a80b883a 	mov	r5,r21
 800b290:	8009883a 	mov	r4,r16
 800b294:	800bdb00 	call	800bdb0 <__umodsi3>
 800b298:	1027883a 	mov	r19,r2
 800b29c:	a80b883a 	mov	r5,r21
 800b2a0:	8009883a 	mov	r4,r16
 800b2a4:	800bd4c0 	call	800bd4c <__udivsi3>
 800b2a8:	9826943a 	slli	r19,r19,16
 800b2ac:	a0a9383a 	mul	r20,r20,r2
 800b2b0:	94bfffcc 	andi	r18,r18,65535
 800b2b4:	94e4b03a 	or	r18,r18,r19
 800b2b8:	9500052e 	bgeu	r18,r20,800b2d0 <__udivdi3+0x12c>
 800b2bc:	8ca5883a 	add	r18,r17,r18
 800b2c0:	10ffffc4 	addi	r3,r2,-1
 800b2c4:	9440f136 	bltu	r18,r17,800b68c <__udivdi3+0x4e8>
 800b2c8:	9500f02e 	bgeu	r18,r20,800b68c <__udivdi3+0x4e8>
 800b2cc:	10bfff84 	addi	r2,r2,-2
 800b2d0:	b00c943a 	slli	r6,r22,16
 800b2d4:	0007883a 	mov	r3,zero
 800b2d8:	3084b03a 	or	r2,r6,r2
 800b2dc:	00005906 	br	800b444 <__udivdi3+0x2a0>
 800b2e0:	29c05636 	bltu	r5,r7,800b43c <__udivdi3+0x298>
 800b2e4:	00bfffd4 	movui	r2,65535
 800b2e8:	11c0622e 	bgeu	r2,r7,800b474 <__udivdi3+0x2d0>
 800b2ec:	00804034 	movhi	r2,256
 800b2f0:	10bfffc4 	addi	r2,r2,-1
 800b2f4:	11c0ee36 	bltu	r2,r7,800b6b0 <__udivdi3+0x50c>
 800b2f8:	00800404 	movi	r2,16
 800b2fc:	3886d83a 	srl	r3,r7,r2
 800b300:	01020074 	movhi	r4,2049
 800b304:	210321c4 	addi	r4,r4,3207
 800b308:	20c7883a 	add	r3,r4,r3
 800b30c:	18c00003 	ldbu	r3,0(r3)
 800b310:	05400804 	movi	r21,32
 800b314:	1885883a 	add	r2,r3,r2
 800b318:	a8abc83a 	sub	r21,r21,r2
 800b31c:	a800621e 	bne	r21,zero,800b4a8 <__udivdi3+0x304>
 800b320:	3c00e936 	bltu	r7,r16,800b6c8 <__udivdi3+0x524>
 800b324:	9985403a 	cmpgeu	r2,r19,r6
 800b328:	0007883a 	mov	r3,zero
 800b32c:	00004506 	br	800b444 <__udivdi3+0x2a0>
 800b330:	3000041e 	bne	r6,zero,800b344 <__udivdi3+0x1a0>
 800b334:	000b883a 	mov	r5,zero
 800b338:	01000044 	movi	r4,1
 800b33c:	800bd4c0 	call	800bd4c <__udivsi3>
 800b340:	1023883a 	mov	r17,r2
 800b344:	00bfffd4 	movui	r2,65535
 800b348:	14404e2e 	bgeu	r2,r17,800b484 <__udivdi3+0x2e0>
 800b34c:	00804034 	movhi	r2,256
 800b350:	10bfffc4 	addi	r2,r2,-1
 800b354:	1440d836 	bltu	r2,r17,800b6b8 <__udivdi3+0x514>
 800b358:	00800404 	movi	r2,16
 800b35c:	8886d83a 	srl	r3,r17,r2
 800b360:	01020074 	movhi	r4,2049
 800b364:	210321c4 	addi	r4,r4,3207
 800b368:	20c7883a 	add	r3,r4,r3
 800b36c:	18c00003 	ldbu	r3,0(r3)
 800b370:	1885883a 	add	r2,r3,r2
 800b374:	00c00804 	movi	r3,32
 800b378:	1887c83a 	sub	r3,r3,r2
 800b37c:	18008f1e 	bne	r3,zero,800b5bc <__udivdi3+0x418>
 800b380:	882ad43a 	srli	r21,r17,16
 800b384:	8461c83a 	sub	r16,r16,r17
 800b388:	8d3fffcc 	andi	r20,r17,65535
 800b38c:	00c00044 	movi	r3,1
 800b390:	8009883a 	mov	r4,r16
 800b394:	a80b883a 	mov	r5,r21
 800b398:	d8c00015 	stw	r3,0(sp)
 800b39c:	800bdb00 	call	800bdb0 <__umodsi3>
 800b3a0:	8009883a 	mov	r4,r16
 800b3a4:	a80b883a 	mov	r5,r21
 800b3a8:	1027883a 	mov	r19,r2
 800b3ac:	800bd4c0 	call	800bd4c <__udivsi3>
 800b3b0:	9826943a 	slli	r19,r19,16
 800b3b4:	9008d43a 	srli	r4,r18,16
 800b3b8:	1521383a 	mul	r16,r2,r20
 800b3bc:	102d883a 	mov	r22,r2
 800b3c0:	24c8b03a 	or	r4,r4,r19
 800b3c4:	d8c00017 	ldw	r3,0(sp)
 800b3c8:	2400052e 	bgeu	r4,r16,800b3e0 <__udivdi3+0x23c>
 800b3cc:	2449883a 	add	r4,r4,r17
 800b3d0:	b0bfffc4 	addi	r2,r22,-1
 800b3d4:	24400136 	bltu	r4,r17,800b3dc <__udivdi3+0x238>
 800b3d8:	2400ca36 	bltu	r4,r16,800b704 <__udivdi3+0x560>
 800b3dc:	102d883a 	mov	r22,r2
 800b3e0:	2421c83a 	sub	r16,r4,r16
 800b3e4:	a80b883a 	mov	r5,r21
 800b3e8:	8009883a 	mov	r4,r16
 800b3ec:	d8c00015 	stw	r3,0(sp)
 800b3f0:	800bdb00 	call	800bdb0 <__umodsi3>
 800b3f4:	1027883a 	mov	r19,r2
 800b3f8:	a80b883a 	mov	r5,r21
 800b3fc:	8009883a 	mov	r4,r16
 800b400:	800bd4c0 	call	800bd4c <__udivsi3>
 800b404:	9826943a 	slli	r19,r19,16
 800b408:	1529383a 	mul	r20,r2,r20
 800b40c:	94bfffcc 	andi	r18,r18,65535
 800b410:	94e4b03a 	or	r18,r18,r19
 800b414:	d8c00017 	ldw	r3,0(sp)
 800b418:	9500052e 	bgeu	r18,r20,800b430 <__udivdi3+0x28c>
 800b41c:	8ca5883a 	add	r18,r17,r18
 800b420:	113fffc4 	addi	r4,r2,-1
 800b424:	94409736 	bltu	r18,r17,800b684 <__udivdi3+0x4e0>
 800b428:	9500962e 	bgeu	r18,r20,800b684 <__udivdi3+0x4e0>
 800b42c:	10bfff84 	addi	r2,r2,-2
 800b430:	b00c943a 	slli	r6,r22,16
 800b434:	3084b03a 	or	r2,r6,r2
 800b438:	00000206 	br	800b444 <__udivdi3+0x2a0>
 800b43c:	0007883a 	mov	r3,zero
 800b440:	0005883a 	mov	r2,zero
 800b444:	dfc00a17 	ldw	ra,40(sp)
 800b448:	df000917 	ldw	fp,36(sp)
 800b44c:	ddc00817 	ldw	r23,32(sp)
 800b450:	dd800717 	ldw	r22,28(sp)
 800b454:	dd400617 	ldw	r21,24(sp)
 800b458:	dd000517 	ldw	r20,20(sp)
 800b45c:	dcc00417 	ldw	r19,16(sp)
 800b460:	dc800317 	ldw	r18,12(sp)
 800b464:	dc400217 	ldw	r17,8(sp)
 800b468:	dc000117 	ldw	r16,4(sp)
 800b46c:	dec00b04 	addi	sp,sp,44
 800b470:	f800283a 	ret
 800b474:	00803fc4 	movi	r2,255
 800b478:	11c5803a 	cmpltu	r2,r2,r7
 800b47c:	100490fa 	slli	r2,r2,3
 800b480:	003f9e06 	br	800b2fc <__udivdi3+0x158>
 800b484:	00803fc4 	movi	r2,255
 800b488:	1445803a 	cmpltu	r2,r2,r17
 800b48c:	100490fa 	slli	r2,r2,3
 800b490:	003fb206 	br	800b35c <__udivdi3+0x1b8>
 800b494:	00804034 	movhi	r2,256
 800b498:	10bfffc4 	addi	r2,r2,-1
 800b49c:	11808836 	bltu	r2,r6,800b6c0 <__udivdi3+0x51c>
 800b4a0:	00800404 	movi	r2,16
 800b4a4:	003f5606 	br	800b200 <__udivdi3+0x5c>
 800b4a8:	30aed83a 	srl	r23,r6,r2
 800b4ac:	3d4e983a 	sll	r7,r7,r21
 800b4b0:	80acd83a 	srl	r22,r16,r2
 800b4b4:	9884d83a 	srl	r2,r19,r2
 800b4b8:	3deeb03a 	or	r23,r7,r23
 800b4bc:	b824d43a 	srli	r18,r23,16
 800b4c0:	8560983a 	sll	r16,r16,r21
 800b4c4:	b009883a 	mov	r4,r22
 800b4c8:	900b883a 	mov	r5,r18
 800b4cc:	3568983a 	sll	r20,r6,r21
 800b4d0:	1420b03a 	or	r16,r2,r16
 800b4d4:	800bdb00 	call	800bdb0 <__umodsi3>
 800b4d8:	b009883a 	mov	r4,r22
 800b4dc:	900b883a 	mov	r5,r18
 800b4e0:	1023883a 	mov	r17,r2
 800b4e4:	800bd4c0 	call	800bd4c <__udivsi3>
 800b4e8:	8808943a 	slli	r4,r17,16
 800b4ec:	bf3fffcc 	andi	fp,r23,65535
 800b4f0:	8006d43a 	srli	r3,r16,16
 800b4f4:	e0a3383a 	mul	r17,fp,r2
 800b4f8:	100d883a 	mov	r6,r2
 800b4fc:	1906b03a 	or	r3,r3,r4
 800b500:	1c40042e 	bgeu	r3,r17,800b514 <__udivdi3+0x370>
 800b504:	1dc7883a 	add	r3,r3,r23
 800b508:	10bfffc4 	addi	r2,r2,-1
 800b50c:	1dc0752e 	bgeu	r3,r23,800b6e4 <__udivdi3+0x540>
 800b510:	100d883a 	mov	r6,r2
 800b514:	1c63c83a 	sub	r17,r3,r17
 800b518:	900b883a 	mov	r5,r18
 800b51c:	8809883a 	mov	r4,r17
 800b520:	d9800015 	stw	r6,0(sp)
 800b524:	800bdb00 	call	800bdb0 <__umodsi3>
 800b528:	102d883a 	mov	r22,r2
 800b52c:	8809883a 	mov	r4,r17
 800b530:	900b883a 	mov	r5,r18
 800b534:	800bd4c0 	call	800bd4c <__udivsi3>
 800b538:	b02c943a 	slli	r22,r22,16
 800b53c:	e089383a 	mul	r4,fp,r2
 800b540:	843fffcc 	andi	r16,r16,65535
 800b544:	85a0b03a 	or	r16,r16,r22
 800b548:	d9800017 	ldw	r6,0(sp)
 800b54c:	8100042e 	bgeu	r16,r4,800b560 <__udivdi3+0x3bc>
 800b550:	85e1883a 	add	r16,r16,r23
 800b554:	10ffffc4 	addi	r3,r2,-1
 800b558:	85c05e2e 	bgeu	r16,r23,800b6d4 <__udivdi3+0x530>
 800b55c:	1805883a 	mov	r2,r3
 800b560:	300c943a 	slli	r6,r6,16
 800b564:	a17fffcc 	andi	r5,r20,65535
 800b568:	a028d43a 	srli	r20,r20,16
 800b56c:	3084b03a 	or	r2,r6,r2
 800b570:	10ffffcc 	andi	r3,r2,65535
 800b574:	100cd43a 	srli	r6,r2,16
 800b578:	194f383a 	mul	r7,r3,r5
 800b57c:	1d07383a 	mul	r3,r3,r20
 800b580:	314b383a 	mul	r5,r6,r5
 800b584:	3810d43a 	srli	r8,r7,16
 800b588:	8121c83a 	sub	r16,r16,r4
 800b58c:	1947883a 	add	r3,r3,r5
 800b590:	40c7883a 	add	r3,r8,r3
 800b594:	350d383a 	mul	r6,r6,r20
 800b598:	1940022e 	bgeu	r3,r5,800b5a4 <__udivdi3+0x400>
 800b59c:	01000074 	movhi	r4,1
 800b5a0:	310d883a 	add	r6,r6,r4
 800b5a4:	1828d43a 	srli	r20,r3,16
 800b5a8:	a18d883a 	add	r6,r20,r6
 800b5ac:	81803e36 	bltu	r16,r6,800b6a8 <__udivdi3+0x504>
 800b5b0:	81803826 	beq	r16,r6,800b694 <__udivdi3+0x4f0>
 800b5b4:	0007883a 	mov	r3,zero
 800b5b8:	003fa206 	br	800b444 <__udivdi3+0x2a0>
 800b5bc:	88e2983a 	sll	r17,r17,r3
 800b5c0:	80a8d83a 	srl	r20,r16,r2
 800b5c4:	80e0983a 	sll	r16,r16,r3
 800b5c8:	882ad43a 	srli	r21,r17,16
 800b5cc:	9884d83a 	srl	r2,r19,r2
 800b5d0:	a009883a 	mov	r4,r20
 800b5d4:	a80b883a 	mov	r5,r21
 800b5d8:	142eb03a 	or	r23,r2,r16
 800b5dc:	98e4983a 	sll	r18,r19,r3
 800b5e0:	800bdb00 	call	800bdb0 <__umodsi3>
 800b5e4:	a009883a 	mov	r4,r20
 800b5e8:	a80b883a 	mov	r5,r21
 800b5ec:	1021883a 	mov	r16,r2
 800b5f0:	800bd4c0 	call	800bd4c <__udivsi3>
 800b5f4:	1039883a 	mov	fp,r2
 800b5f8:	8d3fffcc 	andi	r20,r17,65535
 800b5fc:	8020943a 	slli	r16,r16,16
 800b600:	b804d43a 	srli	r2,r23,16
 800b604:	a72d383a 	mul	r22,r20,fp
 800b608:	1404b03a 	or	r2,r2,r16
 800b60c:	1580062e 	bgeu	r2,r22,800b628 <__udivdi3+0x484>
 800b610:	1445883a 	add	r2,r2,r17
 800b614:	e0ffffc4 	addi	r3,fp,-1
 800b618:	14403836 	bltu	r2,r17,800b6fc <__udivdi3+0x558>
 800b61c:	1580372e 	bgeu	r2,r22,800b6fc <__udivdi3+0x558>
 800b620:	e73fff84 	addi	fp,fp,-2
 800b624:	1445883a 	add	r2,r2,r17
 800b628:	15adc83a 	sub	r22,r2,r22
 800b62c:	a80b883a 	mov	r5,r21
 800b630:	b009883a 	mov	r4,r22
 800b634:	800bdb00 	call	800bdb0 <__umodsi3>
 800b638:	1027883a 	mov	r19,r2
 800b63c:	b009883a 	mov	r4,r22
 800b640:	a80b883a 	mov	r5,r21
 800b644:	800bd4c0 	call	800bd4c <__udivsi3>
 800b648:	9826943a 	slli	r19,r19,16
 800b64c:	a0a1383a 	mul	r16,r20,r2
 800b650:	b93fffcc 	andi	r4,r23,65535
 800b654:	24c8b03a 	or	r4,r4,r19
 800b658:	2400062e 	bgeu	r4,r16,800b674 <__udivdi3+0x4d0>
 800b65c:	2449883a 	add	r4,r4,r17
 800b660:	10ffffc4 	addi	r3,r2,-1
 800b664:	24402336 	bltu	r4,r17,800b6f4 <__udivdi3+0x550>
 800b668:	2400222e 	bgeu	r4,r16,800b6f4 <__udivdi3+0x550>
 800b66c:	10bfff84 	addi	r2,r2,-2
 800b670:	2449883a 	add	r4,r4,r17
 800b674:	e038943a 	slli	fp,fp,16
 800b678:	2421c83a 	sub	r16,r4,r16
 800b67c:	e086b03a 	or	r3,fp,r2
 800b680:	003f4306 	br	800b390 <__udivdi3+0x1ec>
 800b684:	2005883a 	mov	r2,r4
 800b688:	003f6906 	br	800b430 <__udivdi3+0x28c>
 800b68c:	1805883a 	mov	r2,r3
 800b690:	003f0f06 	br	800b2d0 <__udivdi3+0x12c>
 800b694:	1806943a 	slli	r3,r3,16
 800b698:	9d66983a 	sll	r19,r19,r21
 800b69c:	39ffffcc 	andi	r7,r7,65535
 800b6a0:	19c7883a 	add	r3,r3,r7
 800b6a4:	98ffc32e 	bgeu	r19,r3,800b5b4 <__udivdi3+0x410>
 800b6a8:	10bfffc4 	addi	r2,r2,-1
 800b6ac:	003fc106 	br	800b5b4 <__udivdi3+0x410>
 800b6b0:	00800604 	movi	r2,24
 800b6b4:	003f1106 	br	800b2fc <__udivdi3+0x158>
 800b6b8:	00800604 	movi	r2,24
 800b6bc:	003f2706 	br	800b35c <__udivdi3+0x1b8>
 800b6c0:	00800604 	movi	r2,24
 800b6c4:	003ece06 	br	800b200 <__udivdi3+0x5c>
 800b6c8:	0007883a 	mov	r3,zero
 800b6cc:	00800044 	movi	r2,1
 800b6d0:	003f5c06 	br	800b444 <__udivdi3+0x2a0>
 800b6d4:	813fa12e 	bgeu	r16,r4,800b55c <__udivdi3+0x3b8>
 800b6d8:	10bfff84 	addi	r2,r2,-2
 800b6dc:	85e1883a 	add	r16,r16,r23
 800b6e0:	003f9f06 	br	800b560 <__udivdi3+0x3bc>
 800b6e4:	1c7f8a2e 	bgeu	r3,r17,800b510 <__udivdi3+0x36c>
 800b6e8:	31bfff84 	addi	r6,r6,-2
 800b6ec:	1dc7883a 	add	r3,r3,r23
 800b6f0:	003f8806 	br	800b514 <__udivdi3+0x370>
 800b6f4:	1805883a 	mov	r2,r3
 800b6f8:	003fde06 	br	800b674 <__udivdi3+0x4d0>
 800b6fc:	1839883a 	mov	fp,r3
 800b700:	003fc906 	br	800b628 <__udivdi3+0x484>
 800b704:	b5bfff84 	addi	r22,r22,-2
 800b708:	2449883a 	add	r4,r4,r17
 800b70c:	003f3406 	br	800b3e0 <__udivdi3+0x23c>
 800b710:	b5bfff84 	addi	r22,r22,-2
 800b714:	1445883a 	add	r2,r2,r17
 800b718:	003edb06 	br	800b288 <__udivdi3+0xe4>

0800b71c <__umoddi3>:
 800b71c:	defff404 	addi	sp,sp,-48
 800b720:	df000a15 	stw	fp,40(sp)
 800b724:	dc400315 	stw	r17,12(sp)
 800b728:	dc000215 	stw	r16,8(sp)
 800b72c:	dfc00b15 	stw	ra,44(sp)
 800b730:	ddc00915 	stw	r23,36(sp)
 800b734:	dd800815 	stw	r22,32(sp)
 800b738:	dd400715 	stw	r21,28(sp)
 800b73c:	dd000615 	stw	r20,24(sp)
 800b740:	dcc00515 	stw	r19,20(sp)
 800b744:	dc800415 	stw	r18,16(sp)
 800b748:	2021883a 	mov	r16,r4
 800b74c:	2823883a 	mov	r17,r5
 800b750:	2839883a 	mov	fp,r5
 800b754:	38003c1e 	bne	r7,zero,800b848 <__umoddi3+0x12c>
 800b758:	3027883a 	mov	r19,r6
 800b75c:	2029883a 	mov	r20,r4
 800b760:	2980512e 	bgeu	r5,r6,800b8a8 <__umoddi3+0x18c>
 800b764:	00bfffd4 	movui	r2,65535
 800b768:	11809a36 	bltu	r2,r6,800b9d4 <__umoddi3+0x2b8>
 800b76c:	01003fc4 	movi	r4,255
 800b770:	2189803a 	cmpltu	r4,r4,r6
 800b774:	200890fa 	slli	r4,r4,3
 800b778:	3104d83a 	srl	r2,r6,r4
 800b77c:	00c20074 	movhi	r3,2049
 800b780:	18c321c4 	addi	r3,r3,3207
 800b784:	1885883a 	add	r2,r3,r2
 800b788:	10c00003 	ldbu	r3,0(r2)
 800b78c:	00800804 	movi	r2,32
 800b790:	1909883a 	add	r4,r3,r4
 800b794:	1125c83a 	sub	r18,r2,r4
 800b798:	90000526 	beq	r18,zero,800b7b0 <__umoddi3+0x94>
 800b79c:	8ca2983a 	sll	r17,r17,r18
 800b7a0:	8108d83a 	srl	r4,r16,r4
 800b7a4:	34a6983a 	sll	r19,r6,r18
 800b7a8:	84a8983a 	sll	r20,r16,r18
 800b7ac:	2478b03a 	or	fp,r4,r17
 800b7b0:	982ed43a 	srli	r23,r19,16
 800b7b4:	e009883a 	mov	r4,fp
 800b7b8:	9dbfffcc 	andi	r22,r19,65535
 800b7bc:	b80b883a 	mov	r5,r23
 800b7c0:	800bdb00 	call	800bdb0 <__umodsi3>
 800b7c4:	e009883a 	mov	r4,fp
 800b7c8:	b80b883a 	mov	r5,r23
 800b7cc:	102b883a 	mov	r21,r2
 800b7d0:	800bd4c0 	call	800bd4c <__udivsi3>
 800b7d4:	a806943a 	slli	r3,r21,16
 800b7d8:	a008d43a 	srli	r4,r20,16
 800b7dc:	b085383a 	mul	r2,r22,r2
 800b7e0:	20c8b03a 	or	r4,r4,r3
 800b7e4:	2080032e 	bgeu	r4,r2,800b7f4 <__umoddi3+0xd8>
 800b7e8:	24c9883a 	add	r4,r4,r19
 800b7ec:	24c00136 	bltu	r4,r19,800b7f4 <__umoddi3+0xd8>
 800b7f0:	20811036 	bltu	r4,r2,800bc34 <__umoddi3+0x518>
 800b7f4:	20abc83a 	sub	r21,r4,r2
 800b7f8:	b80b883a 	mov	r5,r23
 800b7fc:	a809883a 	mov	r4,r21
 800b800:	800bdb00 	call	800bdb0 <__umodsi3>
 800b804:	1023883a 	mov	r17,r2
 800b808:	b80b883a 	mov	r5,r23
 800b80c:	a809883a 	mov	r4,r21
 800b810:	800bd4c0 	call	800bd4c <__udivsi3>
 800b814:	8822943a 	slli	r17,r17,16
 800b818:	b085383a 	mul	r2,r22,r2
 800b81c:	a0ffffcc 	andi	r3,r20,65535
 800b820:	1c46b03a 	or	r3,r3,r17
 800b824:	1880042e 	bgeu	r3,r2,800b838 <__umoddi3+0x11c>
 800b828:	1cc7883a 	add	r3,r3,r19
 800b82c:	1cc00236 	bltu	r3,r19,800b838 <__umoddi3+0x11c>
 800b830:	1880012e 	bgeu	r3,r2,800b838 <__umoddi3+0x11c>
 800b834:	1cc7883a 	add	r3,r3,r19
 800b838:	1885c83a 	sub	r2,r3,r2
 800b83c:	1484d83a 	srl	r2,r2,r18
 800b840:	0007883a 	mov	r3,zero
 800b844:	00004f06 	br	800b984 <__umoddi3+0x268>
 800b848:	29c04c36 	bltu	r5,r7,800b97c <__umoddi3+0x260>
 800b84c:	00bfffd4 	movui	r2,65535
 800b850:	11c0582e 	bgeu	r2,r7,800b9b4 <__umoddi3+0x298>
 800b854:	00804034 	movhi	r2,256
 800b858:	10bfffc4 	addi	r2,r2,-1
 800b85c:	11c0e736 	bltu	r2,r7,800bbfc <__umoddi3+0x4e0>
 800b860:	01000404 	movi	r4,16
 800b864:	3904d83a 	srl	r2,r7,r4
 800b868:	00c20074 	movhi	r3,2049
 800b86c:	18c321c4 	addi	r3,r3,3207
 800b870:	1885883a 	add	r2,r3,r2
 800b874:	14c00003 	ldbu	r19,0(r2)
 800b878:	00c00804 	movi	r3,32
 800b87c:	9927883a 	add	r19,r19,r4
 800b880:	1ce9c83a 	sub	r20,r3,r19
 800b884:	a000581e 	bne	r20,zero,800b9e8 <__umoddi3+0x2cc>
 800b888:	3c400136 	bltu	r7,r17,800b890 <__umoddi3+0x174>
 800b88c:	8180eb36 	bltu	r16,r6,800bc3c <__umoddi3+0x520>
 800b890:	8185c83a 	sub	r2,r16,r6
 800b894:	89e3c83a 	sub	r17,r17,r7
 800b898:	8089803a 	cmpltu	r4,r16,r2
 800b89c:	8939c83a 	sub	fp,r17,r4
 800b8a0:	e007883a 	mov	r3,fp
 800b8a4:	00003706 	br	800b984 <__umoddi3+0x268>
 800b8a8:	3000041e 	bne	r6,zero,800b8bc <__umoddi3+0x1a0>
 800b8ac:	000b883a 	mov	r5,zero
 800b8b0:	01000044 	movi	r4,1
 800b8b4:	800bd4c0 	call	800bd4c <__udivsi3>
 800b8b8:	1027883a 	mov	r19,r2
 800b8bc:	00bfffd4 	movui	r2,65535
 800b8c0:	14c0402e 	bgeu	r2,r19,800b9c4 <__umoddi3+0x2a8>
 800b8c4:	00804034 	movhi	r2,256
 800b8c8:	10bfffc4 	addi	r2,r2,-1
 800b8cc:	14c0cd36 	bltu	r2,r19,800bc04 <__umoddi3+0x4e8>
 800b8d0:	00800404 	movi	r2,16
 800b8d4:	9886d83a 	srl	r3,r19,r2
 800b8d8:	01020074 	movhi	r4,2049
 800b8dc:	210321c4 	addi	r4,r4,3207
 800b8e0:	20c7883a 	add	r3,r4,r3
 800b8e4:	18c00003 	ldbu	r3,0(r3)
 800b8e8:	1887883a 	add	r3,r3,r2
 800b8ec:	00800804 	movi	r2,32
 800b8f0:	10e5c83a 	sub	r18,r2,r3
 800b8f4:	9000901e 	bne	r18,zero,800bb38 <__umoddi3+0x41c>
 800b8f8:	982cd43a 	srli	r22,r19,16
 800b8fc:	8ce3c83a 	sub	r17,r17,r19
 800b900:	9d7fffcc 	andi	r21,r19,65535
 800b904:	b00b883a 	mov	r5,r22
 800b908:	8809883a 	mov	r4,r17
 800b90c:	800bdb00 	call	800bdb0 <__umodsi3>
 800b910:	8809883a 	mov	r4,r17
 800b914:	b00b883a 	mov	r5,r22
 800b918:	1021883a 	mov	r16,r2
 800b91c:	800bd4c0 	call	800bd4c <__udivsi3>
 800b920:	8006943a 	slli	r3,r16,16
 800b924:	a008d43a 	srli	r4,r20,16
 800b928:	1545383a 	mul	r2,r2,r21
 800b92c:	20c8b03a 	or	r4,r4,r3
 800b930:	2080042e 	bgeu	r4,r2,800b944 <__umoddi3+0x228>
 800b934:	24c9883a 	add	r4,r4,r19
 800b938:	24c00236 	bltu	r4,r19,800b944 <__umoddi3+0x228>
 800b93c:	2080012e 	bgeu	r4,r2,800b944 <__umoddi3+0x228>
 800b940:	24c9883a 	add	r4,r4,r19
 800b944:	20a1c83a 	sub	r16,r4,r2
 800b948:	b00b883a 	mov	r5,r22
 800b94c:	8009883a 	mov	r4,r16
 800b950:	800bdb00 	call	800bdb0 <__umodsi3>
 800b954:	1023883a 	mov	r17,r2
 800b958:	b00b883a 	mov	r5,r22
 800b95c:	8009883a 	mov	r4,r16
 800b960:	800bd4c0 	call	800bd4c <__udivsi3>
 800b964:	8822943a 	slli	r17,r17,16
 800b968:	1545383a 	mul	r2,r2,r21
 800b96c:	a53fffcc 	andi	r20,r20,65535
 800b970:	a446b03a 	or	r3,r20,r17
 800b974:	18bfb02e 	bgeu	r3,r2,800b838 <__umoddi3+0x11c>
 800b978:	003fab06 	br	800b828 <__umoddi3+0x10c>
 800b97c:	2005883a 	mov	r2,r4
 800b980:	2807883a 	mov	r3,r5
 800b984:	dfc00b17 	ldw	ra,44(sp)
 800b988:	df000a17 	ldw	fp,40(sp)
 800b98c:	ddc00917 	ldw	r23,36(sp)
 800b990:	dd800817 	ldw	r22,32(sp)
 800b994:	dd400717 	ldw	r21,28(sp)
 800b998:	dd000617 	ldw	r20,24(sp)
 800b99c:	dcc00517 	ldw	r19,20(sp)
 800b9a0:	dc800417 	ldw	r18,16(sp)
 800b9a4:	dc400317 	ldw	r17,12(sp)
 800b9a8:	dc000217 	ldw	r16,8(sp)
 800b9ac:	dec00c04 	addi	sp,sp,48
 800b9b0:	f800283a 	ret
 800b9b4:	04c03fc4 	movi	r19,255
 800b9b8:	99c9803a 	cmpltu	r4,r19,r7
 800b9bc:	200890fa 	slli	r4,r4,3
 800b9c0:	003fa806 	br	800b864 <__umoddi3+0x148>
 800b9c4:	00803fc4 	movi	r2,255
 800b9c8:	14c5803a 	cmpltu	r2,r2,r19
 800b9cc:	100490fa 	slli	r2,r2,3
 800b9d0:	003fc006 	br	800b8d4 <__umoddi3+0x1b8>
 800b9d4:	00804034 	movhi	r2,256
 800b9d8:	10bfffc4 	addi	r2,r2,-1
 800b9dc:	11808b36 	bltu	r2,r6,800bc0c <__umoddi3+0x4f0>
 800b9e0:	01000404 	movi	r4,16
 800b9e4:	003f6406 	br	800b778 <__umoddi3+0x5c>
 800b9e8:	34c4d83a 	srl	r2,r6,r19
 800b9ec:	3d0e983a 	sll	r7,r7,r20
 800b9f0:	8cf8d83a 	srl	fp,r17,r19
 800b9f4:	8d10983a 	sll	r8,r17,r20
 800b9f8:	38aab03a 	or	r21,r7,r2
 800b9fc:	a82cd43a 	srli	r22,r21,16
 800ba00:	84e2d83a 	srl	r17,r16,r19
 800ba04:	e009883a 	mov	r4,fp
 800ba08:	b00b883a 	mov	r5,r22
 800ba0c:	8a22b03a 	or	r17,r17,r8
 800ba10:	3524983a 	sll	r18,r6,r20
 800ba14:	800bdb00 	call	800bdb0 <__umodsi3>
 800ba18:	e009883a 	mov	r4,fp
 800ba1c:	b00b883a 	mov	r5,r22
 800ba20:	102f883a 	mov	r23,r2
 800ba24:	800bd4c0 	call	800bd4c <__udivsi3>
 800ba28:	100d883a 	mov	r6,r2
 800ba2c:	b808943a 	slli	r4,r23,16
 800ba30:	aa3fffcc 	andi	r8,r21,65535
 800ba34:	8804d43a 	srli	r2,r17,16
 800ba38:	41af383a 	mul	r23,r8,r6
 800ba3c:	8520983a 	sll	r16,r16,r20
 800ba40:	1104b03a 	or	r2,r2,r4
 800ba44:	15c0042e 	bgeu	r2,r23,800ba58 <__umoddi3+0x33c>
 800ba48:	1545883a 	add	r2,r2,r21
 800ba4c:	30ffffc4 	addi	r3,r6,-1
 800ba50:	1540742e 	bgeu	r2,r21,800bc24 <__umoddi3+0x508>
 800ba54:	180d883a 	mov	r6,r3
 800ba58:	15efc83a 	sub	r23,r2,r23
 800ba5c:	b00b883a 	mov	r5,r22
 800ba60:	b809883a 	mov	r4,r23
 800ba64:	d9800115 	stw	r6,4(sp)
 800ba68:	da000015 	stw	r8,0(sp)
 800ba6c:	800bdb00 	call	800bdb0 <__umodsi3>
 800ba70:	b00b883a 	mov	r5,r22
 800ba74:	b809883a 	mov	r4,r23
 800ba78:	1039883a 	mov	fp,r2
 800ba7c:	800bd4c0 	call	800bd4c <__udivsi3>
 800ba80:	da000017 	ldw	r8,0(sp)
 800ba84:	e038943a 	slli	fp,fp,16
 800ba88:	100b883a 	mov	r5,r2
 800ba8c:	4089383a 	mul	r4,r8,r2
 800ba90:	8a3fffcc 	andi	r8,r17,65535
 800ba94:	4710b03a 	or	r8,r8,fp
 800ba98:	d9800117 	ldw	r6,4(sp)
 800ba9c:	4100042e 	bgeu	r8,r4,800bab0 <__umoddi3+0x394>
 800baa0:	4551883a 	add	r8,r8,r21
 800baa4:	10bfffc4 	addi	r2,r2,-1
 800baa8:	45405a2e 	bgeu	r8,r21,800bc14 <__umoddi3+0x4f8>
 800baac:	100b883a 	mov	r5,r2
 800bab0:	300c943a 	slli	r6,r6,16
 800bab4:	91ffffcc 	andi	r7,r18,65535
 800bab8:	9004d43a 	srli	r2,r18,16
 800babc:	314cb03a 	or	r6,r6,r5
 800bac0:	317fffcc 	andi	r5,r6,65535
 800bac4:	300cd43a 	srli	r6,r6,16
 800bac8:	29d3383a 	mul	r9,r5,r7
 800bacc:	288b383a 	mul	r5,r5,r2
 800bad0:	31cf383a 	mul	r7,r6,r7
 800bad4:	4806d43a 	srli	r3,r9,16
 800bad8:	4111c83a 	sub	r8,r8,r4
 800badc:	29cb883a 	add	r5,r5,r7
 800bae0:	194b883a 	add	r5,r3,r5
 800bae4:	3085383a 	mul	r2,r6,r2
 800bae8:	29c0022e 	bgeu	r5,r7,800baf4 <__umoddi3+0x3d8>
 800baec:	00c00074 	movhi	r3,1
 800baf0:	10c5883a 	add	r2,r2,r3
 800baf4:	2808d43a 	srli	r4,r5,16
 800baf8:	280a943a 	slli	r5,r5,16
 800bafc:	4a7fffcc 	andi	r9,r9,65535
 800bb00:	2085883a 	add	r2,r4,r2
 800bb04:	2a4b883a 	add	r5,r5,r9
 800bb08:	40803636 	bltu	r8,r2,800bbe4 <__umoddi3+0x4c8>
 800bb0c:	40804d26 	beq	r8,r2,800bc44 <__umoddi3+0x528>
 800bb10:	4089c83a 	sub	r4,r8,r2
 800bb14:	280f883a 	mov	r7,r5
 800bb18:	81cfc83a 	sub	r7,r16,r7
 800bb1c:	81c7803a 	cmpltu	r3,r16,r7
 800bb20:	20c7c83a 	sub	r3,r4,r3
 800bb24:	1cc4983a 	sll	r2,r3,r19
 800bb28:	3d0ed83a 	srl	r7,r7,r20
 800bb2c:	1d06d83a 	srl	r3,r3,r20
 800bb30:	11c4b03a 	or	r2,r2,r7
 800bb34:	003f9306 	br	800b984 <__umoddi3+0x268>
 800bb38:	9ca6983a 	sll	r19,r19,r18
 800bb3c:	88e8d83a 	srl	r20,r17,r3
 800bb40:	80c4d83a 	srl	r2,r16,r3
 800bb44:	982cd43a 	srli	r22,r19,16
 800bb48:	8ca2983a 	sll	r17,r17,r18
 800bb4c:	a009883a 	mov	r4,r20
 800bb50:	b00b883a 	mov	r5,r22
 800bb54:	1478b03a 	or	fp,r2,r17
 800bb58:	800bdb00 	call	800bdb0 <__umodsi3>
 800bb5c:	a009883a 	mov	r4,r20
 800bb60:	b00b883a 	mov	r5,r22
 800bb64:	1023883a 	mov	r17,r2
 800bb68:	800bd4c0 	call	800bd4c <__udivsi3>
 800bb6c:	9d7fffcc 	andi	r21,r19,65535
 800bb70:	880a943a 	slli	r5,r17,16
 800bb74:	e008d43a 	srli	r4,fp,16
 800bb78:	a885383a 	mul	r2,r21,r2
 800bb7c:	84a8983a 	sll	r20,r16,r18
 800bb80:	2148b03a 	or	r4,r4,r5
 800bb84:	2080042e 	bgeu	r4,r2,800bb98 <__umoddi3+0x47c>
 800bb88:	24c9883a 	add	r4,r4,r19
 800bb8c:	24c00236 	bltu	r4,r19,800bb98 <__umoddi3+0x47c>
 800bb90:	2080012e 	bgeu	r4,r2,800bb98 <__umoddi3+0x47c>
 800bb94:	24c9883a 	add	r4,r4,r19
 800bb98:	20a3c83a 	sub	r17,r4,r2
 800bb9c:	b00b883a 	mov	r5,r22
 800bba0:	8809883a 	mov	r4,r17
 800bba4:	800bdb00 	call	800bdb0 <__umodsi3>
 800bba8:	102f883a 	mov	r23,r2
 800bbac:	8809883a 	mov	r4,r17
 800bbb0:	b00b883a 	mov	r5,r22
 800bbb4:	800bd4c0 	call	800bd4c <__udivsi3>
 800bbb8:	b82e943a 	slli	r23,r23,16
 800bbbc:	a885383a 	mul	r2,r21,r2
 800bbc0:	e13fffcc 	andi	r4,fp,65535
 800bbc4:	25c8b03a 	or	r4,r4,r23
 800bbc8:	2080042e 	bgeu	r4,r2,800bbdc <__umoddi3+0x4c0>
 800bbcc:	24c9883a 	add	r4,r4,r19
 800bbd0:	24c00236 	bltu	r4,r19,800bbdc <__umoddi3+0x4c0>
 800bbd4:	2080012e 	bgeu	r4,r2,800bbdc <__umoddi3+0x4c0>
 800bbd8:	24c9883a 	add	r4,r4,r19
 800bbdc:	20a3c83a 	sub	r17,r4,r2
 800bbe0:	003f4806 	br	800b904 <__umoddi3+0x1e8>
 800bbe4:	2c8fc83a 	sub	r7,r5,r18
 800bbe8:	1545c83a 	sub	r2,r2,r21
 800bbec:	29cb803a 	cmpltu	r5,r5,r7
 800bbf0:	1145c83a 	sub	r2,r2,r5
 800bbf4:	4089c83a 	sub	r4,r8,r2
 800bbf8:	003fc706 	br	800bb18 <__umoddi3+0x3fc>
 800bbfc:	01000604 	movi	r4,24
 800bc00:	003f1806 	br	800b864 <__umoddi3+0x148>
 800bc04:	00800604 	movi	r2,24
 800bc08:	003f3206 	br	800b8d4 <__umoddi3+0x1b8>
 800bc0c:	01000604 	movi	r4,24
 800bc10:	003ed906 	br	800b778 <__umoddi3+0x5c>
 800bc14:	413fa52e 	bgeu	r8,r4,800baac <__umoddi3+0x390>
 800bc18:	297fff84 	addi	r5,r5,-2
 800bc1c:	4551883a 	add	r8,r8,r21
 800bc20:	003fa306 	br	800bab0 <__umoddi3+0x394>
 800bc24:	15ff8b2e 	bgeu	r2,r23,800ba54 <__umoddi3+0x338>
 800bc28:	31bfff84 	addi	r6,r6,-2
 800bc2c:	1545883a 	add	r2,r2,r21
 800bc30:	003f8906 	br	800ba58 <__umoddi3+0x33c>
 800bc34:	24c9883a 	add	r4,r4,r19
 800bc38:	003eee06 	br	800b7f4 <__umoddi3+0xd8>
 800bc3c:	8005883a 	mov	r2,r16
 800bc40:	003f1706 	br	800b8a0 <__umoddi3+0x184>
 800bc44:	817fe736 	bltu	r16,r5,800bbe4 <__umoddi3+0x4c8>
 800bc48:	280f883a 	mov	r7,r5
 800bc4c:	0009883a 	mov	r4,zero
 800bc50:	003fb106 	br	800bb18 <__umoddi3+0x3fc>

0800bc54 <__divsi3>:
 800bc54:	20001b16 	blt	r4,zero,800bcc4 <__divsi3+0x70>
 800bc58:	000f883a 	mov	r7,zero
 800bc5c:	28001616 	blt	r5,zero,800bcb8 <__divsi3+0x64>
 800bc60:	200d883a 	mov	r6,r4
 800bc64:	29001a2e 	bgeu	r5,r4,800bcd0 <__divsi3+0x7c>
 800bc68:	00800804 	movi	r2,32
 800bc6c:	00c00044 	movi	r3,1
 800bc70:	00000106 	br	800bc78 <__divsi3+0x24>
 800bc74:	10000d26 	beq	r2,zero,800bcac <__divsi3+0x58>
 800bc78:	294b883a 	add	r5,r5,r5
 800bc7c:	10bfffc4 	addi	r2,r2,-1
 800bc80:	18c7883a 	add	r3,r3,r3
 800bc84:	293ffb36 	bltu	r5,r4,800bc74 <__divsi3+0x20>
 800bc88:	0005883a 	mov	r2,zero
 800bc8c:	18000726 	beq	r3,zero,800bcac <__divsi3+0x58>
 800bc90:	0005883a 	mov	r2,zero
 800bc94:	31400236 	bltu	r6,r5,800bca0 <__divsi3+0x4c>
 800bc98:	314dc83a 	sub	r6,r6,r5
 800bc9c:	10c4b03a 	or	r2,r2,r3
 800bca0:	1806d07a 	srli	r3,r3,1
 800bca4:	280ad07a 	srli	r5,r5,1
 800bca8:	183ffa1e 	bne	r3,zero,800bc94 <__divsi3+0x40>
 800bcac:	38000126 	beq	r7,zero,800bcb4 <__divsi3+0x60>
 800bcb0:	0085c83a 	sub	r2,zero,r2
 800bcb4:	f800283a 	ret
 800bcb8:	014bc83a 	sub	r5,zero,r5
 800bcbc:	39c0005c 	xori	r7,r7,1
 800bcc0:	003fe706 	br	800bc60 <__divsi3+0xc>
 800bcc4:	0109c83a 	sub	r4,zero,r4
 800bcc8:	01c00044 	movi	r7,1
 800bccc:	003fe306 	br	800bc5c <__divsi3+0x8>
 800bcd0:	00c00044 	movi	r3,1
 800bcd4:	003fee06 	br	800bc90 <__divsi3+0x3c>

0800bcd8 <__modsi3>:
 800bcd8:	20001716 	blt	r4,zero,800bd38 <__modsi3+0x60>
 800bcdc:	000f883a 	mov	r7,zero
 800bce0:	2005883a 	mov	r2,r4
 800bce4:	28001216 	blt	r5,zero,800bd30 <__modsi3+0x58>
 800bce8:	2900162e 	bgeu	r5,r4,800bd44 <__modsi3+0x6c>
 800bcec:	01800804 	movi	r6,32
 800bcf0:	00c00044 	movi	r3,1
 800bcf4:	00000106 	br	800bcfc <__modsi3+0x24>
 800bcf8:	30000a26 	beq	r6,zero,800bd24 <__modsi3+0x4c>
 800bcfc:	294b883a 	add	r5,r5,r5
 800bd00:	31bfffc4 	addi	r6,r6,-1
 800bd04:	18c7883a 	add	r3,r3,r3
 800bd08:	293ffb36 	bltu	r5,r4,800bcf8 <__modsi3+0x20>
 800bd0c:	18000526 	beq	r3,zero,800bd24 <__modsi3+0x4c>
 800bd10:	1806d07a 	srli	r3,r3,1
 800bd14:	11400136 	bltu	r2,r5,800bd1c <__modsi3+0x44>
 800bd18:	1145c83a 	sub	r2,r2,r5
 800bd1c:	280ad07a 	srli	r5,r5,1
 800bd20:	183ffb1e 	bne	r3,zero,800bd10 <__modsi3+0x38>
 800bd24:	38000126 	beq	r7,zero,800bd2c <__modsi3+0x54>
 800bd28:	0085c83a 	sub	r2,zero,r2
 800bd2c:	f800283a 	ret
 800bd30:	014bc83a 	sub	r5,zero,r5
 800bd34:	003fec06 	br	800bce8 <__modsi3+0x10>
 800bd38:	0109c83a 	sub	r4,zero,r4
 800bd3c:	01c00044 	movi	r7,1
 800bd40:	003fe706 	br	800bce0 <__modsi3+0x8>
 800bd44:	00c00044 	movi	r3,1
 800bd48:	003ff106 	br	800bd10 <__modsi3+0x38>

0800bd4c <__udivsi3>:
 800bd4c:	200d883a 	mov	r6,r4
 800bd50:	2900152e 	bgeu	r5,r4,800bda8 <__udivsi3+0x5c>
 800bd54:	28001416 	blt	r5,zero,800bda8 <__udivsi3+0x5c>
 800bd58:	00800804 	movi	r2,32
 800bd5c:	00c00044 	movi	r3,1
 800bd60:	00000206 	br	800bd6c <__udivsi3+0x20>
 800bd64:	10000e26 	beq	r2,zero,800bda0 <__udivsi3+0x54>
 800bd68:	28000516 	blt	r5,zero,800bd80 <__udivsi3+0x34>
 800bd6c:	294b883a 	add	r5,r5,r5
 800bd70:	10bfffc4 	addi	r2,r2,-1
 800bd74:	18c7883a 	add	r3,r3,r3
 800bd78:	293ffa36 	bltu	r5,r4,800bd64 <__udivsi3+0x18>
 800bd7c:	18000826 	beq	r3,zero,800bda0 <__udivsi3+0x54>
 800bd80:	0005883a 	mov	r2,zero
 800bd84:	31400236 	bltu	r6,r5,800bd90 <__udivsi3+0x44>
 800bd88:	314dc83a 	sub	r6,r6,r5
 800bd8c:	10c4b03a 	or	r2,r2,r3
 800bd90:	1806d07a 	srli	r3,r3,1
 800bd94:	280ad07a 	srli	r5,r5,1
 800bd98:	183ffa1e 	bne	r3,zero,800bd84 <__udivsi3+0x38>
 800bd9c:	f800283a 	ret
 800bda0:	0005883a 	mov	r2,zero
 800bda4:	f800283a 	ret
 800bda8:	00c00044 	movi	r3,1
 800bdac:	003ff406 	br	800bd80 <__udivsi3+0x34>

0800bdb0 <__umodsi3>:
 800bdb0:	2005883a 	mov	r2,r4
 800bdb4:	2900122e 	bgeu	r5,r4,800be00 <__umodsi3+0x50>
 800bdb8:	28001116 	blt	r5,zero,800be00 <__umodsi3+0x50>
 800bdbc:	01800804 	movi	r6,32
 800bdc0:	00c00044 	movi	r3,1
 800bdc4:	00000206 	br	800bdd0 <__umodsi3+0x20>
 800bdc8:	30000c26 	beq	r6,zero,800bdfc <__umodsi3+0x4c>
 800bdcc:	28000516 	blt	r5,zero,800bde4 <__umodsi3+0x34>
 800bdd0:	294b883a 	add	r5,r5,r5
 800bdd4:	31bfffc4 	addi	r6,r6,-1
 800bdd8:	18c7883a 	add	r3,r3,r3
 800bddc:	293ffa36 	bltu	r5,r4,800bdc8 <__umodsi3+0x18>
 800bde0:	18000626 	beq	r3,zero,800bdfc <__umodsi3+0x4c>
 800bde4:	1806d07a 	srli	r3,r3,1
 800bde8:	11400136 	bltu	r2,r5,800bdf0 <__umodsi3+0x40>
 800bdec:	1145c83a 	sub	r2,r2,r5
 800bdf0:	280ad07a 	srli	r5,r5,1
 800bdf4:	183ffb1e 	bne	r3,zero,800bde4 <__umodsi3+0x34>
 800bdf8:	f800283a 	ret
 800bdfc:	f800283a 	ret
 800be00:	00c00044 	movi	r3,1
 800be04:	003ff706 	br	800bde4 <__umodsi3+0x34>

0800be08 <__adddf3>:
 800be08:	02c00434 	movhi	r11,16
 800be0c:	5affffc4 	addi	r11,r11,-1
 800be10:	2806d7fa 	srli	r3,r5,31
 800be14:	2ad4703a 	and	r10,r5,r11
 800be18:	3ad2703a 	and	r9,r7,r11
 800be1c:	3804d53a 	srli	r2,r7,20
 800be20:	3018d77a 	srli	r12,r6,29
 800be24:	280ad53a 	srli	r5,r5,20
 800be28:	501490fa 	slli	r10,r10,3
 800be2c:	2010d77a 	srli	r8,r4,29
 800be30:	481290fa 	slli	r9,r9,3
 800be34:	380ed7fa 	srli	r7,r7,31
 800be38:	defffb04 	addi	sp,sp,-20
 800be3c:	dc800215 	stw	r18,8(sp)
 800be40:	dc400115 	stw	r17,4(sp)
 800be44:	dc000015 	stw	r16,0(sp)
 800be48:	dfc00415 	stw	ra,16(sp)
 800be4c:	dcc00315 	stw	r19,12(sp)
 800be50:	1c803fcc 	andi	r18,r3,255
 800be54:	2c01ffcc 	andi	r16,r5,2047
 800be58:	5210b03a 	or	r8,r10,r8
 800be5c:	202290fa 	slli	r17,r4,3
 800be60:	1081ffcc 	andi	r2,r2,2047
 800be64:	4b12b03a 	or	r9,r9,r12
 800be68:	300c90fa 	slli	r6,r6,3
 800be6c:	91c07526 	beq	r18,r7,800c044 <__adddf3+0x23c>
 800be70:	8087c83a 	sub	r3,r16,r2
 800be74:	00c0ab0e 	bge	zero,r3,800c124 <__adddf3+0x31c>
 800be78:	10002a1e 	bne	r2,zero,800bf24 <__adddf3+0x11c>
 800be7c:	4984b03a 	or	r2,r9,r6
 800be80:	1000961e 	bne	r2,zero,800c0dc <__adddf3+0x2d4>
 800be84:	888001cc 	andi	r2,r17,7
 800be88:	10000726 	beq	r2,zero,800bea8 <__adddf3+0xa0>
 800be8c:	888003cc 	andi	r2,r17,15
 800be90:	00c00104 	movi	r3,4
 800be94:	10c00426 	beq	r2,r3,800bea8 <__adddf3+0xa0>
 800be98:	88c7883a 	add	r3,r17,r3
 800be9c:	1c63803a 	cmpltu	r17,r3,r17
 800bea0:	4451883a 	add	r8,r8,r17
 800bea4:	1823883a 	mov	r17,r3
 800bea8:	4080202c 	andhi	r2,r8,128
 800beac:	10005926 	beq	r2,zero,800c014 <__adddf3+0x20c>
 800beb0:	84000044 	addi	r16,r16,1
 800beb4:	0081ffc4 	movi	r2,2047
 800beb8:	8080ba26 	beq	r16,r2,800c1a4 <__adddf3+0x39c>
 800bebc:	00bfe034 	movhi	r2,65408
 800bec0:	10bfffc4 	addi	r2,r2,-1
 800bec4:	4090703a 	and	r8,r8,r2
 800bec8:	4004977a 	slli	r2,r8,29
 800becc:	4010927a 	slli	r8,r8,9
 800bed0:	8822d0fa 	srli	r17,r17,3
 800bed4:	8401ffcc 	andi	r16,r16,2047
 800bed8:	4010d33a 	srli	r8,r8,12
 800bedc:	9007883a 	mov	r3,r18
 800bee0:	1444b03a 	or	r2,r2,r17
 800bee4:	8401ffcc 	andi	r16,r16,2047
 800bee8:	8020953a 	slli	r16,r16,20
 800beec:	18c03fcc 	andi	r3,r3,255
 800bef0:	01000434 	movhi	r4,16
 800bef4:	213fffc4 	addi	r4,r4,-1
 800bef8:	180697fa 	slli	r3,r3,31
 800befc:	4110703a 	and	r8,r8,r4
 800bf00:	4410b03a 	or	r8,r8,r16
 800bf04:	40c6b03a 	or	r3,r8,r3
 800bf08:	dfc00417 	ldw	ra,16(sp)
 800bf0c:	dcc00317 	ldw	r19,12(sp)
 800bf10:	dc800217 	ldw	r18,8(sp)
 800bf14:	dc400117 	ldw	r17,4(sp)
 800bf18:	dc000017 	ldw	r16,0(sp)
 800bf1c:	dec00504 	addi	sp,sp,20
 800bf20:	f800283a 	ret
 800bf24:	0081ffc4 	movi	r2,2047
 800bf28:	80bfd626 	beq	r16,r2,800be84 <__adddf3+0x7c>
 800bf2c:	4a402034 	orhi	r9,r9,128
 800bf30:	00800e04 	movi	r2,56
 800bf34:	10c09f16 	blt	r2,r3,800c1b4 <__adddf3+0x3ac>
 800bf38:	008007c4 	movi	r2,31
 800bf3c:	10c0c216 	blt	r2,r3,800c248 <__adddf3+0x440>
 800bf40:	00800804 	movi	r2,32
 800bf44:	10c5c83a 	sub	r2,r2,r3
 800bf48:	488a983a 	sll	r5,r9,r2
 800bf4c:	30c8d83a 	srl	r4,r6,r3
 800bf50:	3084983a 	sll	r2,r6,r2
 800bf54:	48c6d83a 	srl	r3,r9,r3
 800bf58:	290cb03a 	or	r6,r5,r4
 800bf5c:	1004c03a 	cmpne	r2,r2,zero
 800bf60:	308cb03a 	or	r6,r6,r2
 800bf64:	898dc83a 	sub	r6,r17,r6
 800bf68:	89a3803a 	cmpltu	r17,r17,r6
 800bf6c:	40d1c83a 	sub	r8,r8,r3
 800bf70:	4451c83a 	sub	r8,r8,r17
 800bf74:	3023883a 	mov	r17,r6
 800bf78:	4080202c 	andhi	r2,r8,128
 800bf7c:	10002326 	beq	r2,zero,800c00c <__adddf3+0x204>
 800bf80:	04c02034 	movhi	r19,128
 800bf84:	9cffffc4 	addi	r19,r19,-1
 800bf88:	44e6703a 	and	r19,r8,r19
 800bf8c:	98007626 	beq	r19,zero,800c168 <__adddf3+0x360>
 800bf90:	9809883a 	mov	r4,r19
 800bf94:	8001aec0 	call	8001aec <__clzsi2>
 800bf98:	10fffe04 	addi	r3,r2,-8
 800bf9c:	010007c4 	movi	r4,31
 800bfa0:	20c07716 	blt	r4,r3,800c180 <__adddf3+0x378>
 800bfa4:	00800804 	movi	r2,32
 800bfa8:	10c5c83a 	sub	r2,r2,r3
 800bfac:	8884d83a 	srl	r2,r17,r2
 800bfb0:	98d0983a 	sll	r8,r19,r3
 800bfb4:	88e2983a 	sll	r17,r17,r3
 800bfb8:	1204b03a 	or	r2,r2,r8
 800bfbc:	1c007416 	blt	r3,r16,800c190 <__adddf3+0x388>
 800bfc0:	1c21c83a 	sub	r16,r3,r16
 800bfc4:	82000044 	addi	r8,r16,1
 800bfc8:	00c007c4 	movi	r3,31
 800bfcc:	1a009116 	blt	r3,r8,800c214 <__adddf3+0x40c>
 800bfd0:	00c00804 	movi	r3,32
 800bfd4:	1a07c83a 	sub	r3,r3,r8
 800bfd8:	8a08d83a 	srl	r4,r17,r8
 800bfdc:	88e2983a 	sll	r17,r17,r3
 800bfe0:	10c6983a 	sll	r3,r2,r3
 800bfe4:	1210d83a 	srl	r8,r2,r8
 800bfe8:	8804c03a 	cmpne	r2,r17,zero
 800bfec:	1906b03a 	or	r3,r3,r4
 800bff0:	18a2b03a 	or	r17,r3,r2
 800bff4:	0021883a 	mov	r16,zero
 800bff8:	003fa206 	br	800be84 <__adddf3+0x7c>
 800bffc:	1890b03a 	or	r8,r3,r2
 800c000:	40017d26 	beq	r8,zero,800c5f8 <__adddf3+0x7f0>
 800c004:	1011883a 	mov	r8,r2
 800c008:	1823883a 	mov	r17,r3
 800c00c:	888001cc 	andi	r2,r17,7
 800c010:	103f9e1e 	bne	r2,zero,800be8c <__adddf3+0x84>
 800c014:	4004977a 	slli	r2,r8,29
 800c018:	8822d0fa 	srli	r17,r17,3
 800c01c:	4010d0fa 	srli	r8,r8,3
 800c020:	9007883a 	mov	r3,r18
 800c024:	1444b03a 	or	r2,r2,r17
 800c028:	0101ffc4 	movi	r4,2047
 800c02c:	81002426 	beq	r16,r4,800c0c0 <__adddf3+0x2b8>
 800c030:	8120703a 	and	r16,r16,r4
 800c034:	01000434 	movhi	r4,16
 800c038:	213fffc4 	addi	r4,r4,-1
 800c03c:	4110703a 	and	r8,r8,r4
 800c040:	003fa806 	br	800bee4 <__adddf3+0xdc>
 800c044:	8089c83a 	sub	r4,r16,r2
 800c048:	01005e0e 	bge	zero,r4,800c1c4 <__adddf3+0x3bc>
 800c04c:	10002b26 	beq	r2,zero,800c0fc <__adddf3+0x2f4>
 800c050:	0081ffc4 	movi	r2,2047
 800c054:	80bf8b26 	beq	r16,r2,800be84 <__adddf3+0x7c>
 800c058:	4a402034 	orhi	r9,r9,128
 800c05c:	00800e04 	movi	r2,56
 800c060:	1100a40e 	bge	r2,r4,800c2f4 <__adddf3+0x4ec>
 800c064:	498cb03a 	or	r6,r9,r6
 800c068:	300ac03a 	cmpne	r5,r6,zero
 800c06c:	0013883a 	mov	r9,zero
 800c070:	2c4b883a 	add	r5,r5,r17
 800c074:	2c63803a 	cmpltu	r17,r5,r17
 800c078:	4a11883a 	add	r8,r9,r8
 800c07c:	8a11883a 	add	r8,r17,r8
 800c080:	2823883a 	mov	r17,r5
 800c084:	4080202c 	andhi	r2,r8,128
 800c088:	103fe026 	beq	r2,zero,800c00c <__adddf3+0x204>
 800c08c:	84000044 	addi	r16,r16,1
 800c090:	0081ffc4 	movi	r2,2047
 800c094:	8080d226 	beq	r16,r2,800c3e0 <__adddf3+0x5d8>
 800c098:	00bfe034 	movhi	r2,65408
 800c09c:	10bfffc4 	addi	r2,r2,-1
 800c0a0:	4090703a 	and	r8,r8,r2
 800c0a4:	880ad07a 	srli	r5,r17,1
 800c0a8:	400897fa 	slli	r4,r8,31
 800c0ac:	88c0004c 	andi	r3,r17,1
 800c0b0:	28e2b03a 	or	r17,r5,r3
 800c0b4:	4010d07a 	srli	r8,r8,1
 800c0b8:	2462b03a 	or	r17,r4,r17
 800c0bc:	003f7106 	br	800be84 <__adddf3+0x7c>
 800c0c0:	4088b03a 	or	r4,r8,r2
 800c0c4:	20014526 	beq	r4,zero,800c5dc <__adddf3+0x7d4>
 800c0c8:	01000434 	movhi	r4,16
 800c0cc:	42000234 	orhi	r8,r8,8
 800c0d0:	213fffc4 	addi	r4,r4,-1
 800c0d4:	4110703a 	and	r8,r8,r4
 800c0d8:	003f8206 	br	800bee4 <__adddf3+0xdc>
 800c0dc:	18ffffc4 	addi	r3,r3,-1
 800c0e0:	1800491e 	bne	r3,zero,800c208 <__adddf3+0x400>
 800c0e4:	898bc83a 	sub	r5,r17,r6
 800c0e8:	8963803a 	cmpltu	r17,r17,r5
 800c0ec:	4251c83a 	sub	r8,r8,r9
 800c0f0:	4451c83a 	sub	r8,r8,r17
 800c0f4:	2823883a 	mov	r17,r5
 800c0f8:	003f9f06 	br	800bf78 <__adddf3+0x170>
 800c0fc:	4984b03a 	or	r2,r9,r6
 800c100:	103f6026 	beq	r2,zero,800be84 <__adddf3+0x7c>
 800c104:	213fffc4 	addi	r4,r4,-1
 800c108:	2000931e 	bne	r4,zero,800c358 <__adddf3+0x550>
 800c10c:	898d883a 	add	r6,r17,r6
 800c110:	3463803a 	cmpltu	r17,r6,r17
 800c114:	4251883a 	add	r8,r8,r9
 800c118:	8a11883a 	add	r8,r17,r8
 800c11c:	3023883a 	mov	r17,r6
 800c120:	003fd806 	br	800c084 <__adddf3+0x27c>
 800c124:	1800541e 	bne	r3,zero,800c278 <__adddf3+0x470>
 800c128:	80800044 	addi	r2,r16,1
 800c12c:	1081ffcc 	andi	r2,r2,2047
 800c130:	00c00044 	movi	r3,1
 800c134:	1880a00e 	bge	r3,r2,800c3b8 <__adddf3+0x5b0>
 800c138:	8989c83a 	sub	r4,r17,r6
 800c13c:	8905803a 	cmpltu	r2,r17,r4
 800c140:	4267c83a 	sub	r19,r8,r9
 800c144:	98a7c83a 	sub	r19,r19,r2
 800c148:	9880202c 	andhi	r2,r19,128
 800c14c:	10006326 	beq	r2,zero,800c2dc <__adddf3+0x4d4>
 800c150:	3463c83a 	sub	r17,r6,r17
 800c154:	4a07c83a 	sub	r3,r9,r8
 800c158:	344d803a 	cmpltu	r6,r6,r17
 800c15c:	19a7c83a 	sub	r19,r3,r6
 800c160:	3825883a 	mov	r18,r7
 800c164:	983f8a1e 	bne	r19,zero,800bf90 <__adddf3+0x188>
 800c168:	8809883a 	mov	r4,r17
 800c16c:	8001aec0 	call	8001aec <__clzsi2>
 800c170:	10800804 	addi	r2,r2,32
 800c174:	10fffe04 	addi	r3,r2,-8
 800c178:	010007c4 	movi	r4,31
 800c17c:	20ff890e 	bge	r4,r3,800bfa4 <__adddf3+0x19c>
 800c180:	10bff604 	addi	r2,r2,-40
 800c184:	8884983a 	sll	r2,r17,r2
 800c188:	0023883a 	mov	r17,zero
 800c18c:	1c3f8c0e 	bge	r3,r16,800bfc0 <__adddf3+0x1b8>
 800c190:	023fe034 	movhi	r8,65408
 800c194:	423fffc4 	addi	r8,r8,-1
 800c198:	80e1c83a 	sub	r16,r16,r3
 800c19c:	1210703a 	and	r8,r2,r8
 800c1a0:	003f3806 	br	800be84 <__adddf3+0x7c>
 800c1a4:	9007883a 	mov	r3,r18
 800c1a8:	0011883a 	mov	r8,zero
 800c1ac:	0005883a 	mov	r2,zero
 800c1b0:	003f4c06 	br	800bee4 <__adddf3+0xdc>
 800c1b4:	498cb03a 	or	r6,r9,r6
 800c1b8:	300cc03a 	cmpne	r6,r6,zero
 800c1bc:	0007883a 	mov	r3,zero
 800c1c0:	003f6806 	br	800bf64 <__adddf3+0x15c>
 800c1c4:	20009c1e 	bne	r4,zero,800c438 <__adddf3+0x630>
 800c1c8:	80800044 	addi	r2,r16,1
 800c1cc:	1141ffcc 	andi	r5,r2,2047
 800c1d0:	01000044 	movi	r4,1
 800c1d4:	2140670e 	bge	r4,r5,800c374 <__adddf3+0x56c>
 800c1d8:	0101ffc4 	movi	r4,2047
 800c1dc:	11007f26 	beq	r2,r4,800c3dc <__adddf3+0x5d4>
 800c1e0:	898d883a 	add	r6,r17,r6
 800c1e4:	4247883a 	add	r3,r8,r9
 800c1e8:	3451803a 	cmpltu	r8,r6,r17
 800c1ec:	40d1883a 	add	r8,r8,r3
 800c1f0:	402297fa 	slli	r17,r8,31
 800c1f4:	300cd07a 	srli	r6,r6,1
 800c1f8:	4010d07a 	srli	r8,r8,1
 800c1fc:	1021883a 	mov	r16,r2
 800c200:	89a2b03a 	or	r17,r17,r6
 800c204:	003f1f06 	br	800be84 <__adddf3+0x7c>
 800c208:	0081ffc4 	movi	r2,2047
 800c20c:	80bf481e 	bne	r16,r2,800bf30 <__adddf3+0x128>
 800c210:	003f1c06 	br	800be84 <__adddf3+0x7c>
 800c214:	843ff844 	addi	r16,r16,-31
 800c218:	01000804 	movi	r4,32
 800c21c:	1406d83a 	srl	r3,r2,r16
 800c220:	41005026 	beq	r8,r4,800c364 <__adddf3+0x55c>
 800c224:	01001004 	movi	r4,64
 800c228:	2211c83a 	sub	r8,r4,r8
 800c22c:	1204983a 	sll	r2,r2,r8
 800c230:	88a2b03a 	or	r17,r17,r2
 800c234:	8822c03a 	cmpne	r17,r17,zero
 800c238:	1c62b03a 	or	r17,r3,r17
 800c23c:	0011883a 	mov	r8,zero
 800c240:	0021883a 	mov	r16,zero
 800c244:	003f7106 	br	800c00c <__adddf3+0x204>
 800c248:	193ff804 	addi	r4,r3,-32
 800c24c:	00800804 	movi	r2,32
 800c250:	4908d83a 	srl	r4,r9,r4
 800c254:	18804526 	beq	r3,r2,800c36c <__adddf3+0x564>
 800c258:	00801004 	movi	r2,64
 800c25c:	10c5c83a 	sub	r2,r2,r3
 800c260:	4886983a 	sll	r3,r9,r2
 800c264:	198cb03a 	or	r6,r3,r6
 800c268:	300cc03a 	cmpne	r6,r6,zero
 800c26c:	218cb03a 	or	r6,r4,r6
 800c270:	0007883a 	mov	r3,zero
 800c274:	003f3b06 	br	800bf64 <__adddf3+0x15c>
 800c278:	80002a26 	beq	r16,zero,800c324 <__adddf3+0x51c>
 800c27c:	0101ffc4 	movi	r4,2047
 800c280:	11006826 	beq	r2,r4,800c424 <__adddf3+0x61c>
 800c284:	00c7c83a 	sub	r3,zero,r3
 800c288:	42002034 	orhi	r8,r8,128
 800c28c:	01000e04 	movi	r4,56
 800c290:	20c07c16 	blt	r4,r3,800c484 <__adddf3+0x67c>
 800c294:	010007c4 	movi	r4,31
 800c298:	20c0da16 	blt	r4,r3,800c604 <__adddf3+0x7fc>
 800c29c:	01000804 	movi	r4,32
 800c2a0:	20c9c83a 	sub	r4,r4,r3
 800c2a4:	4114983a 	sll	r10,r8,r4
 800c2a8:	88cad83a 	srl	r5,r17,r3
 800c2ac:	8908983a 	sll	r4,r17,r4
 800c2b0:	40c6d83a 	srl	r3,r8,r3
 800c2b4:	5162b03a 	or	r17,r10,r5
 800c2b8:	2008c03a 	cmpne	r4,r4,zero
 800c2bc:	8922b03a 	or	r17,r17,r4
 800c2c0:	3463c83a 	sub	r17,r6,r17
 800c2c4:	48c7c83a 	sub	r3,r9,r3
 800c2c8:	344d803a 	cmpltu	r6,r6,r17
 800c2cc:	1991c83a 	sub	r8,r3,r6
 800c2d0:	1021883a 	mov	r16,r2
 800c2d4:	3825883a 	mov	r18,r7
 800c2d8:	003f2706 	br	800bf78 <__adddf3+0x170>
 800c2dc:	24d0b03a 	or	r8,r4,r19
 800c2e0:	40001b1e 	bne	r8,zero,800c350 <__adddf3+0x548>
 800c2e4:	0005883a 	mov	r2,zero
 800c2e8:	0007883a 	mov	r3,zero
 800c2ec:	0021883a 	mov	r16,zero
 800c2f0:	003f4d06 	br	800c028 <__adddf3+0x220>
 800c2f4:	008007c4 	movi	r2,31
 800c2f8:	11003c16 	blt	r2,r4,800c3ec <__adddf3+0x5e4>
 800c2fc:	00800804 	movi	r2,32
 800c300:	1105c83a 	sub	r2,r2,r4
 800c304:	488e983a 	sll	r7,r9,r2
 800c308:	310ad83a 	srl	r5,r6,r4
 800c30c:	3084983a 	sll	r2,r6,r2
 800c310:	4912d83a 	srl	r9,r9,r4
 800c314:	394ab03a 	or	r5,r7,r5
 800c318:	1004c03a 	cmpne	r2,r2,zero
 800c31c:	288ab03a 	or	r5,r5,r2
 800c320:	003f5306 	br	800c070 <__adddf3+0x268>
 800c324:	4448b03a 	or	r4,r8,r17
 800c328:	20003e26 	beq	r4,zero,800c424 <__adddf3+0x61c>
 800c32c:	00c6303a 	nor	r3,zero,r3
 800c330:	18003a1e 	bne	r3,zero,800c41c <__adddf3+0x614>
 800c334:	3463c83a 	sub	r17,r6,r17
 800c338:	4a07c83a 	sub	r3,r9,r8
 800c33c:	344d803a 	cmpltu	r6,r6,r17
 800c340:	1991c83a 	sub	r8,r3,r6
 800c344:	1021883a 	mov	r16,r2
 800c348:	3825883a 	mov	r18,r7
 800c34c:	003f0a06 	br	800bf78 <__adddf3+0x170>
 800c350:	2023883a 	mov	r17,r4
 800c354:	003f0d06 	br	800bf8c <__adddf3+0x184>
 800c358:	0081ffc4 	movi	r2,2047
 800c35c:	80bf3f1e 	bne	r16,r2,800c05c <__adddf3+0x254>
 800c360:	003ec806 	br	800be84 <__adddf3+0x7c>
 800c364:	0005883a 	mov	r2,zero
 800c368:	003fb106 	br	800c230 <__adddf3+0x428>
 800c36c:	0007883a 	mov	r3,zero
 800c370:	003fbc06 	br	800c264 <__adddf3+0x45c>
 800c374:	4444b03a 	or	r2,r8,r17
 800c378:	8000871e 	bne	r16,zero,800c598 <__adddf3+0x790>
 800c37c:	1000ba26 	beq	r2,zero,800c668 <__adddf3+0x860>
 800c380:	4984b03a 	or	r2,r9,r6
 800c384:	103ebf26 	beq	r2,zero,800be84 <__adddf3+0x7c>
 800c388:	8985883a 	add	r2,r17,r6
 800c38c:	4247883a 	add	r3,r8,r9
 800c390:	1451803a 	cmpltu	r8,r2,r17
 800c394:	40d1883a 	add	r8,r8,r3
 800c398:	40c0202c 	andhi	r3,r8,128
 800c39c:	1023883a 	mov	r17,r2
 800c3a0:	183f1a26 	beq	r3,zero,800c00c <__adddf3+0x204>
 800c3a4:	00bfe034 	movhi	r2,65408
 800c3a8:	10bfffc4 	addi	r2,r2,-1
 800c3ac:	2021883a 	mov	r16,r4
 800c3b0:	4090703a 	and	r8,r8,r2
 800c3b4:	003eb306 	br	800be84 <__adddf3+0x7c>
 800c3b8:	4444b03a 	or	r2,r8,r17
 800c3bc:	8000291e 	bne	r16,zero,800c464 <__adddf3+0x65c>
 800c3c0:	10004b1e 	bne	r2,zero,800c4f0 <__adddf3+0x6e8>
 800c3c4:	4990b03a 	or	r8,r9,r6
 800c3c8:	40008b26 	beq	r8,zero,800c5f8 <__adddf3+0x7f0>
 800c3cc:	4811883a 	mov	r8,r9
 800c3d0:	3023883a 	mov	r17,r6
 800c3d4:	3825883a 	mov	r18,r7
 800c3d8:	003eaa06 	br	800be84 <__adddf3+0x7c>
 800c3dc:	1021883a 	mov	r16,r2
 800c3e0:	0011883a 	mov	r8,zero
 800c3e4:	0005883a 	mov	r2,zero
 800c3e8:	003f0f06 	br	800c028 <__adddf3+0x220>
 800c3ec:	217ff804 	addi	r5,r4,-32
 800c3f0:	00800804 	movi	r2,32
 800c3f4:	494ad83a 	srl	r5,r9,r5
 800c3f8:	20807d26 	beq	r4,r2,800c5f0 <__adddf3+0x7e8>
 800c3fc:	00801004 	movi	r2,64
 800c400:	1109c83a 	sub	r4,r2,r4
 800c404:	4912983a 	sll	r9,r9,r4
 800c408:	498cb03a 	or	r6,r9,r6
 800c40c:	300cc03a 	cmpne	r6,r6,zero
 800c410:	298ab03a 	or	r5,r5,r6
 800c414:	0013883a 	mov	r9,zero
 800c418:	003f1506 	br	800c070 <__adddf3+0x268>
 800c41c:	0101ffc4 	movi	r4,2047
 800c420:	113f9a1e 	bne	r2,r4,800c28c <__adddf3+0x484>
 800c424:	4811883a 	mov	r8,r9
 800c428:	3023883a 	mov	r17,r6
 800c42c:	1021883a 	mov	r16,r2
 800c430:	3825883a 	mov	r18,r7
 800c434:	003e9306 	br	800be84 <__adddf3+0x7c>
 800c438:	8000161e 	bne	r16,zero,800c494 <__adddf3+0x68c>
 800c43c:	444ab03a 	or	r5,r8,r17
 800c440:	28005126 	beq	r5,zero,800c588 <__adddf3+0x780>
 800c444:	0108303a 	nor	r4,zero,r4
 800c448:	20004d1e 	bne	r4,zero,800c580 <__adddf3+0x778>
 800c44c:	89a3883a 	add	r17,r17,r6
 800c450:	4253883a 	add	r9,r8,r9
 800c454:	898d803a 	cmpltu	r6,r17,r6
 800c458:	3251883a 	add	r8,r6,r9
 800c45c:	1021883a 	mov	r16,r2
 800c460:	003f0806 	br	800c084 <__adddf3+0x27c>
 800c464:	1000301e 	bne	r2,zero,800c528 <__adddf3+0x720>
 800c468:	4984b03a 	or	r2,r9,r6
 800c46c:	10007126 	beq	r2,zero,800c634 <__adddf3+0x82c>
 800c470:	4811883a 	mov	r8,r9
 800c474:	3023883a 	mov	r17,r6
 800c478:	3825883a 	mov	r18,r7
 800c47c:	0401ffc4 	movi	r16,2047
 800c480:	003e8006 	br	800be84 <__adddf3+0x7c>
 800c484:	4462b03a 	or	r17,r8,r17
 800c488:	8822c03a 	cmpne	r17,r17,zero
 800c48c:	0007883a 	mov	r3,zero
 800c490:	003f8b06 	br	800c2c0 <__adddf3+0x4b8>
 800c494:	0141ffc4 	movi	r5,2047
 800c498:	11403b26 	beq	r2,r5,800c588 <__adddf3+0x780>
 800c49c:	0109c83a 	sub	r4,zero,r4
 800c4a0:	42002034 	orhi	r8,r8,128
 800c4a4:	01400e04 	movi	r5,56
 800c4a8:	29006716 	blt	r5,r4,800c648 <__adddf3+0x840>
 800c4ac:	014007c4 	movi	r5,31
 800c4b0:	29007016 	blt	r5,r4,800c674 <__adddf3+0x86c>
 800c4b4:	01400804 	movi	r5,32
 800c4b8:	290bc83a 	sub	r5,r5,r4
 800c4bc:	4154983a 	sll	r10,r8,r5
 800c4c0:	890ed83a 	srl	r7,r17,r4
 800c4c4:	894a983a 	sll	r5,r17,r5
 800c4c8:	4108d83a 	srl	r4,r8,r4
 800c4cc:	51e2b03a 	or	r17,r10,r7
 800c4d0:	280ac03a 	cmpne	r5,r5,zero
 800c4d4:	8962b03a 	or	r17,r17,r5
 800c4d8:	89a3883a 	add	r17,r17,r6
 800c4dc:	2253883a 	add	r9,r4,r9
 800c4e0:	898d803a 	cmpltu	r6,r17,r6
 800c4e4:	3251883a 	add	r8,r6,r9
 800c4e8:	1021883a 	mov	r16,r2
 800c4ec:	003ee506 	br	800c084 <__adddf3+0x27c>
 800c4f0:	4984b03a 	or	r2,r9,r6
 800c4f4:	103e6326 	beq	r2,zero,800be84 <__adddf3+0x7c>
 800c4f8:	8987c83a 	sub	r3,r17,r6
 800c4fc:	88c9803a 	cmpltu	r4,r17,r3
 800c500:	4245c83a 	sub	r2,r8,r9
 800c504:	1105c83a 	sub	r2,r2,r4
 800c508:	1100202c 	andhi	r4,r2,128
 800c50c:	203ebb26 	beq	r4,zero,800bffc <__adddf3+0x1f4>
 800c510:	3463c83a 	sub	r17,r6,r17
 800c514:	4a07c83a 	sub	r3,r9,r8
 800c518:	344d803a 	cmpltu	r6,r6,r17
 800c51c:	1991c83a 	sub	r8,r3,r6
 800c520:	3825883a 	mov	r18,r7
 800c524:	003e5706 	br	800be84 <__adddf3+0x7c>
 800c528:	4984b03a 	or	r2,r9,r6
 800c52c:	10002e26 	beq	r2,zero,800c5e8 <__adddf3+0x7e0>
 800c530:	4004d0fa 	srli	r2,r8,3
 800c534:	8822d0fa 	srli	r17,r17,3
 800c538:	4010977a 	slli	r8,r8,29
 800c53c:	10c0022c 	andhi	r3,r2,8
 800c540:	4462b03a 	or	r17,r8,r17
 800c544:	18000826 	beq	r3,zero,800c568 <__adddf3+0x760>
 800c548:	4808d0fa 	srli	r4,r9,3
 800c54c:	20c0022c 	andhi	r3,r4,8
 800c550:	1800051e 	bne	r3,zero,800c568 <__adddf3+0x760>
 800c554:	300cd0fa 	srli	r6,r6,3
 800c558:	4806977a 	slli	r3,r9,29
 800c55c:	2005883a 	mov	r2,r4
 800c560:	3825883a 	mov	r18,r7
 800c564:	19a2b03a 	or	r17,r3,r6
 800c568:	8810d77a 	srli	r8,r17,29
 800c56c:	100490fa 	slli	r2,r2,3
 800c570:	882290fa 	slli	r17,r17,3
 800c574:	0401ffc4 	movi	r16,2047
 800c578:	4090b03a 	or	r8,r8,r2
 800c57c:	003e4106 	br	800be84 <__adddf3+0x7c>
 800c580:	0141ffc4 	movi	r5,2047
 800c584:	117fc71e 	bne	r2,r5,800c4a4 <__adddf3+0x69c>
 800c588:	4811883a 	mov	r8,r9
 800c58c:	3023883a 	mov	r17,r6
 800c590:	1021883a 	mov	r16,r2
 800c594:	003e3b06 	br	800be84 <__adddf3+0x7c>
 800c598:	10002f26 	beq	r2,zero,800c658 <__adddf3+0x850>
 800c59c:	4984b03a 	or	r2,r9,r6
 800c5a0:	10001126 	beq	r2,zero,800c5e8 <__adddf3+0x7e0>
 800c5a4:	4004d0fa 	srli	r2,r8,3
 800c5a8:	8822d0fa 	srli	r17,r17,3
 800c5ac:	4010977a 	slli	r8,r8,29
 800c5b0:	10c0022c 	andhi	r3,r2,8
 800c5b4:	4462b03a 	or	r17,r8,r17
 800c5b8:	183feb26 	beq	r3,zero,800c568 <__adddf3+0x760>
 800c5bc:	4808d0fa 	srli	r4,r9,3
 800c5c0:	20c0022c 	andhi	r3,r4,8
 800c5c4:	183fe81e 	bne	r3,zero,800c568 <__adddf3+0x760>
 800c5c8:	300cd0fa 	srli	r6,r6,3
 800c5cc:	4806977a 	slli	r3,r9,29
 800c5d0:	2005883a 	mov	r2,r4
 800c5d4:	19a2b03a 	or	r17,r3,r6
 800c5d8:	003fe306 	br	800c568 <__adddf3+0x760>
 800c5dc:	0011883a 	mov	r8,zero
 800c5e0:	0005883a 	mov	r2,zero
 800c5e4:	003e3f06 	br	800bee4 <__adddf3+0xdc>
 800c5e8:	0401ffc4 	movi	r16,2047
 800c5ec:	003e2506 	br	800be84 <__adddf3+0x7c>
 800c5f0:	0013883a 	mov	r9,zero
 800c5f4:	003f8406 	br	800c408 <__adddf3+0x600>
 800c5f8:	0005883a 	mov	r2,zero
 800c5fc:	0007883a 	mov	r3,zero
 800c600:	003e8906 	br	800c028 <__adddf3+0x220>
 800c604:	197ff804 	addi	r5,r3,-32
 800c608:	01000804 	movi	r4,32
 800c60c:	414ad83a 	srl	r5,r8,r5
 800c610:	19002426 	beq	r3,r4,800c6a4 <__adddf3+0x89c>
 800c614:	01001004 	movi	r4,64
 800c618:	20c7c83a 	sub	r3,r4,r3
 800c61c:	40c6983a 	sll	r3,r8,r3
 800c620:	1c46b03a 	or	r3,r3,r17
 800c624:	1806c03a 	cmpne	r3,r3,zero
 800c628:	28e2b03a 	or	r17,r5,r3
 800c62c:	0007883a 	mov	r3,zero
 800c630:	003f2306 	br	800c2c0 <__adddf3+0x4b8>
 800c634:	0007883a 	mov	r3,zero
 800c638:	5811883a 	mov	r8,r11
 800c63c:	00bfffc4 	movi	r2,-1
 800c640:	0401ffc4 	movi	r16,2047
 800c644:	003e7806 	br	800c028 <__adddf3+0x220>
 800c648:	4462b03a 	or	r17,r8,r17
 800c64c:	8822c03a 	cmpne	r17,r17,zero
 800c650:	0009883a 	mov	r4,zero
 800c654:	003fa006 	br	800c4d8 <__adddf3+0x6d0>
 800c658:	4811883a 	mov	r8,r9
 800c65c:	3023883a 	mov	r17,r6
 800c660:	0401ffc4 	movi	r16,2047
 800c664:	003e0706 	br	800be84 <__adddf3+0x7c>
 800c668:	4811883a 	mov	r8,r9
 800c66c:	3023883a 	mov	r17,r6
 800c670:	003e0406 	br	800be84 <__adddf3+0x7c>
 800c674:	21fff804 	addi	r7,r4,-32
 800c678:	01400804 	movi	r5,32
 800c67c:	41ced83a 	srl	r7,r8,r7
 800c680:	21400a26 	beq	r4,r5,800c6ac <__adddf3+0x8a4>
 800c684:	01401004 	movi	r5,64
 800c688:	2909c83a 	sub	r4,r5,r4
 800c68c:	4108983a 	sll	r4,r8,r4
 800c690:	2448b03a 	or	r4,r4,r17
 800c694:	2008c03a 	cmpne	r4,r4,zero
 800c698:	3922b03a 	or	r17,r7,r4
 800c69c:	0009883a 	mov	r4,zero
 800c6a0:	003f8d06 	br	800c4d8 <__adddf3+0x6d0>
 800c6a4:	0007883a 	mov	r3,zero
 800c6a8:	003fdd06 	br	800c620 <__adddf3+0x818>
 800c6ac:	0009883a 	mov	r4,zero
 800c6b0:	003ff706 	br	800c690 <__adddf3+0x888>

0800c6b4 <__divdf3>:
 800c6b4:	defff204 	addi	sp,sp,-56
 800c6b8:	dd400915 	stw	r21,36(sp)
 800c6bc:	282ad53a 	srli	r21,r5,20
 800c6c0:	dd000815 	stw	r20,32(sp)
 800c6c4:	2828d7fa 	srli	r20,r5,31
 800c6c8:	dc000415 	stw	r16,16(sp)
 800c6cc:	04000434 	movhi	r16,16
 800c6d0:	df000c15 	stw	fp,48(sp)
 800c6d4:	843fffc4 	addi	r16,r16,-1
 800c6d8:	dfc00d15 	stw	ra,52(sp)
 800c6dc:	ddc00b15 	stw	r23,44(sp)
 800c6e0:	dd800a15 	stw	r22,40(sp)
 800c6e4:	dcc00715 	stw	r19,28(sp)
 800c6e8:	dc800615 	stw	r18,24(sp)
 800c6ec:	dc400515 	stw	r17,20(sp)
 800c6f0:	ad41ffcc 	andi	r21,r21,2047
 800c6f4:	2c20703a 	and	r16,r5,r16
 800c6f8:	a7003fcc 	andi	fp,r20,255
 800c6fc:	a8006126 	beq	r21,zero,800c884 <__divdf3+0x1d0>
 800c700:	0081ffc4 	movi	r2,2047
 800c704:	2025883a 	mov	r18,r4
 800c708:	a8803726 	beq	r21,r2,800c7e8 <__divdf3+0x134>
 800c70c:	80800434 	orhi	r2,r16,16
 800c710:	100490fa 	slli	r2,r2,3
 800c714:	2020d77a 	srli	r16,r4,29
 800c718:	202490fa 	slli	r18,r4,3
 800c71c:	ad7f0044 	addi	r21,r21,-1023
 800c720:	80a0b03a 	or	r16,r16,r2
 800c724:	0027883a 	mov	r19,zero
 800c728:	0013883a 	mov	r9,zero
 800c72c:	3804d53a 	srli	r2,r7,20
 800c730:	382cd7fa 	srli	r22,r7,31
 800c734:	04400434 	movhi	r17,16
 800c738:	8c7fffc4 	addi	r17,r17,-1
 800c73c:	1081ffcc 	andi	r2,r2,2047
 800c740:	3011883a 	mov	r8,r6
 800c744:	3c62703a 	and	r17,r7,r17
 800c748:	b5c03fcc 	andi	r23,r22,255
 800c74c:	10006c26 	beq	r2,zero,800c900 <__divdf3+0x24c>
 800c750:	00c1ffc4 	movi	r3,2047
 800c754:	10c06426 	beq	r2,r3,800c8e8 <__divdf3+0x234>
 800c758:	88c00434 	orhi	r3,r17,16
 800c75c:	180690fa 	slli	r3,r3,3
 800c760:	3022d77a 	srli	r17,r6,29
 800c764:	301090fa 	slli	r8,r6,3
 800c768:	10bf0044 	addi	r2,r2,-1023
 800c76c:	88e2b03a 	or	r17,r17,r3
 800c770:	000f883a 	mov	r7,zero
 800c774:	a58cf03a 	xor	r6,r20,r22
 800c778:	3cc8b03a 	or	r4,r7,r19
 800c77c:	a8abc83a 	sub	r21,r21,r2
 800c780:	008003c4 	movi	r2,15
 800c784:	3007883a 	mov	r3,r6
 800c788:	34c03fcc 	andi	r19,r6,255
 800c78c:	11009036 	bltu	r2,r4,800c9d0 <__divdf3+0x31c>
 800c790:	200890ba 	slli	r4,r4,2
 800c794:	00820074 	movhi	r2,2049
 800c798:	10b1ea04 	addi	r2,r2,-14424
 800c79c:	2089883a 	add	r4,r4,r2
 800c7a0:	20800017 	ldw	r2,0(r4)
 800c7a4:	1000683a 	jmp	r2
 800c7a8:	0800c9d0 	cmplti	zero,at,807
 800c7ac:	0800c820 	cmpeqi	zero,at,800
 800c7b0:	0800c9c0 	call	800c9c <__alt_mem_new_sdram_controller_0-0x77ff364>
 800c7b4:	0800c814 	ori	zero,at,800
 800c7b8:	0800c9c0 	call	800c9c <__alt_mem_new_sdram_controller_0-0x77ff364>
 800c7bc:	0800c994 	ori	zero,at,806
 800c7c0:	0800c9c0 	call	800c9c <__alt_mem_new_sdram_controller_0-0x77ff364>
 800c7c4:	0800c814 	ori	zero,at,800
 800c7c8:	0800c820 	cmpeqi	zero,at,800
 800c7cc:	0800c820 	cmpeqi	zero,at,800
 800c7d0:	0800c994 	ori	zero,at,806
 800c7d4:	0800c814 	ori	zero,at,800
 800c7d8:	0800c804 	addi	zero,at,800
 800c7dc:	0800c804 	addi	zero,at,800
 800c7e0:	0800c804 	addi	zero,at,800
 800c7e4:	0800ccb4 	orhi	zero,at,818
 800c7e8:	2404b03a 	or	r2,r4,r16
 800c7ec:	1000661e 	bne	r2,zero,800c988 <__divdf3+0x2d4>
 800c7f0:	04c00204 	movi	r19,8
 800c7f4:	0021883a 	mov	r16,zero
 800c7f8:	0025883a 	mov	r18,zero
 800c7fc:	02400084 	movi	r9,2
 800c800:	003fca06 	br	800c72c <__divdf3+0x78>
 800c804:	8023883a 	mov	r17,r16
 800c808:	9011883a 	mov	r8,r18
 800c80c:	e02f883a 	mov	r23,fp
 800c810:	480f883a 	mov	r7,r9
 800c814:	00800084 	movi	r2,2
 800c818:	3881311e 	bne	r7,r2,800cce0 <__divdf3+0x62c>
 800c81c:	b827883a 	mov	r19,r23
 800c820:	98c0004c 	andi	r3,r19,1
 800c824:	0081ffc4 	movi	r2,2047
 800c828:	000b883a 	mov	r5,zero
 800c82c:	0025883a 	mov	r18,zero
 800c830:	1004953a 	slli	r2,r2,20
 800c834:	18c03fcc 	andi	r3,r3,255
 800c838:	04400434 	movhi	r17,16
 800c83c:	8c7fffc4 	addi	r17,r17,-1
 800c840:	180697fa 	slli	r3,r3,31
 800c844:	2c4a703a 	and	r5,r5,r17
 800c848:	288ab03a 	or	r5,r5,r2
 800c84c:	28c6b03a 	or	r3,r5,r3
 800c850:	9005883a 	mov	r2,r18
 800c854:	dfc00d17 	ldw	ra,52(sp)
 800c858:	df000c17 	ldw	fp,48(sp)
 800c85c:	ddc00b17 	ldw	r23,44(sp)
 800c860:	dd800a17 	ldw	r22,40(sp)
 800c864:	dd400917 	ldw	r21,36(sp)
 800c868:	dd000817 	ldw	r20,32(sp)
 800c86c:	dcc00717 	ldw	r19,28(sp)
 800c870:	dc800617 	ldw	r18,24(sp)
 800c874:	dc400517 	ldw	r17,20(sp)
 800c878:	dc000417 	ldw	r16,16(sp)
 800c87c:	dec00e04 	addi	sp,sp,56
 800c880:	f800283a 	ret
 800c884:	2404b03a 	or	r2,r4,r16
 800c888:	2027883a 	mov	r19,r4
 800c88c:	10003926 	beq	r2,zero,800c974 <__divdf3+0x2c0>
 800c890:	80012e26 	beq	r16,zero,800cd4c <__divdf3+0x698>
 800c894:	8009883a 	mov	r4,r16
 800c898:	d9800315 	stw	r6,12(sp)
 800c89c:	d9c00215 	stw	r7,8(sp)
 800c8a0:	8001aec0 	call	8001aec <__clzsi2>
 800c8a4:	d9800317 	ldw	r6,12(sp)
 800c8a8:	d9c00217 	ldw	r7,8(sp)
 800c8ac:	113ffd44 	addi	r4,r2,-11
 800c8b0:	00c00704 	movi	r3,28
 800c8b4:	19012116 	blt	r3,r4,800cd3c <__divdf3+0x688>
 800c8b8:	00c00744 	movi	r3,29
 800c8bc:	147ffe04 	addi	r17,r2,-8
 800c8c0:	1907c83a 	sub	r3,r3,r4
 800c8c4:	8460983a 	sll	r16,r16,r17
 800c8c8:	98c6d83a 	srl	r3,r19,r3
 800c8cc:	9c64983a 	sll	r18,r19,r17
 800c8d0:	1c20b03a 	or	r16,r3,r16
 800c8d4:	1080fcc4 	addi	r2,r2,1011
 800c8d8:	00abc83a 	sub	r21,zero,r2
 800c8dc:	0027883a 	mov	r19,zero
 800c8e0:	0013883a 	mov	r9,zero
 800c8e4:	003f9106 	br	800c72c <__divdf3+0x78>
 800c8e8:	3446b03a 	or	r3,r6,r17
 800c8ec:	18001f1e 	bne	r3,zero,800c96c <__divdf3+0x2b8>
 800c8f0:	0023883a 	mov	r17,zero
 800c8f4:	0011883a 	mov	r8,zero
 800c8f8:	01c00084 	movi	r7,2
 800c8fc:	003f9d06 	br	800c774 <__divdf3+0xc0>
 800c900:	3446b03a 	or	r3,r6,r17
 800c904:	18001526 	beq	r3,zero,800c95c <__divdf3+0x2a8>
 800c908:	88011b26 	beq	r17,zero,800cd78 <__divdf3+0x6c4>
 800c90c:	8809883a 	mov	r4,r17
 800c910:	d9800315 	stw	r6,12(sp)
 800c914:	da400115 	stw	r9,4(sp)
 800c918:	8001aec0 	call	8001aec <__clzsi2>
 800c91c:	d9800317 	ldw	r6,12(sp)
 800c920:	da400117 	ldw	r9,4(sp)
 800c924:	113ffd44 	addi	r4,r2,-11
 800c928:	00c00704 	movi	r3,28
 800c92c:	19010e16 	blt	r3,r4,800cd68 <__divdf3+0x6b4>
 800c930:	00c00744 	movi	r3,29
 800c934:	123ffe04 	addi	r8,r2,-8
 800c938:	1907c83a 	sub	r3,r3,r4
 800c93c:	8a22983a 	sll	r17,r17,r8
 800c940:	30c6d83a 	srl	r3,r6,r3
 800c944:	3210983a 	sll	r8,r6,r8
 800c948:	1c62b03a 	or	r17,r3,r17
 800c94c:	1080fcc4 	addi	r2,r2,1011
 800c950:	0085c83a 	sub	r2,zero,r2
 800c954:	000f883a 	mov	r7,zero
 800c958:	003f8606 	br	800c774 <__divdf3+0xc0>
 800c95c:	0023883a 	mov	r17,zero
 800c960:	0011883a 	mov	r8,zero
 800c964:	01c00044 	movi	r7,1
 800c968:	003f8206 	br	800c774 <__divdf3+0xc0>
 800c96c:	01c000c4 	movi	r7,3
 800c970:	003f8006 	br	800c774 <__divdf3+0xc0>
 800c974:	04c00104 	movi	r19,4
 800c978:	0021883a 	mov	r16,zero
 800c97c:	0025883a 	mov	r18,zero
 800c980:	02400044 	movi	r9,1
 800c984:	003f6906 	br	800c72c <__divdf3+0x78>
 800c988:	04c00304 	movi	r19,12
 800c98c:	024000c4 	movi	r9,3
 800c990:	003f6606 	br	800c72c <__divdf3+0x78>
 800c994:	01400434 	movhi	r5,16
 800c998:	0007883a 	mov	r3,zero
 800c99c:	297fffc4 	addi	r5,r5,-1
 800c9a0:	04bfffc4 	movi	r18,-1
 800c9a4:	0081ffc4 	movi	r2,2047
 800c9a8:	003fa106 	br	800c830 <__divdf3+0x17c>
 800c9ac:	00c00044 	movi	r3,1
 800c9b0:	1887c83a 	sub	r3,r3,r2
 800c9b4:	01000e04 	movi	r4,56
 800c9b8:	20c1210e 	bge	r4,r3,800ce40 <__divdf3+0x78c>
 800c9bc:	98c0004c 	andi	r3,r19,1
 800c9c0:	0005883a 	mov	r2,zero
 800c9c4:	000b883a 	mov	r5,zero
 800c9c8:	0025883a 	mov	r18,zero
 800c9cc:	003f9806 	br	800c830 <__divdf3+0x17c>
 800c9d0:	8c00fd36 	bltu	r17,r16,800cdc8 <__divdf3+0x714>
 800c9d4:	8440fb26 	beq	r16,r17,800cdc4 <__divdf3+0x710>
 800c9d8:	8007883a 	mov	r3,r16
 800c9dc:	ad7fffc4 	addi	r21,r21,-1
 800c9e0:	0021883a 	mov	r16,zero
 800c9e4:	4004d63a 	srli	r2,r8,24
 800c9e8:	8822923a 	slli	r17,r17,8
 800c9ec:	1809883a 	mov	r4,r3
 800c9f0:	402c923a 	slli	r22,r8,8
 800c9f4:	88b8b03a 	or	fp,r17,r2
 800c9f8:	e028d43a 	srli	r20,fp,16
 800c9fc:	d8c00015 	stw	r3,0(sp)
 800ca00:	e5ffffcc 	andi	r23,fp,65535
 800ca04:	a00b883a 	mov	r5,r20
 800ca08:	800bd4c0 	call	800bd4c <__udivsi3>
 800ca0c:	d8c00017 	ldw	r3,0(sp)
 800ca10:	a00b883a 	mov	r5,r20
 800ca14:	d8800315 	stw	r2,12(sp)
 800ca18:	1809883a 	mov	r4,r3
 800ca1c:	800bdb00 	call	800bdb0 <__umodsi3>
 800ca20:	d9800317 	ldw	r6,12(sp)
 800ca24:	1006943a 	slli	r3,r2,16
 800ca28:	9004d43a 	srli	r2,r18,16
 800ca2c:	b9a3383a 	mul	r17,r23,r6
 800ca30:	10c4b03a 	or	r2,r2,r3
 800ca34:	1440062e 	bgeu	r2,r17,800ca50 <__divdf3+0x39c>
 800ca38:	1705883a 	add	r2,r2,fp
 800ca3c:	30ffffc4 	addi	r3,r6,-1
 800ca40:	1700ee36 	bltu	r2,fp,800cdfc <__divdf3+0x748>
 800ca44:	1440ed2e 	bgeu	r2,r17,800cdfc <__divdf3+0x748>
 800ca48:	31bfff84 	addi	r6,r6,-2
 800ca4c:	1705883a 	add	r2,r2,fp
 800ca50:	1463c83a 	sub	r17,r2,r17
 800ca54:	a00b883a 	mov	r5,r20
 800ca58:	8809883a 	mov	r4,r17
 800ca5c:	d9800315 	stw	r6,12(sp)
 800ca60:	800bd4c0 	call	800bd4c <__udivsi3>
 800ca64:	a00b883a 	mov	r5,r20
 800ca68:	8809883a 	mov	r4,r17
 800ca6c:	d8800215 	stw	r2,8(sp)
 800ca70:	800bdb00 	call	800bdb0 <__umodsi3>
 800ca74:	d9c00217 	ldw	r7,8(sp)
 800ca78:	1004943a 	slli	r2,r2,16
 800ca7c:	94bfffcc 	andi	r18,r18,65535
 800ca80:	b9d1383a 	mul	r8,r23,r7
 800ca84:	90a4b03a 	or	r18,r18,r2
 800ca88:	d9800317 	ldw	r6,12(sp)
 800ca8c:	9200062e 	bgeu	r18,r8,800caa8 <__divdf3+0x3f4>
 800ca90:	9725883a 	add	r18,r18,fp
 800ca94:	38bfffc4 	addi	r2,r7,-1
 800ca98:	9700d636 	bltu	r18,fp,800cdf4 <__divdf3+0x740>
 800ca9c:	9200d52e 	bgeu	r18,r8,800cdf4 <__divdf3+0x740>
 800caa0:	39ffff84 	addi	r7,r7,-2
 800caa4:	9725883a 	add	r18,r18,fp
 800caa8:	3004943a 	slli	r2,r6,16
 800caac:	b012d43a 	srli	r9,r22,16
 800cab0:	b1bfffcc 	andi	r6,r22,65535
 800cab4:	11e2b03a 	or	r17,r2,r7
 800cab8:	8806d43a 	srli	r3,r17,16
 800cabc:	893fffcc 	andi	r4,r17,65535
 800cac0:	218b383a 	mul	r5,r4,r6
 800cac4:	30c5383a 	mul	r2,r6,r3
 800cac8:	2249383a 	mul	r4,r4,r9
 800cacc:	280ed43a 	srli	r7,r5,16
 800cad0:	9225c83a 	sub	r18,r18,r8
 800cad4:	2089883a 	add	r4,r4,r2
 800cad8:	3909883a 	add	r4,r7,r4
 800cadc:	1a47383a 	mul	r3,r3,r9
 800cae0:	2080022e 	bgeu	r4,r2,800caec <__divdf3+0x438>
 800cae4:	00800074 	movhi	r2,1
 800cae8:	1887883a 	add	r3,r3,r2
 800caec:	2004d43a 	srli	r2,r4,16
 800caf0:	2008943a 	slli	r4,r4,16
 800caf4:	297fffcc 	andi	r5,r5,65535
 800caf8:	10c7883a 	add	r3,r2,r3
 800cafc:	2149883a 	add	r4,r4,r5
 800cb00:	90c0a536 	bltu	r18,r3,800cd98 <__divdf3+0x6e4>
 800cb04:	90c0bf26 	beq	r18,r3,800ce04 <__divdf3+0x750>
 800cb08:	90c7c83a 	sub	r3,r18,r3
 800cb0c:	810fc83a 	sub	r7,r16,r4
 800cb10:	81e5803a 	cmpltu	r18,r16,r7
 800cb14:	1ca5c83a 	sub	r18,r3,r18
 800cb18:	e480c126 	beq	fp,r18,800ce20 <__divdf3+0x76c>
 800cb1c:	a00b883a 	mov	r5,r20
 800cb20:	9009883a 	mov	r4,r18
 800cb24:	d9800315 	stw	r6,12(sp)
 800cb28:	d9c00215 	stw	r7,8(sp)
 800cb2c:	da400115 	stw	r9,4(sp)
 800cb30:	800bd4c0 	call	800bd4c <__udivsi3>
 800cb34:	a00b883a 	mov	r5,r20
 800cb38:	9009883a 	mov	r4,r18
 800cb3c:	d8800015 	stw	r2,0(sp)
 800cb40:	800bdb00 	call	800bdb0 <__umodsi3>
 800cb44:	d9c00217 	ldw	r7,8(sp)
 800cb48:	da000017 	ldw	r8,0(sp)
 800cb4c:	1006943a 	slli	r3,r2,16
 800cb50:	3804d43a 	srli	r2,r7,16
 800cb54:	ba21383a 	mul	r16,r23,r8
 800cb58:	d9800317 	ldw	r6,12(sp)
 800cb5c:	10c4b03a 	or	r2,r2,r3
 800cb60:	da400117 	ldw	r9,4(sp)
 800cb64:	1400062e 	bgeu	r2,r16,800cb80 <__divdf3+0x4cc>
 800cb68:	1705883a 	add	r2,r2,fp
 800cb6c:	40ffffc4 	addi	r3,r8,-1
 800cb70:	1700ad36 	bltu	r2,fp,800ce28 <__divdf3+0x774>
 800cb74:	1400ac2e 	bgeu	r2,r16,800ce28 <__divdf3+0x774>
 800cb78:	423fff84 	addi	r8,r8,-2
 800cb7c:	1705883a 	add	r2,r2,fp
 800cb80:	1421c83a 	sub	r16,r2,r16
 800cb84:	a00b883a 	mov	r5,r20
 800cb88:	8009883a 	mov	r4,r16
 800cb8c:	d9800315 	stw	r6,12(sp)
 800cb90:	d9c00215 	stw	r7,8(sp)
 800cb94:	da000015 	stw	r8,0(sp)
 800cb98:	da400115 	stw	r9,4(sp)
 800cb9c:	800bd4c0 	call	800bd4c <__udivsi3>
 800cba0:	8009883a 	mov	r4,r16
 800cba4:	a00b883a 	mov	r5,r20
 800cba8:	1025883a 	mov	r18,r2
 800cbac:	800bdb00 	call	800bdb0 <__umodsi3>
 800cbb0:	d9c00217 	ldw	r7,8(sp)
 800cbb4:	1004943a 	slli	r2,r2,16
 800cbb8:	bcaf383a 	mul	r23,r23,r18
 800cbbc:	393fffcc 	andi	r4,r7,65535
 800cbc0:	2088b03a 	or	r4,r4,r2
 800cbc4:	d9800317 	ldw	r6,12(sp)
 800cbc8:	da000017 	ldw	r8,0(sp)
 800cbcc:	da400117 	ldw	r9,4(sp)
 800cbd0:	25c0062e 	bgeu	r4,r23,800cbec <__divdf3+0x538>
 800cbd4:	2709883a 	add	r4,r4,fp
 800cbd8:	90bfffc4 	addi	r2,r18,-1
 800cbdc:	27009436 	bltu	r4,fp,800ce30 <__divdf3+0x77c>
 800cbe0:	25c0932e 	bgeu	r4,r23,800ce30 <__divdf3+0x77c>
 800cbe4:	94bfff84 	addi	r18,r18,-2
 800cbe8:	2709883a 	add	r4,r4,fp
 800cbec:	4004943a 	slli	r2,r8,16
 800cbf0:	25efc83a 	sub	r23,r4,r23
 800cbf4:	1490b03a 	or	r8,r2,r18
 800cbf8:	4008d43a 	srli	r4,r8,16
 800cbfc:	40ffffcc 	andi	r3,r8,65535
 800cc00:	30c5383a 	mul	r2,r6,r3
 800cc04:	1a47383a 	mul	r3,r3,r9
 800cc08:	310d383a 	mul	r6,r6,r4
 800cc0c:	100ad43a 	srli	r5,r2,16
 800cc10:	4913383a 	mul	r9,r9,r4
 800cc14:	1987883a 	add	r3,r3,r6
 800cc18:	28c7883a 	add	r3,r5,r3
 800cc1c:	1980022e 	bgeu	r3,r6,800cc28 <__divdf3+0x574>
 800cc20:	01000074 	movhi	r4,1
 800cc24:	4913883a 	add	r9,r9,r4
 800cc28:	1808d43a 	srli	r4,r3,16
 800cc2c:	1806943a 	slli	r3,r3,16
 800cc30:	10bfffcc 	andi	r2,r2,65535
 800cc34:	2253883a 	add	r9,r4,r9
 800cc38:	1887883a 	add	r3,r3,r2
 800cc3c:	ba403836 	bltu	r23,r9,800cd20 <__divdf3+0x66c>
 800cc40:	ba403626 	beq	r23,r9,800cd1c <__divdf3+0x668>
 800cc44:	42000054 	ori	r8,r8,1
 800cc48:	a880ffc4 	addi	r2,r21,1023
 800cc4c:	00bf570e 	bge	zero,r2,800c9ac <__divdf3+0x2f8>
 800cc50:	40c001cc 	andi	r3,r8,7
 800cc54:	18000726 	beq	r3,zero,800cc74 <__divdf3+0x5c0>
 800cc58:	40c003cc 	andi	r3,r8,15
 800cc5c:	01000104 	movi	r4,4
 800cc60:	19000426 	beq	r3,r4,800cc74 <__divdf3+0x5c0>
 800cc64:	4107883a 	add	r3,r8,r4
 800cc68:	1a11803a 	cmpltu	r8,r3,r8
 800cc6c:	8a23883a 	add	r17,r17,r8
 800cc70:	1811883a 	mov	r8,r3
 800cc74:	88c0402c 	andhi	r3,r17,256
 800cc78:	18000426 	beq	r3,zero,800cc8c <__divdf3+0x5d8>
 800cc7c:	00ffc034 	movhi	r3,65280
 800cc80:	18ffffc4 	addi	r3,r3,-1
 800cc84:	a8810004 	addi	r2,r21,1024
 800cc88:	88e2703a 	and	r17,r17,r3
 800cc8c:	00c1ff84 	movi	r3,2046
 800cc90:	18bee316 	blt	r3,r2,800c820 <__divdf3+0x16c>
 800cc94:	8824977a 	slli	r18,r17,29
 800cc98:	4010d0fa 	srli	r8,r8,3
 800cc9c:	8822927a 	slli	r17,r17,9
 800cca0:	1081ffcc 	andi	r2,r2,2047
 800cca4:	9224b03a 	or	r18,r18,r8
 800cca8:	880ad33a 	srli	r5,r17,12
 800ccac:	98c0004c 	andi	r3,r19,1
 800ccb0:	003edf06 	br	800c830 <__divdf3+0x17c>
 800ccb4:	8080022c 	andhi	r2,r16,8
 800ccb8:	10001226 	beq	r2,zero,800cd04 <__divdf3+0x650>
 800ccbc:	8880022c 	andhi	r2,r17,8
 800ccc0:	1000101e 	bne	r2,zero,800cd04 <__divdf3+0x650>
 800ccc4:	00800434 	movhi	r2,16
 800ccc8:	89400234 	orhi	r5,r17,8
 800cccc:	10bfffc4 	addi	r2,r2,-1
 800ccd0:	b007883a 	mov	r3,r22
 800ccd4:	288a703a 	and	r5,r5,r2
 800ccd8:	4025883a 	mov	r18,r8
 800ccdc:	003f3106 	br	800c9a4 <__divdf3+0x2f0>
 800cce0:	008000c4 	movi	r2,3
 800cce4:	3880a626 	beq	r7,r2,800cf80 <__divdf3+0x8cc>
 800cce8:	00800044 	movi	r2,1
 800ccec:	3880521e 	bne	r7,r2,800ce38 <__divdf3+0x784>
 800ccf0:	b807883a 	mov	r3,r23
 800ccf4:	0005883a 	mov	r2,zero
 800ccf8:	000b883a 	mov	r5,zero
 800ccfc:	0025883a 	mov	r18,zero
 800cd00:	003ecb06 	br	800c830 <__divdf3+0x17c>
 800cd04:	00800434 	movhi	r2,16
 800cd08:	81400234 	orhi	r5,r16,8
 800cd0c:	10bfffc4 	addi	r2,r2,-1
 800cd10:	a007883a 	mov	r3,r20
 800cd14:	288a703a 	and	r5,r5,r2
 800cd18:	003f2206 	br	800c9a4 <__divdf3+0x2f0>
 800cd1c:	183fca26 	beq	r3,zero,800cc48 <__divdf3+0x594>
 800cd20:	e5ef883a 	add	r23,fp,r23
 800cd24:	40bfffc4 	addi	r2,r8,-1
 800cd28:	bf00392e 	bgeu	r23,fp,800ce10 <__divdf3+0x75c>
 800cd2c:	1011883a 	mov	r8,r2
 800cd30:	ba7fc41e 	bne	r23,r9,800cc44 <__divdf3+0x590>
 800cd34:	b0ffc31e 	bne	r22,r3,800cc44 <__divdf3+0x590>
 800cd38:	003fc306 	br	800cc48 <__divdf3+0x594>
 800cd3c:	143ff604 	addi	r16,r2,-40
 800cd40:	9c20983a 	sll	r16,r19,r16
 800cd44:	0025883a 	mov	r18,zero
 800cd48:	003ee206 	br	800c8d4 <__divdf3+0x220>
 800cd4c:	d9800315 	stw	r6,12(sp)
 800cd50:	d9c00215 	stw	r7,8(sp)
 800cd54:	8001aec0 	call	8001aec <__clzsi2>
 800cd58:	10800804 	addi	r2,r2,32
 800cd5c:	d9c00217 	ldw	r7,8(sp)
 800cd60:	d9800317 	ldw	r6,12(sp)
 800cd64:	003ed106 	br	800c8ac <__divdf3+0x1f8>
 800cd68:	147ff604 	addi	r17,r2,-40
 800cd6c:	3462983a 	sll	r17,r6,r17
 800cd70:	0011883a 	mov	r8,zero
 800cd74:	003ef506 	br	800c94c <__divdf3+0x298>
 800cd78:	3009883a 	mov	r4,r6
 800cd7c:	d9800315 	stw	r6,12(sp)
 800cd80:	da400115 	stw	r9,4(sp)
 800cd84:	8001aec0 	call	8001aec <__clzsi2>
 800cd88:	10800804 	addi	r2,r2,32
 800cd8c:	da400117 	ldw	r9,4(sp)
 800cd90:	d9800317 	ldw	r6,12(sp)
 800cd94:	003ee306 	br	800c924 <__divdf3+0x270>
 800cd98:	85a1883a 	add	r16,r16,r22
 800cd9c:	8585803a 	cmpltu	r2,r16,r22
 800cda0:	1705883a 	add	r2,r2,fp
 800cda4:	14a5883a 	add	r18,r2,r18
 800cda8:	88bfffc4 	addi	r2,r17,-1
 800cdac:	e4800c2e 	bgeu	fp,r18,800cde0 <__divdf3+0x72c>
 800cdb0:	90c03e36 	bltu	r18,r3,800ceac <__divdf3+0x7f8>
 800cdb4:	1c806926 	beq	r3,r18,800cf5c <__divdf3+0x8a8>
 800cdb8:	90c7c83a 	sub	r3,r18,r3
 800cdbc:	1023883a 	mov	r17,r2
 800cdc0:	003f5206 	br	800cb0c <__divdf3+0x458>
 800cdc4:	923f0436 	bltu	r18,r8,800c9d8 <__divdf3+0x324>
 800cdc8:	800897fa 	slli	r4,r16,31
 800cdcc:	9004d07a 	srli	r2,r18,1
 800cdd0:	8006d07a 	srli	r3,r16,1
 800cdd4:	902097fa 	slli	r16,r18,31
 800cdd8:	20a4b03a 	or	r18,r4,r2
 800cddc:	003f0106 	br	800c9e4 <__divdf3+0x330>
 800cde0:	e4bff51e 	bne	fp,r18,800cdb8 <__divdf3+0x704>
 800cde4:	85bff22e 	bgeu	r16,r22,800cdb0 <__divdf3+0x6fc>
 800cde8:	e0c7c83a 	sub	r3,fp,r3
 800cdec:	1023883a 	mov	r17,r2
 800cdf0:	003f4606 	br	800cb0c <__divdf3+0x458>
 800cdf4:	100f883a 	mov	r7,r2
 800cdf8:	003f2b06 	br	800caa8 <__divdf3+0x3f4>
 800cdfc:	180d883a 	mov	r6,r3
 800ce00:	003f1306 	br	800ca50 <__divdf3+0x39c>
 800ce04:	813fe436 	bltu	r16,r4,800cd98 <__divdf3+0x6e4>
 800ce08:	0007883a 	mov	r3,zero
 800ce0c:	003f3f06 	br	800cb0c <__divdf3+0x458>
 800ce10:	ba402c36 	bltu	r23,r9,800cec4 <__divdf3+0x810>
 800ce14:	4dc05426 	beq	r9,r23,800cf68 <__divdf3+0x8b4>
 800ce18:	1011883a 	mov	r8,r2
 800ce1c:	003f8906 	br	800cc44 <__divdf3+0x590>
 800ce20:	023fffc4 	movi	r8,-1
 800ce24:	003f8806 	br	800cc48 <__divdf3+0x594>
 800ce28:	1811883a 	mov	r8,r3
 800ce2c:	003f5406 	br	800cb80 <__divdf3+0x4cc>
 800ce30:	1025883a 	mov	r18,r2
 800ce34:	003f6d06 	br	800cbec <__divdf3+0x538>
 800ce38:	b827883a 	mov	r19,r23
 800ce3c:	003f8206 	br	800cc48 <__divdf3+0x594>
 800ce40:	010007c4 	movi	r4,31
 800ce44:	20c02616 	blt	r4,r3,800cee0 <__divdf3+0x82c>
 800ce48:	00800804 	movi	r2,32
 800ce4c:	10c5c83a 	sub	r2,r2,r3
 800ce50:	888a983a 	sll	r5,r17,r2
 800ce54:	40c8d83a 	srl	r4,r8,r3
 800ce58:	4084983a 	sll	r2,r8,r2
 800ce5c:	88e2d83a 	srl	r17,r17,r3
 800ce60:	2906b03a 	or	r3,r5,r4
 800ce64:	1004c03a 	cmpne	r2,r2,zero
 800ce68:	1886b03a 	or	r3,r3,r2
 800ce6c:	188001cc 	andi	r2,r3,7
 800ce70:	10000726 	beq	r2,zero,800ce90 <__divdf3+0x7dc>
 800ce74:	188003cc 	andi	r2,r3,15
 800ce78:	01000104 	movi	r4,4
 800ce7c:	11000426 	beq	r2,r4,800ce90 <__divdf3+0x7dc>
 800ce80:	1805883a 	mov	r2,r3
 800ce84:	10c00104 	addi	r3,r2,4
 800ce88:	1885803a 	cmpltu	r2,r3,r2
 800ce8c:	88a3883a 	add	r17,r17,r2
 800ce90:	8880202c 	andhi	r2,r17,128
 800ce94:	10002726 	beq	r2,zero,800cf34 <__divdf3+0x880>
 800ce98:	98c0004c 	andi	r3,r19,1
 800ce9c:	00800044 	movi	r2,1
 800cea0:	000b883a 	mov	r5,zero
 800cea4:	0025883a 	mov	r18,zero
 800cea8:	003e6106 	br	800c830 <__divdf3+0x17c>
 800ceac:	85a1883a 	add	r16,r16,r22
 800ceb0:	8585803a 	cmpltu	r2,r16,r22
 800ceb4:	1705883a 	add	r2,r2,fp
 800ceb8:	14a5883a 	add	r18,r2,r18
 800cebc:	8c7fff84 	addi	r17,r17,-2
 800cec0:	003f1106 	br	800cb08 <__divdf3+0x454>
 800cec4:	b589883a 	add	r4,r22,r22
 800cec8:	25ad803a 	cmpltu	r22,r4,r22
 800cecc:	b739883a 	add	fp,r22,fp
 800ced0:	40bfff84 	addi	r2,r8,-2
 800ced4:	bf2f883a 	add	r23,r23,fp
 800ced8:	202d883a 	mov	r22,r4
 800cedc:	003f9306 	br	800cd2c <__divdf3+0x678>
 800cee0:	013ff844 	movi	r4,-31
 800cee4:	2085c83a 	sub	r2,r4,r2
 800cee8:	8888d83a 	srl	r4,r17,r2
 800ceec:	00800804 	movi	r2,32
 800cef0:	18802126 	beq	r3,r2,800cf78 <__divdf3+0x8c4>
 800cef4:	00801004 	movi	r2,64
 800cef8:	10c5c83a 	sub	r2,r2,r3
 800cefc:	8884983a 	sll	r2,r17,r2
 800cf00:	1204b03a 	or	r2,r2,r8
 800cf04:	1004c03a 	cmpne	r2,r2,zero
 800cf08:	2084b03a 	or	r2,r4,r2
 800cf0c:	144001cc 	andi	r17,r2,7
 800cf10:	88000d1e 	bne	r17,zero,800cf48 <__divdf3+0x894>
 800cf14:	000b883a 	mov	r5,zero
 800cf18:	1024d0fa 	srli	r18,r2,3
 800cf1c:	98c0004c 	andi	r3,r19,1
 800cf20:	0005883a 	mov	r2,zero
 800cf24:	9464b03a 	or	r18,r18,r17
 800cf28:	003e4106 	br	800c830 <__divdf3+0x17c>
 800cf2c:	1007883a 	mov	r3,r2
 800cf30:	0023883a 	mov	r17,zero
 800cf34:	880a927a 	slli	r5,r17,9
 800cf38:	1805883a 	mov	r2,r3
 800cf3c:	8822977a 	slli	r17,r17,29
 800cf40:	280ad33a 	srli	r5,r5,12
 800cf44:	003ff406 	br	800cf18 <__divdf3+0x864>
 800cf48:	10c003cc 	andi	r3,r2,15
 800cf4c:	01000104 	movi	r4,4
 800cf50:	193ff626 	beq	r3,r4,800cf2c <__divdf3+0x878>
 800cf54:	0023883a 	mov	r17,zero
 800cf58:	003fca06 	br	800ce84 <__divdf3+0x7d0>
 800cf5c:	813fd336 	bltu	r16,r4,800ceac <__divdf3+0x7f8>
 800cf60:	1023883a 	mov	r17,r2
 800cf64:	003fa806 	br	800ce08 <__divdf3+0x754>
 800cf68:	b0ffd636 	bltu	r22,r3,800cec4 <__divdf3+0x810>
 800cf6c:	1011883a 	mov	r8,r2
 800cf70:	b0ff341e 	bne	r22,r3,800cc44 <__divdf3+0x590>
 800cf74:	003f3406 	br	800cc48 <__divdf3+0x594>
 800cf78:	0005883a 	mov	r2,zero
 800cf7c:	003fe006 	br	800cf00 <__divdf3+0x84c>
 800cf80:	00800434 	movhi	r2,16
 800cf84:	89400234 	orhi	r5,r17,8
 800cf88:	10bfffc4 	addi	r2,r2,-1
 800cf8c:	b807883a 	mov	r3,r23
 800cf90:	288a703a 	and	r5,r5,r2
 800cf94:	4025883a 	mov	r18,r8
 800cf98:	003e8206 	br	800c9a4 <__divdf3+0x2f0>

0800cf9c <__eqdf2>:
 800cf9c:	2804d53a 	srli	r2,r5,20
 800cfa0:	3806d53a 	srli	r3,r7,20
 800cfa4:	02000434 	movhi	r8,16
 800cfa8:	423fffc4 	addi	r8,r8,-1
 800cfac:	1081ffcc 	andi	r2,r2,2047
 800cfb0:	0281ffc4 	movi	r10,2047
 800cfb4:	2a12703a 	and	r9,r5,r8
 800cfb8:	18c1ffcc 	andi	r3,r3,2047
 800cfbc:	3a10703a 	and	r8,r7,r8
 800cfc0:	280ad7fa 	srli	r5,r5,31
 800cfc4:	380ed7fa 	srli	r7,r7,31
 800cfc8:	12801026 	beq	r2,r10,800d00c <__eqdf2+0x70>
 800cfcc:	0281ffc4 	movi	r10,2047
 800cfd0:	1a800a26 	beq	r3,r10,800cffc <__eqdf2+0x60>
 800cfd4:	10c00226 	beq	r2,r3,800cfe0 <__eqdf2+0x44>
 800cfd8:	00800044 	movi	r2,1
 800cfdc:	f800283a 	ret
 800cfe0:	4a3ffd1e 	bne	r9,r8,800cfd8 <__eqdf2+0x3c>
 800cfe4:	21bffc1e 	bne	r4,r6,800cfd8 <__eqdf2+0x3c>
 800cfe8:	29c00c26 	beq	r5,r7,800d01c <__eqdf2+0x80>
 800cfec:	103ffa1e 	bne	r2,zero,800cfd8 <__eqdf2+0x3c>
 800cff0:	2244b03a 	or	r2,r4,r9
 800cff4:	1004c03a 	cmpne	r2,r2,zero
 800cff8:	f800283a 	ret
 800cffc:	3214b03a 	or	r10,r6,r8
 800d000:	503ff426 	beq	r10,zero,800cfd4 <__eqdf2+0x38>
 800d004:	00800044 	movi	r2,1
 800d008:	f800283a 	ret
 800d00c:	2254b03a 	or	r10,r4,r9
 800d010:	503fee26 	beq	r10,zero,800cfcc <__eqdf2+0x30>
 800d014:	00800044 	movi	r2,1
 800d018:	f800283a 	ret
 800d01c:	0005883a 	mov	r2,zero
 800d020:	f800283a 	ret

0800d024 <__gedf2>:
 800d024:	2804d53a 	srli	r2,r5,20
 800d028:	3806d53a 	srli	r3,r7,20
 800d02c:	02000434 	movhi	r8,16
 800d030:	423fffc4 	addi	r8,r8,-1
 800d034:	1081ffcc 	andi	r2,r2,2047
 800d038:	0241ffc4 	movi	r9,2047
 800d03c:	2a14703a 	and	r10,r5,r8
 800d040:	18c1ffcc 	andi	r3,r3,2047
 800d044:	3a10703a 	and	r8,r7,r8
 800d048:	280ad7fa 	srli	r5,r5,31
 800d04c:	380ed7fa 	srli	r7,r7,31
 800d050:	12401d26 	beq	r2,r9,800d0c8 <__gedf2+0xa4>
 800d054:	0241ffc4 	movi	r9,2047
 800d058:	1a401226 	beq	r3,r9,800d0a4 <__gedf2+0x80>
 800d05c:	1000081e 	bne	r2,zero,800d080 <__gedf2+0x5c>
 800d060:	2296b03a 	or	r11,r4,r10
 800d064:	5813003a 	cmpeq	r9,r11,zero
 800d068:	1800091e 	bne	r3,zero,800d090 <__gedf2+0x6c>
 800d06c:	3218b03a 	or	r12,r6,r8
 800d070:	6000071e 	bne	r12,zero,800d090 <__gedf2+0x6c>
 800d074:	0005883a 	mov	r2,zero
 800d078:	5800101e 	bne	r11,zero,800d0bc <__gedf2+0x98>
 800d07c:	f800283a 	ret
 800d080:	18000c1e 	bne	r3,zero,800d0b4 <__gedf2+0x90>
 800d084:	3212b03a 	or	r9,r6,r8
 800d088:	48000c26 	beq	r9,zero,800d0bc <__gedf2+0x98>
 800d08c:	0013883a 	mov	r9,zero
 800d090:	39c03fcc 	andi	r7,r7,255
 800d094:	48000826 	beq	r9,zero,800d0b8 <__gedf2+0x94>
 800d098:	38000926 	beq	r7,zero,800d0c0 <__gedf2+0x9c>
 800d09c:	00800044 	movi	r2,1
 800d0a0:	f800283a 	ret
 800d0a4:	3212b03a 	or	r9,r6,r8
 800d0a8:	483fec26 	beq	r9,zero,800d05c <__gedf2+0x38>
 800d0ac:	00bfff84 	movi	r2,-2
 800d0b0:	f800283a 	ret
 800d0b4:	39c03fcc 	andi	r7,r7,255
 800d0b8:	29c00626 	beq	r5,r7,800d0d4 <__gedf2+0xb0>
 800d0bc:	283ff726 	beq	r5,zero,800d09c <__gedf2+0x78>
 800d0c0:	00bfffc4 	movi	r2,-1
 800d0c4:	f800283a 	ret
 800d0c8:	2292b03a 	or	r9,r4,r10
 800d0cc:	483fe126 	beq	r9,zero,800d054 <__gedf2+0x30>
 800d0d0:	003ff606 	br	800d0ac <__gedf2+0x88>
 800d0d4:	18bff916 	blt	r3,r2,800d0bc <__gedf2+0x98>
 800d0d8:	10c00316 	blt	r2,r3,800d0e8 <__gedf2+0xc4>
 800d0dc:	42bff736 	bltu	r8,r10,800d0bc <__gedf2+0x98>
 800d0e0:	52000326 	beq	r10,r8,800d0f0 <__gedf2+0xcc>
 800d0e4:	5200042e 	bgeu	r10,r8,800d0f8 <__gedf2+0xd4>
 800d0e8:	283fec1e 	bne	r5,zero,800d09c <__gedf2+0x78>
 800d0ec:	003ff406 	br	800d0c0 <__gedf2+0x9c>
 800d0f0:	313ff236 	bltu	r6,r4,800d0bc <__gedf2+0x98>
 800d0f4:	21bffc36 	bltu	r4,r6,800d0e8 <__gedf2+0xc4>
 800d0f8:	0005883a 	mov	r2,zero
 800d0fc:	f800283a 	ret

0800d100 <__ledf2>:
 800d100:	2804d53a 	srli	r2,r5,20
 800d104:	3810d53a 	srli	r8,r7,20
 800d108:	00c00434 	movhi	r3,16
 800d10c:	18ffffc4 	addi	r3,r3,-1
 800d110:	1081ffcc 	andi	r2,r2,2047
 800d114:	0241ffc4 	movi	r9,2047
 800d118:	28d4703a 	and	r10,r5,r3
 800d11c:	4201ffcc 	andi	r8,r8,2047
 800d120:	38c6703a 	and	r3,r7,r3
 800d124:	280ad7fa 	srli	r5,r5,31
 800d128:	380ed7fa 	srli	r7,r7,31
 800d12c:	12401f26 	beq	r2,r9,800d1ac <__ledf2+0xac>
 800d130:	0241ffc4 	movi	r9,2047
 800d134:	42401426 	beq	r8,r9,800d188 <__ledf2+0x88>
 800d138:	1000091e 	bne	r2,zero,800d160 <__ledf2+0x60>
 800d13c:	2296b03a 	or	r11,r4,r10
 800d140:	5813003a 	cmpeq	r9,r11,zero
 800d144:	29403fcc 	andi	r5,r5,255
 800d148:	40000a1e 	bne	r8,zero,800d174 <__ledf2+0x74>
 800d14c:	30d8b03a 	or	r12,r6,r3
 800d150:	6000081e 	bne	r12,zero,800d174 <__ledf2+0x74>
 800d154:	0005883a 	mov	r2,zero
 800d158:	5800111e 	bne	r11,zero,800d1a0 <__ledf2+0xa0>
 800d15c:	f800283a 	ret
 800d160:	29403fcc 	andi	r5,r5,255
 800d164:	40000c1e 	bne	r8,zero,800d198 <__ledf2+0x98>
 800d168:	30d2b03a 	or	r9,r6,r3
 800d16c:	48000c26 	beq	r9,zero,800d1a0 <__ledf2+0xa0>
 800d170:	0013883a 	mov	r9,zero
 800d174:	39c03fcc 	andi	r7,r7,255
 800d178:	48000826 	beq	r9,zero,800d19c <__ledf2+0x9c>
 800d17c:	38001126 	beq	r7,zero,800d1c4 <__ledf2+0xc4>
 800d180:	00800044 	movi	r2,1
 800d184:	f800283a 	ret
 800d188:	30d2b03a 	or	r9,r6,r3
 800d18c:	483fea26 	beq	r9,zero,800d138 <__ledf2+0x38>
 800d190:	00800084 	movi	r2,2
 800d194:	f800283a 	ret
 800d198:	39c03fcc 	andi	r7,r7,255
 800d19c:	39400726 	beq	r7,r5,800d1bc <__ledf2+0xbc>
 800d1a0:	2800081e 	bne	r5,zero,800d1c4 <__ledf2+0xc4>
 800d1a4:	00800044 	movi	r2,1
 800d1a8:	f800283a 	ret
 800d1ac:	2292b03a 	or	r9,r4,r10
 800d1b0:	483fdf26 	beq	r9,zero,800d130 <__ledf2+0x30>
 800d1b4:	00800084 	movi	r2,2
 800d1b8:	f800283a 	ret
 800d1bc:	4080030e 	bge	r8,r2,800d1cc <__ledf2+0xcc>
 800d1c0:	383fef26 	beq	r7,zero,800d180 <__ledf2+0x80>
 800d1c4:	00bfffc4 	movi	r2,-1
 800d1c8:	f800283a 	ret
 800d1cc:	123feb16 	blt	r2,r8,800d17c <__ledf2+0x7c>
 800d1d0:	1abff336 	bltu	r3,r10,800d1a0 <__ledf2+0xa0>
 800d1d4:	50c00326 	beq	r10,r3,800d1e4 <__ledf2+0xe4>
 800d1d8:	50c0042e 	bgeu	r10,r3,800d1ec <__ledf2+0xec>
 800d1dc:	283fe81e 	bne	r5,zero,800d180 <__ledf2+0x80>
 800d1e0:	003ff806 	br	800d1c4 <__ledf2+0xc4>
 800d1e4:	313fee36 	bltu	r6,r4,800d1a0 <__ledf2+0xa0>
 800d1e8:	21bffc36 	bltu	r4,r6,800d1dc <__ledf2+0xdc>
 800d1ec:	0005883a 	mov	r2,zero
 800d1f0:	f800283a 	ret

0800d1f4 <__muldf3>:
 800d1f4:	defff304 	addi	sp,sp,-52
 800d1f8:	2804d53a 	srli	r2,r5,20
 800d1fc:	dd800915 	stw	r22,36(sp)
 800d200:	282cd7fa 	srli	r22,r5,31
 800d204:	dc000315 	stw	r16,12(sp)
 800d208:	04000434 	movhi	r16,16
 800d20c:	dd400815 	stw	r21,32(sp)
 800d210:	dc800515 	stw	r18,20(sp)
 800d214:	843fffc4 	addi	r16,r16,-1
 800d218:	dfc00c15 	stw	ra,48(sp)
 800d21c:	df000b15 	stw	fp,44(sp)
 800d220:	ddc00a15 	stw	r23,40(sp)
 800d224:	dd000715 	stw	r20,28(sp)
 800d228:	dcc00615 	stw	r19,24(sp)
 800d22c:	dc400415 	stw	r17,16(sp)
 800d230:	1481ffcc 	andi	r18,r2,2047
 800d234:	2c20703a 	and	r16,r5,r16
 800d238:	b02b883a 	mov	r21,r22
 800d23c:	b2403fcc 	andi	r9,r22,255
 800d240:	90006026 	beq	r18,zero,800d3c4 <__muldf3+0x1d0>
 800d244:	0081ffc4 	movi	r2,2047
 800d248:	2029883a 	mov	r20,r4
 800d24c:	90803626 	beq	r18,r2,800d328 <__muldf3+0x134>
 800d250:	80800434 	orhi	r2,r16,16
 800d254:	100490fa 	slli	r2,r2,3
 800d258:	2020d77a 	srli	r16,r4,29
 800d25c:	202890fa 	slli	r20,r4,3
 800d260:	94bf0044 	addi	r18,r18,-1023
 800d264:	80a0b03a 	or	r16,r16,r2
 800d268:	0027883a 	mov	r19,zero
 800d26c:	0039883a 	mov	fp,zero
 800d270:	3804d53a 	srli	r2,r7,20
 800d274:	382ed7fa 	srli	r23,r7,31
 800d278:	04400434 	movhi	r17,16
 800d27c:	8c7fffc4 	addi	r17,r17,-1
 800d280:	1081ffcc 	andi	r2,r2,2047
 800d284:	3011883a 	mov	r8,r6
 800d288:	3c62703a 	and	r17,r7,r17
 800d28c:	ba803fcc 	andi	r10,r23,255
 800d290:	10006d26 	beq	r2,zero,800d448 <__muldf3+0x254>
 800d294:	00c1ffc4 	movi	r3,2047
 800d298:	10c06526 	beq	r2,r3,800d430 <__muldf3+0x23c>
 800d29c:	88c00434 	orhi	r3,r17,16
 800d2a0:	180690fa 	slli	r3,r3,3
 800d2a4:	3022d77a 	srli	r17,r6,29
 800d2a8:	301090fa 	slli	r8,r6,3
 800d2ac:	10bf0044 	addi	r2,r2,-1023
 800d2b0:	88e2b03a 	or	r17,r17,r3
 800d2b4:	000b883a 	mov	r5,zero
 800d2b8:	9085883a 	add	r2,r18,r2
 800d2bc:	2cc8b03a 	or	r4,r5,r19
 800d2c0:	00c003c4 	movi	r3,15
 800d2c4:	bdacf03a 	xor	r22,r23,r22
 800d2c8:	12c00044 	addi	r11,r2,1
 800d2cc:	19009936 	bltu	r3,r4,800d534 <__muldf3+0x340>
 800d2d0:	200890ba 	slli	r4,r4,2
 800d2d4:	00c20074 	movhi	r3,2049
 800d2d8:	18f4ba04 	addi	r3,r3,-11544
 800d2dc:	20c9883a 	add	r4,r4,r3
 800d2e0:	20c00017 	ldw	r3,0(r4)
 800d2e4:	1800683a 	jmp	r3
 800d2e8:	0800d534 	orhi	zero,at,852
 800d2ec:	0800d348 	cmpgei	zero,at,845
 800d2f0:	0800d348 	cmpgei	zero,at,845
 800d2f4:	0800d344 	addi	zero,at,845
 800d2f8:	0800d510 	cmplti	zero,at,852
 800d2fc:	0800d510 	cmplti	zero,at,852
 800d300:	0800d4f8 	rdprs	zero,at,851
 800d304:	0800d344 	addi	zero,at,845
 800d308:	0800d510 	cmplti	zero,at,852
 800d30c:	0800d4f8 	rdprs	zero,at,851
 800d310:	0800d510 	cmplti	zero,at,852
 800d314:	0800d344 	addi	zero,at,845
 800d318:	0800d520 	cmpeqi	zero,at,852
 800d31c:	0800d520 	cmpeqi	zero,at,852
 800d320:	0800d520 	cmpeqi	zero,at,852
 800d324:	0800d73c 	xorhi	zero,at,860
 800d328:	2404b03a 	or	r2,r4,r16
 800d32c:	10006f1e 	bne	r2,zero,800d4ec <__muldf3+0x2f8>
 800d330:	04c00204 	movi	r19,8
 800d334:	0021883a 	mov	r16,zero
 800d338:	0029883a 	mov	r20,zero
 800d33c:	07000084 	movi	fp,2
 800d340:	003fcb06 	br	800d270 <__muldf3+0x7c>
 800d344:	502d883a 	mov	r22,r10
 800d348:	00800084 	movi	r2,2
 800d34c:	28805726 	beq	r5,r2,800d4ac <__muldf3+0x2b8>
 800d350:	008000c4 	movi	r2,3
 800d354:	28816626 	beq	r5,r2,800d8f0 <__muldf3+0x6fc>
 800d358:	00800044 	movi	r2,1
 800d35c:	2881411e 	bne	r5,r2,800d864 <__muldf3+0x670>
 800d360:	b02b883a 	mov	r21,r22
 800d364:	0005883a 	mov	r2,zero
 800d368:	000b883a 	mov	r5,zero
 800d36c:	0029883a 	mov	r20,zero
 800d370:	1004953a 	slli	r2,r2,20
 800d374:	a8c03fcc 	andi	r3,r21,255
 800d378:	04400434 	movhi	r17,16
 800d37c:	8c7fffc4 	addi	r17,r17,-1
 800d380:	180697fa 	slli	r3,r3,31
 800d384:	2c4a703a 	and	r5,r5,r17
 800d388:	288ab03a 	or	r5,r5,r2
 800d38c:	28c6b03a 	or	r3,r5,r3
 800d390:	a005883a 	mov	r2,r20
 800d394:	dfc00c17 	ldw	ra,48(sp)
 800d398:	df000b17 	ldw	fp,44(sp)
 800d39c:	ddc00a17 	ldw	r23,40(sp)
 800d3a0:	dd800917 	ldw	r22,36(sp)
 800d3a4:	dd400817 	ldw	r21,32(sp)
 800d3a8:	dd000717 	ldw	r20,28(sp)
 800d3ac:	dcc00617 	ldw	r19,24(sp)
 800d3b0:	dc800517 	ldw	r18,20(sp)
 800d3b4:	dc400417 	ldw	r17,16(sp)
 800d3b8:	dc000317 	ldw	r16,12(sp)
 800d3bc:	dec00d04 	addi	sp,sp,52
 800d3c0:	f800283a 	ret
 800d3c4:	2404b03a 	or	r2,r4,r16
 800d3c8:	2027883a 	mov	r19,r4
 800d3cc:	10004226 	beq	r2,zero,800d4d8 <__muldf3+0x2e4>
 800d3d0:	8000fc26 	beq	r16,zero,800d7c4 <__muldf3+0x5d0>
 800d3d4:	8009883a 	mov	r4,r16
 800d3d8:	d9800215 	stw	r6,8(sp)
 800d3dc:	d9c00015 	stw	r7,0(sp)
 800d3e0:	da400115 	stw	r9,4(sp)
 800d3e4:	8001aec0 	call	8001aec <__clzsi2>
 800d3e8:	d9800217 	ldw	r6,8(sp)
 800d3ec:	d9c00017 	ldw	r7,0(sp)
 800d3f0:	da400117 	ldw	r9,4(sp)
 800d3f4:	113ffd44 	addi	r4,r2,-11
 800d3f8:	00c00704 	movi	r3,28
 800d3fc:	1900ed16 	blt	r3,r4,800d7b4 <__muldf3+0x5c0>
 800d400:	00c00744 	movi	r3,29
 800d404:	147ffe04 	addi	r17,r2,-8
 800d408:	1907c83a 	sub	r3,r3,r4
 800d40c:	8460983a 	sll	r16,r16,r17
 800d410:	98c6d83a 	srl	r3,r19,r3
 800d414:	9c68983a 	sll	r20,r19,r17
 800d418:	1c20b03a 	or	r16,r3,r16
 800d41c:	1080fcc4 	addi	r2,r2,1011
 800d420:	00a5c83a 	sub	r18,zero,r2
 800d424:	0027883a 	mov	r19,zero
 800d428:	0039883a 	mov	fp,zero
 800d42c:	003f9006 	br	800d270 <__muldf3+0x7c>
 800d430:	3446b03a 	or	r3,r6,r17
 800d434:	1800261e 	bne	r3,zero,800d4d0 <__muldf3+0x2dc>
 800d438:	0023883a 	mov	r17,zero
 800d43c:	0011883a 	mov	r8,zero
 800d440:	01400084 	movi	r5,2
 800d444:	003f9c06 	br	800d2b8 <__muldf3+0xc4>
 800d448:	3446b03a 	or	r3,r6,r17
 800d44c:	18001c26 	beq	r3,zero,800d4c0 <__muldf3+0x2cc>
 800d450:	8800ce26 	beq	r17,zero,800d78c <__muldf3+0x598>
 800d454:	8809883a 	mov	r4,r17
 800d458:	d9800215 	stw	r6,8(sp)
 800d45c:	da400115 	stw	r9,4(sp)
 800d460:	da800015 	stw	r10,0(sp)
 800d464:	8001aec0 	call	8001aec <__clzsi2>
 800d468:	d9800217 	ldw	r6,8(sp)
 800d46c:	da400117 	ldw	r9,4(sp)
 800d470:	da800017 	ldw	r10,0(sp)
 800d474:	113ffd44 	addi	r4,r2,-11
 800d478:	00c00704 	movi	r3,28
 800d47c:	1900bf16 	blt	r3,r4,800d77c <__muldf3+0x588>
 800d480:	00c00744 	movi	r3,29
 800d484:	123ffe04 	addi	r8,r2,-8
 800d488:	1907c83a 	sub	r3,r3,r4
 800d48c:	8a22983a 	sll	r17,r17,r8
 800d490:	30c6d83a 	srl	r3,r6,r3
 800d494:	3210983a 	sll	r8,r6,r8
 800d498:	1c62b03a 	or	r17,r3,r17
 800d49c:	1080fcc4 	addi	r2,r2,1011
 800d4a0:	0085c83a 	sub	r2,zero,r2
 800d4a4:	000b883a 	mov	r5,zero
 800d4a8:	003f8306 	br	800d2b8 <__muldf3+0xc4>
 800d4ac:	b02b883a 	mov	r21,r22
 800d4b0:	0081ffc4 	movi	r2,2047
 800d4b4:	000b883a 	mov	r5,zero
 800d4b8:	0029883a 	mov	r20,zero
 800d4bc:	003fac06 	br	800d370 <__muldf3+0x17c>
 800d4c0:	0023883a 	mov	r17,zero
 800d4c4:	0011883a 	mov	r8,zero
 800d4c8:	01400044 	movi	r5,1
 800d4cc:	003f7a06 	br	800d2b8 <__muldf3+0xc4>
 800d4d0:	014000c4 	movi	r5,3
 800d4d4:	003f7806 	br	800d2b8 <__muldf3+0xc4>
 800d4d8:	04c00104 	movi	r19,4
 800d4dc:	0021883a 	mov	r16,zero
 800d4e0:	0029883a 	mov	r20,zero
 800d4e4:	07000044 	movi	fp,1
 800d4e8:	003f6106 	br	800d270 <__muldf3+0x7c>
 800d4ec:	04c00304 	movi	r19,12
 800d4f0:	070000c4 	movi	fp,3
 800d4f4:	003f5e06 	br	800d270 <__muldf3+0x7c>
 800d4f8:	01400434 	movhi	r5,16
 800d4fc:	002b883a 	mov	r21,zero
 800d500:	297fffc4 	addi	r5,r5,-1
 800d504:	053fffc4 	movi	r20,-1
 800d508:	0081ffc4 	movi	r2,2047
 800d50c:	003f9806 	br	800d370 <__muldf3+0x17c>
 800d510:	8023883a 	mov	r17,r16
 800d514:	a011883a 	mov	r8,r20
 800d518:	e00b883a 	mov	r5,fp
 800d51c:	003f8a06 	br	800d348 <__muldf3+0x154>
 800d520:	8023883a 	mov	r17,r16
 800d524:	a011883a 	mov	r8,r20
 800d528:	482d883a 	mov	r22,r9
 800d52c:	e00b883a 	mov	r5,fp
 800d530:	003f8506 	br	800d348 <__muldf3+0x154>
 800d534:	a00ad43a 	srli	r5,r20,16
 800d538:	401ad43a 	srli	r13,r8,16
 800d53c:	a53fffcc 	andi	r20,r20,65535
 800d540:	423fffcc 	andi	r8,r8,65535
 800d544:	4519383a 	mul	r12,r8,r20
 800d548:	4147383a 	mul	r3,r8,r5
 800d54c:	6d09383a 	mul	r4,r13,r20
 800d550:	600cd43a 	srli	r6,r12,16
 800d554:	2b5d383a 	mul	r14,r5,r13
 800d558:	20c9883a 	add	r4,r4,r3
 800d55c:	310d883a 	add	r6,r6,r4
 800d560:	30c0022e 	bgeu	r6,r3,800d56c <__muldf3+0x378>
 800d564:	00c00074 	movhi	r3,1
 800d568:	70dd883a 	add	r14,r14,r3
 800d56c:	8826d43a 	srli	r19,r17,16
 800d570:	8bffffcc 	andi	r15,r17,65535
 800d574:	7d23383a 	mul	r17,r15,r20
 800d578:	7949383a 	mul	r4,r15,r5
 800d57c:	9d29383a 	mul	r20,r19,r20
 800d580:	8814d43a 	srli	r10,r17,16
 800d584:	3012943a 	slli	r9,r6,16
 800d588:	a129883a 	add	r20,r20,r4
 800d58c:	633fffcc 	andi	r12,r12,65535
 800d590:	5515883a 	add	r10,r10,r20
 800d594:	3006d43a 	srli	r3,r6,16
 800d598:	4b13883a 	add	r9,r9,r12
 800d59c:	2ccb383a 	mul	r5,r5,r19
 800d5a0:	5100022e 	bgeu	r10,r4,800d5ac <__muldf3+0x3b8>
 800d5a4:	01000074 	movhi	r4,1
 800d5a8:	290b883a 	add	r5,r5,r4
 800d5ac:	802ad43a 	srli	r21,r16,16
 800d5b0:	843fffcc 	andi	r16,r16,65535
 800d5b4:	440d383a 	mul	r6,r8,r16
 800d5b8:	4565383a 	mul	r18,r8,r21
 800d5bc:	8349383a 	mul	r4,r16,r13
 800d5c0:	500e943a 	slli	r7,r10,16
 800d5c4:	3010d43a 	srli	r8,r6,16
 800d5c8:	5028d43a 	srli	r20,r10,16
 800d5cc:	2489883a 	add	r4,r4,r18
 800d5d0:	8abfffcc 	andi	r10,r17,65535
 800d5d4:	3a95883a 	add	r10,r7,r10
 800d5d8:	4119883a 	add	r12,r8,r4
 800d5dc:	a169883a 	add	r20,r20,r5
 800d5e0:	1a87883a 	add	r3,r3,r10
 800d5e4:	6d5b383a 	mul	r13,r13,r21
 800d5e8:	6480022e 	bgeu	r12,r18,800d5f4 <__muldf3+0x400>
 800d5ec:	01000074 	movhi	r4,1
 800d5f0:	691b883a 	add	r13,r13,r4
 800d5f4:	7c25383a 	mul	r18,r15,r16
 800d5f8:	7d4b383a 	mul	r5,r15,r21
 800d5fc:	84cf383a 	mul	r7,r16,r19
 800d600:	901ed43a 	srli	r15,r18,16
 800d604:	6008d43a 	srli	r4,r12,16
 800d608:	6010943a 	slli	r8,r12,16
 800d60c:	394f883a 	add	r7,r7,r5
 800d610:	333fffcc 	andi	r12,r6,65535
 800d614:	79df883a 	add	r15,r15,r7
 800d618:	235b883a 	add	r13,r4,r13
 800d61c:	9d63383a 	mul	r17,r19,r21
 800d620:	4309883a 	add	r4,r8,r12
 800d624:	7940022e 	bgeu	r15,r5,800d630 <__muldf3+0x43c>
 800d628:	01400074 	movhi	r5,1
 800d62c:	8963883a 	add	r17,r17,r5
 800d630:	780a943a 	slli	r5,r15,16
 800d634:	91bfffcc 	andi	r6,r18,65535
 800d638:	70c7883a 	add	r3,r14,r3
 800d63c:	298d883a 	add	r6,r5,r6
 800d640:	1a8f803a 	cmpltu	r7,r3,r10
 800d644:	350b883a 	add	r5,r6,r20
 800d648:	20c7883a 	add	r3,r4,r3
 800d64c:	3955883a 	add	r10,r7,r5
 800d650:	1909803a 	cmpltu	r4,r3,r4
 800d654:	6a91883a 	add	r8,r13,r10
 800d658:	780cd43a 	srli	r6,r15,16
 800d65c:	2219883a 	add	r12,r4,r8
 800d660:	2d0b803a 	cmpltu	r5,r5,r20
 800d664:	51cf803a 	cmpltu	r7,r10,r7
 800d668:	29ceb03a 	or	r7,r5,r7
 800d66c:	4351803a 	cmpltu	r8,r8,r13
 800d670:	610b803a 	cmpltu	r5,r12,r4
 800d674:	4148b03a 	or	r4,r8,r5
 800d678:	398f883a 	add	r7,r7,r6
 800d67c:	3909883a 	add	r4,r7,r4
 800d680:	1810927a 	slli	r8,r3,9
 800d684:	2449883a 	add	r4,r4,r17
 800d688:	2008927a 	slli	r4,r4,9
 800d68c:	6022d5fa 	srli	r17,r12,23
 800d690:	1806d5fa 	srli	r3,r3,23
 800d694:	4252b03a 	or	r9,r8,r9
 800d698:	600a927a 	slli	r5,r12,9
 800d69c:	4810c03a 	cmpne	r8,r9,zero
 800d6a0:	2462b03a 	or	r17,r4,r17
 800d6a4:	40c6b03a 	or	r3,r8,r3
 800d6a8:	8900402c 	andhi	r4,r17,256
 800d6ac:	1950b03a 	or	r8,r3,r5
 800d6b0:	20000726 	beq	r4,zero,800d6d0 <__muldf3+0x4dc>
 800d6b4:	4006d07a 	srli	r3,r8,1
 800d6b8:	880497fa 	slli	r2,r17,31
 800d6bc:	4200004c 	andi	r8,r8,1
 800d6c0:	8822d07a 	srli	r17,r17,1
 800d6c4:	1a10b03a 	or	r8,r3,r8
 800d6c8:	1210b03a 	or	r8,r2,r8
 800d6cc:	5805883a 	mov	r2,r11
 800d6d0:	1140ffc4 	addi	r5,r2,1023
 800d6d4:	0140440e 	bge	zero,r5,800d7e8 <__muldf3+0x5f4>
 800d6d8:	40c001cc 	andi	r3,r8,7
 800d6dc:	18000726 	beq	r3,zero,800d6fc <__muldf3+0x508>
 800d6e0:	40c003cc 	andi	r3,r8,15
 800d6e4:	01000104 	movi	r4,4
 800d6e8:	19000426 	beq	r3,r4,800d6fc <__muldf3+0x508>
 800d6ec:	4107883a 	add	r3,r8,r4
 800d6f0:	1a11803a 	cmpltu	r8,r3,r8
 800d6f4:	8a23883a 	add	r17,r17,r8
 800d6f8:	1811883a 	mov	r8,r3
 800d6fc:	88c0402c 	andhi	r3,r17,256
 800d700:	18000426 	beq	r3,zero,800d714 <__muldf3+0x520>
 800d704:	11410004 	addi	r5,r2,1024
 800d708:	00bfc034 	movhi	r2,65280
 800d70c:	10bfffc4 	addi	r2,r2,-1
 800d710:	88a2703a 	and	r17,r17,r2
 800d714:	0081ff84 	movi	r2,2046
 800d718:	117f6416 	blt	r2,r5,800d4ac <__muldf3+0x2b8>
 800d71c:	8828977a 	slli	r20,r17,29
 800d720:	4010d0fa 	srli	r8,r8,3
 800d724:	8822927a 	slli	r17,r17,9
 800d728:	2881ffcc 	andi	r2,r5,2047
 800d72c:	a228b03a 	or	r20,r20,r8
 800d730:	880ad33a 	srli	r5,r17,12
 800d734:	b02b883a 	mov	r21,r22
 800d738:	003f0d06 	br	800d370 <__muldf3+0x17c>
 800d73c:	8080022c 	andhi	r2,r16,8
 800d740:	10000926 	beq	r2,zero,800d768 <__muldf3+0x574>
 800d744:	8880022c 	andhi	r2,r17,8
 800d748:	1000071e 	bne	r2,zero,800d768 <__muldf3+0x574>
 800d74c:	00800434 	movhi	r2,16
 800d750:	89400234 	orhi	r5,r17,8
 800d754:	10bfffc4 	addi	r2,r2,-1
 800d758:	b82b883a 	mov	r21,r23
 800d75c:	288a703a 	and	r5,r5,r2
 800d760:	4029883a 	mov	r20,r8
 800d764:	003f6806 	br	800d508 <__muldf3+0x314>
 800d768:	00800434 	movhi	r2,16
 800d76c:	81400234 	orhi	r5,r16,8
 800d770:	10bfffc4 	addi	r2,r2,-1
 800d774:	288a703a 	and	r5,r5,r2
 800d778:	003f6306 	br	800d508 <__muldf3+0x314>
 800d77c:	147ff604 	addi	r17,r2,-40
 800d780:	3462983a 	sll	r17,r6,r17
 800d784:	0011883a 	mov	r8,zero
 800d788:	003f4406 	br	800d49c <__muldf3+0x2a8>
 800d78c:	3009883a 	mov	r4,r6
 800d790:	d9800215 	stw	r6,8(sp)
 800d794:	da400115 	stw	r9,4(sp)
 800d798:	da800015 	stw	r10,0(sp)
 800d79c:	8001aec0 	call	8001aec <__clzsi2>
 800d7a0:	10800804 	addi	r2,r2,32
 800d7a4:	da800017 	ldw	r10,0(sp)
 800d7a8:	da400117 	ldw	r9,4(sp)
 800d7ac:	d9800217 	ldw	r6,8(sp)
 800d7b0:	003f3006 	br	800d474 <__muldf3+0x280>
 800d7b4:	143ff604 	addi	r16,r2,-40
 800d7b8:	9c20983a 	sll	r16,r19,r16
 800d7bc:	0029883a 	mov	r20,zero
 800d7c0:	003f1606 	br	800d41c <__muldf3+0x228>
 800d7c4:	d9800215 	stw	r6,8(sp)
 800d7c8:	d9c00015 	stw	r7,0(sp)
 800d7cc:	da400115 	stw	r9,4(sp)
 800d7d0:	8001aec0 	call	8001aec <__clzsi2>
 800d7d4:	10800804 	addi	r2,r2,32
 800d7d8:	da400117 	ldw	r9,4(sp)
 800d7dc:	d9c00017 	ldw	r7,0(sp)
 800d7e0:	d9800217 	ldw	r6,8(sp)
 800d7e4:	003f0306 	br	800d3f4 <__muldf3+0x200>
 800d7e8:	00c00044 	movi	r3,1
 800d7ec:	1947c83a 	sub	r3,r3,r5
 800d7f0:	00800e04 	movi	r2,56
 800d7f4:	10feda16 	blt	r2,r3,800d360 <__muldf3+0x16c>
 800d7f8:	008007c4 	movi	r2,31
 800d7fc:	10c01b16 	blt	r2,r3,800d86c <__muldf3+0x678>
 800d800:	00800804 	movi	r2,32
 800d804:	10c5c83a 	sub	r2,r2,r3
 800d808:	888a983a 	sll	r5,r17,r2
 800d80c:	40c8d83a 	srl	r4,r8,r3
 800d810:	4084983a 	sll	r2,r8,r2
 800d814:	88e2d83a 	srl	r17,r17,r3
 800d818:	2906b03a 	or	r3,r5,r4
 800d81c:	1004c03a 	cmpne	r2,r2,zero
 800d820:	1886b03a 	or	r3,r3,r2
 800d824:	188001cc 	andi	r2,r3,7
 800d828:	10000726 	beq	r2,zero,800d848 <__muldf3+0x654>
 800d82c:	188003cc 	andi	r2,r3,15
 800d830:	01000104 	movi	r4,4
 800d834:	11000426 	beq	r2,r4,800d848 <__muldf3+0x654>
 800d838:	1805883a 	mov	r2,r3
 800d83c:	10c00104 	addi	r3,r2,4
 800d840:	1885803a 	cmpltu	r2,r3,r2
 800d844:	88a3883a 	add	r17,r17,r2
 800d848:	8880202c 	andhi	r2,r17,128
 800d84c:	10001c26 	beq	r2,zero,800d8c0 <__muldf3+0x6cc>
 800d850:	b02b883a 	mov	r21,r22
 800d854:	00800044 	movi	r2,1
 800d858:	000b883a 	mov	r5,zero
 800d85c:	0029883a 	mov	r20,zero
 800d860:	003ec306 	br	800d370 <__muldf3+0x17c>
 800d864:	5805883a 	mov	r2,r11
 800d868:	003f9906 	br	800d6d0 <__muldf3+0x4dc>
 800d86c:	00bff844 	movi	r2,-31
 800d870:	1145c83a 	sub	r2,r2,r5
 800d874:	8888d83a 	srl	r4,r17,r2
 800d878:	00800804 	movi	r2,32
 800d87c:	18801a26 	beq	r3,r2,800d8e8 <__muldf3+0x6f4>
 800d880:	00801004 	movi	r2,64
 800d884:	10c5c83a 	sub	r2,r2,r3
 800d888:	8884983a 	sll	r2,r17,r2
 800d88c:	1204b03a 	or	r2,r2,r8
 800d890:	1004c03a 	cmpne	r2,r2,zero
 800d894:	2084b03a 	or	r2,r4,r2
 800d898:	144001cc 	andi	r17,r2,7
 800d89c:	88000d1e 	bne	r17,zero,800d8d4 <__muldf3+0x6e0>
 800d8a0:	000b883a 	mov	r5,zero
 800d8a4:	1028d0fa 	srli	r20,r2,3
 800d8a8:	b02b883a 	mov	r21,r22
 800d8ac:	0005883a 	mov	r2,zero
 800d8b0:	a468b03a 	or	r20,r20,r17
 800d8b4:	003eae06 	br	800d370 <__muldf3+0x17c>
 800d8b8:	1007883a 	mov	r3,r2
 800d8bc:	0023883a 	mov	r17,zero
 800d8c0:	880a927a 	slli	r5,r17,9
 800d8c4:	1805883a 	mov	r2,r3
 800d8c8:	8822977a 	slli	r17,r17,29
 800d8cc:	280ad33a 	srli	r5,r5,12
 800d8d0:	003ff406 	br	800d8a4 <__muldf3+0x6b0>
 800d8d4:	10c003cc 	andi	r3,r2,15
 800d8d8:	01000104 	movi	r4,4
 800d8dc:	193ff626 	beq	r3,r4,800d8b8 <__muldf3+0x6c4>
 800d8e0:	0023883a 	mov	r17,zero
 800d8e4:	003fd506 	br	800d83c <__muldf3+0x648>
 800d8e8:	0005883a 	mov	r2,zero
 800d8ec:	003fe706 	br	800d88c <__muldf3+0x698>
 800d8f0:	00800434 	movhi	r2,16
 800d8f4:	89400234 	orhi	r5,r17,8
 800d8f8:	10bfffc4 	addi	r2,r2,-1
 800d8fc:	b02b883a 	mov	r21,r22
 800d900:	288a703a 	and	r5,r5,r2
 800d904:	4029883a 	mov	r20,r8
 800d908:	003eff06 	br	800d508 <__muldf3+0x314>

0800d90c <__subdf3>:
 800d90c:	02000434 	movhi	r8,16
 800d910:	423fffc4 	addi	r8,r8,-1
 800d914:	defffb04 	addi	sp,sp,-20
 800d918:	2a14703a 	and	r10,r5,r8
 800d91c:	3812d53a 	srli	r9,r7,20
 800d920:	3a10703a 	and	r8,r7,r8
 800d924:	2006d77a 	srli	r3,r4,29
 800d928:	3004d77a 	srli	r2,r6,29
 800d92c:	dc000015 	stw	r16,0(sp)
 800d930:	501490fa 	slli	r10,r10,3
 800d934:	2820d53a 	srli	r16,r5,20
 800d938:	401090fa 	slli	r8,r8,3
 800d93c:	dc800215 	stw	r18,8(sp)
 800d940:	dc400115 	stw	r17,4(sp)
 800d944:	dfc00415 	stw	ra,16(sp)
 800d948:	202290fa 	slli	r17,r4,3
 800d94c:	dcc00315 	stw	r19,12(sp)
 800d950:	4a41ffcc 	andi	r9,r9,2047
 800d954:	0101ffc4 	movi	r4,2047
 800d958:	2824d7fa 	srli	r18,r5,31
 800d95c:	8401ffcc 	andi	r16,r16,2047
 800d960:	50c6b03a 	or	r3,r10,r3
 800d964:	380ed7fa 	srli	r7,r7,31
 800d968:	408ab03a 	or	r5,r8,r2
 800d96c:	300c90fa 	slli	r6,r6,3
 800d970:	49009626 	beq	r9,r4,800dbcc <__subdf3+0x2c0>
 800d974:	39c0005c 	xori	r7,r7,1
 800d978:	8245c83a 	sub	r2,r16,r9
 800d97c:	3c807426 	beq	r7,r18,800db50 <__subdf3+0x244>
 800d980:	0080af0e 	bge	zero,r2,800dc40 <__subdf3+0x334>
 800d984:	48002a1e 	bne	r9,zero,800da30 <__subdf3+0x124>
 800d988:	2988b03a 	or	r4,r5,r6
 800d98c:	20009a1e 	bne	r4,zero,800dbf8 <__subdf3+0x2ec>
 800d990:	888001cc 	andi	r2,r17,7
 800d994:	10000726 	beq	r2,zero,800d9b4 <__subdf3+0xa8>
 800d998:	888003cc 	andi	r2,r17,15
 800d99c:	01000104 	movi	r4,4
 800d9a0:	11000426 	beq	r2,r4,800d9b4 <__subdf3+0xa8>
 800d9a4:	890b883a 	add	r5,r17,r4
 800d9a8:	2c63803a 	cmpltu	r17,r5,r17
 800d9ac:	1c47883a 	add	r3,r3,r17
 800d9b0:	2823883a 	mov	r17,r5
 800d9b4:	1880202c 	andhi	r2,r3,128
 800d9b8:	10005926 	beq	r2,zero,800db20 <__subdf3+0x214>
 800d9bc:	84000044 	addi	r16,r16,1
 800d9c0:	0081ffc4 	movi	r2,2047
 800d9c4:	8080be26 	beq	r16,r2,800dcc0 <__subdf3+0x3b4>
 800d9c8:	017fe034 	movhi	r5,65408
 800d9cc:	297fffc4 	addi	r5,r5,-1
 800d9d0:	1946703a 	and	r3,r3,r5
 800d9d4:	1804977a 	slli	r2,r3,29
 800d9d8:	1806927a 	slli	r3,r3,9
 800d9dc:	8822d0fa 	srli	r17,r17,3
 800d9e0:	8401ffcc 	andi	r16,r16,2047
 800d9e4:	180ad33a 	srli	r5,r3,12
 800d9e8:	9100004c 	andi	r4,r18,1
 800d9ec:	1444b03a 	or	r2,r2,r17
 800d9f0:	80c1ffcc 	andi	r3,r16,2047
 800d9f4:	1820953a 	slli	r16,r3,20
 800d9f8:	20c03fcc 	andi	r3,r4,255
 800d9fc:	180897fa 	slli	r4,r3,31
 800da00:	00c00434 	movhi	r3,16
 800da04:	18ffffc4 	addi	r3,r3,-1
 800da08:	28c6703a 	and	r3,r5,r3
 800da0c:	1c06b03a 	or	r3,r3,r16
 800da10:	1906b03a 	or	r3,r3,r4
 800da14:	dfc00417 	ldw	ra,16(sp)
 800da18:	dcc00317 	ldw	r19,12(sp)
 800da1c:	dc800217 	ldw	r18,8(sp)
 800da20:	dc400117 	ldw	r17,4(sp)
 800da24:	dc000017 	ldw	r16,0(sp)
 800da28:	dec00504 	addi	sp,sp,20
 800da2c:	f800283a 	ret
 800da30:	0101ffc4 	movi	r4,2047
 800da34:	813fd626 	beq	r16,r4,800d990 <__subdf3+0x84>
 800da38:	29402034 	orhi	r5,r5,128
 800da3c:	01000e04 	movi	r4,56
 800da40:	2080a316 	blt	r4,r2,800dcd0 <__subdf3+0x3c4>
 800da44:	010007c4 	movi	r4,31
 800da48:	2080c616 	blt	r4,r2,800dd64 <__subdf3+0x458>
 800da4c:	01000804 	movi	r4,32
 800da50:	2089c83a 	sub	r4,r4,r2
 800da54:	2910983a 	sll	r8,r5,r4
 800da58:	308ed83a 	srl	r7,r6,r2
 800da5c:	3108983a 	sll	r4,r6,r4
 800da60:	2884d83a 	srl	r2,r5,r2
 800da64:	41ccb03a 	or	r6,r8,r7
 800da68:	2008c03a 	cmpne	r4,r4,zero
 800da6c:	310cb03a 	or	r6,r6,r4
 800da70:	898dc83a 	sub	r6,r17,r6
 800da74:	89a3803a 	cmpltu	r17,r17,r6
 800da78:	1887c83a 	sub	r3,r3,r2
 800da7c:	1c47c83a 	sub	r3,r3,r17
 800da80:	3023883a 	mov	r17,r6
 800da84:	1880202c 	andhi	r2,r3,128
 800da88:	10002326 	beq	r2,zero,800db18 <__subdf3+0x20c>
 800da8c:	04c02034 	movhi	r19,128
 800da90:	9cffffc4 	addi	r19,r19,-1
 800da94:	1ce6703a 	and	r19,r3,r19
 800da98:	98007a26 	beq	r19,zero,800dc84 <__subdf3+0x378>
 800da9c:	9809883a 	mov	r4,r19
 800daa0:	8001aec0 	call	8001aec <__clzsi2>
 800daa4:	113ffe04 	addi	r4,r2,-8
 800daa8:	00c007c4 	movi	r3,31
 800daac:	19007b16 	blt	r3,r4,800dc9c <__subdf3+0x390>
 800dab0:	00800804 	movi	r2,32
 800dab4:	1105c83a 	sub	r2,r2,r4
 800dab8:	8884d83a 	srl	r2,r17,r2
 800dabc:	9906983a 	sll	r3,r19,r4
 800dac0:	8922983a 	sll	r17,r17,r4
 800dac4:	10c4b03a 	or	r2,r2,r3
 800dac8:	24007816 	blt	r4,r16,800dcac <__subdf3+0x3a0>
 800dacc:	2421c83a 	sub	r16,r4,r16
 800dad0:	80c00044 	addi	r3,r16,1
 800dad4:	010007c4 	movi	r4,31
 800dad8:	20c09516 	blt	r4,r3,800dd30 <__subdf3+0x424>
 800dadc:	01400804 	movi	r5,32
 800dae0:	28cbc83a 	sub	r5,r5,r3
 800dae4:	88c8d83a 	srl	r4,r17,r3
 800dae8:	8962983a 	sll	r17,r17,r5
 800daec:	114a983a 	sll	r5,r2,r5
 800daf0:	10c6d83a 	srl	r3,r2,r3
 800daf4:	8804c03a 	cmpne	r2,r17,zero
 800daf8:	290ab03a 	or	r5,r5,r4
 800dafc:	28a2b03a 	or	r17,r5,r2
 800db00:	0021883a 	mov	r16,zero
 800db04:	003fa206 	br	800d990 <__subdf3+0x84>
 800db08:	2090b03a 	or	r8,r4,r2
 800db0c:	40018e26 	beq	r8,zero,800e148 <__subdf3+0x83c>
 800db10:	1007883a 	mov	r3,r2
 800db14:	2023883a 	mov	r17,r4
 800db18:	888001cc 	andi	r2,r17,7
 800db1c:	103f9e1e 	bne	r2,zero,800d998 <__subdf3+0x8c>
 800db20:	1804977a 	slli	r2,r3,29
 800db24:	8822d0fa 	srli	r17,r17,3
 800db28:	1810d0fa 	srli	r8,r3,3
 800db2c:	9100004c 	andi	r4,r18,1
 800db30:	1444b03a 	or	r2,r2,r17
 800db34:	00c1ffc4 	movi	r3,2047
 800db38:	80c02826 	beq	r16,r3,800dbdc <__subdf3+0x2d0>
 800db3c:	01400434 	movhi	r5,16
 800db40:	297fffc4 	addi	r5,r5,-1
 800db44:	80e0703a 	and	r16,r16,r3
 800db48:	414a703a 	and	r5,r8,r5
 800db4c:	003fa806 	br	800d9f0 <__subdf3+0xe4>
 800db50:	0080630e 	bge	zero,r2,800dce0 <__subdf3+0x3d4>
 800db54:	48003026 	beq	r9,zero,800dc18 <__subdf3+0x30c>
 800db58:	0101ffc4 	movi	r4,2047
 800db5c:	813f8c26 	beq	r16,r4,800d990 <__subdf3+0x84>
 800db60:	29402034 	orhi	r5,r5,128
 800db64:	01000e04 	movi	r4,56
 800db68:	2080a90e 	bge	r4,r2,800de10 <__subdf3+0x504>
 800db6c:	298cb03a 	or	r6,r5,r6
 800db70:	3012c03a 	cmpne	r9,r6,zero
 800db74:	0005883a 	mov	r2,zero
 800db78:	4c53883a 	add	r9,r9,r17
 800db7c:	4c63803a 	cmpltu	r17,r9,r17
 800db80:	10c7883a 	add	r3,r2,r3
 800db84:	88c7883a 	add	r3,r17,r3
 800db88:	4823883a 	mov	r17,r9
 800db8c:	1880202c 	andhi	r2,r3,128
 800db90:	1000d026 	beq	r2,zero,800ded4 <__subdf3+0x5c8>
 800db94:	84000044 	addi	r16,r16,1
 800db98:	0081ffc4 	movi	r2,2047
 800db9c:	8080fe26 	beq	r16,r2,800df98 <__subdf3+0x68c>
 800dba0:	00bfe034 	movhi	r2,65408
 800dba4:	10bfffc4 	addi	r2,r2,-1
 800dba8:	1886703a 	and	r3,r3,r2
 800dbac:	880ad07a 	srli	r5,r17,1
 800dbb0:	180497fa 	slli	r2,r3,31
 800dbb4:	8900004c 	andi	r4,r17,1
 800dbb8:	2922b03a 	or	r17,r5,r4
 800dbbc:	1806d07a 	srli	r3,r3,1
 800dbc0:	1462b03a 	or	r17,r2,r17
 800dbc4:	3825883a 	mov	r18,r7
 800dbc8:	003f7106 	br	800d990 <__subdf3+0x84>
 800dbcc:	2984b03a 	or	r2,r5,r6
 800dbd0:	103f6826 	beq	r2,zero,800d974 <__subdf3+0x68>
 800dbd4:	39c03fcc 	andi	r7,r7,255
 800dbd8:	003f6706 	br	800d978 <__subdf3+0x6c>
 800dbdc:	4086b03a 	or	r3,r8,r2
 800dbe0:	18015226 	beq	r3,zero,800e12c <__subdf3+0x820>
 800dbe4:	00c00434 	movhi	r3,16
 800dbe8:	41400234 	orhi	r5,r8,8
 800dbec:	18ffffc4 	addi	r3,r3,-1
 800dbf0:	28ca703a 	and	r5,r5,r3
 800dbf4:	003f7e06 	br	800d9f0 <__subdf3+0xe4>
 800dbf8:	10bfffc4 	addi	r2,r2,-1
 800dbfc:	1000491e 	bne	r2,zero,800dd24 <__subdf3+0x418>
 800dc00:	898fc83a 	sub	r7,r17,r6
 800dc04:	89e3803a 	cmpltu	r17,r17,r7
 800dc08:	1947c83a 	sub	r3,r3,r5
 800dc0c:	1c47c83a 	sub	r3,r3,r17
 800dc10:	3823883a 	mov	r17,r7
 800dc14:	003f9b06 	br	800da84 <__subdf3+0x178>
 800dc18:	2988b03a 	or	r4,r5,r6
 800dc1c:	203f5c26 	beq	r4,zero,800d990 <__subdf3+0x84>
 800dc20:	10bfffc4 	addi	r2,r2,-1
 800dc24:	1000931e 	bne	r2,zero,800de74 <__subdf3+0x568>
 800dc28:	898d883a 	add	r6,r17,r6
 800dc2c:	3463803a 	cmpltu	r17,r6,r17
 800dc30:	1947883a 	add	r3,r3,r5
 800dc34:	88c7883a 	add	r3,r17,r3
 800dc38:	3023883a 	mov	r17,r6
 800dc3c:	003fd306 	br	800db8c <__subdf3+0x280>
 800dc40:	1000541e 	bne	r2,zero,800dd94 <__subdf3+0x488>
 800dc44:	80800044 	addi	r2,r16,1
 800dc48:	1081ffcc 	andi	r2,r2,2047
 800dc4c:	01000044 	movi	r4,1
 800dc50:	2080a20e 	bge	r4,r2,800dedc <__subdf3+0x5d0>
 800dc54:	8989c83a 	sub	r4,r17,r6
 800dc58:	8905803a 	cmpltu	r2,r17,r4
 800dc5c:	1967c83a 	sub	r19,r3,r5
 800dc60:	98a7c83a 	sub	r19,r19,r2
 800dc64:	9880202c 	andhi	r2,r19,128
 800dc68:	10006326 	beq	r2,zero,800ddf8 <__subdf3+0x4ec>
 800dc6c:	3463c83a 	sub	r17,r6,r17
 800dc70:	28c7c83a 	sub	r3,r5,r3
 800dc74:	344d803a 	cmpltu	r6,r6,r17
 800dc78:	19a7c83a 	sub	r19,r3,r6
 800dc7c:	3825883a 	mov	r18,r7
 800dc80:	983f861e 	bne	r19,zero,800da9c <__subdf3+0x190>
 800dc84:	8809883a 	mov	r4,r17
 800dc88:	8001aec0 	call	8001aec <__clzsi2>
 800dc8c:	10800804 	addi	r2,r2,32
 800dc90:	113ffe04 	addi	r4,r2,-8
 800dc94:	00c007c4 	movi	r3,31
 800dc98:	193f850e 	bge	r3,r4,800dab0 <__subdf3+0x1a4>
 800dc9c:	10bff604 	addi	r2,r2,-40
 800dca0:	8884983a 	sll	r2,r17,r2
 800dca4:	0023883a 	mov	r17,zero
 800dca8:	243f880e 	bge	r4,r16,800dacc <__subdf3+0x1c0>
 800dcac:	00ffe034 	movhi	r3,65408
 800dcb0:	18ffffc4 	addi	r3,r3,-1
 800dcb4:	8121c83a 	sub	r16,r16,r4
 800dcb8:	10c6703a 	and	r3,r2,r3
 800dcbc:	003f3406 	br	800d990 <__subdf3+0x84>
 800dcc0:	9100004c 	andi	r4,r18,1
 800dcc4:	000b883a 	mov	r5,zero
 800dcc8:	0005883a 	mov	r2,zero
 800dccc:	003f4806 	br	800d9f0 <__subdf3+0xe4>
 800dcd0:	298cb03a 	or	r6,r5,r6
 800dcd4:	300cc03a 	cmpne	r6,r6,zero
 800dcd8:	0005883a 	mov	r2,zero
 800dcdc:	003f6406 	br	800da70 <__subdf3+0x164>
 800dce0:	10009a1e 	bne	r2,zero,800df4c <__subdf3+0x640>
 800dce4:	82400044 	addi	r9,r16,1
 800dce8:	4881ffcc 	andi	r2,r9,2047
 800dcec:	02800044 	movi	r10,1
 800dcf0:	5080670e 	bge	r10,r2,800de90 <__subdf3+0x584>
 800dcf4:	0081ffc4 	movi	r2,2047
 800dcf8:	4880af26 	beq	r9,r2,800dfb8 <__subdf3+0x6ac>
 800dcfc:	898d883a 	add	r6,r17,r6
 800dd00:	1945883a 	add	r2,r3,r5
 800dd04:	3447803a 	cmpltu	r3,r6,r17
 800dd08:	1887883a 	add	r3,r3,r2
 800dd0c:	182297fa 	slli	r17,r3,31
 800dd10:	300cd07a 	srli	r6,r6,1
 800dd14:	1806d07a 	srli	r3,r3,1
 800dd18:	4821883a 	mov	r16,r9
 800dd1c:	89a2b03a 	or	r17,r17,r6
 800dd20:	003f1b06 	br	800d990 <__subdf3+0x84>
 800dd24:	0101ffc4 	movi	r4,2047
 800dd28:	813f441e 	bne	r16,r4,800da3c <__subdf3+0x130>
 800dd2c:	003f1806 	br	800d990 <__subdf3+0x84>
 800dd30:	843ff844 	addi	r16,r16,-31
 800dd34:	01400804 	movi	r5,32
 800dd38:	1408d83a 	srl	r4,r2,r16
 800dd3c:	19405026 	beq	r3,r5,800de80 <__subdf3+0x574>
 800dd40:	01401004 	movi	r5,64
 800dd44:	28c7c83a 	sub	r3,r5,r3
 800dd48:	10c4983a 	sll	r2,r2,r3
 800dd4c:	88a2b03a 	or	r17,r17,r2
 800dd50:	8822c03a 	cmpne	r17,r17,zero
 800dd54:	2462b03a 	or	r17,r4,r17
 800dd58:	0007883a 	mov	r3,zero
 800dd5c:	0021883a 	mov	r16,zero
 800dd60:	003f6d06 	br	800db18 <__subdf3+0x20c>
 800dd64:	11fff804 	addi	r7,r2,-32
 800dd68:	01000804 	movi	r4,32
 800dd6c:	29ced83a 	srl	r7,r5,r7
 800dd70:	11004526 	beq	r2,r4,800de88 <__subdf3+0x57c>
 800dd74:	01001004 	movi	r4,64
 800dd78:	2089c83a 	sub	r4,r4,r2
 800dd7c:	2904983a 	sll	r2,r5,r4
 800dd80:	118cb03a 	or	r6,r2,r6
 800dd84:	300cc03a 	cmpne	r6,r6,zero
 800dd88:	398cb03a 	or	r6,r7,r6
 800dd8c:	0005883a 	mov	r2,zero
 800dd90:	003f3706 	br	800da70 <__subdf3+0x164>
 800dd94:	80002a26 	beq	r16,zero,800de40 <__subdf3+0x534>
 800dd98:	0101ffc4 	movi	r4,2047
 800dd9c:	49006626 	beq	r9,r4,800df38 <__subdf3+0x62c>
 800dda0:	0085c83a 	sub	r2,zero,r2
 800dda4:	18c02034 	orhi	r3,r3,128
 800dda8:	01000e04 	movi	r4,56
 800ddac:	20807e16 	blt	r4,r2,800dfa8 <__subdf3+0x69c>
 800ddb0:	010007c4 	movi	r4,31
 800ddb4:	2080e716 	blt	r4,r2,800e154 <__subdf3+0x848>
 800ddb8:	01000804 	movi	r4,32
 800ddbc:	2089c83a 	sub	r4,r4,r2
 800ddc0:	1914983a 	sll	r10,r3,r4
 800ddc4:	8890d83a 	srl	r8,r17,r2
 800ddc8:	8908983a 	sll	r4,r17,r4
 800ddcc:	1884d83a 	srl	r2,r3,r2
 800ddd0:	5222b03a 	or	r17,r10,r8
 800ddd4:	2006c03a 	cmpne	r3,r4,zero
 800ddd8:	88e2b03a 	or	r17,r17,r3
 800dddc:	3463c83a 	sub	r17,r6,r17
 800dde0:	2885c83a 	sub	r2,r5,r2
 800dde4:	344d803a 	cmpltu	r6,r6,r17
 800dde8:	1187c83a 	sub	r3,r2,r6
 800ddec:	4821883a 	mov	r16,r9
 800ddf0:	3825883a 	mov	r18,r7
 800ddf4:	003f2306 	br	800da84 <__subdf3+0x178>
 800ddf8:	24d0b03a 	or	r8,r4,r19
 800ddfc:	40001b1e 	bne	r8,zero,800de6c <__subdf3+0x560>
 800de00:	0005883a 	mov	r2,zero
 800de04:	0009883a 	mov	r4,zero
 800de08:	0021883a 	mov	r16,zero
 800de0c:	003f4906 	br	800db34 <__subdf3+0x228>
 800de10:	010007c4 	movi	r4,31
 800de14:	20803a16 	blt	r4,r2,800df00 <__subdf3+0x5f4>
 800de18:	01000804 	movi	r4,32
 800de1c:	2089c83a 	sub	r4,r4,r2
 800de20:	2912983a 	sll	r9,r5,r4
 800de24:	3090d83a 	srl	r8,r6,r2
 800de28:	3108983a 	sll	r4,r6,r4
 800de2c:	2884d83a 	srl	r2,r5,r2
 800de30:	4a12b03a 	or	r9,r9,r8
 800de34:	2008c03a 	cmpne	r4,r4,zero
 800de38:	4912b03a 	or	r9,r9,r4
 800de3c:	003f4e06 	br	800db78 <__subdf3+0x26c>
 800de40:	1c48b03a 	or	r4,r3,r17
 800de44:	20003c26 	beq	r4,zero,800df38 <__subdf3+0x62c>
 800de48:	0084303a 	nor	r2,zero,r2
 800de4c:	1000381e 	bne	r2,zero,800df30 <__subdf3+0x624>
 800de50:	3463c83a 	sub	r17,r6,r17
 800de54:	28c5c83a 	sub	r2,r5,r3
 800de58:	344d803a 	cmpltu	r6,r6,r17
 800de5c:	1187c83a 	sub	r3,r2,r6
 800de60:	4821883a 	mov	r16,r9
 800de64:	3825883a 	mov	r18,r7
 800de68:	003f0606 	br	800da84 <__subdf3+0x178>
 800de6c:	2023883a 	mov	r17,r4
 800de70:	003f0906 	br	800da98 <__subdf3+0x18c>
 800de74:	0101ffc4 	movi	r4,2047
 800de78:	813f3a1e 	bne	r16,r4,800db64 <__subdf3+0x258>
 800de7c:	003ec406 	br	800d990 <__subdf3+0x84>
 800de80:	0005883a 	mov	r2,zero
 800de84:	003fb106 	br	800dd4c <__subdf3+0x440>
 800de88:	0005883a 	mov	r2,zero
 800de8c:	003fbc06 	br	800dd80 <__subdf3+0x474>
 800de90:	1c44b03a 	or	r2,r3,r17
 800de94:	80008e1e 	bne	r16,zero,800e0d0 <__subdf3+0x7c4>
 800de98:	1000c826 	beq	r2,zero,800e1bc <__subdf3+0x8b0>
 800de9c:	2984b03a 	or	r2,r5,r6
 800dea0:	103ebb26 	beq	r2,zero,800d990 <__subdf3+0x84>
 800dea4:	8989883a 	add	r4,r17,r6
 800dea8:	1945883a 	add	r2,r3,r5
 800deac:	2447803a 	cmpltu	r3,r4,r17
 800deb0:	1887883a 	add	r3,r3,r2
 800deb4:	1880202c 	andhi	r2,r3,128
 800deb8:	2023883a 	mov	r17,r4
 800debc:	103f1626 	beq	r2,zero,800db18 <__subdf3+0x20c>
 800dec0:	00bfe034 	movhi	r2,65408
 800dec4:	10bfffc4 	addi	r2,r2,-1
 800dec8:	5021883a 	mov	r16,r10
 800decc:	1886703a 	and	r3,r3,r2
 800ded0:	003eaf06 	br	800d990 <__subdf3+0x84>
 800ded4:	3825883a 	mov	r18,r7
 800ded8:	003f0f06 	br	800db18 <__subdf3+0x20c>
 800dedc:	1c44b03a 	or	r2,r3,r17
 800dee0:	8000251e 	bne	r16,zero,800df78 <__subdf3+0x66c>
 800dee4:	1000661e 	bne	r2,zero,800e080 <__subdf3+0x774>
 800dee8:	2990b03a 	or	r8,r5,r6
 800deec:	40009626 	beq	r8,zero,800e148 <__subdf3+0x83c>
 800def0:	2807883a 	mov	r3,r5
 800def4:	3023883a 	mov	r17,r6
 800def8:	3825883a 	mov	r18,r7
 800defc:	003ea406 	br	800d990 <__subdf3+0x84>
 800df00:	127ff804 	addi	r9,r2,-32
 800df04:	01000804 	movi	r4,32
 800df08:	2a52d83a 	srl	r9,r5,r9
 800df0c:	11008c26 	beq	r2,r4,800e140 <__subdf3+0x834>
 800df10:	01001004 	movi	r4,64
 800df14:	2085c83a 	sub	r2,r4,r2
 800df18:	2884983a 	sll	r2,r5,r2
 800df1c:	118cb03a 	or	r6,r2,r6
 800df20:	300cc03a 	cmpne	r6,r6,zero
 800df24:	4992b03a 	or	r9,r9,r6
 800df28:	0005883a 	mov	r2,zero
 800df2c:	003f1206 	br	800db78 <__subdf3+0x26c>
 800df30:	0101ffc4 	movi	r4,2047
 800df34:	493f9c1e 	bne	r9,r4,800dda8 <__subdf3+0x49c>
 800df38:	2807883a 	mov	r3,r5
 800df3c:	3023883a 	mov	r17,r6
 800df40:	4821883a 	mov	r16,r9
 800df44:	3825883a 	mov	r18,r7
 800df48:	003e9106 	br	800d990 <__subdf3+0x84>
 800df4c:	80001f1e 	bne	r16,zero,800dfcc <__subdf3+0x6c0>
 800df50:	1c48b03a 	or	r4,r3,r17
 800df54:	20005a26 	beq	r4,zero,800e0c0 <__subdf3+0x7b4>
 800df58:	0084303a 	nor	r2,zero,r2
 800df5c:	1000561e 	bne	r2,zero,800e0b8 <__subdf3+0x7ac>
 800df60:	89a3883a 	add	r17,r17,r6
 800df64:	1945883a 	add	r2,r3,r5
 800df68:	898d803a 	cmpltu	r6,r17,r6
 800df6c:	3087883a 	add	r3,r6,r2
 800df70:	4821883a 	mov	r16,r9
 800df74:	003f0506 	br	800db8c <__subdf3+0x280>
 800df78:	10002b1e 	bne	r2,zero,800e028 <__subdf3+0x71c>
 800df7c:	2984b03a 	or	r2,r5,r6
 800df80:	10008026 	beq	r2,zero,800e184 <__subdf3+0x878>
 800df84:	2807883a 	mov	r3,r5
 800df88:	3023883a 	mov	r17,r6
 800df8c:	3825883a 	mov	r18,r7
 800df90:	0401ffc4 	movi	r16,2047
 800df94:	003e7e06 	br	800d990 <__subdf3+0x84>
 800df98:	3809883a 	mov	r4,r7
 800df9c:	0011883a 	mov	r8,zero
 800dfa0:	0005883a 	mov	r2,zero
 800dfa4:	003ee306 	br	800db34 <__subdf3+0x228>
 800dfa8:	1c62b03a 	or	r17,r3,r17
 800dfac:	8822c03a 	cmpne	r17,r17,zero
 800dfb0:	0005883a 	mov	r2,zero
 800dfb4:	003f8906 	br	800dddc <__subdf3+0x4d0>
 800dfb8:	3809883a 	mov	r4,r7
 800dfbc:	4821883a 	mov	r16,r9
 800dfc0:	0011883a 	mov	r8,zero
 800dfc4:	0005883a 	mov	r2,zero
 800dfc8:	003eda06 	br	800db34 <__subdf3+0x228>
 800dfcc:	0101ffc4 	movi	r4,2047
 800dfd0:	49003b26 	beq	r9,r4,800e0c0 <__subdf3+0x7b4>
 800dfd4:	0085c83a 	sub	r2,zero,r2
 800dfd8:	18c02034 	orhi	r3,r3,128
 800dfdc:	01000e04 	movi	r4,56
 800dfe0:	20806e16 	blt	r4,r2,800e19c <__subdf3+0x890>
 800dfe4:	010007c4 	movi	r4,31
 800dfe8:	20807716 	blt	r4,r2,800e1c8 <__subdf3+0x8bc>
 800dfec:	01000804 	movi	r4,32
 800dff0:	2089c83a 	sub	r4,r4,r2
 800dff4:	1914983a 	sll	r10,r3,r4
 800dff8:	8890d83a 	srl	r8,r17,r2
 800dffc:	8908983a 	sll	r4,r17,r4
 800e000:	1884d83a 	srl	r2,r3,r2
 800e004:	5222b03a 	or	r17,r10,r8
 800e008:	2006c03a 	cmpne	r3,r4,zero
 800e00c:	88e2b03a 	or	r17,r17,r3
 800e010:	89a3883a 	add	r17,r17,r6
 800e014:	1145883a 	add	r2,r2,r5
 800e018:	898d803a 	cmpltu	r6,r17,r6
 800e01c:	3087883a 	add	r3,r6,r2
 800e020:	4821883a 	mov	r16,r9
 800e024:	003ed906 	br	800db8c <__subdf3+0x280>
 800e028:	2984b03a 	or	r2,r5,r6
 800e02c:	10004226 	beq	r2,zero,800e138 <__subdf3+0x82c>
 800e030:	1808d0fa 	srli	r4,r3,3
 800e034:	8822d0fa 	srli	r17,r17,3
 800e038:	1806977a 	slli	r3,r3,29
 800e03c:	2080022c 	andhi	r2,r4,8
 800e040:	1c62b03a 	or	r17,r3,r17
 800e044:	10000826 	beq	r2,zero,800e068 <__subdf3+0x75c>
 800e048:	2812d0fa 	srli	r9,r5,3
 800e04c:	4880022c 	andhi	r2,r9,8
 800e050:	1000051e 	bne	r2,zero,800e068 <__subdf3+0x75c>
 800e054:	300cd0fa 	srli	r6,r6,3
 800e058:	2804977a 	slli	r2,r5,29
 800e05c:	4809883a 	mov	r4,r9
 800e060:	3825883a 	mov	r18,r7
 800e064:	11a2b03a 	or	r17,r2,r6
 800e068:	8806d77a 	srli	r3,r17,29
 800e06c:	200890fa 	slli	r4,r4,3
 800e070:	882290fa 	slli	r17,r17,3
 800e074:	0401ffc4 	movi	r16,2047
 800e078:	1906b03a 	or	r3,r3,r4
 800e07c:	003e4406 	br	800d990 <__subdf3+0x84>
 800e080:	2984b03a 	or	r2,r5,r6
 800e084:	103e4226 	beq	r2,zero,800d990 <__subdf3+0x84>
 800e088:	8989c83a 	sub	r4,r17,r6
 800e08c:	8911803a 	cmpltu	r8,r17,r4
 800e090:	1945c83a 	sub	r2,r3,r5
 800e094:	1205c83a 	sub	r2,r2,r8
 800e098:	1200202c 	andhi	r8,r2,128
 800e09c:	403e9a26 	beq	r8,zero,800db08 <__subdf3+0x1fc>
 800e0a0:	3463c83a 	sub	r17,r6,r17
 800e0a4:	28c5c83a 	sub	r2,r5,r3
 800e0a8:	344d803a 	cmpltu	r6,r6,r17
 800e0ac:	1187c83a 	sub	r3,r2,r6
 800e0b0:	3825883a 	mov	r18,r7
 800e0b4:	003e3606 	br	800d990 <__subdf3+0x84>
 800e0b8:	0101ffc4 	movi	r4,2047
 800e0bc:	493fc71e 	bne	r9,r4,800dfdc <__subdf3+0x6d0>
 800e0c0:	2807883a 	mov	r3,r5
 800e0c4:	3023883a 	mov	r17,r6
 800e0c8:	4821883a 	mov	r16,r9
 800e0cc:	003e3006 	br	800d990 <__subdf3+0x84>
 800e0d0:	10003626 	beq	r2,zero,800e1ac <__subdf3+0x8a0>
 800e0d4:	2984b03a 	or	r2,r5,r6
 800e0d8:	10001726 	beq	r2,zero,800e138 <__subdf3+0x82c>
 800e0dc:	1808d0fa 	srli	r4,r3,3
 800e0e0:	8822d0fa 	srli	r17,r17,3
 800e0e4:	1806977a 	slli	r3,r3,29
 800e0e8:	2080022c 	andhi	r2,r4,8
 800e0ec:	1c62b03a 	or	r17,r3,r17
 800e0f0:	10000726 	beq	r2,zero,800e110 <__subdf3+0x804>
 800e0f4:	2812d0fa 	srli	r9,r5,3
 800e0f8:	4880022c 	andhi	r2,r9,8
 800e0fc:	1000041e 	bne	r2,zero,800e110 <__subdf3+0x804>
 800e100:	300cd0fa 	srli	r6,r6,3
 800e104:	2804977a 	slli	r2,r5,29
 800e108:	4809883a 	mov	r4,r9
 800e10c:	11a2b03a 	or	r17,r2,r6
 800e110:	8806d77a 	srli	r3,r17,29
 800e114:	200890fa 	slli	r4,r4,3
 800e118:	882290fa 	slli	r17,r17,3
 800e11c:	3825883a 	mov	r18,r7
 800e120:	1906b03a 	or	r3,r3,r4
 800e124:	0401ffc4 	movi	r16,2047
 800e128:	003e1906 	br	800d990 <__subdf3+0x84>
 800e12c:	000b883a 	mov	r5,zero
 800e130:	0005883a 	mov	r2,zero
 800e134:	003e2e06 	br	800d9f0 <__subdf3+0xe4>
 800e138:	0401ffc4 	movi	r16,2047
 800e13c:	003e1406 	br	800d990 <__subdf3+0x84>
 800e140:	0005883a 	mov	r2,zero
 800e144:	003f7506 	br	800df1c <__subdf3+0x610>
 800e148:	0005883a 	mov	r2,zero
 800e14c:	0009883a 	mov	r4,zero
 800e150:	003e7806 	br	800db34 <__subdf3+0x228>
 800e154:	123ff804 	addi	r8,r2,-32
 800e158:	01000804 	movi	r4,32
 800e15c:	1a10d83a 	srl	r8,r3,r8
 800e160:	11002526 	beq	r2,r4,800e1f8 <__subdf3+0x8ec>
 800e164:	01001004 	movi	r4,64
 800e168:	2085c83a 	sub	r2,r4,r2
 800e16c:	1884983a 	sll	r2,r3,r2
 800e170:	1444b03a 	or	r2,r2,r17
 800e174:	1004c03a 	cmpne	r2,r2,zero
 800e178:	40a2b03a 	or	r17,r8,r2
 800e17c:	0005883a 	mov	r2,zero
 800e180:	003f1606 	br	800dddc <__subdf3+0x4d0>
 800e184:	02000434 	movhi	r8,16
 800e188:	0009883a 	mov	r4,zero
 800e18c:	423fffc4 	addi	r8,r8,-1
 800e190:	00bfffc4 	movi	r2,-1
 800e194:	0401ffc4 	movi	r16,2047
 800e198:	003e6606 	br	800db34 <__subdf3+0x228>
 800e19c:	1c62b03a 	or	r17,r3,r17
 800e1a0:	8822c03a 	cmpne	r17,r17,zero
 800e1a4:	0005883a 	mov	r2,zero
 800e1a8:	003f9906 	br	800e010 <__subdf3+0x704>
 800e1ac:	2807883a 	mov	r3,r5
 800e1b0:	3023883a 	mov	r17,r6
 800e1b4:	0401ffc4 	movi	r16,2047
 800e1b8:	003df506 	br	800d990 <__subdf3+0x84>
 800e1bc:	2807883a 	mov	r3,r5
 800e1c0:	3023883a 	mov	r17,r6
 800e1c4:	003df206 	br	800d990 <__subdf3+0x84>
 800e1c8:	123ff804 	addi	r8,r2,-32
 800e1cc:	01000804 	movi	r4,32
 800e1d0:	1a10d83a 	srl	r8,r3,r8
 800e1d4:	11000a26 	beq	r2,r4,800e200 <__subdf3+0x8f4>
 800e1d8:	01001004 	movi	r4,64
 800e1dc:	2085c83a 	sub	r2,r4,r2
 800e1e0:	1884983a 	sll	r2,r3,r2
 800e1e4:	1444b03a 	or	r2,r2,r17
 800e1e8:	1004c03a 	cmpne	r2,r2,zero
 800e1ec:	40a2b03a 	or	r17,r8,r2
 800e1f0:	0005883a 	mov	r2,zero
 800e1f4:	003f8606 	br	800e010 <__subdf3+0x704>
 800e1f8:	0005883a 	mov	r2,zero
 800e1fc:	003fdc06 	br	800e170 <__subdf3+0x864>
 800e200:	0005883a 	mov	r2,zero
 800e204:	003ff706 	br	800e1e4 <__subdf3+0x8d8>

0800e208 <__fixdfsi>:
 800e208:	280cd53a 	srli	r6,r5,20
 800e20c:	00c00434 	movhi	r3,16
 800e210:	18ffffc4 	addi	r3,r3,-1
 800e214:	3181ffcc 	andi	r6,r6,2047
 800e218:	01c0ff84 	movi	r7,1022
 800e21c:	28c6703a 	and	r3,r5,r3
 800e220:	280ad7fa 	srli	r5,r5,31
 800e224:	3980120e 	bge	r7,r6,800e270 <__fixdfsi+0x68>
 800e228:	00810744 	movi	r2,1053
 800e22c:	11800c16 	blt	r2,r6,800e260 <__fixdfsi+0x58>
 800e230:	00810cc4 	movi	r2,1075
 800e234:	1185c83a 	sub	r2,r2,r6
 800e238:	01c007c4 	movi	r7,31
 800e23c:	18c00434 	orhi	r3,r3,16
 800e240:	38800d16 	blt	r7,r2,800e278 <__fixdfsi+0x70>
 800e244:	31befb44 	addi	r6,r6,-1043
 800e248:	2084d83a 	srl	r2,r4,r2
 800e24c:	1986983a 	sll	r3,r3,r6
 800e250:	1884b03a 	or	r2,r3,r2
 800e254:	28000726 	beq	r5,zero,800e274 <__fixdfsi+0x6c>
 800e258:	0085c83a 	sub	r2,zero,r2
 800e25c:	f800283a 	ret
 800e260:	00a00034 	movhi	r2,32768
 800e264:	10bfffc4 	addi	r2,r2,-1
 800e268:	2885883a 	add	r2,r5,r2
 800e26c:	f800283a 	ret
 800e270:	0005883a 	mov	r2,zero
 800e274:	f800283a 	ret
 800e278:	008104c4 	movi	r2,1043
 800e27c:	1185c83a 	sub	r2,r2,r6
 800e280:	1884d83a 	srl	r2,r3,r2
 800e284:	003ff306 	br	800e254 <__fixdfsi+0x4c>

0800e288 <__floatsidf>:
 800e288:	defffd04 	addi	sp,sp,-12
 800e28c:	dfc00215 	stw	ra,8(sp)
 800e290:	dc400115 	stw	r17,4(sp)
 800e294:	dc000015 	stw	r16,0(sp)
 800e298:	20002b26 	beq	r4,zero,800e348 <__floatsidf+0xc0>
 800e29c:	2023883a 	mov	r17,r4
 800e2a0:	2020d7fa 	srli	r16,r4,31
 800e2a4:	20002d16 	blt	r4,zero,800e35c <__floatsidf+0xd4>
 800e2a8:	8809883a 	mov	r4,r17
 800e2ac:	8001aec0 	call	8001aec <__clzsi2>
 800e2b0:	01410784 	movi	r5,1054
 800e2b4:	288bc83a 	sub	r5,r5,r2
 800e2b8:	01010cc4 	movi	r4,1075
 800e2bc:	2149c83a 	sub	r4,r4,r5
 800e2c0:	00c007c4 	movi	r3,31
 800e2c4:	1900160e 	bge	r3,r4,800e320 <__floatsidf+0x98>
 800e2c8:	00c104c4 	movi	r3,1043
 800e2cc:	1947c83a 	sub	r3,r3,r5
 800e2d0:	88c6983a 	sll	r3,r17,r3
 800e2d4:	00800434 	movhi	r2,16
 800e2d8:	10bfffc4 	addi	r2,r2,-1
 800e2dc:	1886703a 	and	r3,r3,r2
 800e2e0:	2941ffcc 	andi	r5,r5,2047
 800e2e4:	800d883a 	mov	r6,r16
 800e2e8:	0005883a 	mov	r2,zero
 800e2ec:	280a953a 	slli	r5,r5,20
 800e2f0:	31803fcc 	andi	r6,r6,255
 800e2f4:	01000434 	movhi	r4,16
 800e2f8:	300c97fa 	slli	r6,r6,31
 800e2fc:	213fffc4 	addi	r4,r4,-1
 800e300:	1906703a 	and	r3,r3,r4
 800e304:	1946b03a 	or	r3,r3,r5
 800e308:	1986b03a 	or	r3,r3,r6
 800e30c:	dfc00217 	ldw	ra,8(sp)
 800e310:	dc400117 	ldw	r17,4(sp)
 800e314:	dc000017 	ldw	r16,0(sp)
 800e318:	dec00304 	addi	sp,sp,12
 800e31c:	f800283a 	ret
 800e320:	00c002c4 	movi	r3,11
 800e324:	1887c83a 	sub	r3,r3,r2
 800e328:	88c6d83a 	srl	r3,r17,r3
 800e32c:	8904983a 	sll	r2,r17,r4
 800e330:	01000434 	movhi	r4,16
 800e334:	213fffc4 	addi	r4,r4,-1
 800e338:	2941ffcc 	andi	r5,r5,2047
 800e33c:	1906703a 	and	r3,r3,r4
 800e340:	800d883a 	mov	r6,r16
 800e344:	003fe906 	br	800e2ec <__floatsidf+0x64>
 800e348:	000d883a 	mov	r6,zero
 800e34c:	000b883a 	mov	r5,zero
 800e350:	0007883a 	mov	r3,zero
 800e354:	0005883a 	mov	r2,zero
 800e358:	003fe406 	br	800e2ec <__floatsidf+0x64>
 800e35c:	0123c83a 	sub	r17,zero,r4
 800e360:	003fd106 	br	800e2a8 <__floatsidf+0x20>

0800e364 <__floatunsidf>:
 800e364:	defffe04 	addi	sp,sp,-8
 800e368:	dc000015 	stw	r16,0(sp)
 800e36c:	dfc00115 	stw	ra,4(sp)
 800e370:	2021883a 	mov	r16,r4
 800e374:	20002226 	beq	r4,zero,800e400 <__floatunsidf+0x9c>
 800e378:	8001aec0 	call	8001aec <__clzsi2>
 800e37c:	01010784 	movi	r4,1054
 800e380:	2089c83a 	sub	r4,r4,r2
 800e384:	01810cc4 	movi	r6,1075
 800e388:	310dc83a 	sub	r6,r6,r4
 800e38c:	00c007c4 	movi	r3,31
 800e390:	1980120e 	bge	r3,r6,800e3dc <__floatunsidf+0x78>
 800e394:	00c104c4 	movi	r3,1043
 800e398:	1907c83a 	sub	r3,r3,r4
 800e39c:	80ca983a 	sll	r5,r16,r3
 800e3a0:	00800434 	movhi	r2,16
 800e3a4:	10bfffc4 	addi	r2,r2,-1
 800e3a8:	2101ffcc 	andi	r4,r4,2047
 800e3ac:	0021883a 	mov	r16,zero
 800e3b0:	288a703a 	and	r5,r5,r2
 800e3b4:	2008953a 	slli	r4,r4,20
 800e3b8:	00c00434 	movhi	r3,16
 800e3bc:	18ffffc4 	addi	r3,r3,-1
 800e3c0:	28c6703a 	and	r3,r5,r3
 800e3c4:	8005883a 	mov	r2,r16
 800e3c8:	1906b03a 	or	r3,r3,r4
 800e3cc:	dfc00117 	ldw	ra,4(sp)
 800e3d0:	dc000017 	ldw	r16,0(sp)
 800e3d4:	dec00204 	addi	sp,sp,8
 800e3d8:	f800283a 	ret
 800e3dc:	00c002c4 	movi	r3,11
 800e3e0:	188bc83a 	sub	r5,r3,r2
 800e3e4:	814ad83a 	srl	r5,r16,r5
 800e3e8:	00c00434 	movhi	r3,16
 800e3ec:	18ffffc4 	addi	r3,r3,-1
 800e3f0:	81a0983a 	sll	r16,r16,r6
 800e3f4:	2101ffcc 	andi	r4,r4,2047
 800e3f8:	28ca703a 	and	r5,r5,r3
 800e3fc:	003fed06 	br	800e3b4 <__floatunsidf+0x50>
 800e400:	0009883a 	mov	r4,zero
 800e404:	000b883a 	mov	r5,zero
 800e408:	003fea06 	br	800e3b4 <__floatunsidf+0x50>

0800e40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e40c:	defffe04 	addi	sp,sp,-8
 800e410:	dfc00115 	stw	ra,4(sp)
 800e414:	df000015 	stw	fp,0(sp)
 800e418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e41c:	d0a00f17 	ldw	r2,-32708(gp)
 800e420:	10000326 	beq	r2,zero,800e430 <alt_get_errno+0x24>
 800e424:	d0a00f17 	ldw	r2,-32708(gp)
 800e428:	103ee83a 	callr	r2
 800e42c:	00000106 	br	800e434 <alt_get_errno+0x28>
 800e430:	d0a6dc04 	addi	r2,gp,-25744
}
 800e434:	e037883a 	mov	sp,fp
 800e438:	dfc00117 	ldw	ra,4(sp)
 800e43c:	df000017 	ldw	fp,0(sp)
 800e440:	dec00204 	addi	sp,sp,8
 800e444:	f800283a 	ret

0800e448 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e448:	defffb04 	addi	sp,sp,-20
 800e44c:	dfc00415 	stw	ra,16(sp)
 800e450:	df000315 	stw	fp,12(sp)
 800e454:	df000304 	addi	fp,sp,12
 800e458:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e45c:	e0bfff17 	ldw	r2,-4(fp)
 800e460:	10000616 	blt	r2,zero,800e47c <close+0x34>
 800e464:	e0bfff17 	ldw	r2,-4(fp)
 800e468:	10c00324 	muli	r3,r2,12
 800e46c:	00820074 	movhi	r2,2049
 800e470:	10861504 	addi	r2,r2,6228
 800e474:	1885883a 	add	r2,r3,r2
 800e478:	00000106 	br	800e480 <close+0x38>
 800e47c:	0005883a 	mov	r2,zero
 800e480:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e484:	e0bffd17 	ldw	r2,-12(fp)
 800e488:	10001926 	beq	r2,zero,800e4f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e48c:	e0bffd17 	ldw	r2,-12(fp)
 800e490:	10800017 	ldw	r2,0(r2)
 800e494:	10800417 	ldw	r2,16(r2)
 800e498:	10000626 	beq	r2,zero,800e4b4 <close+0x6c>
 800e49c:	e0bffd17 	ldw	r2,-12(fp)
 800e4a0:	10800017 	ldw	r2,0(r2)
 800e4a4:	10800417 	ldw	r2,16(r2)
 800e4a8:	e13ffd17 	ldw	r4,-12(fp)
 800e4ac:	103ee83a 	callr	r2
 800e4b0:	00000106 	br	800e4b8 <close+0x70>
 800e4b4:	0005883a 	mov	r2,zero
 800e4b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e4bc:	e13fff17 	ldw	r4,-4(fp)
 800e4c0:	800eb080 	call	800eb08 <alt_release_fd>
    if (rval < 0)
 800e4c4:	e0bffe17 	ldw	r2,-8(fp)
 800e4c8:	1000070e 	bge	r2,zero,800e4e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800e4cc:	800e40c0 	call	800e40c <alt_get_errno>
 800e4d0:	1007883a 	mov	r3,r2
 800e4d4:	e0bffe17 	ldw	r2,-8(fp)
 800e4d8:	0085c83a 	sub	r2,zero,r2
 800e4dc:	18800015 	stw	r2,0(r3)
      return -1;
 800e4e0:	00bfffc4 	movi	r2,-1
 800e4e4:	00000706 	br	800e504 <close+0xbc>
    }
    return 0;
 800e4e8:	0005883a 	mov	r2,zero
 800e4ec:	00000506 	br	800e504 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e4f0:	800e40c0 	call	800e40c <alt_get_errno>
 800e4f4:	1007883a 	mov	r3,r2
 800e4f8:	00801444 	movi	r2,81
 800e4fc:	18800015 	stw	r2,0(r3)
    return -1;
 800e500:	00bfffc4 	movi	r2,-1
  }
}
 800e504:	e037883a 	mov	sp,fp
 800e508:	dfc00117 	ldw	ra,4(sp)
 800e50c:	df000017 	ldw	fp,0(sp)
 800e510:	dec00204 	addi	sp,sp,8
 800e514:	f800283a 	ret

0800e518 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e518:	defffc04 	addi	sp,sp,-16
 800e51c:	df000315 	stw	fp,12(sp)
 800e520:	df000304 	addi	fp,sp,12
 800e524:	e13ffd15 	stw	r4,-12(fp)
 800e528:	e17ffe15 	stw	r5,-8(fp)
 800e52c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e530:	e0bfff17 	ldw	r2,-4(fp)
}
 800e534:	e037883a 	mov	sp,fp
 800e538:	df000017 	ldw	fp,0(sp)
 800e53c:	dec00104 	addi	sp,sp,4
 800e540:	f800283a 	ret

0800e544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e544:	defffe04 	addi	sp,sp,-8
 800e548:	dfc00115 	stw	ra,4(sp)
 800e54c:	df000015 	stw	fp,0(sp)
 800e550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e554:	d0a00f17 	ldw	r2,-32708(gp)
 800e558:	10000326 	beq	r2,zero,800e568 <alt_get_errno+0x24>
 800e55c:	d0a00f17 	ldw	r2,-32708(gp)
 800e560:	103ee83a 	callr	r2
 800e564:	00000106 	br	800e56c <alt_get_errno+0x28>
 800e568:	d0a6dc04 	addi	r2,gp,-25744
}
 800e56c:	e037883a 	mov	sp,fp
 800e570:	dfc00117 	ldw	ra,4(sp)
 800e574:	df000017 	ldw	fp,0(sp)
 800e578:	dec00204 	addi	sp,sp,8
 800e57c:	f800283a 	ret

0800e580 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e580:	defffb04 	addi	sp,sp,-20
 800e584:	dfc00415 	stw	ra,16(sp)
 800e588:	df000315 	stw	fp,12(sp)
 800e58c:	df000304 	addi	fp,sp,12
 800e590:	e13ffe15 	stw	r4,-8(fp)
 800e594:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e598:	e0bffe17 	ldw	r2,-8(fp)
 800e59c:	10000616 	blt	r2,zero,800e5b8 <fstat+0x38>
 800e5a0:	e0bffe17 	ldw	r2,-8(fp)
 800e5a4:	10c00324 	muli	r3,r2,12
 800e5a8:	00820074 	movhi	r2,2049
 800e5ac:	10861504 	addi	r2,r2,6228
 800e5b0:	1885883a 	add	r2,r3,r2
 800e5b4:	00000106 	br	800e5bc <fstat+0x3c>
 800e5b8:	0005883a 	mov	r2,zero
 800e5bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800e5c0:	e0bffd17 	ldw	r2,-12(fp)
 800e5c4:	10001026 	beq	r2,zero,800e608 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e5c8:	e0bffd17 	ldw	r2,-12(fp)
 800e5cc:	10800017 	ldw	r2,0(r2)
 800e5d0:	10800817 	ldw	r2,32(r2)
 800e5d4:	10000726 	beq	r2,zero,800e5f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800e5d8:	e0bffd17 	ldw	r2,-12(fp)
 800e5dc:	10800017 	ldw	r2,0(r2)
 800e5e0:	10800817 	ldw	r2,32(r2)
 800e5e4:	e17fff17 	ldw	r5,-4(fp)
 800e5e8:	e13ffd17 	ldw	r4,-12(fp)
 800e5ec:	103ee83a 	callr	r2
 800e5f0:	00000a06 	br	800e61c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e5f4:	e0bfff17 	ldw	r2,-4(fp)
 800e5f8:	00c80004 	movi	r3,8192
 800e5fc:	10c00115 	stw	r3,4(r2)
      return 0;
 800e600:	0005883a 	mov	r2,zero
 800e604:	00000506 	br	800e61c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e608:	800e5440 	call	800e544 <alt_get_errno>
 800e60c:	1007883a 	mov	r3,r2
 800e610:	00801444 	movi	r2,81
 800e614:	18800015 	stw	r2,0(r3)
    return -1;
 800e618:	00bfffc4 	movi	r2,-1
  }
}
 800e61c:	e037883a 	mov	sp,fp
 800e620:	dfc00117 	ldw	ra,4(sp)
 800e624:	df000017 	ldw	fp,0(sp)
 800e628:	dec00204 	addi	sp,sp,8
 800e62c:	f800283a 	ret

0800e630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e630:	defffe04 	addi	sp,sp,-8
 800e634:	dfc00115 	stw	ra,4(sp)
 800e638:	df000015 	stw	fp,0(sp)
 800e63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e640:	d0a00f17 	ldw	r2,-32708(gp)
 800e644:	10000326 	beq	r2,zero,800e654 <alt_get_errno+0x24>
 800e648:	d0a00f17 	ldw	r2,-32708(gp)
 800e64c:	103ee83a 	callr	r2
 800e650:	00000106 	br	800e658 <alt_get_errno+0x28>
 800e654:	d0a6dc04 	addi	r2,gp,-25744
}
 800e658:	e037883a 	mov	sp,fp
 800e65c:	dfc00117 	ldw	ra,4(sp)
 800e660:	df000017 	ldw	fp,0(sp)
 800e664:	dec00204 	addi	sp,sp,8
 800e668:	f800283a 	ret

0800e66c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800e66c:	deffed04 	addi	sp,sp,-76
 800e670:	dfc01215 	stw	ra,72(sp)
 800e674:	df001115 	stw	fp,68(sp)
 800e678:	df001104 	addi	fp,sp,68
 800e67c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e680:	e0bfff17 	ldw	r2,-4(fp)
 800e684:	10000616 	blt	r2,zero,800e6a0 <isatty+0x34>
 800e688:	e0bfff17 	ldw	r2,-4(fp)
 800e68c:	10c00324 	muli	r3,r2,12
 800e690:	00820074 	movhi	r2,2049
 800e694:	10861504 	addi	r2,r2,6228
 800e698:	1885883a 	add	r2,r3,r2
 800e69c:	00000106 	br	800e6a4 <isatty+0x38>
 800e6a0:	0005883a 	mov	r2,zero
 800e6a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800e6a8:	e0bfef17 	ldw	r2,-68(fp)
 800e6ac:	10000e26 	beq	r2,zero,800e6e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800e6b0:	e0bfef17 	ldw	r2,-68(fp)
 800e6b4:	10800017 	ldw	r2,0(r2)
 800e6b8:	10800817 	ldw	r2,32(r2)
 800e6bc:	1000021e 	bne	r2,zero,800e6c8 <isatty+0x5c>
    {
      return 1;
 800e6c0:	00800044 	movi	r2,1
 800e6c4:	00000d06 	br	800e6fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800e6c8:	e0bff004 	addi	r2,fp,-64
 800e6cc:	100b883a 	mov	r5,r2
 800e6d0:	e13fff17 	ldw	r4,-4(fp)
 800e6d4:	800e5800 	call	800e580 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800e6d8:	e0bff117 	ldw	r2,-60(fp)
 800e6dc:	10880020 	cmpeqi	r2,r2,8192
 800e6e0:	10803fcc 	andi	r2,r2,255
 800e6e4:	00000506 	br	800e6fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e6e8:	800e6300 	call	800e630 <alt_get_errno>
 800e6ec:	1007883a 	mov	r3,r2
 800e6f0:	00801444 	movi	r2,81
 800e6f4:	18800015 	stw	r2,0(r3)
    return 0;
 800e6f8:	0005883a 	mov	r2,zero
  }
}
 800e6fc:	e037883a 	mov	sp,fp
 800e700:	dfc00117 	ldw	ra,4(sp)
 800e704:	df000017 	ldw	fp,0(sp)
 800e708:	dec00204 	addi	sp,sp,8
 800e70c:	f800283a 	ret

0800e710 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800e710:	defffc04 	addi	sp,sp,-16
 800e714:	df000315 	stw	fp,12(sp)
 800e718:	df000304 	addi	fp,sp,12
 800e71c:	e13ffd15 	stw	r4,-12(fp)
 800e720:	e17ffe15 	stw	r5,-8(fp)
 800e724:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800e728:	e0fffe17 	ldw	r3,-8(fp)
 800e72c:	e0bffd17 	ldw	r2,-12(fp)
 800e730:	18800c26 	beq	r3,r2,800e764 <alt_load_section+0x54>
  {
    while( to != end )
 800e734:	00000806 	br	800e758 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800e738:	e0bffe17 	ldw	r2,-8(fp)
 800e73c:	10c00104 	addi	r3,r2,4
 800e740:	e0fffe15 	stw	r3,-8(fp)
 800e744:	e0fffd17 	ldw	r3,-12(fp)
 800e748:	19000104 	addi	r4,r3,4
 800e74c:	e13ffd15 	stw	r4,-12(fp)
 800e750:	18c00017 	ldw	r3,0(r3)
 800e754:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800e758:	e0fffe17 	ldw	r3,-8(fp)
 800e75c:	e0bfff17 	ldw	r2,-4(fp)
 800e760:	18bff51e 	bne	r3,r2,800e738 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800e764:	0001883a 	nop
 800e768:	e037883a 	mov	sp,fp
 800e76c:	df000017 	ldw	fp,0(sp)
 800e770:	dec00104 	addi	sp,sp,4
 800e774:	f800283a 	ret

0800e778 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800e778:	defffe04 	addi	sp,sp,-8
 800e77c:	dfc00115 	stw	ra,4(sp)
 800e780:	df000015 	stw	fp,0(sp)
 800e784:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800e788:	01820074 	movhi	r6,2049
 800e78c:	318aa104 	addi	r6,r6,10884
 800e790:	01420074 	movhi	r5,2049
 800e794:	2943e204 	addi	r5,r5,3976
 800e798:	01020074 	movhi	r4,2049
 800e79c:	210aa104 	addi	r4,r4,10884
 800e7a0:	800e7100 	call	800e710 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800e7a4:	01820034 	movhi	r6,2048
 800e7a8:	31809104 	addi	r6,r6,580
 800e7ac:	01420034 	movhi	r5,2048
 800e7b0:	29400804 	addi	r5,r5,32
 800e7b4:	01020034 	movhi	r4,2048
 800e7b8:	21000804 	addi	r4,r4,32
 800e7bc:	800e7100 	call	800e710 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800e7c0:	01820074 	movhi	r6,2049
 800e7c4:	3183e204 	addi	r6,r6,3976
 800e7c8:	01420074 	movhi	r5,2049
 800e7cc:	29431104 	addi	r5,r5,3140
 800e7d0:	01020074 	movhi	r4,2049
 800e7d4:	21031104 	addi	r4,r4,3140
 800e7d8:	800e7100 	call	800e710 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800e7dc:	800fb300 	call	800fb30 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800e7e0:	800fd180 	call	800fd18 <alt_icache_flush_all>
}
 800e7e4:	0001883a 	nop
 800e7e8:	e037883a 	mov	sp,fp
 800e7ec:	dfc00117 	ldw	ra,4(sp)
 800e7f0:	df000017 	ldw	fp,0(sp)
 800e7f4:	dec00204 	addi	sp,sp,8
 800e7f8:	f800283a 	ret

0800e7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e7fc:	defffe04 	addi	sp,sp,-8
 800e800:	dfc00115 	stw	ra,4(sp)
 800e804:	df000015 	stw	fp,0(sp)
 800e808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e80c:	d0a00f17 	ldw	r2,-32708(gp)
 800e810:	10000326 	beq	r2,zero,800e820 <alt_get_errno+0x24>
 800e814:	d0a00f17 	ldw	r2,-32708(gp)
 800e818:	103ee83a 	callr	r2
 800e81c:	00000106 	br	800e824 <alt_get_errno+0x28>
 800e820:	d0a6dc04 	addi	r2,gp,-25744
}
 800e824:	e037883a 	mov	sp,fp
 800e828:	dfc00117 	ldw	ra,4(sp)
 800e82c:	df000017 	ldw	fp,0(sp)
 800e830:	dec00204 	addi	sp,sp,8
 800e834:	f800283a 	ret

0800e838 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800e838:	defff904 	addi	sp,sp,-28
 800e83c:	dfc00615 	stw	ra,24(sp)
 800e840:	df000515 	stw	fp,20(sp)
 800e844:	df000504 	addi	fp,sp,20
 800e848:	e13ffd15 	stw	r4,-12(fp)
 800e84c:	e17ffe15 	stw	r5,-8(fp)
 800e850:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800e854:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e858:	e0bffd17 	ldw	r2,-12(fp)
 800e85c:	10000616 	blt	r2,zero,800e878 <lseek+0x40>
 800e860:	e0bffd17 	ldw	r2,-12(fp)
 800e864:	10c00324 	muli	r3,r2,12
 800e868:	00820074 	movhi	r2,2049
 800e86c:	10861504 	addi	r2,r2,6228
 800e870:	1885883a 	add	r2,r3,r2
 800e874:	00000106 	br	800e87c <lseek+0x44>
 800e878:	0005883a 	mov	r2,zero
 800e87c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800e880:	e0bffc17 	ldw	r2,-16(fp)
 800e884:	10001026 	beq	r2,zero,800e8c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800e888:	e0bffc17 	ldw	r2,-16(fp)
 800e88c:	10800017 	ldw	r2,0(r2)
 800e890:	10800717 	ldw	r2,28(r2)
 800e894:	10000926 	beq	r2,zero,800e8bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800e898:	e0bffc17 	ldw	r2,-16(fp)
 800e89c:	10800017 	ldw	r2,0(r2)
 800e8a0:	10800717 	ldw	r2,28(r2)
 800e8a4:	e1bfff17 	ldw	r6,-4(fp)
 800e8a8:	e17ffe17 	ldw	r5,-8(fp)
 800e8ac:	e13ffc17 	ldw	r4,-16(fp)
 800e8b0:	103ee83a 	callr	r2
 800e8b4:	e0bffb15 	stw	r2,-20(fp)
 800e8b8:	00000506 	br	800e8d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800e8bc:	00bfde84 	movi	r2,-134
 800e8c0:	e0bffb15 	stw	r2,-20(fp)
 800e8c4:	00000206 	br	800e8d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800e8c8:	00bfebc4 	movi	r2,-81
 800e8cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800e8d0:	e0bffb17 	ldw	r2,-20(fp)
 800e8d4:	1000070e 	bge	r2,zero,800e8f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800e8d8:	800e7fc0 	call	800e7fc <alt_get_errno>
 800e8dc:	1007883a 	mov	r3,r2
 800e8e0:	e0bffb17 	ldw	r2,-20(fp)
 800e8e4:	0085c83a 	sub	r2,zero,r2
 800e8e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 800e8ec:	00bfffc4 	movi	r2,-1
 800e8f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800e8f4:	e0bffb17 	ldw	r2,-20(fp)
}
 800e8f8:	e037883a 	mov	sp,fp
 800e8fc:	dfc00117 	ldw	ra,4(sp)
 800e900:	df000017 	ldw	fp,0(sp)
 800e904:	dec00204 	addi	sp,sp,8
 800e908:	f800283a 	ret

0800e90c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800e90c:	defffd04 	addi	sp,sp,-12
 800e910:	dfc00215 	stw	ra,8(sp)
 800e914:	df000115 	stw	fp,4(sp)
 800e918:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800e91c:	0009883a 	mov	r4,zero
 800e920:	800edb40 	call	800edb4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800e924:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800e928:	800edec0 	call	800edec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800e92c:	01820074 	movhi	r6,2049
 800e930:	3183d804 	addi	r6,r6,3936
 800e934:	01420074 	movhi	r5,2049
 800e938:	2943d804 	addi	r5,r5,3936
 800e93c:	01020074 	movhi	r4,2049
 800e940:	2103d804 	addi	r4,r4,3936
 800e944:	80100b00 	call	80100b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800e948:	800fc580 	call	800fc58 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800e94c:	01020074 	movhi	r4,2049
 800e950:	213f2e04 	addi	r4,r4,-840
 800e954:	80108b00 	call	80108b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800e958:	d0a6dd17 	ldw	r2,-25740(gp)
 800e95c:	d0e6de17 	ldw	r3,-25736(gp)
 800e960:	d126df17 	ldw	r4,-25732(gp)
 800e964:	200d883a 	mov	r6,r4
 800e968:	180b883a 	mov	r5,r3
 800e96c:	1009883a 	mov	r4,r2
 800e970:	80002900 	call	8000290 <main>
 800e974:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800e978:	01000044 	movi	r4,1
 800e97c:	800e4480 	call	800e448 <close>
  exit (result);
 800e980:	e13fff17 	ldw	r4,-4(fp)
 800e984:	80108c40 	call	80108c4 <exit>

0800e988 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800e988:	defffe04 	addi	sp,sp,-8
 800e98c:	df000115 	stw	fp,4(sp)
 800e990:	df000104 	addi	fp,sp,4
 800e994:	e13fff15 	stw	r4,-4(fp)
}
 800e998:	0001883a 	nop
 800e99c:	e037883a 	mov	sp,fp
 800e9a0:	df000017 	ldw	fp,0(sp)
 800e9a4:	dec00104 	addi	sp,sp,4
 800e9a8:	f800283a 	ret

0800e9ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800e9ac:	defffe04 	addi	sp,sp,-8
 800e9b0:	df000115 	stw	fp,4(sp)
 800e9b4:	df000104 	addi	fp,sp,4
 800e9b8:	e13fff15 	stw	r4,-4(fp)
}
 800e9bc:	0001883a 	nop
 800e9c0:	e037883a 	mov	sp,fp
 800e9c4:	df000017 	ldw	fp,0(sp)
 800e9c8:	dec00104 	addi	sp,sp,4
 800e9cc:	f800283a 	ret

0800e9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9d0:	defffe04 	addi	sp,sp,-8
 800e9d4:	dfc00115 	stw	ra,4(sp)
 800e9d8:	df000015 	stw	fp,0(sp)
 800e9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e9e0:	d0a00f17 	ldw	r2,-32708(gp)
 800e9e4:	10000326 	beq	r2,zero,800e9f4 <alt_get_errno+0x24>
 800e9e8:	d0a00f17 	ldw	r2,-32708(gp)
 800e9ec:	103ee83a 	callr	r2
 800e9f0:	00000106 	br	800e9f8 <alt_get_errno+0x28>
 800e9f4:	d0a6dc04 	addi	r2,gp,-25744
}
 800e9f8:	e037883a 	mov	sp,fp
 800e9fc:	dfc00117 	ldw	ra,4(sp)
 800ea00:	df000017 	ldw	fp,0(sp)
 800ea04:	dec00204 	addi	sp,sp,8
 800ea08:	f800283a 	ret

0800ea0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800ea0c:	defff904 	addi	sp,sp,-28
 800ea10:	dfc00615 	stw	ra,24(sp)
 800ea14:	df000515 	stw	fp,20(sp)
 800ea18:	df000504 	addi	fp,sp,20
 800ea1c:	e13ffd15 	stw	r4,-12(fp)
 800ea20:	e17ffe15 	stw	r5,-8(fp)
 800ea24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ea28:	e0bffd17 	ldw	r2,-12(fp)
 800ea2c:	10000616 	blt	r2,zero,800ea48 <read+0x3c>
 800ea30:	e0bffd17 	ldw	r2,-12(fp)
 800ea34:	10c00324 	muli	r3,r2,12
 800ea38:	00820074 	movhi	r2,2049
 800ea3c:	10861504 	addi	r2,r2,6228
 800ea40:	1885883a 	add	r2,r3,r2
 800ea44:	00000106 	br	800ea4c <read+0x40>
 800ea48:	0005883a 	mov	r2,zero
 800ea4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ea50:	e0bffb17 	ldw	r2,-20(fp)
 800ea54:	10002226 	beq	r2,zero,800eae0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ea58:	e0bffb17 	ldw	r2,-20(fp)
 800ea5c:	10800217 	ldw	r2,8(r2)
 800ea60:	108000cc 	andi	r2,r2,3
 800ea64:	10800060 	cmpeqi	r2,r2,1
 800ea68:	1000181e 	bne	r2,zero,800eacc <read+0xc0>
        (fd->dev->read))
 800ea6c:	e0bffb17 	ldw	r2,-20(fp)
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ea78:	10001426 	beq	r2,zero,800eacc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800ea7c:	e0bffb17 	ldw	r2,-20(fp)
 800ea80:	10800017 	ldw	r2,0(r2)
 800ea84:	10800517 	ldw	r2,20(r2)
 800ea88:	e0ffff17 	ldw	r3,-4(fp)
 800ea8c:	180d883a 	mov	r6,r3
 800ea90:	e17ffe17 	ldw	r5,-8(fp)
 800ea94:	e13ffb17 	ldw	r4,-20(fp)
 800ea98:	103ee83a 	callr	r2
 800ea9c:	e0bffc15 	stw	r2,-16(fp)
 800eaa0:	e0bffc17 	ldw	r2,-16(fp)
 800eaa4:	1000070e 	bge	r2,zero,800eac4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800eaa8:	800e9d00 	call	800e9d0 <alt_get_errno>
 800eaac:	1007883a 	mov	r3,r2
 800eab0:	e0bffc17 	ldw	r2,-16(fp)
 800eab4:	0085c83a 	sub	r2,zero,r2
 800eab8:	18800015 	stw	r2,0(r3)
          return -1;
 800eabc:	00bfffc4 	movi	r2,-1
 800eac0:	00000c06 	br	800eaf4 <read+0xe8>
        }
        return rval;
 800eac4:	e0bffc17 	ldw	r2,-16(fp)
 800eac8:	00000a06 	br	800eaf4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800eacc:	800e9d00 	call	800e9d0 <alt_get_errno>
 800ead0:	1007883a 	mov	r3,r2
 800ead4:	00800344 	movi	r2,13
 800ead8:	18800015 	stw	r2,0(r3)
 800eadc:	00000406 	br	800eaf0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800eae0:	800e9d00 	call	800e9d0 <alt_get_errno>
 800eae4:	1007883a 	mov	r3,r2
 800eae8:	00801444 	movi	r2,81
 800eaec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800eaf0:	00bfffc4 	movi	r2,-1
}
 800eaf4:	e037883a 	mov	sp,fp
 800eaf8:	dfc00117 	ldw	ra,4(sp)
 800eafc:	df000017 	ldw	fp,0(sp)
 800eb00:	dec00204 	addi	sp,sp,8
 800eb04:	f800283a 	ret

0800eb08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800eb08:	defffe04 	addi	sp,sp,-8
 800eb0c:	df000115 	stw	fp,4(sp)
 800eb10:	df000104 	addi	fp,sp,4
 800eb14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800eb18:	e0bfff17 	ldw	r2,-4(fp)
 800eb1c:	108000d0 	cmplti	r2,r2,3
 800eb20:	10000d1e 	bne	r2,zero,800eb58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800eb24:	00820074 	movhi	r2,2049
 800eb28:	10861504 	addi	r2,r2,6228
 800eb2c:	e0ffff17 	ldw	r3,-4(fp)
 800eb30:	18c00324 	muli	r3,r3,12
 800eb34:	10c5883a 	add	r2,r2,r3
 800eb38:	10800204 	addi	r2,r2,8
 800eb3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800eb40:	00820074 	movhi	r2,2049
 800eb44:	10861504 	addi	r2,r2,6228
 800eb48:	e0ffff17 	ldw	r3,-4(fp)
 800eb4c:	18c00324 	muli	r3,r3,12
 800eb50:	10c5883a 	add	r2,r2,r3
 800eb54:	10000015 	stw	zero,0(r2)
  }
}
 800eb58:	0001883a 	nop
 800eb5c:	e037883a 	mov	sp,fp
 800eb60:	df000017 	ldw	fp,0(sp)
 800eb64:	dec00104 	addi	sp,sp,4
 800eb68:	f800283a 	ret

0800eb6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800eb6c:	defff904 	addi	sp,sp,-28
 800eb70:	df000615 	stw	fp,24(sp)
 800eb74:	df000604 	addi	fp,sp,24
 800eb78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eb7c:	0005303a 	rdctl	r2,status
 800eb80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eb84:	e0fffe17 	ldw	r3,-8(fp)
 800eb88:	00bfff84 	movi	r2,-2
 800eb8c:	1884703a 	and	r2,r3,r2
 800eb90:	1001703a 	wrctl	status,r2
  
  return context;
 800eb94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800eb98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800eb9c:	d0a01017 	ldw	r2,-32704(gp)
 800eba0:	10c000c4 	addi	r3,r2,3
 800eba4:	00bfff04 	movi	r2,-4
 800eba8:	1884703a 	and	r2,r3,r2
 800ebac:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ebb0:	d0e01017 	ldw	r3,-32704(gp)
 800ebb4:	e0bfff17 	ldw	r2,-4(fp)
 800ebb8:	1887883a 	add	r3,r3,r2
 800ebbc:	00840034 	movhi	r2,4096
 800ebc0:	10800004 	addi	r2,r2,0
 800ebc4:	10c0062e 	bgeu	r2,r3,800ebe0 <sbrk+0x74>
 800ebc8:	e0bffb17 	ldw	r2,-20(fp)
 800ebcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ebd0:	e0bffa17 	ldw	r2,-24(fp)
 800ebd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ebd8:	00bfffc4 	movi	r2,-1
 800ebdc:	00000b06 	br	800ec0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800ebe0:	d0a01017 	ldw	r2,-32704(gp)
 800ebe4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800ebe8:	d0e01017 	ldw	r3,-32704(gp)
 800ebec:	e0bfff17 	ldw	r2,-4(fp)
 800ebf0:	1885883a 	add	r2,r3,r2
 800ebf4:	d0a01015 	stw	r2,-32704(gp)
 800ebf8:	e0bffb17 	ldw	r2,-20(fp)
 800ebfc:	e0bffc15 	stw	r2,-16(fp)
 800ec00:	e0bffc17 	ldw	r2,-16(fp)
 800ec04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ec08:	e0bffd17 	ldw	r2,-12(fp)
} 
 800ec0c:	e037883a 	mov	sp,fp
 800ec10:	df000017 	ldw	fp,0(sp)
 800ec14:	dec00104 	addi	sp,sp,4
 800ec18:	f800283a 	ret

0800ec1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800ec1c:	defffd04 	addi	sp,sp,-12
 800ec20:	dfc00215 	stw	ra,8(sp)
 800ec24:	df000115 	stw	fp,4(sp)
 800ec28:	df000104 	addi	fp,sp,4
 800ec2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800ec30:	e13fff17 	ldw	r4,-4(fp)
 800ec34:	800f9d80 	call	800f9d8 <alt_busy_sleep>
}
 800ec38:	e037883a 	mov	sp,fp
 800ec3c:	dfc00117 	ldw	ra,4(sp)
 800ec40:	df000017 	ldw	fp,0(sp)
 800ec44:	dec00204 	addi	sp,sp,8
 800ec48:	f800283a 	ret

0800ec4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec4c:	defffe04 	addi	sp,sp,-8
 800ec50:	dfc00115 	stw	ra,4(sp)
 800ec54:	df000015 	stw	fp,0(sp)
 800ec58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ec5c:	d0a00f17 	ldw	r2,-32708(gp)
 800ec60:	10000326 	beq	r2,zero,800ec70 <alt_get_errno+0x24>
 800ec64:	d0a00f17 	ldw	r2,-32708(gp)
 800ec68:	103ee83a 	callr	r2
 800ec6c:	00000106 	br	800ec74 <alt_get_errno+0x28>
 800ec70:	d0a6dc04 	addi	r2,gp,-25744
}
 800ec74:	e037883a 	mov	sp,fp
 800ec78:	dfc00117 	ldw	ra,4(sp)
 800ec7c:	df000017 	ldw	fp,0(sp)
 800ec80:	dec00204 	addi	sp,sp,8
 800ec84:	f800283a 	ret

0800ec88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ec88:	defff904 	addi	sp,sp,-28
 800ec8c:	dfc00615 	stw	ra,24(sp)
 800ec90:	df000515 	stw	fp,20(sp)
 800ec94:	df000504 	addi	fp,sp,20
 800ec98:	e13ffd15 	stw	r4,-12(fp)
 800ec9c:	e17ffe15 	stw	r5,-8(fp)
 800eca0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eca4:	e0bffd17 	ldw	r2,-12(fp)
 800eca8:	10000616 	blt	r2,zero,800ecc4 <write+0x3c>
 800ecac:	e0bffd17 	ldw	r2,-12(fp)
 800ecb0:	10c00324 	muli	r3,r2,12
 800ecb4:	00820074 	movhi	r2,2049
 800ecb8:	10861504 	addi	r2,r2,6228
 800ecbc:	1885883a 	add	r2,r3,r2
 800ecc0:	00000106 	br	800ecc8 <write+0x40>
 800ecc4:	0005883a 	mov	r2,zero
 800ecc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800eccc:	e0bffb17 	ldw	r2,-20(fp)
 800ecd0:	10002126 	beq	r2,zero,800ed58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ecd4:	e0bffb17 	ldw	r2,-20(fp)
 800ecd8:	10800217 	ldw	r2,8(r2)
 800ecdc:	108000cc 	andi	r2,r2,3
 800ece0:	10001826 	beq	r2,zero,800ed44 <write+0xbc>
 800ece4:	e0bffb17 	ldw	r2,-20(fp)
 800ece8:	10800017 	ldw	r2,0(r2)
 800ecec:	10800617 	ldw	r2,24(r2)
 800ecf0:	10001426 	beq	r2,zero,800ed44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ecf4:	e0bffb17 	ldw	r2,-20(fp)
 800ecf8:	10800017 	ldw	r2,0(r2)
 800ecfc:	10800617 	ldw	r2,24(r2)
 800ed00:	e0ffff17 	ldw	r3,-4(fp)
 800ed04:	180d883a 	mov	r6,r3
 800ed08:	e17ffe17 	ldw	r5,-8(fp)
 800ed0c:	e13ffb17 	ldw	r4,-20(fp)
 800ed10:	103ee83a 	callr	r2
 800ed14:	e0bffc15 	stw	r2,-16(fp)
 800ed18:	e0bffc17 	ldw	r2,-16(fp)
 800ed1c:	1000070e 	bge	r2,zero,800ed3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800ed20:	800ec4c0 	call	800ec4c <alt_get_errno>
 800ed24:	1007883a 	mov	r3,r2
 800ed28:	e0bffc17 	ldw	r2,-16(fp)
 800ed2c:	0085c83a 	sub	r2,zero,r2
 800ed30:	18800015 	stw	r2,0(r3)
        return -1;
 800ed34:	00bfffc4 	movi	r2,-1
 800ed38:	00000c06 	br	800ed6c <write+0xe4>
      }
      return rval;
 800ed3c:	e0bffc17 	ldw	r2,-16(fp)
 800ed40:	00000a06 	br	800ed6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800ed44:	800ec4c0 	call	800ec4c <alt_get_errno>
 800ed48:	1007883a 	mov	r3,r2
 800ed4c:	00800344 	movi	r2,13
 800ed50:	18800015 	stw	r2,0(r3)
 800ed54:	00000406 	br	800ed68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800ed58:	800ec4c0 	call	800ec4c <alt_get_errno>
 800ed5c:	1007883a 	mov	r3,r2
 800ed60:	00801444 	movi	r2,81
 800ed64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ed68:	00bfffc4 	movi	r2,-1
}
 800ed6c:	e037883a 	mov	sp,fp
 800ed70:	dfc00117 	ldw	ra,4(sp)
 800ed74:	df000017 	ldw	fp,0(sp)
 800ed78:	dec00204 	addi	sp,sp,8
 800ed7c:	f800283a 	ret

0800ed80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800ed80:	defffd04 	addi	sp,sp,-12
 800ed84:	dfc00215 	stw	ra,8(sp)
 800ed88:	df000115 	stw	fp,4(sp)
 800ed8c:	df000104 	addi	fp,sp,4
 800ed90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ed94:	d1600c04 	addi	r5,gp,-32720
 800ed98:	e13fff17 	ldw	r4,-4(fp)
 800ed9c:	800fbb40 	call	800fbb4 <alt_dev_llist_insert>
}
 800eda0:	e037883a 	mov	sp,fp
 800eda4:	dfc00117 	ldw	ra,4(sp)
 800eda8:	df000017 	ldw	fp,0(sp)
 800edac:	dec00204 	addi	sp,sp,8
 800edb0:	f800283a 	ret

0800edb4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800edb4:	defffd04 	addi	sp,sp,-12
 800edb8:	dfc00215 	stw	ra,8(sp)
 800edbc:	df000115 	stw	fp,4(sp)
 800edc0:	df000104 	addi	fp,sp,4
 800edc4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800edc8:	80105240 	call	8010524 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800edcc:	00800044 	movi	r2,1
 800edd0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800edd4:	0001883a 	nop
 800edd8:	e037883a 	mov	sp,fp
 800eddc:	dfc00117 	ldw	ra,4(sp)
 800ede0:	df000017 	ldw	fp,0(sp)
 800ede4:	dec00204 	addi	sp,sp,8
 800ede8:	f800283a 	ret

0800edec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800edec:	defffe04 	addi	sp,sp,-8
 800edf0:	dfc00115 	stw	ra,4(sp)
 800edf4:	df000015 	stw	fp,0(sp)
 800edf8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800edfc:	000d883a 	mov	r6,zero
 800ee00:	000b883a 	mov	r5,zero
 800ee04:	01020074 	movhi	r4,2049
 800ee08:	21067f04 	addi	r4,r4,6652
 800ee0c:	800efa80 	call	800efa8 <altera_avalon_jtag_uart_init>
 800ee10:	01020074 	movhi	r4,2049
 800ee14:	21067504 	addi	r4,r4,6612
 800ee18:	800ed800 	call	800ed80 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 800ee1c:	00c00044 	movi	r3,1
 800ee20:	00840034 	movhi	r2,4096
 800ee24:	10840004 	addi	r2,r2,4096
 800ee28:	10c00035 	stwio	r3,0(r2)
}
 800ee2c:	0001883a 	nop
 800ee30:	e037883a 	mov	sp,fp
 800ee34:	dfc00117 	ldw	ra,4(sp)
 800ee38:	df000017 	ldw	fp,0(sp)
 800ee3c:	dec00204 	addi	sp,sp,8
 800ee40:	f800283a 	ret

0800ee44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800ee44:	defffa04 	addi	sp,sp,-24
 800ee48:	dfc00515 	stw	ra,20(sp)
 800ee4c:	df000415 	stw	fp,16(sp)
 800ee50:	df000404 	addi	fp,sp,16
 800ee54:	e13ffd15 	stw	r4,-12(fp)
 800ee58:	e17ffe15 	stw	r5,-8(fp)
 800ee5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ee60:	e0bffd17 	ldw	r2,-12(fp)
 800ee64:	10800017 	ldw	r2,0(r2)
 800ee68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800ee6c:	e0bffc17 	ldw	r2,-16(fp)
 800ee70:	10c00a04 	addi	r3,r2,40
 800ee74:	e0bffd17 	ldw	r2,-12(fp)
 800ee78:	10800217 	ldw	r2,8(r2)
 800ee7c:	100f883a 	mov	r7,r2
 800ee80:	e1bfff17 	ldw	r6,-4(fp)
 800ee84:	e17ffe17 	ldw	r5,-8(fp)
 800ee88:	1809883a 	mov	r4,r3
 800ee8c:	800f46c0 	call	800f46c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800ee90:	e037883a 	mov	sp,fp
 800ee94:	dfc00117 	ldw	ra,4(sp)
 800ee98:	df000017 	ldw	fp,0(sp)
 800ee9c:	dec00204 	addi	sp,sp,8
 800eea0:	f800283a 	ret

0800eea4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800eea4:	defffa04 	addi	sp,sp,-24
 800eea8:	dfc00515 	stw	ra,20(sp)
 800eeac:	df000415 	stw	fp,16(sp)
 800eeb0:	df000404 	addi	fp,sp,16
 800eeb4:	e13ffd15 	stw	r4,-12(fp)
 800eeb8:	e17ffe15 	stw	r5,-8(fp)
 800eebc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800eec0:	e0bffd17 	ldw	r2,-12(fp)
 800eec4:	10800017 	ldw	r2,0(r2)
 800eec8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800eecc:	e0bffc17 	ldw	r2,-16(fp)
 800eed0:	10c00a04 	addi	r3,r2,40
 800eed4:	e0bffd17 	ldw	r2,-12(fp)
 800eed8:	10800217 	ldw	r2,8(r2)
 800eedc:	100f883a 	mov	r7,r2
 800eee0:	e1bfff17 	ldw	r6,-4(fp)
 800eee4:	e17ffe17 	ldw	r5,-8(fp)
 800eee8:	1809883a 	mov	r4,r3
 800eeec:	800f6880 	call	800f688 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800eef0:	e037883a 	mov	sp,fp
 800eef4:	dfc00117 	ldw	ra,4(sp)
 800eef8:	df000017 	ldw	fp,0(sp)
 800eefc:	dec00204 	addi	sp,sp,8
 800ef00:	f800283a 	ret

0800ef04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800ef04:	defffc04 	addi	sp,sp,-16
 800ef08:	dfc00315 	stw	ra,12(sp)
 800ef0c:	df000215 	stw	fp,8(sp)
 800ef10:	df000204 	addi	fp,sp,8
 800ef14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ef18:	e0bfff17 	ldw	r2,-4(fp)
 800ef1c:	10800017 	ldw	r2,0(r2)
 800ef20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800ef24:	e0bffe17 	ldw	r2,-8(fp)
 800ef28:	10c00a04 	addi	r3,r2,40
 800ef2c:	e0bfff17 	ldw	r2,-4(fp)
 800ef30:	10800217 	ldw	r2,8(r2)
 800ef34:	100b883a 	mov	r5,r2
 800ef38:	1809883a 	mov	r4,r3
 800ef3c:	800f3140 	call	800f314 <altera_avalon_jtag_uart_close>
}
 800ef40:	e037883a 	mov	sp,fp
 800ef44:	dfc00117 	ldw	ra,4(sp)
 800ef48:	df000017 	ldw	fp,0(sp)
 800ef4c:	dec00204 	addi	sp,sp,8
 800ef50:	f800283a 	ret

0800ef54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800ef54:	defffa04 	addi	sp,sp,-24
 800ef58:	dfc00515 	stw	ra,20(sp)
 800ef5c:	df000415 	stw	fp,16(sp)
 800ef60:	df000404 	addi	fp,sp,16
 800ef64:	e13ffd15 	stw	r4,-12(fp)
 800ef68:	e17ffe15 	stw	r5,-8(fp)
 800ef6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800ef70:	e0bffd17 	ldw	r2,-12(fp)
 800ef74:	10800017 	ldw	r2,0(r2)
 800ef78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800ef7c:	e0bffc17 	ldw	r2,-16(fp)
 800ef80:	10800a04 	addi	r2,r2,40
 800ef84:	e1bfff17 	ldw	r6,-4(fp)
 800ef88:	e17ffe17 	ldw	r5,-8(fp)
 800ef8c:	1009883a 	mov	r4,r2
 800ef90:	800f37c0 	call	800f37c <altera_avalon_jtag_uart_ioctl>
}
 800ef94:	e037883a 	mov	sp,fp
 800ef98:	dfc00117 	ldw	ra,4(sp)
 800ef9c:	df000017 	ldw	fp,0(sp)
 800efa0:	dec00204 	addi	sp,sp,8
 800efa4:	f800283a 	ret

0800efa8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800efa8:	defffa04 	addi	sp,sp,-24
 800efac:	dfc00515 	stw	ra,20(sp)
 800efb0:	df000415 	stw	fp,16(sp)
 800efb4:	df000404 	addi	fp,sp,16
 800efb8:	e13ffd15 	stw	r4,-12(fp)
 800efbc:	e17ffe15 	stw	r5,-8(fp)
 800efc0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800efc4:	e0bffd17 	ldw	r2,-12(fp)
 800efc8:	00c00044 	movi	r3,1
 800efcc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800efd0:	e0bffd17 	ldw	r2,-12(fp)
 800efd4:	10800017 	ldw	r2,0(r2)
 800efd8:	10800104 	addi	r2,r2,4
 800efdc:	1007883a 	mov	r3,r2
 800efe0:	e0bffd17 	ldw	r2,-12(fp)
 800efe4:	10800817 	ldw	r2,32(r2)
 800efe8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800efec:	e0bffe17 	ldw	r2,-8(fp)
 800eff0:	e0ffff17 	ldw	r3,-4(fp)
 800eff4:	d8000015 	stw	zero,0(sp)
 800eff8:	e1fffd17 	ldw	r7,-12(fp)
 800effc:	01820074 	movhi	r6,2049
 800f000:	31bc1a04 	addi	r6,r6,-3992
 800f004:	180b883a 	mov	r5,r3
 800f008:	1009883a 	mov	r4,r2
 800f00c:	800fd4c0 	call	800fd4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f010:	e0bffd17 	ldw	r2,-12(fp)
 800f014:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f018:	e0bffd17 	ldw	r2,-12(fp)
 800f01c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f020:	d0e6e117 	ldw	r3,-25724(gp)
 800f024:	e1fffd17 	ldw	r7,-12(fp)
 800f028:	01820074 	movhi	r6,2049
 800f02c:	31bc9d04 	addi	r6,r6,-3468
 800f030:	180b883a 	mov	r5,r3
 800f034:	1009883a 	mov	r4,r2
 800f038:	800f8ac0 	call	800f8ac <alt_alarm_start>
 800f03c:	1000040e 	bge	r2,zero,800f050 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f040:	e0fffd17 	ldw	r3,-12(fp)
 800f044:	00a00034 	movhi	r2,32768
 800f048:	10bfffc4 	addi	r2,r2,-1
 800f04c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f050:	0001883a 	nop
 800f054:	e037883a 	mov	sp,fp
 800f058:	dfc00117 	ldw	ra,4(sp)
 800f05c:	df000017 	ldw	fp,0(sp)
 800f060:	dec00204 	addi	sp,sp,8
 800f064:	f800283a 	ret

0800f068 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f068:	defff804 	addi	sp,sp,-32
 800f06c:	df000715 	stw	fp,28(sp)
 800f070:	df000704 	addi	fp,sp,28
 800f074:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f078:	e0bfff17 	ldw	r2,-4(fp)
 800f07c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f080:	e0bffb17 	ldw	r2,-20(fp)
 800f084:	10800017 	ldw	r2,0(r2)
 800f088:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f08c:	e0bffc17 	ldw	r2,-16(fp)
 800f090:	10800104 	addi	r2,r2,4
 800f094:	10800037 	ldwio	r2,0(r2)
 800f098:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f09c:	e0bffd17 	ldw	r2,-12(fp)
 800f0a0:	1080c00c 	andi	r2,r2,768
 800f0a4:	10006d26 	beq	r2,zero,800f25c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f0a8:	e0bffd17 	ldw	r2,-12(fp)
 800f0ac:	1080400c 	andi	r2,r2,256
 800f0b0:	10003526 	beq	r2,zero,800f188 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f0b4:	00800074 	movhi	r2,1
 800f0b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f0bc:	e0bffb17 	ldw	r2,-20(fp)
 800f0c0:	10800a17 	ldw	r2,40(r2)
 800f0c4:	10800044 	addi	r2,r2,1
 800f0c8:	1081ffcc 	andi	r2,r2,2047
 800f0cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f0d0:	e0bffb17 	ldw	r2,-20(fp)
 800f0d4:	10c00b17 	ldw	r3,44(r2)
 800f0d8:	e0bffe17 	ldw	r2,-8(fp)
 800f0dc:	18801526 	beq	r3,r2,800f134 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f0e0:	e0bffc17 	ldw	r2,-16(fp)
 800f0e4:	10800037 	ldwio	r2,0(r2)
 800f0e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f0ec:	e0bff917 	ldw	r2,-28(fp)
 800f0f0:	10a0000c 	andi	r2,r2,32768
 800f0f4:	10001126 	beq	r2,zero,800f13c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f0f8:	e0bffb17 	ldw	r2,-20(fp)
 800f0fc:	10800a17 	ldw	r2,40(r2)
 800f100:	e0fff917 	ldw	r3,-28(fp)
 800f104:	1809883a 	mov	r4,r3
 800f108:	e0fffb17 	ldw	r3,-20(fp)
 800f10c:	1885883a 	add	r2,r3,r2
 800f110:	10800e04 	addi	r2,r2,56
 800f114:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f118:	e0bffb17 	ldw	r2,-20(fp)
 800f11c:	10800a17 	ldw	r2,40(r2)
 800f120:	10800044 	addi	r2,r2,1
 800f124:	10c1ffcc 	andi	r3,r2,2047
 800f128:	e0bffb17 	ldw	r2,-20(fp)
 800f12c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f130:	003fe206 	br	800f0bc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800f134:	0001883a 	nop
 800f138:	00000106 	br	800f140 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800f13c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f140:	e0bff917 	ldw	r2,-28(fp)
 800f144:	10bfffec 	andhi	r2,r2,65535
 800f148:	10000f26 	beq	r2,zero,800f188 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f14c:	e0bffb17 	ldw	r2,-20(fp)
 800f150:	10c00817 	ldw	r3,32(r2)
 800f154:	00bfff84 	movi	r2,-2
 800f158:	1886703a 	and	r3,r3,r2
 800f15c:	e0bffb17 	ldw	r2,-20(fp)
 800f160:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f164:	e0bffc17 	ldw	r2,-16(fp)
 800f168:	10800104 	addi	r2,r2,4
 800f16c:	1007883a 	mov	r3,r2
 800f170:	e0bffb17 	ldw	r2,-20(fp)
 800f174:	10800817 	ldw	r2,32(r2)
 800f178:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f17c:	e0bffc17 	ldw	r2,-16(fp)
 800f180:	10800104 	addi	r2,r2,4
 800f184:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f188:	e0bffd17 	ldw	r2,-12(fp)
 800f18c:	1080800c 	andi	r2,r2,512
 800f190:	103fbe26 	beq	r2,zero,800f08c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f194:	e0bffd17 	ldw	r2,-12(fp)
 800f198:	1004d43a 	srli	r2,r2,16
 800f19c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f1a0:	00001406 	br	800f1f4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f1a4:	e0bffc17 	ldw	r2,-16(fp)
 800f1a8:	e0fffb17 	ldw	r3,-20(fp)
 800f1ac:	18c00d17 	ldw	r3,52(r3)
 800f1b0:	e13ffb17 	ldw	r4,-20(fp)
 800f1b4:	20c7883a 	add	r3,r4,r3
 800f1b8:	18c20e04 	addi	r3,r3,2104
 800f1bc:	18c00003 	ldbu	r3,0(r3)
 800f1c0:	18c03fcc 	andi	r3,r3,255
 800f1c4:	18c0201c 	xori	r3,r3,128
 800f1c8:	18ffe004 	addi	r3,r3,-128
 800f1cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f1d0:	e0bffb17 	ldw	r2,-20(fp)
 800f1d4:	10800d17 	ldw	r2,52(r2)
 800f1d8:	10800044 	addi	r2,r2,1
 800f1dc:	10c1ffcc 	andi	r3,r2,2047
 800f1e0:	e0bffb17 	ldw	r2,-20(fp)
 800f1e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f1e8:	e0bffa17 	ldw	r2,-24(fp)
 800f1ec:	10bfffc4 	addi	r2,r2,-1
 800f1f0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f1f4:	e0bffa17 	ldw	r2,-24(fp)
 800f1f8:	10000526 	beq	r2,zero,800f210 <altera_avalon_jtag_uart_irq+0x1a8>
 800f1fc:	e0bffb17 	ldw	r2,-20(fp)
 800f200:	10c00d17 	ldw	r3,52(r2)
 800f204:	e0bffb17 	ldw	r2,-20(fp)
 800f208:	10800c17 	ldw	r2,48(r2)
 800f20c:	18bfe51e 	bne	r3,r2,800f1a4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f210:	e0bffa17 	ldw	r2,-24(fp)
 800f214:	103f9d26 	beq	r2,zero,800f08c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f218:	e0bffb17 	ldw	r2,-20(fp)
 800f21c:	10c00817 	ldw	r3,32(r2)
 800f220:	00bfff44 	movi	r2,-3
 800f224:	1886703a 	and	r3,r3,r2
 800f228:	e0bffb17 	ldw	r2,-20(fp)
 800f22c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f230:	e0bffb17 	ldw	r2,-20(fp)
 800f234:	10800017 	ldw	r2,0(r2)
 800f238:	10800104 	addi	r2,r2,4
 800f23c:	1007883a 	mov	r3,r2
 800f240:	e0bffb17 	ldw	r2,-20(fp)
 800f244:	10800817 	ldw	r2,32(r2)
 800f248:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f24c:	e0bffc17 	ldw	r2,-16(fp)
 800f250:	10800104 	addi	r2,r2,4
 800f254:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f258:	003f8c06 	br	800f08c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800f25c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800f260:	0001883a 	nop
 800f264:	e037883a 	mov	sp,fp
 800f268:	df000017 	ldw	fp,0(sp)
 800f26c:	dec00104 	addi	sp,sp,4
 800f270:	f800283a 	ret

0800f274 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f274:	defff804 	addi	sp,sp,-32
 800f278:	df000715 	stw	fp,28(sp)
 800f27c:	df000704 	addi	fp,sp,28
 800f280:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f284:	e0bffb17 	ldw	r2,-20(fp)
 800f288:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f28c:	e0bff917 	ldw	r2,-28(fp)
 800f290:	10800017 	ldw	r2,0(r2)
 800f294:	10800104 	addi	r2,r2,4
 800f298:	10800037 	ldwio	r2,0(r2)
 800f29c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f2a0:	e0bffa17 	ldw	r2,-24(fp)
 800f2a4:	1081000c 	andi	r2,r2,1024
 800f2a8:	10000b26 	beq	r2,zero,800f2d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f2ac:	e0bff917 	ldw	r2,-28(fp)
 800f2b0:	10800017 	ldw	r2,0(r2)
 800f2b4:	10800104 	addi	r2,r2,4
 800f2b8:	1007883a 	mov	r3,r2
 800f2bc:	e0bff917 	ldw	r2,-28(fp)
 800f2c0:	10800817 	ldw	r2,32(r2)
 800f2c4:	10810014 	ori	r2,r2,1024
 800f2c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800f2cc:	e0bff917 	ldw	r2,-28(fp)
 800f2d0:	10000915 	stw	zero,36(r2)
 800f2d4:	00000a06 	br	800f300 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f2d8:	e0bff917 	ldw	r2,-28(fp)
 800f2dc:	10c00917 	ldw	r3,36(r2)
 800f2e0:	00a00034 	movhi	r2,32768
 800f2e4:	10bfff04 	addi	r2,r2,-4
 800f2e8:	10c00536 	bltu	r2,r3,800f300 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800f2ec:	e0bff917 	ldw	r2,-28(fp)
 800f2f0:	10800917 	ldw	r2,36(r2)
 800f2f4:	10c00044 	addi	r3,r2,1
 800f2f8:	e0bff917 	ldw	r2,-28(fp)
 800f2fc:	10c00915 	stw	r3,36(r2)
 800f300:	d0a6e117 	ldw	r2,-25724(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f304:	e037883a 	mov	sp,fp
 800f308:	df000017 	ldw	fp,0(sp)
 800f30c:	dec00104 	addi	sp,sp,4
 800f310:	f800283a 	ret

0800f314 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f314:	defffd04 	addi	sp,sp,-12
 800f318:	df000215 	stw	fp,8(sp)
 800f31c:	df000204 	addi	fp,sp,8
 800f320:	e13ffe15 	stw	r4,-8(fp)
 800f324:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f328:	00000506 	br	800f340 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f32c:	e0bfff17 	ldw	r2,-4(fp)
 800f330:	1090000c 	andi	r2,r2,16384
 800f334:	10000226 	beq	r2,zero,800f340 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f338:	00bffd44 	movi	r2,-11
 800f33c:	00000b06 	br	800f36c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f340:	e0bffe17 	ldw	r2,-8(fp)
 800f344:	10c00d17 	ldw	r3,52(r2)
 800f348:	e0bffe17 	ldw	r2,-8(fp)
 800f34c:	10800c17 	ldw	r2,48(r2)
 800f350:	18800526 	beq	r3,r2,800f368 <altera_avalon_jtag_uart_close+0x54>
 800f354:	e0bffe17 	ldw	r2,-8(fp)
 800f358:	10c00917 	ldw	r3,36(r2)
 800f35c:	e0bffe17 	ldw	r2,-8(fp)
 800f360:	10800117 	ldw	r2,4(r2)
 800f364:	18bff136 	bltu	r3,r2,800f32c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f368:	0005883a 	mov	r2,zero
}
 800f36c:	e037883a 	mov	sp,fp
 800f370:	df000017 	ldw	fp,0(sp)
 800f374:	dec00104 	addi	sp,sp,4
 800f378:	f800283a 	ret

0800f37c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800f37c:	defffa04 	addi	sp,sp,-24
 800f380:	df000515 	stw	fp,20(sp)
 800f384:	df000504 	addi	fp,sp,20
 800f388:	e13ffd15 	stw	r4,-12(fp)
 800f38c:	e17ffe15 	stw	r5,-8(fp)
 800f390:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800f394:	00bff9c4 	movi	r2,-25
 800f398:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800f39c:	e0bffe17 	ldw	r2,-8(fp)
 800f3a0:	10da8060 	cmpeqi	r3,r2,27137
 800f3a4:	1800031e 	bne	r3,zero,800f3b4 <altera_avalon_jtag_uart_ioctl+0x38>
 800f3a8:	109a80a0 	cmpeqi	r2,r2,27138
 800f3ac:	1000181e 	bne	r2,zero,800f410 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800f3b0:	00002906 	br	800f458 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800f3b4:	e0bffd17 	ldw	r2,-12(fp)
 800f3b8:	10c00117 	ldw	r3,4(r2)
 800f3bc:	00a00034 	movhi	r2,32768
 800f3c0:	10bfffc4 	addi	r2,r2,-1
 800f3c4:	18802126 	beq	r3,r2,800f44c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800f3c8:	e0bfff17 	ldw	r2,-4(fp)
 800f3cc:	10800017 	ldw	r2,0(r2)
 800f3d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800f3d4:	e0bffc17 	ldw	r2,-16(fp)
 800f3d8:	10800090 	cmplti	r2,r2,2
 800f3dc:	1000061e 	bne	r2,zero,800f3f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f3e0:	e0fffc17 	ldw	r3,-16(fp)
 800f3e4:	00a00034 	movhi	r2,32768
 800f3e8:	10bfffc4 	addi	r2,r2,-1
 800f3ec:	18800226 	beq	r3,r2,800f3f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f3f0:	e0bffc17 	ldw	r2,-16(fp)
 800f3f4:	00000206 	br	800f400 <altera_avalon_jtag_uart_ioctl+0x84>
 800f3f8:	00a00034 	movhi	r2,32768
 800f3fc:	10bfff84 	addi	r2,r2,-2
 800f400:	e0fffd17 	ldw	r3,-12(fp)
 800f404:	18800115 	stw	r2,4(r3)
      rc = 0;
 800f408:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f40c:	00000f06 	br	800f44c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800f410:	e0bffd17 	ldw	r2,-12(fp)
 800f414:	10c00117 	ldw	r3,4(r2)
 800f418:	00a00034 	movhi	r2,32768
 800f41c:	10bfffc4 	addi	r2,r2,-1
 800f420:	18800c26 	beq	r3,r2,800f454 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800f424:	e0bffd17 	ldw	r2,-12(fp)
 800f428:	10c00917 	ldw	r3,36(r2)
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	10800117 	ldw	r2,4(r2)
 800f434:	1885803a 	cmpltu	r2,r3,r2
 800f438:	10c03fcc 	andi	r3,r2,255
 800f43c:	e0bfff17 	ldw	r2,-4(fp)
 800f440:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800f444:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f448:	00000206 	br	800f454 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800f44c:	0001883a 	nop
 800f450:	00000106 	br	800f458 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800f454:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800f458:	e0bffb17 	ldw	r2,-20(fp)
}
 800f45c:	e037883a 	mov	sp,fp
 800f460:	df000017 	ldw	fp,0(sp)
 800f464:	dec00104 	addi	sp,sp,4
 800f468:	f800283a 	ret

0800f46c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800f46c:	defff304 	addi	sp,sp,-52
 800f470:	dfc00c15 	stw	ra,48(sp)
 800f474:	df000b15 	stw	fp,44(sp)
 800f478:	df000b04 	addi	fp,sp,44
 800f47c:	e13ffc15 	stw	r4,-16(fp)
 800f480:	e17ffd15 	stw	r5,-12(fp)
 800f484:	e1bffe15 	stw	r6,-8(fp)
 800f488:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800f48c:	e0bffd17 	ldw	r2,-12(fp)
 800f490:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800f494:	00004706 	br	800f5b4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800f498:	e0bffc17 	ldw	r2,-16(fp)
 800f49c:	10800a17 	ldw	r2,40(r2)
 800f4a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800f4a4:	e0bffc17 	ldw	r2,-16(fp)
 800f4a8:	10800b17 	ldw	r2,44(r2)
 800f4ac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800f4b0:	e0fff717 	ldw	r3,-36(fp)
 800f4b4:	e0bff817 	ldw	r2,-32(fp)
 800f4b8:	18800536 	bltu	r3,r2,800f4d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800f4bc:	e0fff717 	ldw	r3,-36(fp)
 800f4c0:	e0bff817 	ldw	r2,-32(fp)
 800f4c4:	1885c83a 	sub	r2,r3,r2
 800f4c8:	e0bff615 	stw	r2,-40(fp)
 800f4cc:	00000406 	br	800f4e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800f4d0:	00c20004 	movi	r3,2048
 800f4d4:	e0bff817 	ldw	r2,-32(fp)
 800f4d8:	1885c83a 	sub	r2,r3,r2
 800f4dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800f4e0:	e0bff617 	ldw	r2,-40(fp)
 800f4e4:	10001e26 	beq	r2,zero,800f560 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800f4e8:	e0fffe17 	ldw	r3,-8(fp)
 800f4ec:	e0bff617 	ldw	r2,-40(fp)
 800f4f0:	1880022e 	bgeu	r3,r2,800f4fc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800f4f4:	e0bffe17 	ldw	r2,-8(fp)
 800f4f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800f4fc:	e0bffc17 	ldw	r2,-16(fp)
 800f500:	10c00e04 	addi	r3,r2,56
 800f504:	e0bff817 	ldw	r2,-32(fp)
 800f508:	1885883a 	add	r2,r3,r2
 800f50c:	e1bff617 	ldw	r6,-40(fp)
 800f510:	100b883a 	mov	r5,r2
 800f514:	e13ff517 	ldw	r4,-44(fp)
 800f518:	800761c0 	call	800761c <memcpy>
      ptr   += n;
 800f51c:	e0fff517 	ldw	r3,-44(fp)
 800f520:	e0bff617 	ldw	r2,-40(fp)
 800f524:	1885883a 	add	r2,r3,r2
 800f528:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800f52c:	e0fffe17 	ldw	r3,-8(fp)
 800f530:	e0bff617 	ldw	r2,-40(fp)
 800f534:	1885c83a 	sub	r2,r3,r2
 800f538:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f53c:	e0fff817 	ldw	r3,-32(fp)
 800f540:	e0bff617 	ldw	r2,-40(fp)
 800f544:	1885883a 	add	r2,r3,r2
 800f548:	10c1ffcc 	andi	r3,r2,2047
 800f54c:	e0bffc17 	ldw	r2,-16(fp)
 800f550:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800f554:	e0bffe17 	ldw	r2,-8(fp)
 800f558:	00bfcf16 	blt	zero,r2,800f498 <altera_avalon_jtag_uart_read+0x2c>
 800f55c:	00000106 	br	800f564 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800f560:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800f564:	e0fff517 	ldw	r3,-44(fp)
 800f568:	e0bffd17 	ldw	r2,-12(fp)
 800f56c:	1880141e 	bne	r3,r2,800f5c0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800f570:	e0bfff17 	ldw	r2,-4(fp)
 800f574:	1090000c 	andi	r2,r2,16384
 800f578:	1000131e 	bne	r2,zero,800f5c8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800f57c:	0001883a 	nop
 800f580:	e0bffc17 	ldw	r2,-16(fp)
 800f584:	10c00a17 	ldw	r3,40(r2)
 800f588:	e0bff717 	ldw	r2,-36(fp)
 800f58c:	1880051e 	bne	r3,r2,800f5a4 <altera_avalon_jtag_uart_read+0x138>
 800f590:	e0bffc17 	ldw	r2,-16(fp)
 800f594:	10c00917 	ldw	r3,36(r2)
 800f598:	e0bffc17 	ldw	r2,-16(fp)
 800f59c:	10800117 	ldw	r2,4(r2)
 800f5a0:	18bff736 	bltu	r3,r2,800f580 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800f5a4:	e0bffc17 	ldw	r2,-16(fp)
 800f5a8:	10c00a17 	ldw	r3,40(r2)
 800f5ac:	e0bff717 	ldw	r2,-36(fp)
 800f5b0:	18800726 	beq	r3,r2,800f5d0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800f5b4:	e0bffe17 	ldw	r2,-8(fp)
 800f5b8:	00bfb716 	blt	zero,r2,800f498 <altera_avalon_jtag_uart_read+0x2c>
 800f5bc:	00000506 	br	800f5d4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800f5c0:	0001883a 	nop
 800f5c4:	00000306 	br	800f5d4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800f5c8:	0001883a 	nop
 800f5cc:	00000106 	br	800f5d4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800f5d0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800f5d4:	e0fff517 	ldw	r3,-44(fp)
 800f5d8:	e0bffd17 	ldw	r2,-12(fp)
 800f5dc:	18801826 	beq	r3,r2,800f640 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f5e0:	0005303a 	rdctl	r2,status
 800f5e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f5e8:	e0fffb17 	ldw	r3,-20(fp)
 800f5ec:	00bfff84 	movi	r2,-2
 800f5f0:	1884703a 	and	r2,r3,r2
 800f5f4:	1001703a 	wrctl	status,r2
  
  return context;
 800f5f8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800f5fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f600:	e0bffc17 	ldw	r2,-16(fp)
 800f604:	10800817 	ldw	r2,32(r2)
 800f608:	10c00054 	ori	r3,r2,1
 800f60c:	e0bffc17 	ldw	r2,-16(fp)
 800f610:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f614:	e0bffc17 	ldw	r2,-16(fp)
 800f618:	10800017 	ldw	r2,0(r2)
 800f61c:	10800104 	addi	r2,r2,4
 800f620:	1007883a 	mov	r3,r2
 800f624:	e0bffc17 	ldw	r2,-16(fp)
 800f628:	10800817 	ldw	r2,32(r2)
 800f62c:	18800035 	stwio	r2,0(r3)
 800f630:	e0bffa17 	ldw	r2,-24(fp)
 800f634:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f638:	e0bff917 	ldw	r2,-28(fp)
 800f63c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800f640:	e0fff517 	ldw	r3,-44(fp)
 800f644:	e0bffd17 	ldw	r2,-12(fp)
 800f648:	18800426 	beq	r3,r2,800f65c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800f64c:	e0fff517 	ldw	r3,-44(fp)
 800f650:	e0bffd17 	ldw	r2,-12(fp)
 800f654:	1885c83a 	sub	r2,r3,r2
 800f658:	00000606 	br	800f674 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800f65c:	e0bfff17 	ldw	r2,-4(fp)
 800f660:	1090000c 	andi	r2,r2,16384
 800f664:	10000226 	beq	r2,zero,800f670 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800f668:	00bffd44 	movi	r2,-11
 800f66c:	00000106 	br	800f674 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800f670:	00bffec4 	movi	r2,-5
}
 800f674:	e037883a 	mov	sp,fp
 800f678:	dfc00117 	ldw	ra,4(sp)
 800f67c:	df000017 	ldw	fp,0(sp)
 800f680:	dec00204 	addi	sp,sp,8
 800f684:	f800283a 	ret

0800f688 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800f688:	defff304 	addi	sp,sp,-52
 800f68c:	dfc00c15 	stw	ra,48(sp)
 800f690:	df000b15 	stw	fp,44(sp)
 800f694:	df000b04 	addi	fp,sp,44
 800f698:	e13ffc15 	stw	r4,-16(fp)
 800f69c:	e17ffd15 	stw	r5,-12(fp)
 800f6a0:	e1bffe15 	stw	r6,-8(fp)
 800f6a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800f6a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800f6ac:	e0bffd17 	ldw	r2,-12(fp)
 800f6b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800f6b4:	00003706 	br	800f794 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800f6b8:	e0bffc17 	ldw	r2,-16(fp)
 800f6bc:	10800c17 	ldw	r2,48(r2)
 800f6c0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800f6c4:	e0bffc17 	ldw	r2,-16(fp)
 800f6c8:	10800d17 	ldw	r2,52(r2)
 800f6cc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800f6d0:	e0fff917 	ldw	r3,-28(fp)
 800f6d4:	e0bff517 	ldw	r2,-44(fp)
 800f6d8:	1880062e 	bgeu	r3,r2,800f6f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800f6dc:	e0fff517 	ldw	r3,-44(fp)
 800f6e0:	e0bff917 	ldw	r2,-28(fp)
 800f6e4:	1885c83a 	sub	r2,r3,r2
 800f6e8:	10bfffc4 	addi	r2,r2,-1
 800f6ec:	e0bff615 	stw	r2,-40(fp)
 800f6f0:	00000b06 	br	800f720 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800f6f4:	e0bff517 	ldw	r2,-44(fp)
 800f6f8:	10000526 	beq	r2,zero,800f710 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800f6fc:	00c20004 	movi	r3,2048
 800f700:	e0bff917 	ldw	r2,-28(fp)
 800f704:	1885c83a 	sub	r2,r3,r2
 800f708:	e0bff615 	stw	r2,-40(fp)
 800f70c:	00000406 	br	800f720 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800f710:	00c1ffc4 	movi	r3,2047
 800f714:	e0bff917 	ldw	r2,-28(fp)
 800f718:	1885c83a 	sub	r2,r3,r2
 800f71c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800f720:	e0bff617 	ldw	r2,-40(fp)
 800f724:	10001e26 	beq	r2,zero,800f7a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800f728:	e0fffe17 	ldw	r3,-8(fp)
 800f72c:	e0bff617 	ldw	r2,-40(fp)
 800f730:	1880022e 	bgeu	r3,r2,800f73c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800f734:	e0bffe17 	ldw	r2,-8(fp)
 800f738:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800f73c:	e0bffc17 	ldw	r2,-16(fp)
 800f740:	10c20e04 	addi	r3,r2,2104
 800f744:	e0bff917 	ldw	r2,-28(fp)
 800f748:	1885883a 	add	r2,r3,r2
 800f74c:	e1bff617 	ldw	r6,-40(fp)
 800f750:	e17ffd17 	ldw	r5,-12(fp)
 800f754:	1009883a 	mov	r4,r2
 800f758:	800761c0 	call	800761c <memcpy>
      ptr   += n;
 800f75c:	e0fffd17 	ldw	r3,-12(fp)
 800f760:	e0bff617 	ldw	r2,-40(fp)
 800f764:	1885883a 	add	r2,r3,r2
 800f768:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800f76c:	e0fffe17 	ldw	r3,-8(fp)
 800f770:	e0bff617 	ldw	r2,-40(fp)
 800f774:	1885c83a 	sub	r2,r3,r2
 800f778:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f77c:	e0fff917 	ldw	r3,-28(fp)
 800f780:	e0bff617 	ldw	r2,-40(fp)
 800f784:	1885883a 	add	r2,r3,r2
 800f788:	10c1ffcc 	andi	r3,r2,2047
 800f78c:	e0bffc17 	ldw	r2,-16(fp)
 800f790:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800f794:	e0bffe17 	ldw	r2,-8(fp)
 800f798:	00bfc716 	blt	zero,r2,800f6b8 <altera_avalon_jtag_uart_write+0x30>
 800f79c:	00000106 	br	800f7a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800f7a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f7a4:	0005303a 	rdctl	r2,status
 800f7a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f7ac:	e0fffb17 	ldw	r3,-20(fp)
 800f7b0:	00bfff84 	movi	r2,-2
 800f7b4:	1884703a 	and	r2,r3,r2
 800f7b8:	1001703a 	wrctl	status,r2
  
  return context;
 800f7bc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800f7c0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f7c4:	e0bffc17 	ldw	r2,-16(fp)
 800f7c8:	10800817 	ldw	r2,32(r2)
 800f7cc:	10c00094 	ori	r3,r2,2
 800f7d0:	e0bffc17 	ldw	r2,-16(fp)
 800f7d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f7d8:	e0bffc17 	ldw	r2,-16(fp)
 800f7dc:	10800017 	ldw	r2,0(r2)
 800f7e0:	10800104 	addi	r2,r2,4
 800f7e4:	1007883a 	mov	r3,r2
 800f7e8:	e0bffc17 	ldw	r2,-16(fp)
 800f7ec:	10800817 	ldw	r2,32(r2)
 800f7f0:	18800035 	stwio	r2,0(r3)
 800f7f4:	e0bffa17 	ldw	r2,-24(fp)
 800f7f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f7fc:	e0bff817 	ldw	r2,-32(fp)
 800f800:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800f804:	e0bffe17 	ldw	r2,-8(fp)
 800f808:	0080100e 	bge	zero,r2,800f84c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800f80c:	e0bfff17 	ldw	r2,-4(fp)
 800f810:	1090000c 	andi	r2,r2,16384
 800f814:	1000101e 	bne	r2,zero,800f858 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800f818:	0001883a 	nop
 800f81c:	e0bffc17 	ldw	r2,-16(fp)
 800f820:	10c00d17 	ldw	r3,52(r2)
 800f824:	e0bff517 	ldw	r2,-44(fp)
 800f828:	1880051e 	bne	r3,r2,800f840 <altera_avalon_jtag_uart_write+0x1b8>
 800f82c:	e0bffc17 	ldw	r2,-16(fp)
 800f830:	10c00917 	ldw	r3,36(r2)
 800f834:	e0bffc17 	ldw	r2,-16(fp)
 800f838:	10800117 	ldw	r2,4(r2)
 800f83c:	18bff736 	bltu	r3,r2,800f81c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800f840:	e0bffc17 	ldw	r2,-16(fp)
 800f844:	10800917 	ldw	r2,36(r2)
 800f848:	1000051e 	bne	r2,zero,800f860 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800f84c:	e0bffe17 	ldw	r2,-8(fp)
 800f850:	00bfd016 	blt	zero,r2,800f794 <altera_avalon_jtag_uart_write+0x10c>
 800f854:	00000306 	br	800f864 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800f858:	0001883a 	nop
 800f85c:	00000106 	br	800f864 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800f860:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800f864:	e0fffd17 	ldw	r3,-12(fp)
 800f868:	e0bff717 	ldw	r2,-36(fp)
 800f86c:	18800426 	beq	r3,r2,800f880 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800f870:	e0fffd17 	ldw	r3,-12(fp)
 800f874:	e0bff717 	ldw	r2,-36(fp)
 800f878:	1885c83a 	sub	r2,r3,r2
 800f87c:	00000606 	br	800f898 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800f880:	e0bfff17 	ldw	r2,-4(fp)
 800f884:	1090000c 	andi	r2,r2,16384
 800f888:	10000226 	beq	r2,zero,800f894 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800f88c:	00bffd44 	movi	r2,-11
 800f890:	00000106 	br	800f898 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800f894:	00bffec4 	movi	r2,-5
}
 800f898:	e037883a 	mov	sp,fp
 800f89c:	dfc00117 	ldw	ra,4(sp)
 800f8a0:	df000017 	ldw	fp,0(sp)
 800f8a4:	dec00204 	addi	sp,sp,8
 800f8a8:	f800283a 	ret

0800f8ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800f8ac:	defff504 	addi	sp,sp,-44
 800f8b0:	df000a15 	stw	fp,40(sp)
 800f8b4:	df000a04 	addi	fp,sp,40
 800f8b8:	e13ffc15 	stw	r4,-16(fp)
 800f8bc:	e17ffd15 	stw	r5,-12(fp)
 800f8c0:	e1bffe15 	stw	r6,-8(fp)
 800f8c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800f8c8:	e03ff615 	stw	zero,-40(fp)
 800f8cc:	d0a6e117 	ldw	r2,-25724(gp)
  
  if (alt_ticks_per_second ())
 800f8d0:	10003c26 	beq	r2,zero,800f9c4 <alt_alarm_start+0x118>
  {
    if (alarm)
 800f8d4:	e0bffc17 	ldw	r2,-16(fp)
 800f8d8:	10003826 	beq	r2,zero,800f9bc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800f8dc:	e0bffc17 	ldw	r2,-16(fp)
 800f8e0:	e0fffe17 	ldw	r3,-8(fp)
 800f8e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800f8e8:	e0bffc17 	ldw	r2,-16(fp)
 800f8ec:	e0ffff17 	ldw	r3,-4(fp)
 800f8f0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f8f4:	0005303a 	rdctl	r2,status
 800f8f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f8fc:	e0fff917 	ldw	r3,-28(fp)
 800f900:	00bfff84 	movi	r2,-2
 800f904:	1884703a 	and	r2,r3,r2
 800f908:	1001703a 	wrctl	status,r2
  
  return context;
 800f90c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800f910:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800f914:	d0a6e217 	ldw	r2,-25720(gp)
      
      current_nticks = alt_nticks();
 800f918:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800f91c:	e0fffd17 	ldw	r3,-12(fp)
 800f920:	e0bff617 	ldw	r2,-40(fp)
 800f924:	1885883a 	add	r2,r3,r2
 800f928:	10c00044 	addi	r3,r2,1
 800f92c:	e0bffc17 	ldw	r2,-16(fp)
 800f930:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800f934:	e0bffc17 	ldw	r2,-16(fp)
 800f938:	10c00217 	ldw	r3,8(r2)
 800f93c:	e0bff617 	ldw	r2,-40(fp)
 800f940:	1880042e 	bgeu	r3,r2,800f954 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800f944:	e0bffc17 	ldw	r2,-16(fp)
 800f948:	00c00044 	movi	r3,1
 800f94c:	10c00405 	stb	r3,16(r2)
 800f950:	00000206 	br	800f95c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800f954:	e0bffc17 	ldw	r2,-16(fp)
 800f958:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800f95c:	e0bffc17 	ldw	r2,-16(fp)
 800f960:	d0e01204 	addi	r3,gp,-32696
 800f964:	e0fffa15 	stw	r3,-24(fp)
 800f968:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f96c:	e0bffb17 	ldw	r2,-20(fp)
 800f970:	e0fffa17 	ldw	r3,-24(fp)
 800f974:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f978:	e0bffa17 	ldw	r2,-24(fp)
 800f97c:	10c00017 	ldw	r3,0(r2)
 800f980:	e0bffb17 	ldw	r2,-20(fp)
 800f984:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f988:	e0bffa17 	ldw	r2,-24(fp)
 800f98c:	10800017 	ldw	r2,0(r2)
 800f990:	e0fffb17 	ldw	r3,-20(fp)
 800f994:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f998:	e0bffa17 	ldw	r2,-24(fp)
 800f99c:	e0fffb17 	ldw	r3,-20(fp)
 800f9a0:	10c00015 	stw	r3,0(r2)
 800f9a4:	e0bff817 	ldw	r2,-32(fp)
 800f9a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f9ac:	e0bff717 	ldw	r2,-36(fp)
 800f9b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800f9b4:	0005883a 	mov	r2,zero
 800f9b8:	00000306 	br	800f9c8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800f9bc:	00bffa84 	movi	r2,-22
 800f9c0:	00000106 	br	800f9c8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800f9c4:	00bfde84 	movi	r2,-134
  }
}
 800f9c8:	e037883a 	mov	sp,fp
 800f9cc:	df000017 	ldw	fp,0(sp)
 800f9d0:	dec00104 	addi	sp,sp,4
 800f9d4:	f800283a 	ret

0800f9d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800f9d8:	defffa04 	addi	sp,sp,-24
 800f9dc:	dfc00515 	stw	ra,20(sp)
 800f9e0:	df000415 	stw	fp,16(sp)
 800f9e4:	df000404 	addi	fp,sp,16
 800f9e8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 800f9ec:	008000c4 	movi	r2,3
 800f9f0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800f9f4:	e0fffd17 	ldw	r3,-12(fp)
 800f9f8:	008003f4 	movhi	r2,15
 800f9fc:	10909004 	addi	r2,r2,16960
 800fa00:	1885383a 	mul	r2,r3,r2
 800fa04:	100b883a 	mov	r5,r2
 800fa08:	0100bef4 	movhi	r4,763
 800fa0c:	213c2004 	addi	r4,r4,-3968
 800fa10:	800bd4c0 	call	800bd4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800fa14:	100b883a 	mov	r5,r2
 800fa18:	01200034 	movhi	r4,32768
 800fa1c:	213fffc4 	addi	r4,r4,-1
 800fa20:	800bd4c0 	call	800bd4c <__udivsi3>
 800fa24:	100b883a 	mov	r5,r2
 800fa28:	e13fff17 	ldw	r4,-4(fp)
 800fa2c:	800bd4c0 	call	800bd4c <__udivsi3>
 800fa30:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800fa34:	e0bffe17 	ldw	r2,-8(fp)
 800fa38:	10002a26 	beq	r2,zero,800fae4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800fa3c:	e03ffc15 	stw	zero,-16(fp)
 800fa40:	00001706 	br	800faa0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800fa44:	00a00034 	movhi	r2,32768
 800fa48:	10bfffc4 	addi	r2,r2,-1
 800fa4c:	10bfffc4 	addi	r2,r2,-1
 800fa50:	103ffe1e 	bne	r2,zero,800fa4c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800fa54:	e0fffd17 	ldw	r3,-12(fp)
 800fa58:	008003f4 	movhi	r2,15
 800fa5c:	10909004 	addi	r2,r2,16960
 800fa60:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800fa64:	100b883a 	mov	r5,r2
 800fa68:	0100bef4 	movhi	r4,763
 800fa6c:	213c2004 	addi	r4,r4,-3968
 800fa70:	800bd4c0 	call	800bd4c <__udivsi3>
 800fa74:	100b883a 	mov	r5,r2
 800fa78:	01200034 	movhi	r4,32768
 800fa7c:	213fffc4 	addi	r4,r4,-1
 800fa80:	800bd4c0 	call	800bd4c <__udivsi3>
 800fa84:	1007883a 	mov	r3,r2
 800fa88:	e0bfff17 	ldw	r2,-4(fp)
 800fa8c:	10c5c83a 	sub	r2,r2,r3
 800fa90:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800fa94:	e0bffc17 	ldw	r2,-16(fp)
 800fa98:	10800044 	addi	r2,r2,1
 800fa9c:	e0bffc15 	stw	r2,-16(fp)
 800faa0:	e0fffc17 	ldw	r3,-16(fp)
 800faa4:	e0bffe17 	ldw	r2,-8(fp)
 800faa8:	18bfe616 	blt	r3,r2,800fa44 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800faac:	e0fffd17 	ldw	r3,-12(fp)
 800fab0:	008003f4 	movhi	r2,15
 800fab4:	10909004 	addi	r2,r2,16960
 800fab8:	1885383a 	mul	r2,r3,r2
 800fabc:	100b883a 	mov	r5,r2
 800fac0:	0100bef4 	movhi	r4,763
 800fac4:	213c2004 	addi	r4,r4,-3968
 800fac8:	800bd4c0 	call	800bd4c <__udivsi3>
 800facc:	1007883a 	mov	r3,r2
 800fad0:	e0bfff17 	ldw	r2,-4(fp)
 800fad4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800fad8:	10bfffc4 	addi	r2,r2,-1
 800fadc:	103ffe1e 	bne	r2,zero,800fad8 <alt_busy_sleep+0x100>
 800fae0:	00000d06 	br	800fb18 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800fae4:	e0fffd17 	ldw	r3,-12(fp)
 800fae8:	008003f4 	movhi	r2,15
 800faec:	10909004 	addi	r2,r2,16960
 800faf0:	1885383a 	mul	r2,r3,r2
 800faf4:	100b883a 	mov	r5,r2
 800faf8:	0100bef4 	movhi	r4,763
 800fafc:	213c2004 	addi	r4,r4,-3968
 800fb00:	800bd4c0 	call	800bd4c <__udivsi3>
 800fb04:	1007883a 	mov	r3,r2
 800fb08:	e0bfff17 	ldw	r2,-4(fp)
 800fb0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800fb10:	10bfffc4 	addi	r2,r2,-1
 800fb14:	00bffe16 	blt	zero,r2,800fb10 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800fb18:	0005883a 	mov	r2,zero
}
 800fb1c:	e037883a 	mov	sp,fp
 800fb20:	dfc00117 	ldw	ra,4(sp)
 800fb24:	df000017 	ldw	fp,0(sp)
 800fb28:	dec00204 	addi	sp,sp,8
 800fb2c:	f800283a 	ret

0800fb30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800fb30:	defffe04 	addi	sp,sp,-8
 800fb34:	df000115 	stw	fp,4(sp)
 800fb38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800fb3c:	e03fff15 	stw	zero,-4(fp)
 800fb40:	00000506 	br	800fb58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 800fb44:	e0bfff17 	ldw	r2,-4(fp)
 800fb48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800fb4c:	e0bfff17 	ldw	r2,-4(fp)
 800fb50:	10800804 	addi	r2,r2,32
 800fb54:	e0bfff15 	stw	r2,-4(fp)
 800fb58:	e0bfff17 	ldw	r2,-4(fp)
 800fb5c:	10820030 	cmpltui	r2,r2,2048
 800fb60:	103ff81e 	bne	r2,zero,800fb44 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800fb64:	0001883a 	nop
 800fb68:	e037883a 	mov	sp,fp
 800fb6c:	df000017 	ldw	fp,0(sp)
 800fb70:	dec00104 	addi	sp,sp,4
 800fb74:	f800283a 	ret

0800fb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fb78:	defffe04 	addi	sp,sp,-8
 800fb7c:	dfc00115 	stw	ra,4(sp)
 800fb80:	df000015 	stw	fp,0(sp)
 800fb84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fb88:	d0a00f17 	ldw	r2,-32708(gp)
 800fb8c:	10000326 	beq	r2,zero,800fb9c <alt_get_errno+0x24>
 800fb90:	d0a00f17 	ldw	r2,-32708(gp)
 800fb94:	103ee83a 	callr	r2
 800fb98:	00000106 	br	800fba0 <alt_get_errno+0x28>
 800fb9c:	d0a6dc04 	addi	r2,gp,-25744
}
 800fba0:	e037883a 	mov	sp,fp
 800fba4:	dfc00117 	ldw	ra,4(sp)
 800fba8:	df000017 	ldw	fp,0(sp)
 800fbac:	dec00204 	addi	sp,sp,8
 800fbb0:	f800283a 	ret

0800fbb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800fbb4:	defffa04 	addi	sp,sp,-24
 800fbb8:	dfc00515 	stw	ra,20(sp)
 800fbbc:	df000415 	stw	fp,16(sp)
 800fbc0:	df000404 	addi	fp,sp,16
 800fbc4:	e13ffe15 	stw	r4,-8(fp)
 800fbc8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800fbcc:	e0bffe17 	ldw	r2,-8(fp)
 800fbd0:	10000326 	beq	r2,zero,800fbe0 <alt_dev_llist_insert+0x2c>
 800fbd4:	e0bffe17 	ldw	r2,-8(fp)
 800fbd8:	10800217 	ldw	r2,8(r2)
 800fbdc:	1000061e 	bne	r2,zero,800fbf8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800fbe0:	800fb780 	call	800fb78 <alt_get_errno>
 800fbe4:	1007883a 	mov	r3,r2
 800fbe8:	00800584 	movi	r2,22
 800fbec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800fbf0:	00bffa84 	movi	r2,-22
 800fbf4:	00001306 	br	800fc44 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800fbf8:	e0bffe17 	ldw	r2,-8(fp)
 800fbfc:	e0ffff17 	ldw	r3,-4(fp)
 800fc00:	e0fffc15 	stw	r3,-16(fp)
 800fc04:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fc08:	e0bffd17 	ldw	r2,-12(fp)
 800fc0c:	e0fffc17 	ldw	r3,-16(fp)
 800fc10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800fc14:	e0bffc17 	ldw	r2,-16(fp)
 800fc18:	10c00017 	ldw	r3,0(r2)
 800fc1c:	e0bffd17 	ldw	r2,-12(fp)
 800fc20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fc24:	e0bffc17 	ldw	r2,-16(fp)
 800fc28:	10800017 	ldw	r2,0(r2)
 800fc2c:	e0fffd17 	ldw	r3,-12(fp)
 800fc30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800fc34:	e0bffc17 	ldw	r2,-16(fp)
 800fc38:	e0fffd17 	ldw	r3,-12(fp)
 800fc3c:	10c00015 	stw	r3,0(r2)

  return 0;  
 800fc40:	0005883a 	mov	r2,zero
}
 800fc44:	e037883a 	mov	sp,fp
 800fc48:	dfc00117 	ldw	ra,4(sp)
 800fc4c:	df000017 	ldw	fp,0(sp)
 800fc50:	dec00204 	addi	sp,sp,8
 800fc54:	f800283a 	ret

0800fc58 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800fc58:	defffd04 	addi	sp,sp,-12
 800fc5c:	dfc00215 	stw	ra,8(sp)
 800fc60:	df000115 	stw	fp,4(sp)
 800fc64:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800fc68:	00820074 	movhi	r2,2049
 800fc6c:	10831004 	addi	r2,r2,3136
 800fc70:	e0bfff15 	stw	r2,-4(fp)
 800fc74:	00000606 	br	800fc90 <_do_ctors+0x38>
        (*ctor) (); 
 800fc78:	e0bfff17 	ldw	r2,-4(fp)
 800fc7c:	10800017 	ldw	r2,0(r2)
 800fc80:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800fc84:	e0bfff17 	ldw	r2,-4(fp)
 800fc88:	10bfff04 	addi	r2,r2,-4
 800fc8c:	e0bfff15 	stw	r2,-4(fp)
 800fc90:	e0ffff17 	ldw	r3,-4(fp)
 800fc94:	00820074 	movhi	r2,2049
 800fc98:	10831104 	addi	r2,r2,3140
 800fc9c:	18bff62e 	bgeu	r3,r2,800fc78 <_do_ctors+0x20>
        (*ctor) (); 
}
 800fca0:	0001883a 	nop
 800fca4:	e037883a 	mov	sp,fp
 800fca8:	dfc00117 	ldw	ra,4(sp)
 800fcac:	df000017 	ldw	fp,0(sp)
 800fcb0:	dec00204 	addi	sp,sp,8
 800fcb4:	f800283a 	ret

0800fcb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800fcb8:	defffd04 	addi	sp,sp,-12
 800fcbc:	dfc00215 	stw	ra,8(sp)
 800fcc0:	df000115 	stw	fp,4(sp)
 800fcc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800fcc8:	00820074 	movhi	r2,2049
 800fccc:	10831004 	addi	r2,r2,3136
 800fcd0:	e0bfff15 	stw	r2,-4(fp)
 800fcd4:	00000606 	br	800fcf0 <_do_dtors+0x38>
        (*dtor) (); 
 800fcd8:	e0bfff17 	ldw	r2,-4(fp)
 800fcdc:	10800017 	ldw	r2,0(r2)
 800fce0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800fce4:	e0bfff17 	ldw	r2,-4(fp)
 800fce8:	10bfff04 	addi	r2,r2,-4
 800fcec:	e0bfff15 	stw	r2,-4(fp)
 800fcf0:	e0ffff17 	ldw	r3,-4(fp)
 800fcf4:	00820074 	movhi	r2,2049
 800fcf8:	10831104 	addi	r2,r2,3140
 800fcfc:	18bff62e 	bgeu	r3,r2,800fcd8 <_do_dtors+0x20>
        (*dtor) (); 
}
 800fd00:	0001883a 	nop
 800fd04:	e037883a 	mov	sp,fp
 800fd08:	dfc00117 	ldw	ra,4(sp)
 800fd0c:	df000017 	ldw	fp,0(sp)
 800fd10:	dec00204 	addi	sp,sp,8
 800fd14:	f800283a 	ret

0800fd18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800fd18:	defffe04 	addi	sp,sp,-8
 800fd1c:	dfc00115 	stw	ra,4(sp)
 800fd20:	df000015 	stw	fp,0(sp)
 800fd24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800fd28:	01440004 	movi	r5,4096
 800fd2c:	0009883a 	mov	r4,zero
 800fd30:	80107840 	call	8010784 <alt_icache_flush>
#endif
}
 800fd34:	0001883a 	nop
 800fd38:	e037883a 	mov	sp,fp
 800fd3c:	dfc00117 	ldw	ra,4(sp)
 800fd40:	df000017 	ldw	fp,0(sp)
 800fd44:	dec00204 	addi	sp,sp,8
 800fd48:	f800283a 	ret

0800fd4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800fd4c:	defff904 	addi	sp,sp,-28
 800fd50:	dfc00615 	stw	ra,24(sp)
 800fd54:	df000515 	stw	fp,20(sp)
 800fd58:	df000504 	addi	fp,sp,20
 800fd5c:	e13ffc15 	stw	r4,-16(fp)
 800fd60:	e17ffd15 	stw	r5,-12(fp)
 800fd64:	e1bffe15 	stw	r6,-8(fp)
 800fd68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800fd6c:	e0800217 	ldw	r2,8(fp)
 800fd70:	d8800015 	stw	r2,0(sp)
 800fd74:	e1ffff17 	ldw	r7,-4(fp)
 800fd78:	e1bffe17 	ldw	r6,-8(fp)
 800fd7c:	e17ffd17 	ldw	r5,-12(fp)
 800fd80:	e13ffc17 	ldw	r4,-16(fp)
 800fd84:	800fefc0 	call	800fefc <alt_iic_isr_register>
}  
 800fd88:	e037883a 	mov	sp,fp
 800fd8c:	dfc00117 	ldw	ra,4(sp)
 800fd90:	df000017 	ldw	fp,0(sp)
 800fd94:	dec00204 	addi	sp,sp,8
 800fd98:	f800283a 	ret

0800fd9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800fd9c:	defff904 	addi	sp,sp,-28
 800fda0:	df000615 	stw	fp,24(sp)
 800fda4:	df000604 	addi	fp,sp,24
 800fda8:	e13ffe15 	stw	r4,-8(fp)
 800fdac:	e17fff15 	stw	r5,-4(fp)
 800fdb0:	e0bfff17 	ldw	r2,-4(fp)
 800fdb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fdb8:	0005303a 	rdctl	r2,status
 800fdbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fdc0:	e0fffb17 	ldw	r3,-20(fp)
 800fdc4:	00bfff84 	movi	r2,-2
 800fdc8:	1884703a 	and	r2,r3,r2
 800fdcc:	1001703a 	wrctl	status,r2
  
  return context;
 800fdd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800fdd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800fdd8:	00c00044 	movi	r3,1
 800fddc:	e0bffa17 	ldw	r2,-24(fp)
 800fde0:	1884983a 	sll	r2,r3,r2
 800fde4:	1007883a 	mov	r3,r2
 800fde8:	d0a6e017 	ldw	r2,-25728(gp)
 800fdec:	1884b03a 	or	r2,r3,r2
 800fdf0:	d0a6e015 	stw	r2,-25728(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800fdf4:	d0a6e017 	ldw	r2,-25728(gp)
 800fdf8:	100170fa 	wrctl	ienable,r2
 800fdfc:	e0bffc17 	ldw	r2,-16(fp)
 800fe00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fe04:	e0bffd17 	ldw	r2,-12(fp)
 800fe08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800fe0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800fe10:	0001883a 	nop
}
 800fe14:	e037883a 	mov	sp,fp
 800fe18:	df000017 	ldw	fp,0(sp)
 800fe1c:	dec00104 	addi	sp,sp,4
 800fe20:	f800283a 	ret

0800fe24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800fe24:	defff904 	addi	sp,sp,-28
 800fe28:	df000615 	stw	fp,24(sp)
 800fe2c:	df000604 	addi	fp,sp,24
 800fe30:	e13ffe15 	stw	r4,-8(fp)
 800fe34:	e17fff15 	stw	r5,-4(fp)
 800fe38:	e0bfff17 	ldw	r2,-4(fp)
 800fe3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fe40:	0005303a 	rdctl	r2,status
 800fe44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fe48:	e0fffb17 	ldw	r3,-20(fp)
 800fe4c:	00bfff84 	movi	r2,-2
 800fe50:	1884703a 	and	r2,r3,r2
 800fe54:	1001703a 	wrctl	status,r2
  
  return context;
 800fe58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800fe5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800fe60:	00c00044 	movi	r3,1
 800fe64:	e0bffa17 	ldw	r2,-24(fp)
 800fe68:	1884983a 	sll	r2,r3,r2
 800fe6c:	0084303a 	nor	r2,zero,r2
 800fe70:	1007883a 	mov	r3,r2
 800fe74:	d0a6e017 	ldw	r2,-25728(gp)
 800fe78:	1884703a 	and	r2,r3,r2
 800fe7c:	d0a6e015 	stw	r2,-25728(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800fe80:	d0a6e017 	ldw	r2,-25728(gp)
 800fe84:	100170fa 	wrctl	ienable,r2
 800fe88:	e0bffc17 	ldw	r2,-16(fp)
 800fe8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fe90:	e0bffd17 	ldw	r2,-12(fp)
 800fe94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800fe98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800fe9c:	0001883a 	nop
}
 800fea0:	e037883a 	mov	sp,fp
 800fea4:	df000017 	ldw	fp,0(sp)
 800fea8:	dec00104 	addi	sp,sp,4
 800feac:	f800283a 	ret

0800feb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800feb0:	defffc04 	addi	sp,sp,-16
 800feb4:	df000315 	stw	fp,12(sp)
 800feb8:	df000304 	addi	fp,sp,12
 800febc:	e13ffe15 	stw	r4,-8(fp)
 800fec0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800fec4:	000530fa 	rdctl	r2,ienable
 800fec8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800fecc:	00c00044 	movi	r3,1
 800fed0:	e0bfff17 	ldw	r2,-4(fp)
 800fed4:	1884983a 	sll	r2,r3,r2
 800fed8:	1007883a 	mov	r3,r2
 800fedc:	e0bffd17 	ldw	r2,-12(fp)
 800fee0:	1884703a 	and	r2,r3,r2
 800fee4:	1004c03a 	cmpne	r2,r2,zero
 800fee8:	10803fcc 	andi	r2,r2,255
}
 800feec:	e037883a 	mov	sp,fp
 800fef0:	df000017 	ldw	fp,0(sp)
 800fef4:	dec00104 	addi	sp,sp,4
 800fef8:	f800283a 	ret

0800fefc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800fefc:	defff504 	addi	sp,sp,-44
 800ff00:	dfc00a15 	stw	ra,40(sp)
 800ff04:	df000915 	stw	fp,36(sp)
 800ff08:	df000904 	addi	fp,sp,36
 800ff0c:	e13ffc15 	stw	r4,-16(fp)
 800ff10:	e17ffd15 	stw	r5,-12(fp)
 800ff14:	e1bffe15 	stw	r6,-8(fp)
 800ff18:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800ff1c:	00bffa84 	movi	r2,-22
 800ff20:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800ff24:	e0bffd17 	ldw	r2,-12(fp)
 800ff28:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800ff2c:	e0bff817 	ldw	r2,-32(fp)
 800ff30:	10800808 	cmpgei	r2,r2,32
 800ff34:	1000271e 	bne	r2,zero,800ffd4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff38:	0005303a 	rdctl	r2,status
 800ff3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff40:	e0fffb17 	ldw	r3,-20(fp)
 800ff44:	00bfff84 	movi	r2,-2
 800ff48:	1884703a 	and	r2,r3,r2
 800ff4c:	1001703a 	wrctl	status,r2
  
  return context;
 800ff50:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800ff54:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800ff58:	00820074 	movhi	r2,2049
 800ff5c:	10917b04 	addi	r2,r2,17900
 800ff60:	e0fff817 	ldw	r3,-32(fp)
 800ff64:	180690fa 	slli	r3,r3,3
 800ff68:	10c5883a 	add	r2,r2,r3
 800ff6c:	e0fffe17 	ldw	r3,-8(fp)
 800ff70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800ff74:	00820074 	movhi	r2,2049
 800ff78:	10917b04 	addi	r2,r2,17900
 800ff7c:	e0fff817 	ldw	r3,-32(fp)
 800ff80:	180690fa 	slli	r3,r3,3
 800ff84:	10c5883a 	add	r2,r2,r3
 800ff88:	10800104 	addi	r2,r2,4
 800ff8c:	e0ffff17 	ldw	r3,-4(fp)
 800ff90:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800ff94:	e0bffe17 	ldw	r2,-8(fp)
 800ff98:	10000526 	beq	r2,zero,800ffb0 <alt_iic_isr_register+0xb4>
 800ff9c:	e0bff817 	ldw	r2,-32(fp)
 800ffa0:	100b883a 	mov	r5,r2
 800ffa4:	e13ffc17 	ldw	r4,-16(fp)
 800ffa8:	800fd9c0 	call	800fd9c <alt_ic_irq_enable>
 800ffac:	00000406 	br	800ffc0 <alt_iic_isr_register+0xc4>
 800ffb0:	e0bff817 	ldw	r2,-32(fp)
 800ffb4:	100b883a 	mov	r5,r2
 800ffb8:	e13ffc17 	ldw	r4,-16(fp)
 800ffbc:	800fe240 	call	800fe24 <alt_ic_irq_disable>
 800ffc0:	e0bff715 	stw	r2,-36(fp)
 800ffc4:	e0bffa17 	ldw	r2,-24(fp)
 800ffc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffcc:	e0bff917 	ldw	r2,-28(fp)
 800ffd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800ffd4:	e0bff717 	ldw	r2,-36(fp)
}
 800ffd8:	e037883a 	mov	sp,fp
 800ffdc:	dfc00117 	ldw	ra,4(sp)
 800ffe0:	df000017 	ldw	fp,0(sp)
 800ffe4:	dec00204 	addi	sp,sp,8
 800ffe8:	f800283a 	ret

0800ffec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800ffec:	defff904 	addi	sp,sp,-28
 800fff0:	dfc00615 	stw	ra,24(sp)
 800fff4:	df000515 	stw	fp,20(sp)
 800fff8:	df000504 	addi	fp,sp,20
 800fffc:	e13ffc15 	stw	r4,-16(fp)
 8010000:	e17ffd15 	stw	r5,-12(fp)
 8010004:	e1bffe15 	stw	r6,-8(fp)
 8010008:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801000c:	e1bfff17 	ldw	r6,-4(fp)
 8010010:	e17ffe17 	ldw	r5,-8(fp)
 8010014:	e13ffd17 	ldw	r4,-12(fp)
 8010018:	801022c0 	call	801022c <open>
 801001c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8010020:	e0bffb17 	ldw	r2,-20(fp)
 8010024:	10001c16 	blt	r2,zero,8010098 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010028:	00820074 	movhi	r2,2049
 801002c:	10861504 	addi	r2,r2,6228
 8010030:	e0fffb17 	ldw	r3,-20(fp)
 8010034:	18c00324 	muli	r3,r3,12
 8010038:	10c5883a 	add	r2,r2,r3
 801003c:	10c00017 	ldw	r3,0(r2)
 8010040:	e0bffc17 	ldw	r2,-16(fp)
 8010044:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010048:	00820074 	movhi	r2,2049
 801004c:	10861504 	addi	r2,r2,6228
 8010050:	e0fffb17 	ldw	r3,-20(fp)
 8010054:	18c00324 	muli	r3,r3,12
 8010058:	10c5883a 	add	r2,r2,r3
 801005c:	10800104 	addi	r2,r2,4
 8010060:	10c00017 	ldw	r3,0(r2)
 8010064:	e0bffc17 	ldw	r2,-16(fp)
 8010068:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801006c:	00820074 	movhi	r2,2049
 8010070:	10861504 	addi	r2,r2,6228
 8010074:	e0fffb17 	ldw	r3,-20(fp)
 8010078:	18c00324 	muli	r3,r3,12
 801007c:	10c5883a 	add	r2,r2,r3
 8010080:	10800204 	addi	r2,r2,8
 8010084:	10c00017 	ldw	r3,0(r2)
 8010088:	e0bffc17 	ldw	r2,-16(fp)
 801008c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010090:	e13ffb17 	ldw	r4,-20(fp)
 8010094:	800eb080 	call	800eb08 <alt_release_fd>
  }
} 
 8010098:	0001883a 	nop
 801009c:	e037883a 	mov	sp,fp
 80100a0:	dfc00117 	ldw	ra,4(sp)
 80100a4:	df000017 	ldw	fp,0(sp)
 80100a8:	dec00204 	addi	sp,sp,8
 80100ac:	f800283a 	ret

080100b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80100b0:	defffb04 	addi	sp,sp,-20
 80100b4:	dfc00415 	stw	ra,16(sp)
 80100b8:	df000315 	stw	fp,12(sp)
 80100bc:	df000304 	addi	fp,sp,12
 80100c0:	e13ffd15 	stw	r4,-12(fp)
 80100c4:	e17ffe15 	stw	r5,-8(fp)
 80100c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80100cc:	01c07fc4 	movi	r7,511
 80100d0:	01800044 	movi	r6,1
 80100d4:	e17ffd17 	ldw	r5,-12(fp)
 80100d8:	01020074 	movhi	r4,2049
 80100dc:	21061804 	addi	r4,r4,6240
 80100e0:	800ffec0 	call	800ffec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80100e4:	01c07fc4 	movi	r7,511
 80100e8:	000d883a 	mov	r6,zero
 80100ec:	e17ffe17 	ldw	r5,-8(fp)
 80100f0:	01020074 	movhi	r4,2049
 80100f4:	21061504 	addi	r4,r4,6228
 80100f8:	800ffec0 	call	800ffec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80100fc:	01c07fc4 	movi	r7,511
 8010100:	01800044 	movi	r6,1
 8010104:	e17fff17 	ldw	r5,-4(fp)
 8010108:	01020074 	movhi	r4,2049
 801010c:	21061b04 	addi	r4,r4,6252
 8010110:	800ffec0 	call	800ffec <alt_open_fd>
}  
 8010114:	0001883a 	nop
 8010118:	e037883a 	mov	sp,fp
 801011c:	dfc00117 	ldw	ra,4(sp)
 8010120:	df000017 	ldw	fp,0(sp)
 8010124:	dec00204 	addi	sp,sp,8
 8010128:	f800283a 	ret

0801012c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801012c:	defffe04 	addi	sp,sp,-8
 8010130:	dfc00115 	stw	ra,4(sp)
 8010134:	df000015 	stw	fp,0(sp)
 8010138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801013c:	d0a00f17 	ldw	r2,-32708(gp)
 8010140:	10000326 	beq	r2,zero,8010150 <alt_get_errno+0x24>
 8010144:	d0a00f17 	ldw	r2,-32708(gp)
 8010148:	103ee83a 	callr	r2
 801014c:	00000106 	br	8010154 <alt_get_errno+0x28>
 8010150:	d0a6dc04 	addi	r2,gp,-25744
}
 8010154:	e037883a 	mov	sp,fp
 8010158:	dfc00117 	ldw	ra,4(sp)
 801015c:	df000017 	ldw	fp,0(sp)
 8010160:	dec00204 	addi	sp,sp,8
 8010164:	f800283a 	ret

08010168 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010168:	defffd04 	addi	sp,sp,-12
 801016c:	df000215 	stw	fp,8(sp)
 8010170:	df000204 	addi	fp,sp,8
 8010174:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010178:	e0bfff17 	ldw	r2,-4(fp)
 801017c:	10800217 	ldw	r2,8(r2)
 8010180:	10d00034 	orhi	r3,r2,16384
 8010184:	e0bfff17 	ldw	r2,-4(fp)
 8010188:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801018c:	e03ffe15 	stw	zero,-8(fp)
 8010190:	00001d06 	br	8010208 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010194:	00820074 	movhi	r2,2049
 8010198:	10861504 	addi	r2,r2,6228
 801019c:	e0fffe17 	ldw	r3,-8(fp)
 80101a0:	18c00324 	muli	r3,r3,12
 80101a4:	10c5883a 	add	r2,r2,r3
 80101a8:	10c00017 	ldw	r3,0(r2)
 80101ac:	e0bfff17 	ldw	r2,-4(fp)
 80101b0:	10800017 	ldw	r2,0(r2)
 80101b4:	1880111e 	bne	r3,r2,80101fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80101b8:	00820074 	movhi	r2,2049
 80101bc:	10861504 	addi	r2,r2,6228
 80101c0:	e0fffe17 	ldw	r3,-8(fp)
 80101c4:	18c00324 	muli	r3,r3,12
 80101c8:	10c5883a 	add	r2,r2,r3
 80101cc:	10800204 	addi	r2,r2,8
 80101d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80101d4:	1000090e 	bge	r2,zero,80101fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80101d8:	e0bffe17 	ldw	r2,-8(fp)
 80101dc:	10c00324 	muli	r3,r2,12
 80101e0:	00820074 	movhi	r2,2049
 80101e4:	10861504 	addi	r2,r2,6228
 80101e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80101ec:	e0bfff17 	ldw	r2,-4(fp)
 80101f0:	18800226 	beq	r3,r2,80101fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80101f4:	00bffcc4 	movi	r2,-13
 80101f8:	00000806 	br	801021c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80101fc:	e0bffe17 	ldw	r2,-8(fp)
 8010200:	10800044 	addi	r2,r2,1
 8010204:	e0bffe15 	stw	r2,-8(fp)
 8010208:	d0a00e17 	ldw	r2,-32712(gp)
 801020c:	1007883a 	mov	r3,r2
 8010210:	e0bffe17 	ldw	r2,-8(fp)
 8010214:	18bfdf2e 	bgeu	r3,r2,8010194 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010218:	0005883a 	mov	r2,zero
}
 801021c:	e037883a 	mov	sp,fp
 8010220:	df000017 	ldw	fp,0(sp)
 8010224:	dec00104 	addi	sp,sp,4
 8010228:	f800283a 	ret

0801022c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801022c:	defff604 	addi	sp,sp,-40
 8010230:	dfc00915 	stw	ra,36(sp)
 8010234:	df000815 	stw	fp,32(sp)
 8010238:	df000804 	addi	fp,sp,32
 801023c:	e13ffd15 	stw	r4,-12(fp)
 8010240:	e17ffe15 	stw	r5,-8(fp)
 8010244:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010248:	00bfffc4 	movi	r2,-1
 801024c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010250:	00bffb44 	movi	r2,-19
 8010254:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010258:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801025c:	d1600c04 	addi	r5,gp,-32720
 8010260:	e13ffd17 	ldw	r4,-12(fp)
 8010264:	80105480 	call	8010548 <alt_find_dev>
 8010268:	e0bff815 	stw	r2,-32(fp)
 801026c:	e0bff817 	ldw	r2,-32(fp)
 8010270:	1000051e 	bne	r2,zero,8010288 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010274:	e13ffd17 	ldw	r4,-12(fp)
 8010278:	80105d80 	call	80105d8 <alt_find_file>
 801027c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010280:	00800044 	movi	r2,1
 8010284:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010288:	e0bff817 	ldw	r2,-32(fp)
 801028c:	10002926 	beq	r2,zero,8010334 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010290:	e13ff817 	ldw	r4,-32(fp)
 8010294:	80106e00 	call	80106e0 <alt_get_fd>
 8010298:	e0bff915 	stw	r2,-28(fp)
 801029c:	e0bff917 	ldw	r2,-28(fp)
 80102a0:	1000030e 	bge	r2,zero,80102b0 <open+0x84>
    {
      status = index;
 80102a4:	e0bff917 	ldw	r2,-28(fp)
 80102a8:	e0bffa15 	stw	r2,-24(fp)
 80102ac:	00002306 	br	801033c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80102b0:	e0bff917 	ldw	r2,-28(fp)
 80102b4:	10c00324 	muli	r3,r2,12
 80102b8:	00820074 	movhi	r2,2049
 80102bc:	10861504 	addi	r2,r2,6228
 80102c0:	1885883a 	add	r2,r3,r2
 80102c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80102c8:	e0fffe17 	ldw	r3,-8(fp)
 80102cc:	00900034 	movhi	r2,16384
 80102d0:	10bfffc4 	addi	r2,r2,-1
 80102d4:	1886703a 	and	r3,r3,r2
 80102d8:	e0bffc17 	ldw	r2,-16(fp)
 80102dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80102e0:	e0bffb17 	ldw	r2,-20(fp)
 80102e4:	1000051e 	bne	r2,zero,80102fc <open+0xd0>
 80102e8:	e13ffc17 	ldw	r4,-16(fp)
 80102ec:	80101680 	call	8010168 <alt_file_locked>
 80102f0:	e0bffa15 	stw	r2,-24(fp)
 80102f4:	e0bffa17 	ldw	r2,-24(fp)
 80102f8:	10001016 	blt	r2,zero,801033c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80102fc:	e0bff817 	ldw	r2,-32(fp)
 8010300:	10800317 	ldw	r2,12(r2)
 8010304:	10000826 	beq	r2,zero,8010328 <open+0xfc>
 8010308:	e0bff817 	ldw	r2,-32(fp)
 801030c:	10800317 	ldw	r2,12(r2)
 8010310:	e1ffff17 	ldw	r7,-4(fp)
 8010314:	e1bffe17 	ldw	r6,-8(fp)
 8010318:	e17ffd17 	ldw	r5,-12(fp)
 801031c:	e13ffc17 	ldw	r4,-16(fp)
 8010320:	103ee83a 	callr	r2
 8010324:	00000106 	br	801032c <open+0x100>
 8010328:	0005883a 	mov	r2,zero
 801032c:	e0bffa15 	stw	r2,-24(fp)
 8010330:	00000206 	br	801033c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010334:	00bffb44 	movi	r2,-19
 8010338:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801033c:	e0bffa17 	ldw	r2,-24(fp)
 8010340:	1000090e 	bge	r2,zero,8010368 <open+0x13c>
  {
    alt_release_fd (index);  
 8010344:	e13ff917 	ldw	r4,-28(fp)
 8010348:	800eb080 	call	800eb08 <alt_release_fd>
    ALT_ERRNO = -status;
 801034c:	801012c0 	call	801012c <alt_get_errno>
 8010350:	1007883a 	mov	r3,r2
 8010354:	e0bffa17 	ldw	r2,-24(fp)
 8010358:	0085c83a 	sub	r2,zero,r2
 801035c:	18800015 	stw	r2,0(r3)
    return -1;
 8010360:	00bfffc4 	movi	r2,-1
 8010364:	00000106 	br	801036c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8010368:	e0bff917 	ldw	r2,-28(fp)
}
 801036c:	e037883a 	mov	sp,fp
 8010370:	dfc00117 	ldw	ra,4(sp)
 8010374:	df000017 	ldw	fp,0(sp)
 8010378:	dec00204 	addi	sp,sp,8
 801037c:	f800283a 	ret

08010380 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010380:	defffa04 	addi	sp,sp,-24
 8010384:	df000515 	stw	fp,20(sp)
 8010388:	df000504 	addi	fp,sp,20
 801038c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010390:	0005303a 	rdctl	r2,status
 8010394:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010398:	e0fffc17 	ldw	r3,-16(fp)
 801039c:	00bfff84 	movi	r2,-2
 80103a0:	1884703a 	and	r2,r3,r2
 80103a4:	1001703a 	wrctl	status,r2
  
  return context;
 80103a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80103ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80103b0:	e0bfff17 	ldw	r2,-4(fp)
 80103b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80103b8:	e0bffd17 	ldw	r2,-12(fp)
 80103bc:	10800017 	ldw	r2,0(r2)
 80103c0:	e0fffd17 	ldw	r3,-12(fp)
 80103c4:	18c00117 	ldw	r3,4(r3)
 80103c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80103cc:	e0bffd17 	ldw	r2,-12(fp)
 80103d0:	10800117 	ldw	r2,4(r2)
 80103d4:	e0fffd17 	ldw	r3,-12(fp)
 80103d8:	18c00017 	ldw	r3,0(r3)
 80103dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80103e0:	e0bffd17 	ldw	r2,-12(fp)
 80103e4:	e0fffd17 	ldw	r3,-12(fp)
 80103e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80103ec:	e0bffd17 	ldw	r2,-12(fp)
 80103f0:	e0fffd17 	ldw	r3,-12(fp)
 80103f4:	10c00015 	stw	r3,0(r2)
 80103f8:	e0bffb17 	ldw	r2,-20(fp)
 80103fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010400:	e0bffe17 	ldw	r2,-8(fp)
 8010404:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010408:	0001883a 	nop
 801040c:	e037883a 	mov	sp,fp
 8010410:	df000017 	ldw	fp,0(sp)
 8010414:	dec00104 	addi	sp,sp,4
 8010418:	f800283a 	ret

0801041c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801041c:	defffb04 	addi	sp,sp,-20
 8010420:	dfc00415 	stw	ra,16(sp)
 8010424:	df000315 	stw	fp,12(sp)
 8010428:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801042c:	d0a01217 	ldw	r2,-32696(gp)
 8010430:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010434:	d0a6e217 	ldw	r2,-25720(gp)
 8010438:	10800044 	addi	r2,r2,1
 801043c:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010440:	00002e06 	br	80104fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010444:	e0bffd17 	ldw	r2,-12(fp)
 8010448:	10800017 	ldw	r2,0(r2)
 801044c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010450:	e0bffd17 	ldw	r2,-12(fp)
 8010454:	10800403 	ldbu	r2,16(r2)
 8010458:	10803fcc 	andi	r2,r2,255
 801045c:	10000426 	beq	r2,zero,8010470 <alt_tick+0x54>
 8010460:	d0a6e217 	ldw	r2,-25720(gp)
 8010464:	1000021e 	bne	r2,zero,8010470 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010468:	e0bffd17 	ldw	r2,-12(fp)
 801046c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010470:	e0bffd17 	ldw	r2,-12(fp)
 8010474:	10800217 	ldw	r2,8(r2)
 8010478:	d0e6e217 	ldw	r3,-25720(gp)
 801047c:	18801d36 	bltu	r3,r2,80104f4 <alt_tick+0xd8>
 8010480:	e0bffd17 	ldw	r2,-12(fp)
 8010484:	10800403 	ldbu	r2,16(r2)
 8010488:	10803fcc 	andi	r2,r2,255
 801048c:	1000191e 	bne	r2,zero,80104f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010490:	e0bffd17 	ldw	r2,-12(fp)
 8010494:	10800317 	ldw	r2,12(r2)
 8010498:	e0fffd17 	ldw	r3,-12(fp)
 801049c:	18c00517 	ldw	r3,20(r3)
 80104a0:	1809883a 	mov	r4,r3
 80104a4:	103ee83a 	callr	r2
 80104a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80104ac:	e0bfff17 	ldw	r2,-4(fp)
 80104b0:	1000031e 	bne	r2,zero,80104c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80104b4:	e13ffd17 	ldw	r4,-12(fp)
 80104b8:	80103800 	call	8010380 <alt_alarm_stop>
 80104bc:	00000d06 	br	80104f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80104c0:	e0bffd17 	ldw	r2,-12(fp)
 80104c4:	10c00217 	ldw	r3,8(r2)
 80104c8:	e0bfff17 	ldw	r2,-4(fp)
 80104cc:	1887883a 	add	r3,r3,r2
 80104d0:	e0bffd17 	ldw	r2,-12(fp)
 80104d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80104d8:	e0bffd17 	ldw	r2,-12(fp)
 80104dc:	10c00217 	ldw	r3,8(r2)
 80104e0:	d0a6e217 	ldw	r2,-25720(gp)
 80104e4:	1880032e 	bgeu	r3,r2,80104f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80104e8:	e0bffd17 	ldw	r2,-12(fp)
 80104ec:	00c00044 	movi	r3,1
 80104f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80104f4:	e0bffe17 	ldw	r2,-8(fp)
 80104f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80104fc:	e0fffd17 	ldw	r3,-12(fp)
 8010500:	d0a01204 	addi	r2,gp,-32696
 8010504:	18bfcf1e 	bne	r3,r2,8010444 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010508:	0001883a 	nop
}
 801050c:	0001883a 	nop
 8010510:	e037883a 	mov	sp,fp
 8010514:	dfc00117 	ldw	ra,4(sp)
 8010518:	df000017 	ldw	fp,0(sp)
 801051c:	dec00204 	addi	sp,sp,8
 8010520:	f800283a 	ret

08010524 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8010524:	deffff04 	addi	sp,sp,-4
 8010528:	df000015 	stw	fp,0(sp)
 801052c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010530:	000170fa 	wrctl	ienable,zero
}
 8010534:	0001883a 	nop
 8010538:	e037883a 	mov	sp,fp
 801053c:	df000017 	ldw	fp,0(sp)
 8010540:	dec00104 	addi	sp,sp,4
 8010544:	f800283a 	ret

08010548 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010548:	defffa04 	addi	sp,sp,-24
 801054c:	dfc00515 	stw	ra,20(sp)
 8010550:	df000415 	stw	fp,16(sp)
 8010554:	df000404 	addi	fp,sp,16
 8010558:	e13ffe15 	stw	r4,-8(fp)
 801055c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010560:	e0bfff17 	ldw	r2,-4(fp)
 8010564:	10800017 	ldw	r2,0(r2)
 8010568:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801056c:	e13ffe17 	ldw	r4,-8(fp)
 8010570:	8001c900 	call	8001c90 <strlen>
 8010574:	10800044 	addi	r2,r2,1
 8010578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801057c:	00000d06 	br	80105b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010580:	e0bffc17 	ldw	r2,-16(fp)
 8010584:	10800217 	ldw	r2,8(r2)
 8010588:	e0fffd17 	ldw	r3,-12(fp)
 801058c:	180d883a 	mov	r6,r3
 8010590:	e17ffe17 	ldw	r5,-8(fp)
 8010594:	1009883a 	mov	r4,r2
 8010598:	80108fc0 	call	80108fc <memcmp>
 801059c:	1000021e 	bne	r2,zero,80105a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80105a0:	e0bffc17 	ldw	r2,-16(fp)
 80105a4:	00000706 	br	80105c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80105a8:	e0bffc17 	ldw	r2,-16(fp)
 80105ac:	10800017 	ldw	r2,0(r2)
 80105b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80105b4:	e0fffc17 	ldw	r3,-16(fp)
 80105b8:	e0bfff17 	ldw	r2,-4(fp)
 80105bc:	18bff01e 	bne	r3,r2,8010580 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80105c0:	0005883a 	mov	r2,zero
}
 80105c4:	e037883a 	mov	sp,fp
 80105c8:	dfc00117 	ldw	ra,4(sp)
 80105cc:	df000017 	ldw	fp,0(sp)
 80105d0:	dec00204 	addi	sp,sp,8
 80105d4:	f800283a 	ret

080105d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80105d8:	defffb04 	addi	sp,sp,-20
 80105dc:	dfc00415 	stw	ra,16(sp)
 80105e0:	df000315 	stw	fp,12(sp)
 80105e4:	df000304 	addi	fp,sp,12
 80105e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80105ec:	d0a00a17 	ldw	r2,-32728(gp)
 80105f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80105f4:	00003106 	br	80106bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80105f8:	e0bffd17 	ldw	r2,-12(fp)
 80105fc:	10800217 	ldw	r2,8(r2)
 8010600:	1009883a 	mov	r4,r2
 8010604:	8001c900 	call	8001c90 <strlen>
 8010608:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801060c:	e0bffd17 	ldw	r2,-12(fp)
 8010610:	10c00217 	ldw	r3,8(r2)
 8010614:	e0bffe17 	ldw	r2,-8(fp)
 8010618:	10bfffc4 	addi	r2,r2,-1
 801061c:	1885883a 	add	r2,r3,r2
 8010620:	10800003 	ldbu	r2,0(r2)
 8010624:	10803fcc 	andi	r2,r2,255
 8010628:	1080201c 	xori	r2,r2,128
 801062c:	10bfe004 	addi	r2,r2,-128
 8010630:	10800bd8 	cmpnei	r2,r2,47
 8010634:	1000031e 	bne	r2,zero,8010644 <alt_find_file+0x6c>
    {
      len -= 1;
 8010638:	e0bffe17 	ldw	r2,-8(fp)
 801063c:	10bfffc4 	addi	r2,r2,-1
 8010640:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010644:	e0bffe17 	ldw	r2,-8(fp)
 8010648:	e0ffff17 	ldw	r3,-4(fp)
 801064c:	1885883a 	add	r2,r3,r2
 8010650:	10800003 	ldbu	r2,0(r2)
 8010654:	10803fcc 	andi	r2,r2,255
 8010658:	1080201c 	xori	r2,r2,128
 801065c:	10bfe004 	addi	r2,r2,-128
 8010660:	10800be0 	cmpeqi	r2,r2,47
 8010664:	1000081e 	bne	r2,zero,8010688 <alt_find_file+0xb0>
 8010668:	e0bffe17 	ldw	r2,-8(fp)
 801066c:	e0ffff17 	ldw	r3,-4(fp)
 8010670:	1885883a 	add	r2,r3,r2
 8010674:	10800003 	ldbu	r2,0(r2)
 8010678:	10803fcc 	andi	r2,r2,255
 801067c:	1080201c 	xori	r2,r2,128
 8010680:	10bfe004 	addi	r2,r2,-128
 8010684:	10000a1e 	bne	r2,zero,80106b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8010688:	e0bffd17 	ldw	r2,-12(fp)
 801068c:	10800217 	ldw	r2,8(r2)
 8010690:	e0fffe17 	ldw	r3,-8(fp)
 8010694:	180d883a 	mov	r6,r3
 8010698:	e17fff17 	ldw	r5,-4(fp)
 801069c:	1009883a 	mov	r4,r2
 80106a0:	80108fc0 	call	80108fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80106a4:	1000021e 	bne	r2,zero,80106b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80106a8:	e0bffd17 	ldw	r2,-12(fp)
 80106ac:	00000706 	br	80106cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80106b0:	e0bffd17 	ldw	r2,-12(fp)
 80106b4:	10800017 	ldw	r2,0(r2)
 80106b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80106bc:	e0fffd17 	ldw	r3,-12(fp)
 80106c0:	d0a00a04 	addi	r2,gp,-32728
 80106c4:	18bfcc1e 	bne	r3,r2,80105f8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80106c8:	0005883a 	mov	r2,zero
}
 80106cc:	e037883a 	mov	sp,fp
 80106d0:	dfc00117 	ldw	ra,4(sp)
 80106d4:	df000017 	ldw	fp,0(sp)
 80106d8:	dec00204 	addi	sp,sp,8
 80106dc:	f800283a 	ret

080106e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80106e0:	defffc04 	addi	sp,sp,-16
 80106e4:	df000315 	stw	fp,12(sp)
 80106e8:	df000304 	addi	fp,sp,12
 80106ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80106f0:	00bffa04 	movi	r2,-24
 80106f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80106f8:	e03ffd15 	stw	zero,-12(fp)
 80106fc:	00001906 	br	8010764 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8010700:	00820074 	movhi	r2,2049
 8010704:	10861504 	addi	r2,r2,6228
 8010708:	e0fffd17 	ldw	r3,-12(fp)
 801070c:	18c00324 	muli	r3,r3,12
 8010710:	10c5883a 	add	r2,r2,r3
 8010714:	10800017 	ldw	r2,0(r2)
 8010718:	10000f1e 	bne	r2,zero,8010758 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 801071c:	00820074 	movhi	r2,2049
 8010720:	10861504 	addi	r2,r2,6228
 8010724:	e0fffd17 	ldw	r3,-12(fp)
 8010728:	18c00324 	muli	r3,r3,12
 801072c:	10c5883a 	add	r2,r2,r3
 8010730:	e0ffff17 	ldw	r3,-4(fp)
 8010734:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010738:	d0e00e17 	ldw	r3,-32712(gp)
 801073c:	e0bffd17 	ldw	r2,-12(fp)
 8010740:	1880020e 	bge	r3,r2,801074c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8010744:	e0bffd17 	ldw	r2,-12(fp)
 8010748:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 801074c:	e0bffd17 	ldw	r2,-12(fp)
 8010750:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8010754:	00000606 	br	8010770 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010758:	e0bffd17 	ldw	r2,-12(fp)
 801075c:	10800044 	addi	r2,r2,1
 8010760:	e0bffd15 	stw	r2,-12(fp)
 8010764:	e0bffd17 	ldw	r2,-12(fp)
 8010768:	10800810 	cmplti	r2,r2,32
 801076c:	103fe41e 	bne	r2,zero,8010700 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010770:	e0bffe17 	ldw	r2,-8(fp)
}
 8010774:	e037883a 	mov	sp,fp
 8010778:	df000017 	ldw	fp,0(sp)
 801077c:	dec00104 	addi	sp,sp,4
 8010780:	f800283a 	ret

08010784 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8010784:	defffb04 	addi	sp,sp,-20
 8010788:	df000415 	stw	fp,16(sp)
 801078c:	df000404 	addi	fp,sp,16
 8010790:	e13ffe15 	stw	r4,-8(fp)
 8010794:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8010798:	e0bfff17 	ldw	r2,-4(fp)
 801079c:	10840070 	cmpltui	r2,r2,4097
 80107a0:	1000021e 	bne	r2,zero,80107ac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80107a4:	00840004 	movi	r2,4096
 80107a8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80107ac:	e0fffe17 	ldw	r3,-8(fp)
 80107b0:	e0bfff17 	ldw	r2,-4(fp)
 80107b4:	1885883a 	add	r2,r3,r2
 80107b8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80107bc:	e0bffe17 	ldw	r2,-8(fp)
 80107c0:	e0bffc15 	stw	r2,-16(fp)
 80107c4:	00000506 	br	80107dc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80107c8:	e0bffc17 	ldw	r2,-16(fp)
 80107cc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80107d0:	e0bffc17 	ldw	r2,-16(fp)
 80107d4:	10800804 	addi	r2,r2,32
 80107d8:	e0bffc15 	stw	r2,-16(fp)
 80107dc:	e0fffc17 	ldw	r3,-16(fp)
 80107e0:	e0bffd17 	ldw	r2,-12(fp)
 80107e4:	18bff836 	bltu	r3,r2,80107c8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80107e8:	e0bffe17 	ldw	r2,-8(fp)
 80107ec:	108007cc 	andi	r2,r2,31
 80107f0:	10000226 	beq	r2,zero,80107fc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80107f4:	e0bffc17 	ldw	r2,-16(fp)
 80107f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80107fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8010800:	0001883a 	nop
 8010804:	e037883a 	mov	sp,fp
 8010808:	df000017 	ldw	fp,0(sp)
 801080c:	dec00104 	addi	sp,sp,4
 8010810:	f800283a 	ret

08010814 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8010814:	defffe04 	addi	sp,sp,-8
 8010818:	df000115 	stw	fp,4(sp)
 801081c:	df000104 	addi	fp,sp,4
 8010820:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8010824:	e0bfff17 	ldw	r2,-4(fp)
 8010828:	10bffe84 	addi	r2,r2,-6
 801082c:	10c00428 	cmpgeui	r3,r2,16
 8010830:	18001a1e 	bne	r3,zero,801089c <alt_exception_cause_generated_bad_addr+0x88>
 8010834:	100690ba 	slli	r3,r2,2
 8010838:	00820074 	movhi	r2,2049
 801083c:	10821304 	addi	r2,r2,2124
 8010840:	1885883a 	add	r2,r3,r2
 8010844:	10800017 	ldw	r2,0(r2)
 8010848:	1000683a 	jmp	r2
 801084c:	0801088c 	andi	zero,at,1058
 8010850:	0801088c 	andi	zero,at,1058
 8010854:	0801089c 	xori	zero,at,1058
 8010858:	0801089c 	xori	zero,at,1058
 801085c:	0801089c 	xori	zero,at,1058
 8010860:	0801088c 	andi	zero,at,1058
 8010864:	08010894 	ori	zero,at,1058
 8010868:	0801089c 	xori	zero,at,1058
 801086c:	0801088c 	andi	zero,at,1058
 8010870:	0801088c 	andi	zero,at,1058
 8010874:	0801089c 	xori	zero,at,1058
 8010878:	0801088c 	andi	zero,at,1058
 801087c:	08010894 	ori	zero,at,1058
 8010880:	0801089c 	xori	zero,at,1058
 8010884:	0801089c 	xori	zero,at,1058
 8010888:	0801088c 	andi	zero,at,1058
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801088c:	00800044 	movi	r2,1
 8010890:	00000306 	br	80108a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8010894:	0005883a 	mov	r2,zero
 8010898:	00000106 	br	80108a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801089c:	0005883a 	mov	r2,zero
  }
}
 80108a0:	e037883a 	mov	sp,fp
 80108a4:	df000017 	ldw	fp,0(sp)
 80108a8:	dec00104 	addi	sp,sp,4
 80108ac:	f800283a 	ret

080108b0 <atexit>:
 80108b0:	200b883a 	mov	r5,r4
 80108b4:	000f883a 	mov	r7,zero
 80108b8:	000d883a 	mov	r6,zero
 80108bc:	0009883a 	mov	r4,zero
 80108c0:	80109781 	jmpi	8010978 <__register_exitproc>

080108c4 <exit>:
 80108c4:	defffe04 	addi	sp,sp,-8
 80108c8:	000b883a 	mov	r5,zero
 80108cc:	dc000015 	stw	r16,0(sp)
 80108d0:	dfc00115 	stw	ra,4(sp)
 80108d4:	2021883a 	mov	r16,r4
 80108d8:	8010a900 	call	8010a90 <__call_exitprocs>
 80108dc:	00820074 	movhi	r2,2049
 80108e0:	108a9104 	addi	r2,r2,10820
 80108e4:	11000017 	ldw	r4,0(r2)
 80108e8:	20800f17 	ldw	r2,60(r4)
 80108ec:	10000126 	beq	r2,zero,80108f4 <exit+0x30>
 80108f0:	103ee83a 	callr	r2
 80108f4:	8009883a 	mov	r4,r16
 80108f8:	8010c100 	call	8010c10 <_exit>

080108fc <memcmp>:
 80108fc:	01c000c4 	movi	r7,3
 8010900:	3980192e 	bgeu	r7,r6,8010968 <memcmp+0x6c>
 8010904:	2144b03a 	or	r2,r4,r5
 8010908:	11c4703a 	and	r2,r2,r7
 801090c:	10000f26 	beq	r2,zero,801094c <memcmp+0x50>
 8010910:	20800003 	ldbu	r2,0(r4)
 8010914:	28c00003 	ldbu	r3,0(r5)
 8010918:	10c0151e 	bne	r2,r3,8010970 <memcmp+0x74>
 801091c:	31bfff84 	addi	r6,r6,-2
 8010920:	01ffffc4 	movi	r7,-1
 8010924:	00000406 	br	8010938 <memcmp+0x3c>
 8010928:	20800003 	ldbu	r2,0(r4)
 801092c:	28c00003 	ldbu	r3,0(r5)
 8010930:	31bfffc4 	addi	r6,r6,-1
 8010934:	10c00e1e 	bne	r2,r3,8010970 <memcmp+0x74>
 8010938:	21000044 	addi	r4,r4,1
 801093c:	29400044 	addi	r5,r5,1
 8010940:	31fff91e 	bne	r6,r7,8010928 <memcmp+0x2c>
 8010944:	0005883a 	mov	r2,zero
 8010948:	f800283a 	ret
 801094c:	20c00017 	ldw	r3,0(r4)
 8010950:	28800017 	ldw	r2,0(r5)
 8010954:	18bfee1e 	bne	r3,r2,8010910 <memcmp+0x14>
 8010958:	31bfff04 	addi	r6,r6,-4
 801095c:	21000104 	addi	r4,r4,4
 8010960:	29400104 	addi	r5,r5,4
 8010964:	39bff936 	bltu	r7,r6,801094c <memcmp+0x50>
 8010968:	303fe91e 	bne	r6,zero,8010910 <memcmp+0x14>
 801096c:	003ff506 	br	8010944 <memcmp+0x48>
 8010970:	10c5c83a 	sub	r2,r2,r3
 8010974:	f800283a 	ret

08010978 <__register_exitproc>:
 8010978:	defffa04 	addi	sp,sp,-24
 801097c:	dc000315 	stw	r16,12(sp)
 8010980:	04020074 	movhi	r16,2049
 8010984:	840a9104 	addi	r16,r16,10820
 8010988:	80c00017 	ldw	r3,0(r16)
 801098c:	dc400415 	stw	r17,16(sp)
 8010990:	dfc00515 	stw	ra,20(sp)
 8010994:	18805217 	ldw	r2,328(r3)
 8010998:	2023883a 	mov	r17,r4
 801099c:	10003726 	beq	r2,zero,8010a7c <__register_exitproc+0x104>
 80109a0:	10c00117 	ldw	r3,4(r2)
 80109a4:	010007c4 	movi	r4,31
 80109a8:	20c00e16 	blt	r4,r3,80109e4 <__register_exitproc+0x6c>
 80109ac:	1a000044 	addi	r8,r3,1
 80109b0:	8800221e 	bne	r17,zero,8010a3c <__register_exitproc+0xc4>
 80109b4:	18c00084 	addi	r3,r3,2
 80109b8:	18c7883a 	add	r3,r3,r3
 80109bc:	18c7883a 	add	r3,r3,r3
 80109c0:	12000115 	stw	r8,4(r2)
 80109c4:	10c7883a 	add	r3,r2,r3
 80109c8:	19400015 	stw	r5,0(r3)
 80109cc:	0005883a 	mov	r2,zero
 80109d0:	dfc00517 	ldw	ra,20(sp)
 80109d4:	dc400417 	ldw	r17,16(sp)
 80109d8:	dc000317 	ldw	r16,12(sp)
 80109dc:	dec00604 	addi	sp,sp,24
 80109e0:	f800283a 	ret
 80109e4:	00800034 	movhi	r2,0
 80109e8:	10800004 	addi	r2,r2,0
 80109ec:	10002626 	beq	r2,zero,8010a88 <__register_exitproc+0x110>
 80109f0:	01006404 	movi	r4,400
 80109f4:	d9400015 	stw	r5,0(sp)
 80109f8:	d9800115 	stw	r6,4(sp)
 80109fc:	d9c00215 	stw	r7,8(sp)
 8010a00:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8010a04:	d9400017 	ldw	r5,0(sp)
 8010a08:	d9800117 	ldw	r6,4(sp)
 8010a0c:	d9c00217 	ldw	r7,8(sp)
 8010a10:	10001d26 	beq	r2,zero,8010a88 <__register_exitproc+0x110>
 8010a14:	81000017 	ldw	r4,0(r16)
 8010a18:	10000115 	stw	zero,4(r2)
 8010a1c:	02000044 	movi	r8,1
 8010a20:	22405217 	ldw	r9,328(r4)
 8010a24:	0007883a 	mov	r3,zero
 8010a28:	12400015 	stw	r9,0(r2)
 8010a2c:	20805215 	stw	r2,328(r4)
 8010a30:	10006215 	stw	zero,392(r2)
 8010a34:	10006315 	stw	zero,396(r2)
 8010a38:	883fde26 	beq	r17,zero,80109b4 <__register_exitproc+0x3c>
 8010a3c:	18c9883a 	add	r4,r3,r3
 8010a40:	2109883a 	add	r4,r4,r4
 8010a44:	1109883a 	add	r4,r2,r4
 8010a48:	21802215 	stw	r6,136(r4)
 8010a4c:	01800044 	movi	r6,1
 8010a50:	12406217 	ldw	r9,392(r2)
 8010a54:	30cc983a 	sll	r6,r6,r3
 8010a58:	4992b03a 	or	r9,r9,r6
 8010a5c:	12406215 	stw	r9,392(r2)
 8010a60:	21c04215 	stw	r7,264(r4)
 8010a64:	01000084 	movi	r4,2
 8010a68:	893fd21e 	bne	r17,r4,80109b4 <__register_exitproc+0x3c>
 8010a6c:	11006317 	ldw	r4,396(r2)
 8010a70:	218cb03a 	or	r6,r4,r6
 8010a74:	11806315 	stw	r6,396(r2)
 8010a78:	003fce06 	br	80109b4 <__register_exitproc+0x3c>
 8010a7c:	18805304 	addi	r2,r3,332
 8010a80:	18805215 	stw	r2,328(r3)
 8010a84:	003fc606 	br	80109a0 <__register_exitproc+0x28>
 8010a88:	00bfffc4 	movi	r2,-1
 8010a8c:	003fd006 	br	80109d0 <__register_exitproc+0x58>

08010a90 <__call_exitprocs>:
 8010a90:	defff504 	addi	sp,sp,-44
 8010a94:	df000915 	stw	fp,36(sp)
 8010a98:	dd400615 	stw	r21,24(sp)
 8010a9c:	dc800315 	stw	r18,12(sp)
 8010aa0:	dfc00a15 	stw	ra,40(sp)
 8010aa4:	ddc00815 	stw	r23,32(sp)
 8010aa8:	dd800715 	stw	r22,28(sp)
 8010aac:	dd000515 	stw	r20,20(sp)
 8010ab0:	dcc00415 	stw	r19,16(sp)
 8010ab4:	dc400215 	stw	r17,8(sp)
 8010ab8:	dc000115 	stw	r16,4(sp)
 8010abc:	d9000015 	stw	r4,0(sp)
 8010ac0:	2839883a 	mov	fp,r5
 8010ac4:	04800044 	movi	r18,1
 8010ac8:	057fffc4 	movi	r21,-1
 8010acc:	00820074 	movhi	r2,2049
 8010ad0:	108a9104 	addi	r2,r2,10820
 8010ad4:	12000017 	ldw	r8,0(r2)
 8010ad8:	45005217 	ldw	r20,328(r8)
 8010adc:	44c05204 	addi	r19,r8,328
 8010ae0:	a0001c26 	beq	r20,zero,8010b54 <__call_exitprocs+0xc4>
 8010ae4:	a0800117 	ldw	r2,4(r20)
 8010ae8:	15ffffc4 	addi	r23,r2,-1
 8010aec:	b8000d16 	blt	r23,zero,8010b24 <__call_exitprocs+0x94>
 8010af0:	14000044 	addi	r16,r2,1
 8010af4:	8421883a 	add	r16,r16,r16
 8010af8:	8421883a 	add	r16,r16,r16
 8010afc:	84402004 	addi	r17,r16,128
 8010b00:	a463883a 	add	r17,r20,r17
 8010b04:	a421883a 	add	r16,r20,r16
 8010b08:	e0001e26 	beq	fp,zero,8010b84 <__call_exitprocs+0xf4>
 8010b0c:	80804017 	ldw	r2,256(r16)
 8010b10:	e0801c26 	beq	fp,r2,8010b84 <__call_exitprocs+0xf4>
 8010b14:	bdffffc4 	addi	r23,r23,-1
 8010b18:	843fff04 	addi	r16,r16,-4
 8010b1c:	8c7fff04 	addi	r17,r17,-4
 8010b20:	bd7ff91e 	bne	r23,r21,8010b08 <__call_exitprocs+0x78>
 8010b24:	00800034 	movhi	r2,0
 8010b28:	10800004 	addi	r2,r2,0
 8010b2c:	10000926 	beq	r2,zero,8010b54 <__call_exitprocs+0xc4>
 8010b30:	a0800117 	ldw	r2,4(r20)
 8010b34:	1000301e 	bne	r2,zero,8010bf8 <__call_exitprocs+0x168>
 8010b38:	a0800017 	ldw	r2,0(r20)
 8010b3c:	10003226 	beq	r2,zero,8010c08 <__call_exitprocs+0x178>
 8010b40:	a009883a 	mov	r4,r20
 8010b44:	98800015 	stw	r2,0(r19)
 8010b48:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8010b4c:	9d000017 	ldw	r20,0(r19)
 8010b50:	a03fe41e 	bne	r20,zero,8010ae4 <__call_exitprocs+0x54>
 8010b54:	dfc00a17 	ldw	ra,40(sp)
 8010b58:	df000917 	ldw	fp,36(sp)
 8010b5c:	ddc00817 	ldw	r23,32(sp)
 8010b60:	dd800717 	ldw	r22,28(sp)
 8010b64:	dd400617 	ldw	r21,24(sp)
 8010b68:	dd000517 	ldw	r20,20(sp)
 8010b6c:	dcc00417 	ldw	r19,16(sp)
 8010b70:	dc800317 	ldw	r18,12(sp)
 8010b74:	dc400217 	ldw	r17,8(sp)
 8010b78:	dc000117 	ldw	r16,4(sp)
 8010b7c:	dec00b04 	addi	sp,sp,44
 8010b80:	f800283a 	ret
 8010b84:	a0800117 	ldw	r2,4(r20)
 8010b88:	80c00017 	ldw	r3,0(r16)
 8010b8c:	10bfffc4 	addi	r2,r2,-1
 8010b90:	15c01426 	beq	r2,r23,8010be4 <__call_exitprocs+0x154>
 8010b94:	80000015 	stw	zero,0(r16)
 8010b98:	183fde26 	beq	r3,zero,8010b14 <__call_exitprocs+0x84>
 8010b9c:	95c8983a 	sll	r4,r18,r23
 8010ba0:	a0806217 	ldw	r2,392(r20)
 8010ba4:	a5800117 	ldw	r22,4(r20)
 8010ba8:	2084703a 	and	r2,r4,r2
 8010bac:	10000b26 	beq	r2,zero,8010bdc <__call_exitprocs+0x14c>
 8010bb0:	a0806317 	ldw	r2,396(r20)
 8010bb4:	2088703a 	and	r4,r4,r2
 8010bb8:	20000c1e 	bne	r4,zero,8010bec <__call_exitprocs+0x15c>
 8010bbc:	89400017 	ldw	r5,0(r17)
 8010bc0:	d9000017 	ldw	r4,0(sp)
 8010bc4:	183ee83a 	callr	r3
 8010bc8:	a0800117 	ldw	r2,4(r20)
 8010bcc:	15bfbf1e 	bne	r2,r22,8010acc <__call_exitprocs+0x3c>
 8010bd0:	98800017 	ldw	r2,0(r19)
 8010bd4:	153fcf26 	beq	r2,r20,8010b14 <__call_exitprocs+0x84>
 8010bd8:	003fbc06 	br	8010acc <__call_exitprocs+0x3c>
 8010bdc:	183ee83a 	callr	r3
 8010be0:	003ff906 	br	8010bc8 <__call_exitprocs+0x138>
 8010be4:	a5c00115 	stw	r23,4(r20)
 8010be8:	003feb06 	br	8010b98 <__call_exitprocs+0x108>
 8010bec:	89000017 	ldw	r4,0(r17)
 8010bf0:	183ee83a 	callr	r3
 8010bf4:	003ff406 	br	8010bc8 <__call_exitprocs+0x138>
 8010bf8:	a0800017 	ldw	r2,0(r20)
 8010bfc:	a027883a 	mov	r19,r20
 8010c00:	1029883a 	mov	r20,r2
 8010c04:	003fb606 	br	8010ae0 <__call_exitprocs+0x50>
 8010c08:	0005883a 	mov	r2,zero
 8010c0c:	003ffb06 	br	8010bfc <__call_exitprocs+0x16c>

08010c10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010c10:	defffd04 	addi	sp,sp,-12
 8010c14:	df000215 	stw	fp,8(sp)
 8010c18:	df000204 	addi	fp,sp,8
 8010c1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010c20:	0001883a 	nop
 8010c24:	e0bfff17 	ldw	r2,-4(fp)
 8010c28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8010c2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010c30:	10000226 	beq	r2,zero,8010c3c <_exit+0x2c>
    ALT_SIM_FAIL();
 8010c34:	002af070 	cmpltui	zero,zero,43969
 8010c38:	00000106 	br	8010c40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8010c3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010c40:	003fff06 	br	8010c40 <_exit+0x30>

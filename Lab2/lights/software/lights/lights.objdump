
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00009320 memsz 0x00009320 flags r-x
    LOAD off    0x0000a340 vaddr 0x08009340 paddr 0x0800adac align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000c818 vaddr 0x0800c818 paddr 0x0800c818 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008fac  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000150  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  08009340  0800adac  0000a340  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0800c818  0800c818  0000c818  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0800c96c  0800c96c  0000bdac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000bdac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000c88  00000000  00000000  0000bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019e6d  00000000  00000000  0000ca58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007467  00000000  00000000  000268c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000831b  00000000  00000000  0002dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000197c  00000000  00000000  00036048  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f05  00000000  00000000  000379c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c942  00000000  00000000  0003a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0004720c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001440  00000000  00000000  00047240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004af1e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004af21  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004af2d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004af2e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004af2f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004af3a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004af45  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0004af50  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  0004af5b  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  0004af80  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003aff5  00000000  00000000  000500f7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
080091f0 l    d  .rodata	00000000 .rodata
08009340 l    d  .rwdata	00000000 .rwdata
0800c818 l    d  .bss	00000000 .bss
0800c96c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_load.c
08003f10 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080040b4 l     F .text	00000034 alt_dev_reg
08009340 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800439c l     F .text	0000020c altera_avalon_jtag_uart_irq
080045a8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08004d0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08004e60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004e8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08005300 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08005440 l     F .text	0000003c alt_get_errno
0800547c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0800a548 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08007ad8 l     F .text	00000008 __fp_unlock
08007aec l     F .text	0000019c __sinit.part.1
08007c88 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08008bb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08008c9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
08008d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08008ed4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800ada8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
080090bc l     F .text	0000003c alt_get_errno
0800c830 g     O .bss	00000004 alt_instruction_exception_handler
08008a68 g     F .text	00000054 _isatty_r
08003ffc g     F .text	0000007c alt_main
0800c86c g     O .bss	00000100 alt_irq
08008abc g     F .text	00000060 _lseek_r
0800adac g       *ABS*	00000000 __flash_rwdata_start
0800c96c g       *ABS*	00000000 __alt_heap_start
080087f0 g     F .text	0000005c __sseek
08007e28 g     F .text	00000010 __sinit
08007c90 g     F .text	00000068 __sfmoreglue
08008eb0 g     F .text	00000024 __malloc_unlock
080012d4 g     F .text	00000440 .hidden __divsf3
08006c98 g     F .text	0000015c memmove
08007e10 g     F .text	00000018 _cleanup
08004078 g     F .text	0000003c alt_putstr
08003db4 g     F .text	000000dc .hidden __gtdf2
0800589c g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008a0c g     F .text	0000005c _fstat_r
0800c834 g     O .bss	00000004 errno
0800876c g     F .text	00000008 __seofread
0800c81c g     O .bss	00000004 alt_argv
08012d74 g       *ABS*	00000000 _gp
08001bd8 g     F .text	000004e4 .hidden __subsf3
0800a3c8 g     O .rwdata	00000180 alt_fd_list
080058c0 g     F .text	00000090 alt_find_dev
08006b50 g     F .text	00000148 memcpy
08007ae0 g     F .text	0000000c _cleanup_r
080053c4 g     F .text	0000007c alt_io_redirect
080091f0 g       *ABS*	00000000 __DTOR_END__
08005b8c g     F .text	0000009c alt_exception_cause_generated_bad_addr
080047a0 g     F .text	0000021c altera_avalon_jtag_uart_read
08000d50 g     F .text	00000064 .hidden __udivsi3
08008cd8 g     F .text	000000a4 isatty
08001714 g     F .text	000000c8 .hidden __lesf2
08003d40 g     F .text	00000074 .hidden __fixunsdfsi
08005afc g     F .text	00000090 alt_icache_flush
0800c840 g     O .bss	00000004 __malloc_top_pad
08005d28 g     F .text	000004bc __sfvwrite_r
08007358 g     F .text	00000054 _sbrk_r
08008b1c g     F .text	00000060 _read_r
0800ad84 g     O .rwdata	00000004 alt_max_fd
08008908 g     F .text	000000f0 _fclose_r
08007aa8 g     F .text	00000030 fflush
0800c83c g     O .bss	00000004 __malloc_max_sbrked_mem
08003a24 g     F .text	00000110 .hidden __extendsfdf2
080020bc g     F .text	000008ac .hidden __adddf3
08000720 g     F .text	00000538 .hidden __umoddi3
08008db8 g     F .text	000000d4 lseek
0800ad98 g     O .rwdata	00000004 _global_impure_ptr
08006df4 g     F .text	00000564 _realloc_r
0800c96c g       *ABS*	00000000 __bss_end
08005210 g     F .text	000000f0 alt_iic_isr_register
08005794 g     F .text	00000108 alt_tick
0800397c g     F .text	000000a8 .hidden __floatunsidf
08007e48 g     F .text	00000018 __fp_lock_all
080051c4 g     F .text	0000004c alt_ic_irq_enabled
080056f8 g     F .text	0000009c alt_alarm_stop
0800c824 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800a3a0 g     O .rwdata	00000028 alt_dev_null
08004e18 g     F .text	00000048 alt_dcache_flush_all
08003e90 g     F .text	00000080 .hidden __fixdfsi
0800adac g       *ABS*	00000000 __ram_rwdata_end
0800ad7c g     O .rwdata	00000008 alt_dev_list
080090f8 g     F .text	000000f8 write
08009340 g       *ABS*	00000000 __ram_rodata_end
08008bec g     F .text	000000b0 fstat
08000db4 g     F .text	00000058 .hidden __umodsi3
0800c96c g       *ABS*	00000000 end
080042dc g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080091f0 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08003cdc g     F .text	00000064 .hidden __clzsi2
080049bc g     F .text	00000224 altera_avalon_jtag_uart_write
08007e38 g     F .text	00000004 __sfp_lock_acquire
080069f0 g     F .text	000000e4 memchr
08007f9c g     F .text	00000310 _free_r
080076b0 g     F .text	00000180 __call_exitprocs
0800ada0 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0800c828 g     O .bss	00000004 _alt_tick_rate
0800c82c g     O .bss	00000004 _alt_nticks
08008f10 g     F .text	000000fc read
08004120 g     F .text	00000058 alt_sys_init
08007598 g     F .text	00000118 __register_exitproc
08004648 g     F .text	00000068 altera_avalon_jtag_uart_close
08009340 g       *ABS*	00000000 __ram_rwdata_start
080091f0 g       *ABS*	00000000 __ram_rodata_start
0800c844 g     O .bss	00000028 __malloc_current_mallinfo
08004178 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08005a58 g     F .text	000000a4 alt_get_fd
080088b4 g     F .text	00000054 _close_r
08006ad4 g     F .text	0000007c memcmp
08004238 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800c96c g       *ABS*	00000000 __alt_stack_base
08004288 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08000684 g     F .text	0000009c .hidden __floatundisf
08007444 g     F .text	00000154 __swsetup_r
08007cf8 g     F .text	00000118 __sfp
0800a96c g     O .rwdata	00000408 __malloc_av_
08007e44 g     F .text	00000004 __sinit_lock_release
08002968 g     F .text	00000718 .hidden __muldf3
08008718 g     F .text	00000054 __sread
08005950 g     F .text	00000108 alt_find_file
08004ec8 g     F .text	000000a4 alt_dev_llist_insert
08008e8c g     F .text	00000024 __malloc_lock
0800900c g     F .text	000000b0 sbrk
08007a4c g     F .text	0000005c _fflush_r
0800c818 g       *ABS*	00000000 __bss_start
080085f0 g     F .text	00000128 memset
08000290 g     F .text	00000358 main
0800c820 g     O .bss	00000004 alt_envp
0800c838 g     O .bss	00000004 __malloc_max_total_mem
080041d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001714 g     F .text	000000c8 .hidden __ltsf2
0800884c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080089f8 g     F .text	00000014 fclose
08003b34 g     F .text	000001a8 .hidden __truncdfsf2
080061e4 g     F .text	0000080c _malloc_r
0800ad88 g     O .rwdata	00000004 alt_errno
080082ac g     F .text	000000c4 _fwalk
080005e8 g     F .text	0000009c .hidden __fixunssfdi
08000c58 g     F .text	00000084 .hidden __divsi3
08007e78 g     F .text	00000124 _malloc_trim_r
080091f0 g       *ABS*	00000000 __CTOR_END__
080017dc g     F .text	000003fc .hidden __mulsf3
080091f0 g       *ABS*	00000000 __flash_rodata_start
080091f0 g       *ABS*	00000000 __DTOR_LIST__
080040e8 g     F .text	00000038 alt_irq_init
08005694 g     F .text	00000064 alt_release_fd
08009205 g     O .rodata	00000100 .hidden __clz_tab
08005c28 g     F .text	00000014 atexit
08008854 g     F .text	00000060 _write_r
0800ad9c g     O .rwdata	00000004 _impure_ptr
0800c818 g     O .bss	00000004 alt_argc
08007830 g     F .text	0000021c __sflush_r
08004fcc g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08007e60 g     F .text	00000018 __fp_unlock_all
0800ad74 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08005060 g     F .text	00000050 alt_ic_isr_register
0800adac g       *ABS*	00000000 _edata
0800c96c g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
080046b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005c74 g     F .text	0000009c _fputs_r
08005138 g     F .text	0000008c alt_ic_irq_disable
08008774 g     F .text	0000007c __swrite
0800ada4 g     O .rwdata	00000004 __malloc_trim_threshold
08005c3c g     F .text	00000038 exit
08008370 g     F .text	000000c4 _fwalk_reent
08000cdc g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08007e3c g     F .text	00000004 __sfp_lock_release
08008b7c g     F .text	00000034 _exit
08004be0 g     F .text	0000012c alt_alarm_start
08008434 g     F .text	000001bc __smakebuf_r
080073ac g     F .text	00000098 strlen
08005540 g     F .text	00000154 open
08003db4 g     F .text	000000dc .hidden __gedf2
0800502c g     F .text	00000034 alt_icache_flush_all
08005d10 g     F .text	00000018 fputs
0800ad8c g     O .rwdata	00000004 alt_priority_mask
080050b0 g     F .text	00000088 alt_ic_irq_enable
08003080 g     F .text	000008fc .hidden __subdf3
0800ad90 g     O .rwdata	00000008 alt_alarm_list
08004f6c g     F .text	00000060 _do_ctors
08004d48 g     F .text	000000d0 close
08000e0c g     F .text	000004c8 .hidden __addsf3
08003f78 g     F .text	00000084 alt_load
08007e40 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10b21b04 	addi	r2,r2,-14228
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10b21b04 	addi	r2,r2,-14228
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6af17 	ldw	r2,-25924(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6af17 	ldw	r2,-25924(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d68b5d14 	ori	gp,gp,11636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10b20614 	ori	r2,r2,51224

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18f25b14 	ori	r3,r3,51564

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	8003f780 	call	8003f78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	8003ffc0 	call	8003ffc <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <main>:
#include <io.h>
#include <math.h>
#include <unistd.h>

int main()
{
 8000290:	deffee04 	addi	sp,sp,-72
 8000294:	dfc01115 	stw	ra,68(sp)
 8000298:	df001015 	stw	fp,64(sp)
 800029c:	dc400f15 	stw	r17,60(sp)
 80002a0:	dc000e15 	stw	r16,56(sp)
 80002a4:	df001004 	addi	fp,sp,64
	float pwm_frequency = 100.0;
 80002a8:	0090b234 	movhi	r2,17096
 80002ac:	e0bff115 	stw	r2,-60(fp)
	float dim_period = 5.0f;
 80002b0:	00902834 	movhi	r2,16544
 80002b4:	e0bff215 	stw	r2,-56(fp)


	float pwm_period = 1.0f/pwm_frequency;
 80002b8:	e17ff117 	ldw	r5,-60(fp)
 80002bc:	010fe034 	movhi	r4,16256
 80002c0:	80012d40 	call	80012d4 <__divsf3>
 80002c4:	1007883a 	mov	r3,r2
 80002c8:	e0fff315 	stw	r3,-52(fp)
	float dim_frequency = 1.0f/dim_period;
 80002cc:	e17ff217 	ldw	r5,-56(fp)
 80002d0:	010fe034 	movhi	r4,16256
 80002d4:	80012d40 	call	80012d4 <__divsf3>
 80002d8:	1007883a 	mov	r3,r2
 80002dc:	e0fff415 	stw	r3,-48(fp)
	alt_u64 pwm_period_in_cycles = (alt_u64)(pwm_period * (float)ALT_CPU_CPU_FREQ);
 80002e0:	01530ff4 	movhi	r5,19519
 80002e4:	296f0804 	addi	r5,r5,-17376
 80002e8:	e13ff317 	ldw	r4,-52(fp)
 80002ec:	80017dc0 	call	80017dc <__mulsf3>
 80002f0:	1007883a 	mov	r3,r2
 80002f4:	1805883a 	mov	r2,r3
 80002f8:	1009883a 	mov	r4,r2
 80002fc:	80005e80 	call	80005e8 <__fixunssfdi>
 8000300:	1009883a 	mov	r4,r2
 8000304:	180b883a 	mov	r5,r3
 8000308:	e13ff515 	stw	r4,-44(fp)
 800030c:	e17ff615 	stw	r5,-40(fp)
	alt_u64 dim_period_in_cycles = (alt_u64)(dim_period * (float)ALT_CPU_CPU_FREQ);
 8000310:	01530ff4 	movhi	r5,19519
 8000314:	296f0804 	addi	r5,r5,-17376
 8000318:	e13ff217 	ldw	r4,-56(fp)
 800031c:	80017dc0 	call	80017dc <__mulsf3>
 8000320:	1007883a 	mov	r3,r2
 8000324:	1805883a 	mov	r2,r3
 8000328:	1009883a 	mov	r4,r2
 800032c:	80005e80 	call	80005e8 <__fixunssfdi>
 8000330:	1009883a 	mov	r4,r2
 8000334:	180b883a 	mov	r5,r3
 8000338:	e13ff715 	stw	r4,-36(fp)
 800033c:	e17ff815 	stw	r5,-32(fp)
			} parts;
		alt_u64 raw;
	} cnt;

	// Start Performance Counter
	IOWR(PERFORMANCE_COUNTER_0_BASE,1,0);
 8000340:	0007883a 	mov	r3,zero
 8000344:	00840034 	movhi	r2,4096
 8000348:	10840104 	addi	r2,r2,4100
 800034c:	10c00035 	stwio	r3,0(r2)

	alt_putstr("Hello from Nios II!\n");
 8000350:	01020074 	movhi	r4,2049
 8000354:	21247c04 	addi	r4,r4,-28176
 8000358:	80040780 	call	8004078 <alt_putstr>

	/* Event loop never exits. */
	while (1) {
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 800035c:	00840034 	movhi	r2,4096
 8000360:	10840104 	addi	r2,r2,4100
 8000364:	10800037 	ldwio	r2,0(r2)
 8000368:	e0bffd15 	stw	r2,-12(fp)
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 800036c:	00840034 	movhi	r2,4096
 8000370:	10840004 	addi	r2,r2,4096
 8000374:	10800037 	ldwio	r2,0(r2)
 8000378:	e0bffc15 	stw	r2,-16(fp)
		float current_duty_cycle = fabs((cnt.raw % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);
 800037c:	e0bffc17 	ldw	r2,-16(fp)
 8000380:	e0fffd17 	ldw	r3,-12(fp)
 8000384:	e1bff717 	ldw	r6,-36(fp)
 8000388:	e1fff817 	ldw	r7,-32(fp)
 800038c:	1009883a 	mov	r4,r2
 8000390:	180b883a 	mov	r5,r3
 8000394:	80007200 	call	8000720 <__umoddi3>
 8000398:	1009883a 	mov	r4,r2
 800039c:	180b883a 	mov	r5,r3
 80003a0:	2005883a 	mov	r2,r4
 80003a4:	2807883a 	mov	r3,r5
 80003a8:	1009883a 	mov	r4,r2
 80003ac:	180b883a 	mov	r5,r3
 80003b0:	80006840 	call	8000684 <__floatundisf>
 80003b4:	1021883a 	mov	r16,r2
 80003b8:	e13ff717 	ldw	r4,-36(fp)
 80003bc:	e17ff817 	ldw	r5,-32(fp)
 80003c0:	80006840 	call	8000684 <__floatundisf>
 80003c4:	1007883a 	mov	r3,r2
 80003c8:	180b883a 	mov	r5,r3
 80003cc:	01300034 	movhi	r4,49152
 80003d0:	80012d40 	call	80012d4 <__divsf3>
 80003d4:	1007883a 	mov	r3,r2
 80003d8:	1805883a 	mov	r2,r3
 80003dc:	100b883a 	mov	r5,r2
 80003e0:	8009883a 	mov	r4,r16
 80003e4:	80017dc0 	call	80017dc <__mulsf3>
 80003e8:	1007883a 	mov	r3,r2
 80003ec:	1805883a 	mov	r2,r3
 80003f0:	014fe034 	movhi	r5,16256
 80003f4:	1009883a 	mov	r4,r2
 80003f8:	8000e0c0 	call	8000e0c <__addsf3>
 80003fc:	1009883a 	mov	r4,r2
 8000400:	2007883a 	mov	r3,r4
 8000404:	00a00034 	movhi	r2,32768
 8000408:	10bfffc4 	addi	r2,r2,-1
 800040c:	1884703a 	and	r2,r3,r2
 8000410:	e0bff915 	stw	r2,-28(fp)
		// First part of pwm cycle (<current_duty_cycle>% of it) - signal high
		int i = 0;
 8000414:	e03ff015 	stw	zero,-64(fp)

		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 8000418:	00840034 	movhi	r2,4096
 800041c:	10840104 	addi	r2,r2,4100
 8000420:	10800037 	ldwio	r2,0(r2)
 8000424:	e0bffd15 	stw	r2,-12(fp)
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 8000428:	00840034 	movhi	r2,4096
 800042c:	10840004 	addi	r2,r2,4096
 8000430:	10800037 	ldwio	r2,0(r2)
 8000434:	e0bffc15 	stw	r2,-16(fp)
		alt_u64 start = cnt.raw;
 8000438:	e0bffc17 	ldw	r2,-16(fp)
 800043c:	e0bffa15 	stw	r2,-24(fp)
 8000440:	e0bffd17 	ldw	r2,-12(fp)
 8000444:	e0bffb15 	stw	r2,-20(fp)
		while(cnt.raw - start < current_duty_cycle * pwm_period_in_cycles) {
 8000448:	00001006 	br	800048c <main+0x1fc>
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x3FFFFFF);
 800044c:	00c10034 	movhi	r3,1024
 8000450:	18ffffc4 	addi	r3,r3,-1
 8000454:	00840034 	movhi	r2,4096
 8000458:	10841004 	addi	r2,r2,4160
 800045c:	10c00035 	stwio	r3,0(r2)
			// Read upper 32 bits and lower 32 bits of counter
			cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 8000460:	00840034 	movhi	r2,4096
 8000464:	10840104 	addi	r2,r2,4100
 8000468:	10800037 	ldwio	r2,0(r2)
 800046c:	e0bffd15 	stw	r2,-12(fp)
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 8000470:	00840034 	movhi	r2,4096
 8000474:	10840004 	addi	r2,r2,4096
 8000478:	10800037 	ldwio	r2,0(r2)
 800047c:	e0bffc15 	stw	r2,-16(fp)
			i++;
 8000480:	e0bff017 	ldw	r2,-64(fp)
 8000484:	10800044 	addi	r2,r2,1
 8000488:	e0bff015 	stw	r2,-64(fp)
		int i = 0;

		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
		alt_u64 start = cnt.raw;
		while(cnt.raw - start < current_duty_cycle * pwm_period_in_cycles) {
 800048c:	e13ffc17 	ldw	r4,-16(fp)
 8000490:	e17ffd17 	ldw	r5,-12(fp)
 8000494:	e1bffa17 	ldw	r6,-24(fp)
 8000498:	e1fffb17 	ldw	r7,-20(fp)
 800049c:	2185c83a 	sub	r2,r4,r6
 80004a0:	2091803a 	cmpltu	r8,r4,r2
 80004a4:	29c7c83a 	sub	r3,r5,r7
 80004a8:	1a09c83a 	sub	r4,r3,r8
 80004ac:	2007883a 	mov	r3,r4
 80004b0:	100b883a 	mov	r5,r2
 80004b4:	180d883a 	mov	r6,r3
 80004b8:	2809883a 	mov	r4,r5
 80004bc:	300b883a 	mov	r5,r6
 80004c0:	80006840 	call	8000684 <__floatundisf>
 80004c4:	1021883a 	mov	r16,r2
 80004c8:	e13ff517 	ldw	r4,-44(fp)
 80004cc:	e17ff617 	ldw	r5,-40(fp)
 80004d0:	80006840 	call	8000684 <__floatundisf>
 80004d4:	1007883a 	mov	r3,r2
 80004d8:	e17ff917 	ldw	r5,-28(fp)
 80004dc:	1809883a 	mov	r4,r3
 80004e0:	80017dc0 	call	80017dc <__mulsf3>
 80004e4:	1007883a 	mov	r3,r2
 80004e8:	1805883a 	mov	r2,r3
 80004ec:	100b883a 	mov	r5,r2
 80004f0:	8009883a 	mov	r4,r16
 80004f4:	80017140 	call	8001714 <__lesf2>
 80004f8:	103fd416 	blt	r2,zero,800044c <main+0x1bc>
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
			i++;
		}

		// Second part of pwm cycle (rest of it) - signal low
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 80004fc:	00840034 	movhi	r2,4096
 8000500:	10840104 	addi	r2,r2,4100
 8000504:	10800037 	ldwio	r2,0(r2)
 8000508:	e0bffd15 	stw	r2,-12(fp)
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 800050c:	00840034 	movhi	r2,4096
 8000510:	10840004 	addi	r2,r2,4096
 8000514:	10800037 	ldwio	r2,0(r2)
 8000518:	e0bffc15 	stw	r2,-16(fp)
		start = cnt.raw;
 800051c:	e0bffc17 	ldw	r2,-16(fp)
 8000520:	e0bffa15 	stw	r2,-24(fp)
 8000524:	e0bffd17 	ldw	r2,-12(fp)
 8000528:	e0bffb15 	stw	r2,-20(fp)
		while(cnt.raw - start < (1-current_duty_cycle)*pwm_period_in_cycles) {
 800052c:	00000c06 	br	8000560 <main+0x2d0>
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x0);
 8000530:	0007883a 	mov	r3,zero
 8000534:	00840034 	movhi	r2,4096
 8000538:	10841004 	addi	r2,r2,4160
 800053c:	10c00035 	stwio	r3,0(r2)
			// Read upper 32 bits and lower 32 bits of counter
			cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 8000540:	00840034 	movhi	r2,4096
 8000544:	10840104 	addi	r2,r2,4100
 8000548:	10800037 	ldwio	r2,0(r2)
 800054c:	e0bffd15 	stw	r2,-12(fp)
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 8000550:	00840034 	movhi	r2,4096
 8000554:	10840004 	addi	r2,r2,4096
 8000558:	10800037 	ldwio	r2,0(r2)
 800055c:	e0bffc15 	stw	r2,-16(fp)

		// Second part of pwm cycle (rest of it) - signal low
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
		start = cnt.raw;
		while(cnt.raw - start < (1-current_duty_cycle)*pwm_period_in_cycles) {
 8000560:	e13ffc17 	ldw	r4,-16(fp)
 8000564:	e17ffd17 	ldw	r5,-12(fp)
 8000568:	e1bffa17 	ldw	r6,-24(fp)
 800056c:	e1fffb17 	ldw	r7,-20(fp)
 8000570:	2185c83a 	sub	r2,r4,r6
 8000574:	2091803a 	cmpltu	r8,r4,r2
 8000578:	29c7c83a 	sub	r3,r5,r7
 800057c:	1a09c83a 	sub	r4,r3,r8
 8000580:	2007883a 	mov	r3,r4
 8000584:	100b883a 	mov	r5,r2
 8000588:	180d883a 	mov	r6,r3
 800058c:	2809883a 	mov	r4,r5
 8000590:	300b883a 	mov	r5,r6
 8000594:	80006840 	call	8000684 <__floatundisf>
 8000598:	1021883a 	mov	r16,r2
 800059c:	e17ff917 	ldw	r5,-28(fp)
 80005a0:	010fe034 	movhi	r4,16256
 80005a4:	8001bd80 	call	8001bd8 <__subsf3>
 80005a8:	1007883a 	mov	r3,r2
 80005ac:	1823883a 	mov	r17,r3
 80005b0:	e13ff517 	ldw	r4,-44(fp)
 80005b4:	e17ff617 	ldw	r5,-40(fp)
 80005b8:	80006840 	call	8000684 <__floatundisf>
 80005bc:	1007883a 	mov	r3,r2
 80005c0:	180b883a 	mov	r5,r3
 80005c4:	8809883a 	mov	r4,r17
 80005c8:	80017dc0 	call	80017dc <__mulsf3>
 80005cc:	1007883a 	mov	r3,r2
 80005d0:	1805883a 	mov	r2,r3
 80005d4:	100b883a 	mov	r5,r2
 80005d8:	8009883a 	mov	r4,r16
 80005dc:	80017140 	call	8001714 <__lesf2>
 80005e0:	103fd316 	blt	r2,zero,8000530 <main+0x2a0>
			IOWR(LEDS_BASE,0,0x0);
			// Read upper 32 bits and lower 32 bits of counter
			cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
		}
	}
 80005e4:	003f5d06 	br	800035c <main+0xcc>

080005e8 <__fixunssfdi>:
 80005e8:	defffc04 	addi	sp,sp,-16
 80005ec:	dfc00315 	stw	ra,12(sp)
 80005f0:	dc800215 	stw	r18,8(sp)
 80005f4:	dc400115 	stw	r17,4(sp)
 80005f8:	dc000015 	stw	r16,0(sp)
 80005fc:	8003a240 	call	8003a24 <__extendsfdf2>
 8000600:	000d883a 	mov	r6,zero
 8000604:	01cf7c34 	movhi	r7,15856
 8000608:	1009883a 	mov	r4,r2
 800060c:	180b883a 	mov	r5,r3
 8000610:	1025883a 	mov	r18,r2
 8000614:	1823883a 	mov	r17,r3
 8000618:	80029680 	call	8002968 <__muldf3>
 800061c:	180b883a 	mov	r5,r3
 8000620:	1009883a 	mov	r4,r2
 8000624:	8003d400 	call	8003d40 <__fixunsdfsi>
 8000628:	1009883a 	mov	r4,r2
 800062c:	1021883a 	mov	r16,r2
 8000630:	800397c0 	call	800397c <__floatunsidf>
 8000634:	000d883a 	mov	r6,zero
 8000638:	01d07c34 	movhi	r7,16880
 800063c:	1009883a 	mov	r4,r2
 8000640:	180b883a 	mov	r5,r3
 8000644:	80029680 	call	8002968 <__muldf3>
 8000648:	100d883a 	mov	r6,r2
 800064c:	180f883a 	mov	r7,r3
 8000650:	9009883a 	mov	r4,r18
 8000654:	880b883a 	mov	r5,r17
 8000658:	80030800 	call	8003080 <__subdf3>
 800065c:	180b883a 	mov	r5,r3
 8000660:	1009883a 	mov	r4,r2
 8000664:	8003d400 	call	8003d40 <__fixunsdfsi>
 8000668:	8007883a 	mov	r3,r16
 800066c:	dfc00317 	ldw	ra,12(sp)
 8000670:	dc800217 	ldw	r18,8(sp)
 8000674:	dc400117 	ldw	r17,4(sp)
 8000678:	dc000017 	ldw	r16,0(sp)
 800067c:	dec00404 	addi	sp,sp,16
 8000680:	f800283a 	ret

08000684 <__floatundisf>:
 8000684:	defffc04 	addi	sp,sp,-16
 8000688:	00800834 	movhi	r2,32
 800068c:	dc000015 	stw	r16,0(sp)
 8000690:	dfc00315 	stw	ra,12(sp)
 8000694:	dc800215 	stw	r18,8(sp)
 8000698:	dc400115 	stw	r17,4(sp)
 800069c:	10bfffc4 	addi	r2,r2,-1
 80006a0:	2021883a 	mov	r16,r4
 80006a4:	1140052e 	bgeu	r2,r5,80006bc <__floatundisf+0x38>
 80006a8:	2081ffcc 	andi	r2,r4,2047
 80006ac:	10000326 	beq	r2,zero,80006bc <__floatundisf+0x38>
 80006b0:	00be0004 	movi	r2,-2048
 80006b4:	20a0703a 	and	r16,r4,r2
 80006b8:	84020014 	ori	r16,r16,2048
 80006bc:	2809883a 	mov	r4,r5
 80006c0:	800397c0 	call	800397c <__floatunsidf>
 80006c4:	000d883a 	mov	r6,zero
 80006c8:	01d07c34 	movhi	r7,16880
 80006cc:	180b883a 	mov	r5,r3
 80006d0:	1009883a 	mov	r4,r2
 80006d4:	80029680 	call	8002968 <__muldf3>
 80006d8:	8009883a 	mov	r4,r16
 80006dc:	1025883a 	mov	r18,r2
 80006e0:	1823883a 	mov	r17,r3
 80006e4:	800397c0 	call	800397c <__floatunsidf>
 80006e8:	900d883a 	mov	r6,r18
 80006ec:	880f883a 	mov	r7,r17
 80006f0:	1009883a 	mov	r4,r2
 80006f4:	180b883a 	mov	r5,r3
 80006f8:	80020bc0 	call	80020bc <__adddf3>
 80006fc:	1009883a 	mov	r4,r2
 8000700:	180b883a 	mov	r5,r3
 8000704:	8003b340 	call	8003b34 <__truncdfsf2>
 8000708:	dfc00317 	ldw	ra,12(sp)
 800070c:	dc800217 	ldw	r18,8(sp)
 8000710:	dc400117 	ldw	r17,4(sp)
 8000714:	dc000017 	ldw	r16,0(sp)
 8000718:	dec00404 	addi	sp,sp,16
 800071c:	f800283a 	ret

08000720 <__umoddi3>:
 8000720:	defff404 	addi	sp,sp,-48
 8000724:	df000a15 	stw	fp,40(sp)
 8000728:	dc400315 	stw	r17,12(sp)
 800072c:	dc000215 	stw	r16,8(sp)
 8000730:	dfc00b15 	stw	ra,44(sp)
 8000734:	ddc00915 	stw	r23,36(sp)
 8000738:	dd800815 	stw	r22,32(sp)
 800073c:	dd400715 	stw	r21,28(sp)
 8000740:	dd000615 	stw	r20,24(sp)
 8000744:	dcc00515 	stw	r19,20(sp)
 8000748:	dc800415 	stw	r18,16(sp)
 800074c:	2021883a 	mov	r16,r4
 8000750:	2823883a 	mov	r17,r5
 8000754:	2839883a 	mov	fp,r5
 8000758:	38003c1e 	bne	r7,zero,800084c <__umoddi3+0x12c>
 800075c:	3027883a 	mov	r19,r6
 8000760:	2029883a 	mov	r20,r4
 8000764:	2980512e 	bgeu	r5,r6,80008ac <__umoddi3+0x18c>
 8000768:	00bfffd4 	movui	r2,65535
 800076c:	11809a36 	bltu	r2,r6,80009d8 <__umoddi3+0x2b8>
 8000770:	01003fc4 	movi	r4,255
 8000774:	2189803a 	cmpltu	r4,r4,r6
 8000778:	200890fa 	slli	r4,r4,3
 800077c:	3104d83a 	srl	r2,r6,r4
 8000780:	00c20074 	movhi	r3,2049
 8000784:	18e48144 	addi	r3,r3,-28155
 8000788:	1885883a 	add	r2,r3,r2
 800078c:	10c00003 	ldbu	r3,0(r2)
 8000790:	00800804 	movi	r2,32
 8000794:	1909883a 	add	r4,r3,r4
 8000798:	1125c83a 	sub	r18,r2,r4
 800079c:	90000526 	beq	r18,zero,80007b4 <__umoddi3+0x94>
 80007a0:	8ca2983a 	sll	r17,r17,r18
 80007a4:	8108d83a 	srl	r4,r16,r4
 80007a8:	34a6983a 	sll	r19,r6,r18
 80007ac:	84a8983a 	sll	r20,r16,r18
 80007b0:	2478b03a 	or	fp,r4,r17
 80007b4:	982ed43a 	srli	r23,r19,16
 80007b8:	e009883a 	mov	r4,fp
 80007bc:	9dbfffcc 	andi	r22,r19,65535
 80007c0:	b80b883a 	mov	r5,r23
 80007c4:	8000db40 	call	8000db4 <__umodsi3>
 80007c8:	e009883a 	mov	r4,fp
 80007cc:	b80b883a 	mov	r5,r23
 80007d0:	102b883a 	mov	r21,r2
 80007d4:	8000d500 	call	8000d50 <__udivsi3>
 80007d8:	a806943a 	slli	r3,r21,16
 80007dc:	a008d43a 	srli	r4,r20,16
 80007e0:	b085383a 	mul	r2,r22,r2
 80007e4:	20c8b03a 	or	r4,r4,r3
 80007e8:	2080032e 	bgeu	r4,r2,80007f8 <__umoddi3+0xd8>
 80007ec:	24c9883a 	add	r4,r4,r19
 80007f0:	24c00136 	bltu	r4,r19,80007f8 <__umoddi3+0xd8>
 80007f4:	20811036 	bltu	r4,r2,8000c38 <__umoddi3+0x518>
 80007f8:	20abc83a 	sub	r21,r4,r2
 80007fc:	b80b883a 	mov	r5,r23
 8000800:	a809883a 	mov	r4,r21
 8000804:	8000db40 	call	8000db4 <__umodsi3>
 8000808:	1023883a 	mov	r17,r2
 800080c:	b80b883a 	mov	r5,r23
 8000810:	a809883a 	mov	r4,r21
 8000814:	8000d500 	call	8000d50 <__udivsi3>
 8000818:	8822943a 	slli	r17,r17,16
 800081c:	b085383a 	mul	r2,r22,r2
 8000820:	a0ffffcc 	andi	r3,r20,65535
 8000824:	1c46b03a 	or	r3,r3,r17
 8000828:	1880042e 	bgeu	r3,r2,800083c <__umoddi3+0x11c>
 800082c:	1cc7883a 	add	r3,r3,r19
 8000830:	1cc00236 	bltu	r3,r19,800083c <__umoddi3+0x11c>
 8000834:	1880012e 	bgeu	r3,r2,800083c <__umoddi3+0x11c>
 8000838:	1cc7883a 	add	r3,r3,r19
 800083c:	1885c83a 	sub	r2,r3,r2
 8000840:	1484d83a 	srl	r2,r2,r18
 8000844:	0007883a 	mov	r3,zero
 8000848:	00004f06 	br	8000988 <__umoddi3+0x268>
 800084c:	29c04c36 	bltu	r5,r7,8000980 <__umoddi3+0x260>
 8000850:	00bfffd4 	movui	r2,65535
 8000854:	11c0582e 	bgeu	r2,r7,80009b8 <__umoddi3+0x298>
 8000858:	00804034 	movhi	r2,256
 800085c:	10bfffc4 	addi	r2,r2,-1
 8000860:	11c0e736 	bltu	r2,r7,8000c00 <__umoddi3+0x4e0>
 8000864:	01000404 	movi	r4,16
 8000868:	3904d83a 	srl	r2,r7,r4
 800086c:	00c20074 	movhi	r3,2049
 8000870:	18e48144 	addi	r3,r3,-28155
 8000874:	1885883a 	add	r2,r3,r2
 8000878:	14c00003 	ldbu	r19,0(r2)
 800087c:	00c00804 	movi	r3,32
 8000880:	9927883a 	add	r19,r19,r4
 8000884:	1ce9c83a 	sub	r20,r3,r19
 8000888:	a000581e 	bne	r20,zero,80009ec <__umoddi3+0x2cc>
 800088c:	3c400136 	bltu	r7,r17,8000894 <__umoddi3+0x174>
 8000890:	8180eb36 	bltu	r16,r6,8000c40 <__umoddi3+0x520>
 8000894:	8185c83a 	sub	r2,r16,r6
 8000898:	89e3c83a 	sub	r17,r17,r7
 800089c:	8089803a 	cmpltu	r4,r16,r2
 80008a0:	8939c83a 	sub	fp,r17,r4
 80008a4:	e007883a 	mov	r3,fp
 80008a8:	00003706 	br	8000988 <__umoddi3+0x268>
 80008ac:	3000041e 	bne	r6,zero,80008c0 <__umoddi3+0x1a0>
 80008b0:	000b883a 	mov	r5,zero
 80008b4:	01000044 	movi	r4,1
 80008b8:	8000d500 	call	8000d50 <__udivsi3>
 80008bc:	1027883a 	mov	r19,r2
 80008c0:	00bfffd4 	movui	r2,65535
 80008c4:	14c0402e 	bgeu	r2,r19,80009c8 <__umoddi3+0x2a8>
 80008c8:	00804034 	movhi	r2,256
 80008cc:	10bfffc4 	addi	r2,r2,-1
 80008d0:	14c0cd36 	bltu	r2,r19,8000c08 <__umoddi3+0x4e8>
 80008d4:	00800404 	movi	r2,16
 80008d8:	9886d83a 	srl	r3,r19,r2
 80008dc:	01020074 	movhi	r4,2049
 80008e0:	21248144 	addi	r4,r4,-28155
 80008e4:	20c7883a 	add	r3,r4,r3
 80008e8:	18c00003 	ldbu	r3,0(r3)
 80008ec:	1887883a 	add	r3,r3,r2
 80008f0:	00800804 	movi	r2,32
 80008f4:	10e5c83a 	sub	r18,r2,r3
 80008f8:	9000901e 	bne	r18,zero,8000b3c <__umoddi3+0x41c>
 80008fc:	982cd43a 	srli	r22,r19,16
 8000900:	8ce3c83a 	sub	r17,r17,r19
 8000904:	9d7fffcc 	andi	r21,r19,65535
 8000908:	b00b883a 	mov	r5,r22
 800090c:	8809883a 	mov	r4,r17
 8000910:	8000db40 	call	8000db4 <__umodsi3>
 8000914:	8809883a 	mov	r4,r17
 8000918:	b00b883a 	mov	r5,r22
 800091c:	1021883a 	mov	r16,r2
 8000920:	8000d500 	call	8000d50 <__udivsi3>
 8000924:	8006943a 	slli	r3,r16,16
 8000928:	a008d43a 	srli	r4,r20,16
 800092c:	1545383a 	mul	r2,r2,r21
 8000930:	20c8b03a 	or	r4,r4,r3
 8000934:	2080042e 	bgeu	r4,r2,8000948 <__umoddi3+0x228>
 8000938:	24c9883a 	add	r4,r4,r19
 800093c:	24c00236 	bltu	r4,r19,8000948 <__umoddi3+0x228>
 8000940:	2080012e 	bgeu	r4,r2,8000948 <__umoddi3+0x228>
 8000944:	24c9883a 	add	r4,r4,r19
 8000948:	20a1c83a 	sub	r16,r4,r2
 800094c:	b00b883a 	mov	r5,r22
 8000950:	8009883a 	mov	r4,r16
 8000954:	8000db40 	call	8000db4 <__umodsi3>
 8000958:	1023883a 	mov	r17,r2
 800095c:	b00b883a 	mov	r5,r22
 8000960:	8009883a 	mov	r4,r16
 8000964:	8000d500 	call	8000d50 <__udivsi3>
 8000968:	8822943a 	slli	r17,r17,16
 800096c:	1545383a 	mul	r2,r2,r21
 8000970:	a53fffcc 	andi	r20,r20,65535
 8000974:	a446b03a 	or	r3,r20,r17
 8000978:	18bfb02e 	bgeu	r3,r2,800083c <__umoddi3+0x11c>
 800097c:	003fab06 	br	800082c <__umoddi3+0x10c>
 8000980:	2005883a 	mov	r2,r4
 8000984:	2807883a 	mov	r3,r5
 8000988:	dfc00b17 	ldw	ra,44(sp)
 800098c:	df000a17 	ldw	fp,40(sp)
 8000990:	ddc00917 	ldw	r23,36(sp)
 8000994:	dd800817 	ldw	r22,32(sp)
 8000998:	dd400717 	ldw	r21,28(sp)
 800099c:	dd000617 	ldw	r20,24(sp)
 80009a0:	dcc00517 	ldw	r19,20(sp)
 80009a4:	dc800417 	ldw	r18,16(sp)
 80009a8:	dc400317 	ldw	r17,12(sp)
 80009ac:	dc000217 	ldw	r16,8(sp)
 80009b0:	dec00c04 	addi	sp,sp,48
 80009b4:	f800283a 	ret
 80009b8:	04c03fc4 	movi	r19,255
 80009bc:	99c9803a 	cmpltu	r4,r19,r7
 80009c0:	200890fa 	slli	r4,r4,3
 80009c4:	003fa806 	br	8000868 <__umoddi3+0x148>
 80009c8:	00803fc4 	movi	r2,255
 80009cc:	14c5803a 	cmpltu	r2,r2,r19
 80009d0:	100490fa 	slli	r2,r2,3
 80009d4:	003fc006 	br	80008d8 <__umoddi3+0x1b8>
 80009d8:	00804034 	movhi	r2,256
 80009dc:	10bfffc4 	addi	r2,r2,-1
 80009e0:	11808b36 	bltu	r2,r6,8000c10 <__umoddi3+0x4f0>
 80009e4:	01000404 	movi	r4,16
 80009e8:	003f6406 	br	800077c <__umoddi3+0x5c>
 80009ec:	34c4d83a 	srl	r2,r6,r19
 80009f0:	3d0e983a 	sll	r7,r7,r20
 80009f4:	8cf8d83a 	srl	fp,r17,r19
 80009f8:	8d10983a 	sll	r8,r17,r20
 80009fc:	38aab03a 	or	r21,r7,r2
 8000a00:	a82cd43a 	srli	r22,r21,16
 8000a04:	84e2d83a 	srl	r17,r16,r19
 8000a08:	e009883a 	mov	r4,fp
 8000a0c:	b00b883a 	mov	r5,r22
 8000a10:	8a22b03a 	or	r17,r17,r8
 8000a14:	3524983a 	sll	r18,r6,r20
 8000a18:	8000db40 	call	8000db4 <__umodsi3>
 8000a1c:	e009883a 	mov	r4,fp
 8000a20:	b00b883a 	mov	r5,r22
 8000a24:	102f883a 	mov	r23,r2
 8000a28:	8000d500 	call	8000d50 <__udivsi3>
 8000a2c:	100d883a 	mov	r6,r2
 8000a30:	b808943a 	slli	r4,r23,16
 8000a34:	aa3fffcc 	andi	r8,r21,65535
 8000a38:	8804d43a 	srli	r2,r17,16
 8000a3c:	41af383a 	mul	r23,r8,r6
 8000a40:	8520983a 	sll	r16,r16,r20
 8000a44:	1104b03a 	or	r2,r2,r4
 8000a48:	15c0042e 	bgeu	r2,r23,8000a5c <__umoddi3+0x33c>
 8000a4c:	1545883a 	add	r2,r2,r21
 8000a50:	30ffffc4 	addi	r3,r6,-1
 8000a54:	1540742e 	bgeu	r2,r21,8000c28 <__umoddi3+0x508>
 8000a58:	180d883a 	mov	r6,r3
 8000a5c:	15efc83a 	sub	r23,r2,r23
 8000a60:	b00b883a 	mov	r5,r22
 8000a64:	b809883a 	mov	r4,r23
 8000a68:	d9800115 	stw	r6,4(sp)
 8000a6c:	da000015 	stw	r8,0(sp)
 8000a70:	8000db40 	call	8000db4 <__umodsi3>
 8000a74:	b00b883a 	mov	r5,r22
 8000a78:	b809883a 	mov	r4,r23
 8000a7c:	1039883a 	mov	fp,r2
 8000a80:	8000d500 	call	8000d50 <__udivsi3>
 8000a84:	da000017 	ldw	r8,0(sp)
 8000a88:	e038943a 	slli	fp,fp,16
 8000a8c:	100b883a 	mov	r5,r2
 8000a90:	4089383a 	mul	r4,r8,r2
 8000a94:	8a3fffcc 	andi	r8,r17,65535
 8000a98:	4710b03a 	or	r8,r8,fp
 8000a9c:	d9800117 	ldw	r6,4(sp)
 8000aa0:	4100042e 	bgeu	r8,r4,8000ab4 <__umoddi3+0x394>
 8000aa4:	4551883a 	add	r8,r8,r21
 8000aa8:	10bfffc4 	addi	r2,r2,-1
 8000aac:	45405a2e 	bgeu	r8,r21,8000c18 <__umoddi3+0x4f8>
 8000ab0:	100b883a 	mov	r5,r2
 8000ab4:	300c943a 	slli	r6,r6,16
 8000ab8:	91ffffcc 	andi	r7,r18,65535
 8000abc:	9004d43a 	srli	r2,r18,16
 8000ac0:	314cb03a 	or	r6,r6,r5
 8000ac4:	317fffcc 	andi	r5,r6,65535
 8000ac8:	300cd43a 	srli	r6,r6,16
 8000acc:	29d3383a 	mul	r9,r5,r7
 8000ad0:	288b383a 	mul	r5,r5,r2
 8000ad4:	31cf383a 	mul	r7,r6,r7
 8000ad8:	4806d43a 	srli	r3,r9,16
 8000adc:	4111c83a 	sub	r8,r8,r4
 8000ae0:	29cb883a 	add	r5,r5,r7
 8000ae4:	194b883a 	add	r5,r3,r5
 8000ae8:	3085383a 	mul	r2,r6,r2
 8000aec:	29c0022e 	bgeu	r5,r7,8000af8 <__umoddi3+0x3d8>
 8000af0:	00c00074 	movhi	r3,1
 8000af4:	10c5883a 	add	r2,r2,r3
 8000af8:	2808d43a 	srli	r4,r5,16
 8000afc:	280a943a 	slli	r5,r5,16
 8000b00:	4a7fffcc 	andi	r9,r9,65535
 8000b04:	2085883a 	add	r2,r4,r2
 8000b08:	2a4b883a 	add	r5,r5,r9
 8000b0c:	40803636 	bltu	r8,r2,8000be8 <__umoddi3+0x4c8>
 8000b10:	40804d26 	beq	r8,r2,8000c48 <__umoddi3+0x528>
 8000b14:	4089c83a 	sub	r4,r8,r2
 8000b18:	280f883a 	mov	r7,r5
 8000b1c:	81cfc83a 	sub	r7,r16,r7
 8000b20:	81c7803a 	cmpltu	r3,r16,r7
 8000b24:	20c7c83a 	sub	r3,r4,r3
 8000b28:	1cc4983a 	sll	r2,r3,r19
 8000b2c:	3d0ed83a 	srl	r7,r7,r20
 8000b30:	1d06d83a 	srl	r3,r3,r20
 8000b34:	11c4b03a 	or	r2,r2,r7
 8000b38:	003f9306 	br	8000988 <__umoddi3+0x268>
 8000b3c:	9ca6983a 	sll	r19,r19,r18
 8000b40:	88e8d83a 	srl	r20,r17,r3
 8000b44:	80c4d83a 	srl	r2,r16,r3
 8000b48:	982cd43a 	srli	r22,r19,16
 8000b4c:	8ca2983a 	sll	r17,r17,r18
 8000b50:	a009883a 	mov	r4,r20
 8000b54:	b00b883a 	mov	r5,r22
 8000b58:	1478b03a 	or	fp,r2,r17
 8000b5c:	8000db40 	call	8000db4 <__umodsi3>
 8000b60:	a009883a 	mov	r4,r20
 8000b64:	b00b883a 	mov	r5,r22
 8000b68:	1023883a 	mov	r17,r2
 8000b6c:	8000d500 	call	8000d50 <__udivsi3>
 8000b70:	9d7fffcc 	andi	r21,r19,65535
 8000b74:	880a943a 	slli	r5,r17,16
 8000b78:	e008d43a 	srli	r4,fp,16
 8000b7c:	a885383a 	mul	r2,r21,r2
 8000b80:	84a8983a 	sll	r20,r16,r18
 8000b84:	2148b03a 	or	r4,r4,r5
 8000b88:	2080042e 	bgeu	r4,r2,8000b9c <__umoddi3+0x47c>
 8000b8c:	24c9883a 	add	r4,r4,r19
 8000b90:	24c00236 	bltu	r4,r19,8000b9c <__umoddi3+0x47c>
 8000b94:	2080012e 	bgeu	r4,r2,8000b9c <__umoddi3+0x47c>
 8000b98:	24c9883a 	add	r4,r4,r19
 8000b9c:	20a3c83a 	sub	r17,r4,r2
 8000ba0:	b00b883a 	mov	r5,r22
 8000ba4:	8809883a 	mov	r4,r17
 8000ba8:	8000db40 	call	8000db4 <__umodsi3>
 8000bac:	102f883a 	mov	r23,r2
 8000bb0:	8809883a 	mov	r4,r17
 8000bb4:	b00b883a 	mov	r5,r22
 8000bb8:	8000d500 	call	8000d50 <__udivsi3>
 8000bbc:	b82e943a 	slli	r23,r23,16
 8000bc0:	a885383a 	mul	r2,r21,r2
 8000bc4:	e13fffcc 	andi	r4,fp,65535
 8000bc8:	25c8b03a 	or	r4,r4,r23
 8000bcc:	2080042e 	bgeu	r4,r2,8000be0 <__umoddi3+0x4c0>
 8000bd0:	24c9883a 	add	r4,r4,r19
 8000bd4:	24c00236 	bltu	r4,r19,8000be0 <__umoddi3+0x4c0>
 8000bd8:	2080012e 	bgeu	r4,r2,8000be0 <__umoddi3+0x4c0>
 8000bdc:	24c9883a 	add	r4,r4,r19
 8000be0:	20a3c83a 	sub	r17,r4,r2
 8000be4:	003f4806 	br	8000908 <__umoddi3+0x1e8>
 8000be8:	2c8fc83a 	sub	r7,r5,r18
 8000bec:	1545c83a 	sub	r2,r2,r21
 8000bf0:	29cb803a 	cmpltu	r5,r5,r7
 8000bf4:	1145c83a 	sub	r2,r2,r5
 8000bf8:	4089c83a 	sub	r4,r8,r2
 8000bfc:	003fc706 	br	8000b1c <__umoddi3+0x3fc>
 8000c00:	01000604 	movi	r4,24
 8000c04:	003f1806 	br	8000868 <__umoddi3+0x148>
 8000c08:	00800604 	movi	r2,24
 8000c0c:	003f3206 	br	80008d8 <__umoddi3+0x1b8>
 8000c10:	01000604 	movi	r4,24
 8000c14:	003ed906 	br	800077c <__umoddi3+0x5c>
 8000c18:	413fa52e 	bgeu	r8,r4,8000ab0 <__umoddi3+0x390>
 8000c1c:	297fff84 	addi	r5,r5,-2
 8000c20:	4551883a 	add	r8,r8,r21
 8000c24:	003fa306 	br	8000ab4 <__umoddi3+0x394>
 8000c28:	15ff8b2e 	bgeu	r2,r23,8000a58 <__umoddi3+0x338>
 8000c2c:	31bfff84 	addi	r6,r6,-2
 8000c30:	1545883a 	add	r2,r2,r21
 8000c34:	003f8906 	br	8000a5c <__umoddi3+0x33c>
 8000c38:	24c9883a 	add	r4,r4,r19
 8000c3c:	003eee06 	br	80007f8 <__umoddi3+0xd8>
 8000c40:	8005883a 	mov	r2,r16
 8000c44:	003f1706 	br	80008a4 <__umoddi3+0x184>
 8000c48:	817fe736 	bltu	r16,r5,8000be8 <__umoddi3+0x4c8>
 8000c4c:	280f883a 	mov	r7,r5
 8000c50:	0009883a 	mov	r4,zero
 8000c54:	003fb106 	br	8000b1c <__umoddi3+0x3fc>

08000c58 <__divsi3>:
 8000c58:	20001b16 	blt	r4,zero,8000cc8 <__divsi3+0x70>
 8000c5c:	000f883a 	mov	r7,zero
 8000c60:	28001616 	blt	r5,zero,8000cbc <__divsi3+0x64>
 8000c64:	200d883a 	mov	r6,r4
 8000c68:	29001a2e 	bgeu	r5,r4,8000cd4 <__divsi3+0x7c>
 8000c6c:	00800804 	movi	r2,32
 8000c70:	00c00044 	movi	r3,1
 8000c74:	00000106 	br	8000c7c <__divsi3+0x24>
 8000c78:	10000d26 	beq	r2,zero,8000cb0 <__divsi3+0x58>
 8000c7c:	294b883a 	add	r5,r5,r5
 8000c80:	10bfffc4 	addi	r2,r2,-1
 8000c84:	18c7883a 	add	r3,r3,r3
 8000c88:	293ffb36 	bltu	r5,r4,8000c78 <__divsi3+0x20>
 8000c8c:	0005883a 	mov	r2,zero
 8000c90:	18000726 	beq	r3,zero,8000cb0 <__divsi3+0x58>
 8000c94:	0005883a 	mov	r2,zero
 8000c98:	31400236 	bltu	r6,r5,8000ca4 <__divsi3+0x4c>
 8000c9c:	314dc83a 	sub	r6,r6,r5
 8000ca0:	10c4b03a 	or	r2,r2,r3
 8000ca4:	1806d07a 	srli	r3,r3,1
 8000ca8:	280ad07a 	srli	r5,r5,1
 8000cac:	183ffa1e 	bne	r3,zero,8000c98 <__divsi3+0x40>
 8000cb0:	38000126 	beq	r7,zero,8000cb8 <__divsi3+0x60>
 8000cb4:	0085c83a 	sub	r2,zero,r2
 8000cb8:	f800283a 	ret
 8000cbc:	014bc83a 	sub	r5,zero,r5
 8000cc0:	39c0005c 	xori	r7,r7,1
 8000cc4:	003fe706 	br	8000c64 <__divsi3+0xc>
 8000cc8:	0109c83a 	sub	r4,zero,r4
 8000ccc:	01c00044 	movi	r7,1
 8000cd0:	003fe306 	br	8000c60 <__divsi3+0x8>
 8000cd4:	00c00044 	movi	r3,1
 8000cd8:	003fee06 	br	8000c94 <__divsi3+0x3c>

08000cdc <__modsi3>:
 8000cdc:	20001716 	blt	r4,zero,8000d3c <__modsi3+0x60>
 8000ce0:	000f883a 	mov	r7,zero
 8000ce4:	2005883a 	mov	r2,r4
 8000ce8:	28001216 	blt	r5,zero,8000d34 <__modsi3+0x58>
 8000cec:	2900162e 	bgeu	r5,r4,8000d48 <__modsi3+0x6c>
 8000cf0:	01800804 	movi	r6,32
 8000cf4:	00c00044 	movi	r3,1
 8000cf8:	00000106 	br	8000d00 <__modsi3+0x24>
 8000cfc:	30000a26 	beq	r6,zero,8000d28 <__modsi3+0x4c>
 8000d00:	294b883a 	add	r5,r5,r5
 8000d04:	31bfffc4 	addi	r6,r6,-1
 8000d08:	18c7883a 	add	r3,r3,r3
 8000d0c:	293ffb36 	bltu	r5,r4,8000cfc <__modsi3+0x20>
 8000d10:	18000526 	beq	r3,zero,8000d28 <__modsi3+0x4c>
 8000d14:	1806d07a 	srli	r3,r3,1
 8000d18:	11400136 	bltu	r2,r5,8000d20 <__modsi3+0x44>
 8000d1c:	1145c83a 	sub	r2,r2,r5
 8000d20:	280ad07a 	srli	r5,r5,1
 8000d24:	183ffb1e 	bne	r3,zero,8000d14 <__modsi3+0x38>
 8000d28:	38000126 	beq	r7,zero,8000d30 <__modsi3+0x54>
 8000d2c:	0085c83a 	sub	r2,zero,r2
 8000d30:	f800283a 	ret
 8000d34:	014bc83a 	sub	r5,zero,r5
 8000d38:	003fec06 	br	8000cec <__modsi3+0x10>
 8000d3c:	0109c83a 	sub	r4,zero,r4
 8000d40:	01c00044 	movi	r7,1
 8000d44:	003fe706 	br	8000ce4 <__modsi3+0x8>
 8000d48:	00c00044 	movi	r3,1
 8000d4c:	003ff106 	br	8000d14 <__modsi3+0x38>

08000d50 <__udivsi3>:
 8000d50:	200d883a 	mov	r6,r4
 8000d54:	2900152e 	bgeu	r5,r4,8000dac <__udivsi3+0x5c>
 8000d58:	28001416 	blt	r5,zero,8000dac <__udivsi3+0x5c>
 8000d5c:	00800804 	movi	r2,32
 8000d60:	00c00044 	movi	r3,1
 8000d64:	00000206 	br	8000d70 <__udivsi3+0x20>
 8000d68:	10000e26 	beq	r2,zero,8000da4 <__udivsi3+0x54>
 8000d6c:	28000516 	blt	r5,zero,8000d84 <__udivsi3+0x34>
 8000d70:	294b883a 	add	r5,r5,r5
 8000d74:	10bfffc4 	addi	r2,r2,-1
 8000d78:	18c7883a 	add	r3,r3,r3
 8000d7c:	293ffa36 	bltu	r5,r4,8000d68 <__udivsi3+0x18>
 8000d80:	18000826 	beq	r3,zero,8000da4 <__udivsi3+0x54>
 8000d84:	0005883a 	mov	r2,zero
 8000d88:	31400236 	bltu	r6,r5,8000d94 <__udivsi3+0x44>
 8000d8c:	314dc83a 	sub	r6,r6,r5
 8000d90:	10c4b03a 	or	r2,r2,r3
 8000d94:	1806d07a 	srli	r3,r3,1
 8000d98:	280ad07a 	srli	r5,r5,1
 8000d9c:	183ffa1e 	bne	r3,zero,8000d88 <__udivsi3+0x38>
 8000da0:	f800283a 	ret
 8000da4:	0005883a 	mov	r2,zero
 8000da8:	f800283a 	ret
 8000dac:	00c00044 	movi	r3,1
 8000db0:	003ff406 	br	8000d84 <__udivsi3+0x34>

08000db4 <__umodsi3>:
 8000db4:	2005883a 	mov	r2,r4
 8000db8:	2900122e 	bgeu	r5,r4,8000e04 <__umodsi3+0x50>
 8000dbc:	28001116 	blt	r5,zero,8000e04 <__umodsi3+0x50>
 8000dc0:	01800804 	movi	r6,32
 8000dc4:	00c00044 	movi	r3,1
 8000dc8:	00000206 	br	8000dd4 <__umodsi3+0x20>
 8000dcc:	30000c26 	beq	r6,zero,8000e00 <__umodsi3+0x4c>
 8000dd0:	28000516 	blt	r5,zero,8000de8 <__umodsi3+0x34>
 8000dd4:	294b883a 	add	r5,r5,r5
 8000dd8:	31bfffc4 	addi	r6,r6,-1
 8000ddc:	18c7883a 	add	r3,r3,r3
 8000de0:	293ffa36 	bltu	r5,r4,8000dcc <__umodsi3+0x18>
 8000de4:	18000626 	beq	r3,zero,8000e00 <__umodsi3+0x4c>
 8000de8:	1806d07a 	srli	r3,r3,1
 8000dec:	11400136 	bltu	r2,r5,8000df4 <__umodsi3+0x40>
 8000df0:	1145c83a 	sub	r2,r2,r5
 8000df4:	280ad07a 	srli	r5,r5,1
 8000df8:	183ffb1e 	bne	r3,zero,8000de8 <__umodsi3+0x34>
 8000dfc:	f800283a 	ret
 8000e00:	f800283a 	ret
 8000e04:	00c00044 	movi	r3,1
 8000e08:	003ff706 	br	8000de8 <__umodsi3+0x34>

08000e0c <__addsf3>:
 8000e0c:	defffc04 	addi	sp,sp,-16
 8000e10:	2004d7fa 	srli	r2,r4,31
 8000e14:	280cd5fa 	srli	r6,r5,23
 8000e18:	dc000015 	stw	r16,0(sp)
 8000e1c:	00c02034 	movhi	r3,128
 8000e20:	2020d5fa 	srli	r16,r4,23
 8000e24:	280ed7fa 	srli	r7,r5,31
 8000e28:	18ffffc4 	addi	r3,r3,-1
 8000e2c:	dc400115 	stw	r17,4(sp)
 8000e30:	1908703a 	and	r4,r3,r4
 8000e34:	194a703a 	and	r5,r3,r5
 8000e38:	dfc00315 	stw	ra,12(sp)
 8000e3c:	dc800215 	stw	r18,8(sp)
 8000e40:	14403fcc 	andi	r17,r2,255
 8000e44:	84003fcc 	andi	r16,r16,255
 8000e48:	200890fa 	slli	r4,r4,3
 8000e4c:	31803fcc 	andi	r6,r6,255
 8000e50:	280a90fa 	slli	r5,r5,3
 8000e54:	89c05026 	beq	r17,r7,8000f98 <__addsf3+0x18c>
 8000e58:	8185c83a 	sub	r2,r16,r6
 8000e5c:	00807a0e 	bge	zero,r2,8001048 <__addsf3+0x23c>
 8000e60:	30001e1e 	bne	r6,zero,8000edc <__addsf3+0xd0>
 8000e64:	28006d1e 	bne	r5,zero,800101c <__addsf3+0x210>
 8000e68:	208001cc 	andi	r2,r4,7
 8000e6c:	10000426 	beq	r2,zero,8000e80 <__addsf3+0x74>
 8000e70:	208003cc 	andi	r2,r4,15
 8000e74:	00c00104 	movi	r3,4
 8000e78:	10c00126 	beq	r2,r3,8000e80 <__addsf3+0x74>
 8000e7c:	20c9883a 	add	r4,r4,r3
 8000e80:	2081002c 	andhi	r2,r4,1024
 8000e84:	10003926 	beq	r2,zero,8000f6c <__addsf3+0x160>
 8000e88:	84000044 	addi	r16,r16,1
 8000e8c:	00803fc4 	movi	r2,255
 8000e90:	80807826 	beq	r16,r2,8001074 <__addsf3+0x268>
 8000e94:	200891ba 	slli	r4,r4,6
 8000e98:	8805883a 	mov	r2,r17
 8000e9c:	2008d27a 	srli	r4,r4,9
 8000ea0:	84003fcc 	andi	r16,r16,255
 8000ea4:	800695fa 	slli	r3,r16,23
 8000ea8:	10803fcc 	andi	r2,r2,255
 8000eac:	04002034 	movhi	r16,128
 8000eb0:	843fffc4 	addi	r16,r16,-1
 8000eb4:	100497fa 	slli	r2,r2,31
 8000eb8:	2408703a 	and	r4,r4,r16
 8000ebc:	20e0b03a 	or	r16,r4,r3
 8000ec0:	8084b03a 	or	r2,r16,r2
 8000ec4:	dfc00317 	ldw	ra,12(sp)
 8000ec8:	dc800217 	ldw	r18,8(sp)
 8000ecc:	dc400117 	ldw	r17,4(sp)
 8000ed0:	dc000017 	ldw	r16,0(sp)
 8000ed4:	dec00404 	addi	sp,sp,16
 8000ed8:	f800283a 	ret
 8000edc:	00c03fc4 	movi	r3,255
 8000ee0:	80ffe126 	beq	r16,r3,8000e68 <__addsf3+0x5c>
 8000ee4:	29410034 	orhi	r5,r5,1024
 8000ee8:	00c006c4 	movi	r3,27
 8000eec:	18807516 	blt	r3,r2,80010c4 <__addsf3+0x2b8>
 8000ef0:	00c00804 	movi	r3,32
 8000ef4:	1887c83a 	sub	r3,r3,r2
 8000ef8:	28c6983a 	sll	r3,r5,r3
 8000efc:	288ad83a 	srl	r5,r5,r2
 8000f00:	1804c03a 	cmpne	r2,r3,zero
 8000f04:	288ab03a 	or	r5,r5,r2
 8000f08:	2149c83a 	sub	r4,r4,r5
 8000f0c:	2081002c 	andhi	r2,r4,1024
 8000f10:	10001426 	beq	r2,zero,8000f64 <__addsf3+0x158>
 8000f14:	04810034 	movhi	r18,1024
 8000f18:	94bfffc4 	addi	r18,r18,-1
 8000f1c:	24a4703a 	and	r18,r4,r18
 8000f20:	9009883a 	mov	r4,r18
 8000f24:	8003cdc0 	call	8003cdc <__clzsi2>
 8000f28:	10bffec4 	addi	r2,r2,-5
 8000f2c:	90a4983a 	sll	r18,r18,r2
 8000f30:	14005416 	blt	r2,r16,8001084 <__addsf3+0x278>
 8000f34:	1405c83a 	sub	r2,r2,r16
 8000f38:	11000044 	addi	r4,r2,1
 8000f3c:	00800804 	movi	r2,32
 8000f40:	1105c83a 	sub	r2,r2,r4
 8000f44:	9084983a 	sll	r2,r18,r2
 8000f48:	9124d83a 	srl	r18,r18,r4
 8000f4c:	0021883a 	mov	r16,zero
 8000f50:	1008c03a 	cmpne	r4,r2,zero
 8000f54:	9108b03a 	or	r4,r18,r4
 8000f58:	003fc306 	br	8000e68 <__addsf3+0x5c>
 8000f5c:	1000db26 	beq	r2,zero,80012cc <__addsf3+0x4c0>
 8000f60:	1009883a 	mov	r4,r2
 8000f64:	208001cc 	andi	r2,r4,7
 8000f68:	103fc11e 	bne	r2,zero,8000e70 <__addsf3+0x64>
 8000f6c:	2006d0fa 	srli	r3,r4,3
 8000f70:	01003fc4 	movi	r4,255
 8000f74:	8805883a 	mov	r2,r17
 8000f78:	8100241e 	bne	r16,r4,800100c <__addsf3+0x200>
 8000f7c:	18006e26 	beq	r3,zero,8001138 <__addsf3+0x32c>
 8000f80:	19001034 	orhi	r4,r3,64
 8000f84:	00c02034 	movhi	r3,128
 8000f88:	18ffffc4 	addi	r3,r3,-1
 8000f8c:	043fffc4 	movi	r16,-1
 8000f90:	20c8703a 	and	r4,r4,r3
 8000f94:	003fc206 	br	8000ea0 <__addsf3+0x94>
 8000f98:	8187c83a 	sub	r3,r16,r6
 8000f9c:	00c03e0e 	bge	zero,r3,8001098 <__addsf3+0x28c>
 8000fa0:	30002326 	beq	r6,zero,8001030 <__addsf3+0x224>
 8000fa4:	01803fc4 	movi	r6,255
 8000fa8:	81bfaf26 	beq	r16,r6,8000e68 <__addsf3+0x5c>
 8000fac:	29410034 	orhi	r5,r5,1024
 8000fb0:	018006c4 	movi	r6,27
 8000fb4:	30c07416 	blt	r6,r3,8001188 <__addsf3+0x37c>
 8000fb8:	01800804 	movi	r6,32
 8000fbc:	30cdc83a 	sub	r6,r6,r3
 8000fc0:	298c983a 	sll	r6,r5,r6
 8000fc4:	28cad83a 	srl	r5,r5,r3
 8000fc8:	3006c03a 	cmpne	r3,r6,zero
 8000fcc:	28cab03a 	or	r5,r5,r3
 8000fd0:	2149883a 	add	r4,r4,r5
 8000fd4:	20c1002c 	andhi	r3,r4,1024
 8000fd8:	183fe226 	beq	r3,zero,8000f64 <__addsf3+0x158>
 8000fdc:	84000044 	addi	r16,r16,1
 8000fe0:	00c03fc4 	movi	r3,255
 8000fe4:	80c05426 	beq	r16,r3,8001138 <__addsf3+0x32c>
 8000fe8:	00bf0034 	movhi	r2,64512
 8000fec:	10bfffc4 	addi	r2,r2,-1
 8000ff0:	20c0004c 	andi	r3,r4,1
 8000ff4:	2088703a 	and	r4,r4,r2
 8000ff8:	2008d07a 	srli	r4,r4,1
 8000ffc:	20c8b03a 	or	r4,r4,r3
 8001000:	003f9906 	br	8000e68 <__addsf3+0x5c>
 8001004:	0007883a 	mov	r3,zero
 8001008:	0005883a 	mov	r2,zero
 800100c:	01002034 	movhi	r4,128
 8001010:	213fffc4 	addi	r4,r4,-1
 8001014:	1908703a 	and	r4,r3,r4
 8001018:	003fa106 	br	8000ea0 <__addsf3+0x94>
 800101c:	10bfffc4 	addi	r2,r2,-1
 8001020:	103fb926 	beq	r2,zero,8000f08 <__addsf3+0xfc>
 8001024:	00c03fc4 	movi	r3,255
 8001028:	80ffaf1e 	bne	r16,r3,8000ee8 <__addsf3+0xdc>
 800102c:	003f8e06 	br	8000e68 <__addsf3+0x5c>
 8001030:	283f8d26 	beq	r5,zero,8000e68 <__addsf3+0x5c>
 8001034:	18ffffc4 	addi	r3,r3,-1
 8001038:	183fe526 	beq	r3,zero,8000fd0 <__addsf3+0x1c4>
 800103c:	01803fc4 	movi	r6,255
 8001040:	81bfdb1e 	bne	r16,r6,8000fb0 <__addsf3+0x1a4>
 8001044:	003f8806 	br	8000e68 <__addsf3+0x5c>
 8001048:	1000201e 	bne	r2,zero,80010cc <__addsf3+0x2c0>
 800104c:	80800044 	addi	r2,r16,1
 8001050:	10803fcc 	andi	r2,r2,255
 8001054:	01800044 	movi	r6,1
 8001058:	3080450e 	bge	r6,r2,8001170 <__addsf3+0x364>
 800105c:	2165c83a 	sub	r18,r4,r5
 8001060:	90c1002c 	andhi	r3,r18,1024
 8001064:	18002b26 	beq	r3,zero,8001114 <__addsf3+0x308>
 8001068:	2925c83a 	sub	r18,r5,r4
 800106c:	3823883a 	mov	r17,r7
 8001070:	003fab06 	br	8000f20 <__addsf3+0x114>
 8001074:	8805883a 	mov	r2,r17
 8001078:	043fffc4 	movi	r16,-1
 800107c:	0009883a 	mov	r4,zero
 8001080:	003f8706 	br	8000ea0 <__addsf3+0x94>
 8001084:	013f0034 	movhi	r4,64512
 8001088:	213fffc4 	addi	r4,r4,-1
 800108c:	80a1c83a 	sub	r16,r16,r2
 8001090:	9108703a 	and	r4,r18,r4
 8001094:	003f7406 	br	8000e68 <__addsf3+0x5c>
 8001098:	1800411e 	bne	r3,zero,80011a0 <__addsf3+0x394>
 800109c:	80c00044 	addi	r3,r16,1
 80010a0:	19c03fcc 	andi	r7,r3,255
 80010a4:	01800044 	movi	r6,1
 80010a8:	31c0260e 	bge	r6,r7,8001144 <__addsf3+0x338>
 80010ac:	01803fc4 	movi	r6,255
 80010b0:	19802126 	beq	r3,r6,8001138 <__addsf3+0x32c>
 80010b4:	2149883a 	add	r4,r4,r5
 80010b8:	2008d07a 	srli	r4,r4,1
 80010bc:	1821883a 	mov	r16,r3
 80010c0:	003f6906 	br	8000e68 <__addsf3+0x5c>
 80010c4:	01400044 	movi	r5,1
 80010c8:	003f8f06 	br	8000f08 <__addsf3+0xfc>
 80010cc:	8000151e 	bne	r16,zero,8001124 <__addsf3+0x318>
 80010d0:	20002f26 	beq	r4,zero,8001190 <__addsf3+0x384>
 80010d4:	0084303a 	nor	r2,zero,r2
 80010d8:	10000a26 	beq	r2,zero,8001104 <__addsf3+0x2f8>
 80010dc:	00c03fc4 	movi	r3,255
 80010e0:	30c02b26 	beq	r6,r3,8001190 <__addsf3+0x384>
 80010e4:	00c006c4 	movi	r3,27
 80010e8:	18806d16 	blt	r3,r2,80012a0 <__addsf3+0x494>
 80010ec:	00c00804 	movi	r3,32
 80010f0:	1887c83a 	sub	r3,r3,r2
 80010f4:	20c6983a 	sll	r3,r4,r3
 80010f8:	2084d83a 	srl	r2,r4,r2
 80010fc:	1808c03a 	cmpne	r4,r3,zero
 8001100:	1108b03a 	or	r4,r2,r4
 8001104:	2909c83a 	sub	r4,r5,r4
 8001108:	3021883a 	mov	r16,r6
 800110c:	3823883a 	mov	r17,r7
 8001110:	003f7e06 	br	8000f0c <__addsf3+0x100>
 8001114:	903f821e 	bne	r18,zero,8000f20 <__addsf3+0x114>
 8001118:	0005883a 	mov	r2,zero
 800111c:	0021883a 	mov	r16,zero
 8001120:	003fba06 	br	800100c <__addsf3+0x200>
 8001124:	00c03fc4 	movi	r3,255
 8001128:	30c01926 	beq	r6,r3,8001190 <__addsf3+0x384>
 800112c:	0085c83a 	sub	r2,zero,r2
 8001130:	21010034 	orhi	r4,r4,1024
 8001134:	003feb06 	br	80010e4 <__addsf3+0x2d8>
 8001138:	043fffc4 	movi	r16,-1
 800113c:	0009883a 	mov	r4,zero
 8001140:	003f5706 	br	8000ea0 <__addsf3+0x94>
 8001144:	80004a1e 	bne	r16,zero,8001270 <__addsf3+0x464>
 8001148:	20005926 	beq	r4,zero,80012b0 <__addsf3+0x4a4>
 800114c:	283f4626 	beq	r5,zero,8000e68 <__addsf3+0x5c>
 8001150:	2149883a 	add	r4,r4,r5
 8001154:	2081002c 	andhi	r2,r4,1024
 8001158:	103f8226 	beq	r2,zero,8000f64 <__addsf3+0x158>
 800115c:	00bf0034 	movhi	r2,64512
 8001160:	10bfffc4 	addi	r2,r2,-1
 8001164:	3021883a 	mov	r16,r6
 8001168:	2088703a 	and	r4,r4,r2
 800116c:	003f3e06 	br	8000e68 <__addsf3+0x5c>
 8001170:	8000121e 	bne	r16,zero,80011bc <__addsf3+0x3b0>
 8001174:	2000261e 	bne	r4,zero,8001210 <__addsf3+0x404>
 8001178:	283fa226 	beq	r5,zero,8001004 <__addsf3+0x1f8>
 800117c:	2809883a 	mov	r4,r5
 8001180:	3823883a 	mov	r17,r7
 8001184:	003f3806 	br	8000e68 <__addsf3+0x5c>
 8001188:	01400044 	movi	r5,1
 800118c:	003f9006 	br	8000fd0 <__addsf3+0x1c4>
 8001190:	2809883a 	mov	r4,r5
 8001194:	3021883a 	mov	r16,r6
 8001198:	3823883a 	mov	r17,r7
 800119c:	003f3206 	br	8000e68 <__addsf3+0x5c>
 80011a0:	80000c1e 	bne	r16,zero,80011d4 <__addsf3+0x3c8>
 80011a4:	20002f26 	beq	r4,zero,8001264 <__addsf3+0x458>
 80011a8:	00c6303a 	nor	r3,zero,r3
 80011ac:	18002b1e 	bne	r3,zero,800125c <__addsf3+0x450>
 80011b0:	2149883a 	add	r4,r4,r5
 80011b4:	3021883a 	mov	r16,r6
 80011b8:	003f8606 	br	8000fd4 <__addsf3+0x1c8>
 80011bc:	20001b1e 	bne	r4,zero,800122c <__addsf3+0x420>
 80011c0:	28003926 	beq	r5,zero,80012a8 <__addsf3+0x49c>
 80011c4:	2809883a 	mov	r4,r5
 80011c8:	3823883a 	mov	r17,r7
 80011cc:	04003fc4 	movi	r16,255
 80011d0:	003f2506 	br	8000e68 <__addsf3+0x5c>
 80011d4:	01c03fc4 	movi	r7,255
 80011d8:	31c02226 	beq	r6,r7,8001264 <__addsf3+0x458>
 80011dc:	00c7c83a 	sub	r3,zero,r3
 80011e0:	21010034 	orhi	r4,r4,1024
 80011e4:	01c006c4 	movi	r7,27
 80011e8:	38c03616 	blt	r7,r3,80012c4 <__addsf3+0x4b8>
 80011ec:	01c00804 	movi	r7,32
 80011f0:	38cfc83a 	sub	r7,r7,r3
 80011f4:	21ce983a 	sll	r7,r4,r7
 80011f8:	20c6d83a 	srl	r3,r4,r3
 80011fc:	3808c03a 	cmpne	r4,r7,zero
 8001200:	1906b03a 	or	r3,r3,r4
 8001204:	1949883a 	add	r4,r3,r5
 8001208:	3021883a 	mov	r16,r6
 800120c:	003f7106 	br	8000fd4 <__addsf3+0x1c8>
 8001210:	283f1526 	beq	r5,zero,8000e68 <__addsf3+0x5c>
 8001214:	2145c83a 	sub	r2,r4,r5
 8001218:	10c1002c 	andhi	r3,r2,1024
 800121c:	183f4f26 	beq	r3,zero,8000f5c <__addsf3+0x150>
 8001220:	2909c83a 	sub	r4,r5,r4
 8001224:	3823883a 	mov	r17,r7
 8001228:	003f0f06 	br	8000e68 <__addsf3+0x5c>
 800122c:	28001a26 	beq	r5,zero,8001298 <__addsf3+0x48c>
 8001230:	2008d0fa 	srli	r4,r4,3
 8001234:	2080102c 	andhi	r2,r4,64
 8001238:	10000526 	beq	r2,zero,8001250 <__addsf3+0x444>
 800123c:	280ad0fa 	srli	r5,r5,3
 8001240:	2880102c 	andhi	r2,r5,64
 8001244:	1000021e 	bne	r2,zero,8001250 <__addsf3+0x444>
 8001248:	2809883a 	mov	r4,r5
 800124c:	3823883a 	mov	r17,r7
 8001250:	200890fa 	slli	r4,r4,3
 8001254:	04003fc4 	movi	r16,255
 8001258:	003f0306 	br	8000e68 <__addsf3+0x5c>
 800125c:	01c03fc4 	movi	r7,255
 8001260:	31ffe01e 	bne	r6,r7,80011e4 <__addsf3+0x3d8>
 8001264:	2809883a 	mov	r4,r5
 8001268:	3021883a 	mov	r16,r6
 800126c:	003efe06 	br	8000e68 <__addsf3+0x5c>
 8001270:	20001126 	beq	r4,zero,80012b8 <__addsf3+0x4ac>
 8001274:	28000826 	beq	r5,zero,8001298 <__addsf3+0x48c>
 8001278:	2008d0fa 	srli	r4,r4,3
 800127c:	2080102c 	andhi	r2,r4,64
 8001280:	103ff326 	beq	r2,zero,8001250 <__addsf3+0x444>
 8001284:	280ad0fa 	srli	r5,r5,3
 8001288:	2880102c 	andhi	r2,r5,64
 800128c:	103ff01e 	bne	r2,zero,8001250 <__addsf3+0x444>
 8001290:	2809883a 	mov	r4,r5
 8001294:	003fee06 	br	8001250 <__addsf3+0x444>
 8001298:	04003fc4 	movi	r16,255
 800129c:	003ef206 	br	8000e68 <__addsf3+0x5c>
 80012a0:	01000044 	movi	r4,1
 80012a4:	003f9706 	br	8001104 <__addsf3+0x2f8>
 80012a8:	0005883a 	mov	r2,zero
 80012ac:	003f3406 	br	8000f80 <__addsf3+0x174>
 80012b0:	2809883a 	mov	r4,r5
 80012b4:	003eec06 	br	8000e68 <__addsf3+0x5c>
 80012b8:	2809883a 	mov	r4,r5
 80012bc:	04003fc4 	movi	r16,255
 80012c0:	003ee906 	br	8000e68 <__addsf3+0x5c>
 80012c4:	00c00044 	movi	r3,1
 80012c8:	003fce06 	br	8001204 <__addsf3+0x3f8>
 80012cc:	0005883a 	mov	r2,zero
 80012d0:	003f4e06 	br	800100c <__addsf3+0x200>

080012d4 <__divsf3>:
 80012d4:	defff504 	addi	sp,sp,-44
 80012d8:	200cd5fa 	srli	r6,r4,23
 80012dc:	dcc00415 	stw	r19,16(sp)
 80012e0:	2026d7fa 	srli	r19,r4,31
 80012e4:	00c02034 	movhi	r3,128
 80012e8:	dd800715 	stw	r22,28(sp)
 80012ec:	dd000515 	stw	r20,20(sp)
 80012f0:	dc800315 	stw	r18,12(sp)
 80012f4:	18ffffc4 	addi	r3,r3,-1
 80012f8:	dfc00a15 	stw	ra,40(sp)
 80012fc:	df000915 	stw	fp,36(sp)
 8001300:	ddc00815 	stw	r23,32(sp)
 8001304:	dd400615 	stw	r21,24(sp)
 8001308:	dc400215 	stw	r17,8(sp)
 800130c:	dc000115 	stw	r16,4(sp)
 8001310:	35003fcc 	andi	r20,r6,255
 8001314:	1924703a 	and	r18,r3,r4
 8001318:	9d803fcc 	andi	r22,r19,255
 800131c:	a0005226 	beq	r20,zero,8001468 <__divsf3+0x194>
 8001320:	00803fc4 	movi	r2,255
 8001324:	a0802e26 	beq	r20,r2,80013e0 <__divsf3+0x10c>
 8001328:	91002034 	orhi	r4,r18,128
 800132c:	202490fa 	slli	r18,r4,3
 8001330:	a53fe044 	addi	r20,r20,-127
 8001334:	0021883a 	mov	r16,zero
 8001338:	002f883a 	mov	r23,zero
 800133c:	280cd5fa 	srli	r6,r5,23
 8001340:	282ad7fa 	srli	r21,r5,31
 8001344:	00c02034 	movhi	r3,128
 8001348:	18ffffc4 	addi	r3,r3,-1
 800134c:	31803fcc 	andi	r6,r6,255
 8001350:	1962703a 	and	r17,r3,r5
 8001354:	af003fcc 	andi	fp,r21,255
 8001358:	30004a26 	beq	r6,zero,8001484 <__divsf3+0x1b0>
 800135c:	00803fc4 	movi	r2,255
 8001360:	30804526 	beq	r6,r2,8001478 <__divsf3+0x1a4>
 8001364:	89402034 	orhi	r5,r17,128
 8001368:	282290fa 	slli	r17,r5,3
 800136c:	31bfe044 	addi	r6,r6,-127
 8001370:	000b883a 	mov	r5,zero
 8001374:	2c20b03a 	or	r16,r5,r16
 8001378:	802090ba 	slli	r16,r16,2
 800137c:	00820034 	movhi	r2,2048
 8001380:	1084e804 	addi	r2,r2,5024
 8001384:	80a1883a 	add	r16,r16,r2
 8001388:	81000017 	ldw	r4,0(r16)
 800138c:	9d46f03a 	xor	r3,r19,r21
 8001390:	180f883a 	mov	r7,r3
 8001394:	18803fcc 	andi	r2,r3,255
 8001398:	a18dc83a 	sub	r6,r20,r6
 800139c:	2000683a 	jmp	r4
 80013a0:	08001584 	addi	zero,at,86
 80013a4:	08001408 	cmpgei	zero,at,80
 80013a8:	08001578 	rdprs	zero,at,85
 80013ac:	080013f4 	orhi	zero,at,79
 80013b0:	08001578 	rdprs	zero,at,85
 80013b4:	08001550 	cmplti	zero,at,85
 80013b8:	08001578 	rdprs	zero,at,85
 80013bc:	080013f4 	orhi	zero,at,79
 80013c0:	08001408 	cmpgei	zero,at,80
 80013c4:	08001408 	cmpgei	zero,at,80
 80013c8:	08001550 	cmplti	zero,at,85
 80013cc:	080013f4 	orhi	zero,at,79
 80013d0:	08001664 	muli	zero,at,89
 80013d4:	08001664 	muli	zero,at,89
 80013d8:	08001664 	muli	zero,at,89
 80013dc:	08001618 	cmpnei	zero,at,88
 80013e0:	9000581e 	bne	r18,zero,8001544 <__divsf3+0x270>
 80013e4:	04000204 	movi	r16,8
 80013e8:	05c00084 	movi	r23,2
 80013ec:	003fd306 	br	800133c <__divsf3+0x68>
 80013f0:	0023883a 	mov	r17,zero
 80013f4:	e02d883a 	mov	r22,fp
 80013f8:	282f883a 	mov	r23,r5
 80013fc:	00800084 	movi	r2,2
 8001400:	b8808f1e 	bne	r23,r2,8001640 <__divsf3+0x36c>
 8001404:	b005883a 	mov	r2,r22
 8001408:	11c0004c 	andi	r7,r2,1
 800140c:	013fffc4 	movi	r4,-1
 8001410:	000d883a 	mov	r6,zero
 8001414:	21003fcc 	andi	r4,r4,255
 8001418:	200895fa 	slli	r4,r4,23
 800141c:	38803fcc 	andi	r2,r7,255
 8001420:	00c02034 	movhi	r3,128
 8001424:	100497fa 	slli	r2,r2,31
 8001428:	18ffffc4 	addi	r3,r3,-1
 800142c:	30c6703a 	and	r3,r6,r3
 8001430:	1906b03a 	or	r3,r3,r4
 8001434:	1884b03a 	or	r2,r3,r2
 8001438:	dfc00a17 	ldw	ra,40(sp)
 800143c:	df000917 	ldw	fp,36(sp)
 8001440:	ddc00817 	ldw	r23,32(sp)
 8001444:	dd800717 	ldw	r22,28(sp)
 8001448:	dd400617 	ldw	r21,24(sp)
 800144c:	dd000517 	ldw	r20,20(sp)
 8001450:	dcc00417 	ldw	r19,16(sp)
 8001454:	dc800317 	ldw	r18,12(sp)
 8001458:	dc400217 	ldw	r17,8(sp)
 800145c:	dc000117 	ldw	r16,4(sp)
 8001460:	dec00b04 	addi	sp,sp,44
 8001464:	f800283a 	ret
 8001468:	90002b1e 	bne	r18,zero,8001518 <__divsf3+0x244>
 800146c:	04000104 	movi	r16,4
 8001470:	05c00044 	movi	r23,1
 8001474:	003fb106 	br	800133c <__divsf3+0x68>
 8001478:	8800251e 	bne	r17,zero,8001510 <__divsf3+0x23c>
 800147c:	01400084 	movi	r5,2
 8001480:	00000206 	br	800148c <__divsf3+0x1b8>
 8001484:	88001a1e 	bne	r17,zero,80014f0 <__divsf3+0x21c>
 8001488:	01400044 	movi	r5,1
 800148c:	8160b03a 	or	r16,r16,r5
 8001490:	802090ba 	slli	r16,r16,2
 8001494:	00c20034 	movhi	r3,2048
 8001498:	18c52c04 	addi	r3,r3,5296
 800149c:	80e1883a 	add	r16,r16,r3
 80014a0:	80c00017 	ldw	r3,0(r16)
 80014a4:	9d44f03a 	xor	r2,r19,r21
 80014a8:	a18dc83a 	sub	r6,r20,r6
 80014ac:	1800683a 	jmp	r3
 80014b0:	08001408 	cmpgei	zero,at,80
 80014b4:	08001408 	cmpgei	zero,at,80
 80014b8:	08001654 	ori	zero,at,89
 80014bc:	080013f0 	cmpltui	zero,at,79
 80014c0:	08001654 	ori	zero,at,89
 80014c4:	08001550 	cmplti	zero,at,85
 80014c8:	08001654 	ori	zero,at,89
 80014cc:	080013f0 	cmpltui	zero,at,79
 80014d0:	08001408 	cmpgei	zero,at,80
 80014d4:	08001408 	cmpgei	zero,at,80
 80014d8:	08001550 	cmplti	zero,at,85
 80014dc:	080013f0 	cmpltui	zero,at,79
 80014e0:	08001664 	muli	zero,at,89
 80014e4:	08001664 	muli	zero,at,89
 80014e8:	08001664 	muli	zero,at,89
 80014ec:	0800167c 	xorhi	zero,at,89
 80014f0:	8809883a 	mov	r4,r17
 80014f4:	8003cdc0 	call	8003cdc <__clzsi2>
 80014f8:	10fffec4 	addi	r3,r2,-5
 80014fc:	10801d84 	addi	r2,r2,118
 8001500:	88e2983a 	sll	r17,r17,r3
 8001504:	008dc83a 	sub	r6,zero,r2
 8001508:	000b883a 	mov	r5,zero
 800150c:	003f9906 	br	8001374 <__divsf3+0xa0>
 8001510:	014000c4 	movi	r5,3
 8001514:	003f9706 	br	8001374 <__divsf3+0xa0>
 8001518:	9009883a 	mov	r4,r18
 800151c:	d9400015 	stw	r5,0(sp)
 8001520:	8003cdc0 	call	8003cdc <__clzsi2>
 8001524:	10fffec4 	addi	r3,r2,-5
 8001528:	11801d84 	addi	r6,r2,118
 800152c:	90e4983a 	sll	r18,r18,r3
 8001530:	01a9c83a 	sub	r20,zero,r6
 8001534:	0021883a 	mov	r16,zero
 8001538:	002f883a 	mov	r23,zero
 800153c:	d9400017 	ldw	r5,0(sp)
 8001540:	003f7e06 	br	800133c <__divsf3+0x68>
 8001544:	04000304 	movi	r16,12
 8001548:	05c000c4 	movi	r23,3
 800154c:	003f7b06 	br	800133c <__divsf3+0x68>
 8001550:	01802034 	movhi	r6,128
 8001554:	000f883a 	mov	r7,zero
 8001558:	31bfffc4 	addi	r6,r6,-1
 800155c:	013fffc4 	movi	r4,-1
 8001560:	003fac06 	br	8001414 <__divsf3+0x140>
 8001564:	01400044 	movi	r5,1
 8001568:	2909c83a 	sub	r4,r5,r4
 800156c:	00c006c4 	movi	r3,27
 8001570:	19004b0e 	bge	r3,r4,80016a0 <__divsf3+0x3cc>
 8001574:	114e703a 	and	r7,r2,r5
 8001578:	0009883a 	mov	r4,zero
 800157c:	000d883a 	mov	r6,zero
 8001580:	003fa406 	br	8001414 <__divsf3+0x140>
 8001584:	9006917a 	slli	r3,r18,5
 8001588:	8822917a 	slli	r17,r17,5
 800158c:	1c40372e 	bgeu	r3,r17,800166c <__divsf3+0x398>
 8001590:	31bfffc4 	addi	r6,r6,-1
 8001594:	010006c4 	movi	r4,27
 8001598:	000b883a 	mov	r5,zero
 800159c:	180f883a 	mov	r7,r3
 80015a0:	294b883a 	add	r5,r5,r5
 80015a4:	18c7883a 	add	r3,r3,r3
 80015a8:	38000116 	blt	r7,zero,80015b0 <__divsf3+0x2dc>
 80015ac:	1c400236 	bltu	r3,r17,80015b8 <__divsf3+0x2e4>
 80015b0:	1c47c83a 	sub	r3,r3,r17
 80015b4:	29400054 	ori	r5,r5,1
 80015b8:	213fffc4 	addi	r4,r4,-1
 80015bc:	203ff71e 	bne	r4,zero,800159c <__divsf3+0x2c8>
 80015c0:	1806c03a 	cmpne	r3,r3,zero
 80015c4:	1962b03a 	or	r17,r3,r5
 80015c8:	31001fc4 	addi	r4,r6,127
 80015cc:	013fe50e 	bge	zero,r4,8001564 <__divsf3+0x290>
 80015d0:	88c001cc 	andi	r3,r17,7
 80015d4:	18000426 	beq	r3,zero,80015e8 <__divsf3+0x314>
 80015d8:	88c003cc 	andi	r3,r17,15
 80015dc:	01400104 	movi	r5,4
 80015e0:	19400126 	beq	r3,r5,80015e8 <__divsf3+0x314>
 80015e4:	8963883a 	add	r17,r17,r5
 80015e8:	88c2002c 	andhi	r3,r17,2048
 80015ec:	18000426 	beq	r3,zero,8001600 <__divsf3+0x32c>
 80015f0:	00fe0034 	movhi	r3,63488
 80015f4:	18ffffc4 	addi	r3,r3,-1
 80015f8:	31002004 	addi	r4,r6,128
 80015fc:	88e2703a 	and	r17,r17,r3
 8001600:	00c03f84 	movi	r3,254
 8001604:	193f8016 	blt	r3,r4,8001408 <__divsf3+0x134>
 8001608:	880c91ba 	slli	r6,r17,6
 800160c:	11c0004c 	andi	r7,r2,1
 8001610:	300cd27a 	srli	r6,r6,9
 8001614:	003f7f06 	br	8001414 <__divsf3+0x140>
 8001618:	9080102c 	andhi	r2,r18,64
 800161c:	10000226 	beq	r2,zero,8001628 <__divsf3+0x354>
 8001620:	8880102c 	andhi	r2,r17,64
 8001624:	10001826 	beq	r2,zero,8001688 <__divsf3+0x3b4>
 8001628:	00802034 	movhi	r2,128
 800162c:	91801034 	orhi	r6,r18,64
 8001630:	10bfffc4 	addi	r2,r2,-1
 8001634:	980f883a 	mov	r7,r19
 8001638:	308c703a 	and	r6,r6,r2
 800163c:	003fc706 	br	800155c <__divsf3+0x288>
 8001640:	008000c4 	movi	r2,3
 8001644:	b8802d26 	beq	r23,r2,80016fc <__divsf3+0x428>
 8001648:	00c00044 	movi	r3,1
 800164c:	b005883a 	mov	r2,r22
 8001650:	b8ffdd1e 	bne	r23,r3,80015c8 <__divsf3+0x2f4>
 8001654:	11c0004c 	andi	r7,r2,1
 8001658:	0009883a 	mov	r4,zero
 800165c:	000d883a 	mov	r6,zero
 8001660:	003f6c06 	br	8001414 <__divsf3+0x140>
 8001664:	9023883a 	mov	r17,r18
 8001668:	003f6406 	br	80013fc <__divsf3+0x128>
 800166c:	1c47c83a 	sub	r3,r3,r17
 8001670:	01000684 	movi	r4,26
 8001674:	01400044 	movi	r5,1
 8001678:	003fc806 	br	800159c <__divsf3+0x2c8>
 800167c:	9080102c 	andhi	r2,r18,64
 8001680:	103fe926 	beq	r2,zero,8001628 <__divsf3+0x354>
 8001684:	0023883a 	mov	r17,zero
 8001688:	00802034 	movhi	r2,128
 800168c:	89801034 	orhi	r6,r17,64
 8001690:	10bfffc4 	addi	r2,r2,-1
 8001694:	a80f883a 	mov	r7,r21
 8001698:	308c703a 	and	r6,r6,r2
 800169c:	003faf06 	br	800155c <__divsf3+0x288>
 80016a0:	01c00804 	movi	r7,32
 80016a4:	390fc83a 	sub	r7,r7,r4
 80016a8:	89ce983a 	sll	r7,r17,r7
 80016ac:	890ad83a 	srl	r5,r17,r4
 80016b0:	380ec03a 	cmpne	r7,r7,zero
 80016b4:	29cab03a 	or	r5,r5,r7
 80016b8:	28c001cc 	andi	r3,r5,7
 80016bc:	18000426 	beq	r3,zero,80016d0 <__divsf3+0x3fc>
 80016c0:	28c003cc 	andi	r3,r5,15
 80016c4:	01000104 	movi	r4,4
 80016c8:	19000126 	beq	r3,r4,80016d0 <__divsf3+0x3fc>
 80016cc:	290b883a 	add	r5,r5,r4
 80016d0:	28c1002c 	andhi	r3,r5,1024
 80016d4:	18000426 	beq	r3,zero,80016e8 <__divsf3+0x414>
 80016d8:	11c0004c 	andi	r7,r2,1
 80016dc:	01000044 	movi	r4,1
 80016e0:	000d883a 	mov	r6,zero
 80016e4:	003f4b06 	br	8001414 <__divsf3+0x140>
 80016e8:	280a91ba 	slli	r5,r5,6
 80016ec:	11c0004c 	andi	r7,r2,1
 80016f0:	0009883a 	mov	r4,zero
 80016f4:	280cd27a 	srli	r6,r5,9
 80016f8:	003f4606 	br	8001414 <__divsf3+0x140>
 80016fc:	00802034 	movhi	r2,128
 8001700:	89801034 	orhi	r6,r17,64
 8001704:	10bfffc4 	addi	r2,r2,-1
 8001708:	b00f883a 	mov	r7,r22
 800170c:	308c703a 	and	r6,r6,r2
 8001710:	003f9206 	br	800155c <__divsf3+0x288>

08001714 <__lesf2>:
 8001714:	2004d5fa 	srli	r2,r4,23
 8001718:	280cd5fa 	srli	r6,r5,23
 800171c:	00c02034 	movhi	r3,128
 8001720:	18ffffc4 	addi	r3,r3,-1
 8001724:	10803fcc 	andi	r2,r2,255
 8001728:	01c03fc4 	movi	r7,255
 800172c:	1910703a 	and	r8,r3,r4
 8001730:	31803fcc 	andi	r6,r6,255
 8001734:	1946703a 	and	r3,r3,r5
 8001738:	2008d7fa 	srli	r4,r4,31
 800173c:	280ad7fa 	srli	r5,r5,31
 8001740:	11c01b26 	beq	r2,r7,80017b0 <__lesf2+0x9c>
 8001744:	01c03fc4 	movi	r7,255
 8001748:	31c01126 	beq	r6,r7,8001790 <__lesf2+0x7c>
 800174c:	1000071e 	bne	r2,zero,800176c <__lesf2+0x58>
 8001750:	400f003a 	cmpeq	r7,r8,zero
 8001754:	21003fcc 	andi	r4,r4,255
 8001758:	3000081e 	bne	r6,zero,800177c <__lesf2+0x68>
 800175c:	1800071e 	bne	r3,zero,800177c <__lesf2+0x68>
 8001760:	0005883a 	mov	r2,zero
 8001764:	40000f1e 	bne	r8,zero,80017a4 <__lesf2+0x90>
 8001768:	f800283a 	ret
 800176c:	21003fcc 	andi	r4,r4,255
 8001770:	30000a1e 	bne	r6,zero,800179c <__lesf2+0x88>
 8001774:	18000b26 	beq	r3,zero,80017a4 <__lesf2+0x90>
 8001778:	000f883a 	mov	r7,zero
 800177c:	29403fcc 	andi	r5,r5,255
 8001780:	38000726 	beq	r7,zero,80017a0 <__lesf2+0x8c>
 8001784:	28000826 	beq	r5,zero,80017a8 <__lesf2+0x94>
 8001788:	00800044 	movi	r2,1
 800178c:	f800283a 	ret
 8001790:	183fee26 	beq	r3,zero,800174c <__lesf2+0x38>
 8001794:	00800084 	movi	r2,2
 8001798:	f800283a 	ret
 800179c:	29403fcc 	andi	r5,r5,255
 80017a0:	21400626 	beq	r4,r5,80017bc <__lesf2+0xa8>
 80017a4:	203ff826 	beq	r4,zero,8001788 <__lesf2+0x74>
 80017a8:	00bfffc4 	movi	r2,-1
 80017ac:	f800283a 	ret
 80017b0:	403fe426 	beq	r8,zero,8001744 <__lesf2+0x30>
 80017b4:	00800084 	movi	r2,2
 80017b8:	f800283a 	ret
 80017bc:	30bff916 	blt	r6,r2,80017a4 <__lesf2+0x90>
 80017c0:	11800216 	blt	r2,r6,80017cc <__lesf2+0xb8>
 80017c4:	1a3ff736 	bltu	r3,r8,80017a4 <__lesf2+0x90>
 80017c8:	40c0022e 	bgeu	r8,r3,80017d4 <__lesf2+0xc0>
 80017cc:	203fee1e 	bne	r4,zero,8001788 <__lesf2+0x74>
 80017d0:	003ff506 	br	80017a8 <__lesf2+0x94>
 80017d4:	0005883a 	mov	r2,zero
 80017d8:	f800283a 	ret

080017dc <__mulsf3>:
 80017dc:	defff504 	addi	sp,sp,-44
 80017e0:	dc000115 	stw	r16,4(sp)
 80017e4:	2020d5fa 	srli	r16,r4,23
 80017e8:	dd400615 	stw	r21,24(sp)
 80017ec:	202ad7fa 	srli	r21,r4,31
 80017f0:	dc800315 	stw	r18,12(sp)
 80017f4:	04802034 	movhi	r18,128
 80017f8:	df000915 	stw	fp,36(sp)
 80017fc:	dd000515 	stw	r20,20(sp)
 8001800:	94bfffc4 	addi	r18,r18,-1
 8001804:	dfc00a15 	stw	ra,40(sp)
 8001808:	ddc00815 	stw	r23,32(sp)
 800180c:	dd800715 	stw	r22,28(sp)
 8001810:	dcc00415 	stw	r19,16(sp)
 8001814:	dc400215 	stw	r17,8(sp)
 8001818:	84003fcc 	andi	r16,r16,255
 800181c:	9124703a 	and	r18,r18,r4
 8001820:	a829883a 	mov	r20,r21
 8001824:	af003fcc 	andi	fp,r21,255
 8001828:	80005426 	beq	r16,zero,800197c <__mulsf3+0x1a0>
 800182c:	00803fc4 	movi	r2,255
 8001830:	80802f26 	beq	r16,r2,80018f0 <__mulsf3+0x114>
 8001834:	91002034 	orhi	r4,r18,128
 8001838:	202490fa 	slli	r18,r4,3
 800183c:	843fe044 	addi	r16,r16,-127
 8001840:	0023883a 	mov	r17,zero
 8001844:	002f883a 	mov	r23,zero
 8001848:	2804d5fa 	srli	r2,r5,23
 800184c:	282cd7fa 	srli	r22,r5,31
 8001850:	01002034 	movhi	r4,128
 8001854:	213fffc4 	addi	r4,r4,-1
 8001858:	10803fcc 	andi	r2,r2,255
 800185c:	2166703a 	and	r19,r4,r5
 8001860:	b1803fcc 	andi	r6,r22,255
 8001864:	10004c26 	beq	r2,zero,8001998 <__mulsf3+0x1bc>
 8001868:	00c03fc4 	movi	r3,255
 800186c:	10c04726 	beq	r2,r3,800198c <__mulsf3+0x1b0>
 8001870:	99002034 	orhi	r4,r19,128
 8001874:	202690fa 	slli	r19,r4,3
 8001878:	10bfe044 	addi	r2,r2,-127
 800187c:	0007883a 	mov	r3,zero
 8001880:	80a1883a 	add	r16,r16,r2
 8001884:	010003c4 	movi	r4,15
 8001888:	1c44b03a 	or	r2,r3,r17
 800188c:	b56af03a 	xor	r21,r22,r21
 8001890:	81c00044 	addi	r7,r16,1
 8001894:	20806b36 	bltu	r4,r2,8001a44 <__mulsf3+0x268>
 8001898:	100490ba 	slli	r2,r2,2
 800189c:	01020034 	movhi	r4,2048
 80018a0:	21062c04 	addi	r4,r4,6320
 80018a4:	1105883a 	add	r2,r2,r4
 80018a8:	10800017 	ldw	r2,0(r2)
 80018ac:	1000683a 	jmp	r2
 80018b0:	08001a44 	addi	zero,at,105
 80018b4:	08001904 	addi	zero,at,100
 80018b8:	08001904 	addi	zero,at,100
 80018bc:	08001900 	call	800190 <__alt_mem_new_sdram_controller_0-0x77ffe70>
 80018c0:	08001a28 	cmpgeui	zero,at,104
 80018c4:	08001a28 	cmpgeui	zero,at,104
 80018c8:	08001a14 	ori	zero,at,104
 80018cc:	08001900 	call	800190 <__alt_mem_new_sdram_controller_0-0x77ffe70>
 80018d0:	08001a28 	cmpgeui	zero,at,104
 80018d4:	08001a14 	ori	zero,at,104
 80018d8:	08001a28 	cmpgeui	zero,at,104
 80018dc:	08001900 	call	800190 <__alt_mem_new_sdram_controller_0-0x77ffe70>
 80018e0:	08001a34 	orhi	zero,at,104
 80018e4:	08001a34 	orhi	zero,at,104
 80018e8:	08001a34 	orhi	zero,at,104
 80018ec:	08001b10 	cmplti	zero,at,108
 80018f0:	90003b1e 	bne	r18,zero,80019e0 <__mulsf3+0x204>
 80018f4:	04400204 	movi	r17,8
 80018f8:	05c00084 	movi	r23,2
 80018fc:	003fd206 	br	8001848 <__mulsf3+0x6c>
 8001900:	302b883a 	mov	r21,r6
 8001904:	00800084 	movi	r2,2
 8001908:	18802626 	beq	r3,r2,80019a4 <__mulsf3+0x1c8>
 800190c:	008000c4 	movi	r2,3
 8001910:	1880ab26 	beq	r3,r2,8001bc0 <__mulsf3+0x3e4>
 8001914:	00800044 	movi	r2,1
 8001918:	1880a21e 	bne	r3,r2,8001ba4 <__mulsf3+0x3c8>
 800191c:	a829883a 	mov	r20,r21
 8001920:	0007883a 	mov	r3,zero
 8001924:	0009883a 	mov	r4,zero
 8001928:	18803fcc 	andi	r2,r3,255
 800192c:	100695fa 	slli	r3,r2,23
 8001930:	a0803fcc 	andi	r2,r20,255
 8001934:	100a97fa 	slli	r5,r2,31
 8001938:	00802034 	movhi	r2,128
 800193c:	10bfffc4 	addi	r2,r2,-1
 8001940:	2084703a 	and	r2,r4,r2
 8001944:	10c4b03a 	or	r2,r2,r3
 8001948:	1144b03a 	or	r2,r2,r5
 800194c:	dfc00a17 	ldw	ra,40(sp)
 8001950:	df000917 	ldw	fp,36(sp)
 8001954:	ddc00817 	ldw	r23,32(sp)
 8001958:	dd800717 	ldw	r22,28(sp)
 800195c:	dd400617 	ldw	r21,24(sp)
 8001960:	dd000517 	ldw	r20,20(sp)
 8001964:	dcc00417 	ldw	r19,16(sp)
 8001968:	dc800317 	ldw	r18,12(sp)
 800196c:	dc400217 	ldw	r17,8(sp)
 8001970:	dc000117 	ldw	r16,4(sp)
 8001974:	dec00b04 	addi	sp,sp,44
 8001978:	f800283a 	ret
 800197c:	90000d1e 	bne	r18,zero,80019b4 <__mulsf3+0x1d8>
 8001980:	04400104 	movi	r17,4
 8001984:	05c00044 	movi	r23,1
 8001988:	003faf06 	br	8001848 <__mulsf3+0x6c>
 800198c:	9806c03a 	cmpne	r3,r19,zero
 8001990:	18c00084 	addi	r3,r3,2
 8001994:	003fba06 	br	8001880 <__mulsf3+0xa4>
 8001998:	9800141e 	bne	r19,zero,80019ec <__mulsf3+0x210>
 800199c:	00c00044 	movi	r3,1
 80019a0:	003fb706 	br	8001880 <__mulsf3+0xa4>
 80019a4:	a829883a 	mov	r20,r21
 80019a8:	00ffffc4 	movi	r3,-1
 80019ac:	0009883a 	mov	r4,zero
 80019b0:	003fdd06 	br	8001928 <__mulsf3+0x14c>
 80019b4:	9009883a 	mov	r4,r18
 80019b8:	d9400015 	stw	r5,0(sp)
 80019bc:	8003cdc0 	call	8003cdc <__clzsi2>
 80019c0:	10fffec4 	addi	r3,r2,-5
 80019c4:	10801d84 	addi	r2,r2,118
 80019c8:	90e4983a 	sll	r18,r18,r3
 80019cc:	00a1c83a 	sub	r16,zero,r2
 80019d0:	0023883a 	mov	r17,zero
 80019d4:	002f883a 	mov	r23,zero
 80019d8:	d9400017 	ldw	r5,0(sp)
 80019dc:	003f9a06 	br	8001848 <__mulsf3+0x6c>
 80019e0:	04400304 	movi	r17,12
 80019e4:	05c000c4 	movi	r23,3
 80019e8:	003f9706 	br	8001848 <__mulsf3+0x6c>
 80019ec:	9809883a 	mov	r4,r19
 80019f0:	d9800015 	stw	r6,0(sp)
 80019f4:	8003cdc0 	call	8003cdc <__clzsi2>
 80019f8:	10fffec4 	addi	r3,r2,-5
 80019fc:	10801d84 	addi	r2,r2,118
 8001a00:	98e6983a 	sll	r19,r19,r3
 8001a04:	0085c83a 	sub	r2,zero,r2
 8001a08:	0007883a 	mov	r3,zero
 8001a0c:	d9800017 	ldw	r6,0(sp)
 8001a10:	003f9b06 	br	8001880 <__mulsf3+0xa4>
 8001a14:	01002034 	movhi	r4,128
 8001a18:	0029883a 	mov	r20,zero
 8001a1c:	213fffc4 	addi	r4,r4,-1
 8001a20:	00ffffc4 	movi	r3,-1
 8001a24:	003fc006 	br	8001928 <__mulsf3+0x14c>
 8001a28:	9027883a 	mov	r19,r18
 8001a2c:	b807883a 	mov	r3,r23
 8001a30:	003fb406 	br	8001904 <__mulsf3+0x128>
 8001a34:	9027883a 	mov	r19,r18
 8001a38:	e02b883a 	mov	r21,fp
 8001a3c:	b807883a 	mov	r3,r23
 8001a40:	003fb006 	br	8001904 <__mulsf3+0x128>
 8001a44:	9004d43a 	srli	r2,r18,16
 8001a48:	9810d43a 	srli	r8,r19,16
 8001a4c:	94bfffcc 	andi	r18,r18,65535
 8001a50:	993fffcc 	andi	r4,r19,65535
 8001a54:	910d383a 	mul	r6,r18,r4
 8001a58:	20a7383a 	mul	r19,r4,r2
 8001a5c:	9225383a 	mul	r18,r18,r8
 8001a60:	3006d43a 	srli	r3,r6,16
 8001a64:	1211383a 	mul	r8,r2,r8
 8001a68:	94e5883a 	add	r18,r18,r19
 8001a6c:	1c87883a 	add	r3,r3,r18
 8001a70:	1cc0022e 	bgeu	r3,r19,8001a7c <__mulsf3+0x2a0>
 8001a74:	00800074 	movhi	r2,1
 8001a78:	4091883a 	add	r8,r8,r2
 8001a7c:	1804943a 	slli	r2,r3,16
 8001a80:	31bfffcc 	andi	r6,r6,65535
 8001a84:	1806d43a 	srli	r3,r3,16
 8001a88:	1185883a 	add	r2,r2,r6
 8001a8c:	102691ba 	slli	r19,r2,6
 8001a90:	1a07883a 	add	r3,r3,r8
 8001a94:	1004d6ba 	srli	r2,r2,26
 8001a98:	180891ba 	slli	r4,r3,6
 8001a9c:	9826c03a 	cmpne	r19,r19,zero
 8001aa0:	9884b03a 	or	r2,r19,r2
 8001aa4:	1126b03a 	or	r19,r2,r4
 8001aa8:	9882002c 	andhi	r2,r19,2048
 8001aac:	10000426 	beq	r2,zero,8001ac0 <__mulsf3+0x2e4>
 8001ab0:	9804d07a 	srli	r2,r19,1
 8001ab4:	9900004c 	andi	r4,r19,1
 8001ab8:	3821883a 	mov	r16,r7
 8001abc:	1126b03a 	or	r19,r2,r4
 8001ac0:	80c01fc4 	addi	r3,r16,127
 8001ac4:	00c0210e 	bge	zero,r3,8001b4c <__mulsf3+0x370>
 8001ac8:	988001cc 	andi	r2,r19,7
 8001acc:	10000426 	beq	r2,zero,8001ae0 <__mulsf3+0x304>
 8001ad0:	988003cc 	andi	r2,r19,15
 8001ad4:	01000104 	movi	r4,4
 8001ad8:	11000126 	beq	r2,r4,8001ae0 <__mulsf3+0x304>
 8001adc:	9927883a 	add	r19,r19,r4
 8001ae0:	9882002c 	andhi	r2,r19,2048
 8001ae4:	10000426 	beq	r2,zero,8001af8 <__mulsf3+0x31c>
 8001ae8:	00be0034 	movhi	r2,63488
 8001aec:	10bfffc4 	addi	r2,r2,-1
 8001af0:	80c02004 	addi	r3,r16,128
 8001af4:	98a6703a 	and	r19,r19,r2
 8001af8:	00803f84 	movi	r2,254
 8001afc:	10ffa916 	blt	r2,r3,80019a4 <__mulsf3+0x1c8>
 8001b00:	980891ba 	slli	r4,r19,6
 8001b04:	a829883a 	mov	r20,r21
 8001b08:	2008d27a 	srli	r4,r4,9
 8001b0c:	003f8606 	br	8001928 <__mulsf3+0x14c>
 8001b10:	9080102c 	andhi	r2,r18,64
 8001b14:	10000826 	beq	r2,zero,8001b38 <__mulsf3+0x35c>
 8001b18:	9880102c 	andhi	r2,r19,64
 8001b1c:	1000061e 	bne	r2,zero,8001b38 <__mulsf3+0x35c>
 8001b20:	00802034 	movhi	r2,128
 8001b24:	99001034 	orhi	r4,r19,64
 8001b28:	10bfffc4 	addi	r2,r2,-1
 8001b2c:	b029883a 	mov	r20,r22
 8001b30:	2088703a 	and	r4,r4,r2
 8001b34:	003fba06 	br	8001a20 <__mulsf3+0x244>
 8001b38:	00802034 	movhi	r2,128
 8001b3c:	91001034 	orhi	r4,r18,64
 8001b40:	10bfffc4 	addi	r2,r2,-1
 8001b44:	2088703a 	and	r4,r4,r2
 8001b48:	003fb506 	br	8001a20 <__mulsf3+0x244>
 8001b4c:	00800044 	movi	r2,1
 8001b50:	10c7c83a 	sub	r3,r2,r3
 8001b54:	008006c4 	movi	r2,27
 8001b58:	10ff7016 	blt	r2,r3,800191c <__mulsf3+0x140>
 8001b5c:	00800804 	movi	r2,32
 8001b60:	10c5c83a 	sub	r2,r2,r3
 8001b64:	9884983a 	sll	r2,r19,r2
 8001b68:	98c6d83a 	srl	r3,r19,r3
 8001b6c:	1004c03a 	cmpne	r2,r2,zero
 8001b70:	1884b03a 	or	r2,r3,r2
 8001b74:	10c001cc 	andi	r3,r2,7
 8001b78:	18000426 	beq	r3,zero,8001b8c <__mulsf3+0x3b0>
 8001b7c:	10c003cc 	andi	r3,r2,15
 8001b80:	01000104 	movi	r4,4
 8001b84:	19000126 	beq	r3,r4,8001b8c <__mulsf3+0x3b0>
 8001b88:	1105883a 	add	r2,r2,r4
 8001b8c:	10c1002c 	andhi	r3,r2,1024
 8001b90:	18000626 	beq	r3,zero,8001bac <__mulsf3+0x3d0>
 8001b94:	a829883a 	mov	r20,r21
 8001b98:	00c00044 	movi	r3,1
 8001b9c:	0009883a 	mov	r4,zero
 8001ba0:	003f6106 	br	8001928 <__mulsf3+0x14c>
 8001ba4:	3821883a 	mov	r16,r7
 8001ba8:	003fc506 	br	8001ac0 <__mulsf3+0x2e4>
 8001bac:	100491ba 	slli	r2,r2,6
 8001bb0:	a829883a 	mov	r20,r21
 8001bb4:	0007883a 	mov	r3,zero
 8001bb8:	1008d27a 	srli	r4,r2,9
 8001bbc:	003f5a06 	br	8001928 <__mulsf3+0x14c>
 8001bc0:	00802034 	movhi	r2,128
 8001bc4:	99001034 	orhi	r4,r19,64
 8001bc8:	10bfffc4 	addi	r2,r2,-1
 8001bcc:	a829883a 	mov	r20,r21
 8001bd0:	2088703a 	and	r4,r4,r2
 8001bd4:	003f9206 	br	8001a20 <__mulsf3+0x244>

08001bd8 <__subsf3>:
 8001bd8:	defffc04 	addi	sp,sp,-16
 8001bdc:	280cd5fa 	srli	r6,r5,23
 8001be0:	dc000015 	stw	r16,0(sp)
 8001be4:	01c02034 	movhi	r7,128
 8001be8:	2020d5fa 	srli	r16,r4,23
 8001bec:	39ffffc4 	addi	r7,r7,-1
 8001bf0:	3906703a 	and	r3,r7,r4
 8001bf4:	dc400115 	stw	r17,4(sp)
 8001bf8:	394e703a 	and	r7,r7,r5
 8001bfc:	2022d7fa 	srli	r17,r4,31
 8001c00:	dfc00315 	stw	ra,12(sp)
 8001c04:	dc800215 	stw	r18,8(sp)
 8001c08:	31803fcc 	andi	r6,r6,255
 8001c0c:	01003fc4 	movi	r4,255
 8001c10:	84003fcc 	andi	r16,r16,255
 8001c14:	180690fa 	slli	r3,r3,3
 8001c18:	2804d7fa 	srli	r2,r5,31
 8001c1c:	380e90fa 	slli	r7,r7,3
 8001c20:	31006d26 	beq	r6,r4,8001dd8 <__subsf3+0x200>
 8001c24:	1080005c 	xori	r2,r2,1
 8001c28:	8189c83a 	sub	r4,r16,r6
 8001c2c:	14404f26 	beq	r2,r17,8001d6c <__subsf3+0x194>
 8001c30:	0100770e 	bge	zero,r4,8001e10 <__subsf3+0x238>
 8001c34:	30001e1e 	bne	r6,zero,8001cb0 <__subsf3+0xd8>
 8001c38:	38006a1e 	bne	r7,zero,8001de4 <__subsf3+0x20c>
 8001c3c:	188001cc 	andi	r2,r3,7
 8001c40:	10000426 	beq	r2,zero,8001c54 <__subsf3+0x7c>
 8001c44:	188003cc 	andi	r2,r3,15
 8001c48:	01000104 	movi	r4,4
 8001c4c:	11000126 	beq	r2,r4,8001c54 <__subsf3+0x7c>
 8001c50:	1907883a 	add	r3,r3,r4
 8001c54:	1881002c 	andhi	r2,r3,1024
 8001c58:	10003926 	beq	r2,zero,8001d40 <__subsf3+0x168>
 8001c5c:	84000044 	addi	r16,r16,1
 8001c60:	00803fc4 	movi	r2,255
 8001c64:	80807526 	beq	r16,r2,8001e3c <__subsf3+0x264>
 8001c68:	180691ba 	slli	r3,r3,6
 8001c6c:	8880004c 	andi	r2,r17,1
 8001c70:	180ad27a 	srli	r5,r3,9
 8001c74:	84003fcc 	andi	r16,r16,255
 8001c78:	800695fa 	slli	r3,r16,23
 8001c7c:	10803fcc 	andi	r2,r2,255
 8001c80:	01002034 	movhi	r4,128
 8001c84:	213fffc4 	addi	r4,r4,-1
 8001c88:	100497fa 	slli	r2,r2,31
 8001c8c:	2920703a 	and	r16,r5,r4
 8001c90:	80e0b03a 	or	r16,r16,r3
 8001c94:	8084b03a 	or	r2,r16,r2
 8001c98:	dfc00317 	ldw	ra,12(sp)
 8001c9c:	dc800217 	ldw	r18,8(sp)
 8001ca0:	dc400117 	ldw	r17,4(sp)
 8001ca4:	dc000017 	ldw	r16,0(sp)
 8001ca8:	dec00404 	addi	sp,sp,16
 8001cac:	f800283a 	ret
 8001cb0:	00803fc4 	movi	r2,255
 8001cb4:	80bfe126 	beq	r16,r2,8001c3c <__subsf3+0x64>
 8001cb8:	39c10034 	orhi	r7,r7,1024
 8001cbc:	008006c4 	movi	r2,27
 8001cc0:	11007416 	blt	r2,r4,8001e94 <__subsf3+0x2bc>
 8001cc4:	00800804 	movi	r2,32
 8001cc8:	1105c83a 	sub	r2,r2,r4
 8001ccc:	3884983a 	sll	r2,r7,r2
 8001cd0:	390ed83a 	srl	r7,r7,r4
 8001cd4:	1008c03a 	cmpne	r4,r2,zero
 8001cd8:	390eb03a 	or	r7,r7,r4
 8001cdc:	19c7c83a 	sub	r3,r3,r7
 8001ce0:	1881002c 	andhi	r2,r3,1024
 8001ce4:	10001426 	beq	r2,zero,8001d38 <__subsf3+0x160>
 8001ce8:	04810034 	movhi	r18,1024
 8001cec:	94bfffc4 	addi	r18,r18,-1
 8001cf0:	1ca4703a 	and	r18,r3,r18
 8001cf4:	9009883a 	mov	r4,r18
 8001cf8:	8003cdc0 	call	8003cdc <__clzsi2>
 8001cfc:	10bffec4 	addi	r2,r2,-5
 8001d00:	90a4983a 	sll	r18,r18,r2
 8001d04:	14005116 	blt	r2,r16,8001e4c <__subsf3+0x274>
 8001d08:	1405c83a 	sub	r2,r2,r16
 8001d0c:	10c00044 	addi	r3,r2,1
 8001d10:	00800804 	movi	r2,32
 8001d14:	10c5c83a 	sub	r2,r2,r3
 8001d18:	9084983a 	sll	r2,r18,r2
 8001d1c:	90e4d83a 	srl	r18,r18,r3
 8001d20:	0021883a 	mov	r16,zero
 8001d24:	1006c03a 	cmpne	r3,r2,zero
 8001d28:	90c6b03a 	or	r3,r18,r3
 8001d2c:	003fc306 	br	8001c3c <__subsf3+0x64>
 8001d30:	2000e026 	beq	r4,zero,80020b4 <__subsf3+0x4dc>
 8001d34:	2007883a 	mov	r3,r4
 8001d38:	188001cc 	andi	r2,r3,7
 8001d3c:	103fc11e 	bne	r2,zero,8001c44 <__subsf3+0x6c>
 8001d40:	180ad0fa 	srli	r5,r3,3
 8001d44:	00c03fc4 	movi	r3,255
 8001d48:	8880004c 	andi	r2,r17,1
 8001d4c:	80c0031e 	bne	r16,r3,8001d5c <__subsf3+0x184>
 8001d50:	28006d26 	beq	r5,zero,8001f08 <__subsf3+0x330>
 8001d54:	29401034 	orhi	r5,r5,64
 8001d58:	043fffc4 	movi	r16,-1
 8001d5c:	00c02034 	movhi	r3,128
 8001d60:	18ffffc4 	addi	r3,r3,-1
 8001d64:	28ca703a 	and	r5,r5,r3
 8001d68:	003fc206 	br	8001c74 <__subsf3+0x9c>
 8001d6c:	01003c0e 	bge	zero,r4,8001e60 <__subsf3+0x288>
 8001d70:	30002126 	beq	r6,zero,8001df8 <__subsf3+0x220>
 8001d74:	01403fc4 	movi	r5,255
 8001d78:	817fb026 	beq	r16,r5,8001c3c <__subsf3+0x64>
 8001d7c:	39c10034 	orhi	r7,r7,1024
 8001d80:	014006c4 	movi	r5,27
 8001d84:	29007416 	blt	r5,r4,8001f58 <__subsf3+0x380>
 8001d88:	01400804 	movi	r5,32
 8001d8c:	290bc83a 	sub	r5,r5,r4
 8001d90:	394a983a 	sll	r5,r7,r5
 8001d94:	390ed83a 	srl	r7,r7,r4
 8001d98:	2808c03a 	cmpne	r4,r5,zero
 8001d9c:	390eb03a 	or	r7,r7,r4
 8001da0:	19c7883a 	add	r3,r3,r7
 8001da4:	1901002c 	andhi	r4,r3,1024
 8001da8:	20003826 	beq	r4,zero,8001e8c <__subsf3+0x2b4>
 8001dac:	84000044 	addi	r16,r16,1
 8001db0:	01003fc4 	movi	r4,255
 8001db4:	81005426 	beq	r16,r4,8001f08 <__subsf3+0x330>
 8001db8:	1023883a 	mov	r17,r2
 8001dbc:	00bf0034 	movhi	r2,64512
 8001dc0:	10bfffc4 	addi	r2,r2,-1
 8001dc4:	1900004c 	andi	r4,r3,1
 8001dc8:	1886703a 	and	r3,r3,r2
 8001dcc:	1806d07a 	srli	r3,r3,1
 8001dd0:	1906b03a 	or	r3,r3,r4
 8001dd4:	003f9906 	br	8001c3c <__subsf3+0x64>
 8001dd8:	383f9226 	beq	r7,zero,8001c24 <__subsf3+0x4c>
 8001ddc:	10803fcc 	andi	r2,r2,255
 8001de0:	003f9106 	br	8001c28 <__subsf3+0x50>
 8001de4:	213fffc4 	addi	r4,r4,-1
 8001de8:	203fbc26 	beq	r4,zero,8001cdc <__subsf3+0x104>
 8001dec:	00803fc4 	movi	r2,255
 8001df0:	80bfb21e 	bne	r16,r2,8001cbc <__subsf3+0xe4>
 8001df4:	003f9106 	br	8001c3c <__subsf3+0x64>
 8001df8:	383f9026 	beq	r7,zero,8001c3c <__subsf3+0x64>
 8001dfc:	213fffc4 	addi	r4,r4,-1
 8001e00:	203fe726 	beq	r4,zero,8001da0 <__subsf3+0x1c8>
 8001e04:	01403fc4 	movi	r5,255
 8001e08:	817fdd1e 	bne	r16,r5,8001d80 <__subsf3+0x1a8>
 8001e0c:	003f8b06 	br	8001c3c <__subsf3+0x64>
 8001e10:	2000221e 	bne	r4,zero,8001e9c <__subsf3+0x2c4>
 8001e14:	81000044 	addi	r4,r16,1
 8001e18:	21003fcc 	andi	r4,r4,255
 8001e1c:	01400044 	movi	r5,1
 8001e20:	2900470e 	bge	r5,r4,8001f40 <__subsf3+0x368>
 8001e24:	19e5c83a 	sub	r18,r3,r7
 8001e28:	9141002c 	andhi	r5,r18,1024
 8001e2c:	28002d26 	beq	r5,zero,8001ee4 <__subsf3+0x30c>
 8001e30:	38e5c83a 	sub	r18,r7,r3
 8001e34:	1023883a 	mov	r17,r2
 8001e38:	003fae06 	br	8001cf4 <__subsf3+0x11c>
 8001e3c:	8880004c 	andi	r2,r17,1
 8001e40:	043fffc4 	movi	r16,-1
 8001e44:	000b883a 	mov	r5,zero
 8001e48:	003f8a06 	br	8001c74 <__subsf3+0x9c>
 8001e4c:	00ff0034 	movhi	r3,64512
 8001e50:	18ffffc4 	addi	r3,r3,-1
 8001e54:	80a1c83a 	sub	r16,r16,r2
 8001e58:	90c6703a 	and	r3,r18,r3
 8001e5c:	003f7706 	br	8001c3c <__subsf3+0x64>
 8001e60:	2000431e 	bne	r4,zero,8001f70 <__subsf3+0x398>
 8001e64:	81000044 	addi	r4,r16,1
 8001e68:	21803fcc 	andi	r6,r4,255
 8001e6c:	01400044 	movi	r5,1
 8001e70:	2980280e 	bge	r5,r6,8001f14 <__subsf3+0x33c>
 8001e74:	01403fc4 	movi	r5,255
 8001e78:	21402326 	beq	r4,r5,8001f08 <__subsf3+0x330>
 8001e7c:	19c7883a 	add	r3,r3,r7
 8001e80:	1806d07a 	srli	r3,r3,1
 8001e84:	2021883a 	mov	r16,r4
 8001e88:	003f6c06 	br	8001c3c <__subsf3+0x64>
 8001e8c:	1023883a 	mov	r17,r2
 8001e90:	003fa906 	br	8001d38 <__subsf3+0x160>
 8001e94:	01c00044 	movi	r7,1
 8001e98:	003f9006 	br	8001cdc <__subsf3+0x104>
 8001e9c:	8000151e 	bne	r16,zero,8001ef4 <__subsf3+0x31c>
 8001ea0:	18002f26 	beq	r3,zero,8001f60 <__subsf3+0x388>
 8001ea4:	0108303a 	nor	r4,zero,r4
 8001ea8:	20000a26 	beq	r4,zero,8001ed4 <__subsf3+0x2fc>
 8001eac:	01403fc4 	movi	r5,255
 8001eb0:	31402b26 	beq	r6,r5,8001f60 <__subsf3+0x388>
 8001eb4:	014006c4 	movi	r5,27
 8001eb8:	29006e16 	blt	r5,r4,8002074 <__subsf3+0x49c>
 8001ebc:	01400804 	movi	r5,32
 8001ec0:	290bc83a 	sub	r5,r5,r4
 8001ec4:	194a983a 	sll	r5,r3,r5
 8001ec8:	1908d83a 	srl	r4,r3,r4
 8001ecc:	2806c03a 	cmpne	r3,r5,zero
 8001ed0:	20c6b03a 	or	r3,r4,r3
 8001ed4:	38c7c83a 	sub	r3,r7,r3
 8001ed8:	3021883a 	mov	r16,r6
 8001edc:	1023883a 	mov	r17,r2
 8001ee0:	003f7f06 	br	8001ce0 <__subsf3+0x108>
 8001ee4:	903f831e 	bne	r18,zero,8001cf4 <__subsf3+0x11c>
 8001ee8:	0005883a 	mov	r2,zero
 8001eec:	0021883a 	mov	r16,zero
 8001ef0:	003f9a06 	br	8001d5c <__subsf3+0x184>
 8001ef4:	01403fc4 	movi	r5,255
 8001ef8:	31401926 	beq	r6,r5,8001f60 <__subsf3+0x388>
 8001efc:	0109c83a 	sub	r4,zero,r4
 8001f00:	18c10034 	orhi	r3,r3,1024
 8001f04:	003feb06 	br	8001eb4 <__subsf3+0x2dc>
 8001f08:	043fffc4 	movi	r16,-1
 8001f0c:	000b883a 	mov	r5,zero
 8001f10:	003f5806 	br	8001c74 <__subsf3+0x9c>
 8001f14:	8000481e 	bne	r16,zero,8002038 <__subsf3+0x460>
 8001f18:	18006226 	beq	r3,zero,80020a4 <__subsf3+0x4cc>
 8001f1c:	383f4726 	beq	r7,zero,8001c3c <__subsf3+0x64>
 8001f20:	19c7883a 	add	r3,r3,r7
 8001f24:	1881002c 	andhi	r2,r3,1024
 8001f28:	103f8326 	beq	r2,zero,8001d38 <__subsf3+0x160>
 8001f2c:	00bf0034 	movhi	r2,64512
 8001f30:	10bfffc4 	addi	r2,r2,-1
 8001f34:	2821883a 	mov	r16,r5
 8001f38:	1886703a 	and	r3,r3,r2
 8001f3c:	003f3f06 	br	8001c3c <__subsf3+0x64>
 8001f40:	80001c1e 	bne	r16,zero,8001fb4 <__subsf3+0x3dc>
 8001f44:	1800261e 	bne	r3,zero,8001fe0 <__subsf3+0x408>
 8001f48:	38004c26 	beq	r7,zero,800207c <__subsf3+0x4a4>
 8001f4c:	3807883a 	mov	r3,r7
 8001f50:	1023883a 	mov	r17,r2
 8001f54:	003f3906 	br	8001c3c <__subsf3+0x64>
 8001f58:	01c00044 	movi	r7,1
 8001f5c:	003f9006 	br	8001da0 <__subsf3+0x1c8>
 8001f60:	3807883a 	mov	r3,r7
 8001f64:	3021883a 	mov	r16,r6
 8001f68:	1023883a 	mov	r17,r2
 8001f6c:	003f3306 	br	8001c3c <__subsf3+0x64>
 8001f70:	8000161e 	bne	r16,zero,8001fcc <__subsf3+0x3f4>
 8001f74:	18002d26 	beq	r3,zero,800202c <__subsf3+0x454>
 8001f78:	0108303a 	nor	r4,zero,r4
 8001f7c:	20000a26 	beq	r4,zero,8001fa8 <__subsf3+0x3d0>
 8001f80:	01403fc4 	movi	r5,255
 8001f84:	31402926 	beq	r6,r5,800202c <__subsf3+0x454>
 8001f88:	014006c4 	movi	r5,27
 8001f8c:	29004716 	blt	r5,r4,80020ac <__subsf3+0x4d4>
 8001f90:	01400804 	movi	r5,32
 8001f94:	290bc83a 	sub	r5,r5,r4
 8001f98:	194a983a 	sll	r5,r3,r5
 8001f9c:	1908d83a 	srl	r4,r3,r4
 8001fa0:	2806c03a 	cmpne	r3,r5,zero
 8001fa4:	20c6b03a 	or	r3,r4,r3
 8001fa8:	19c7883a 	add	r3,r3,r7
 8001fac:	3021883a 	mov	r16,r6
 8001fb0:	003f7c06 	br	8001da4 <__subsf3+0x1cc>
 8001fb4:	1800111e 	bne	r3,zero,8001ffc <__subsf3+0x424>
 8001fb8:	38003326 	beq	r7,zero,8002088 <__subsf3+0x4b0>
 8001fbc:	3807883a 	mov	r3,r7
 8001fc0:	1023883a 	mov	r17,r2
 8001fc4:	04003fc4 	movi	r16,255
 8001fc8:	003f1c06 	br	8001c3c <__subsf3+0x64>
 8001fcc:	01403fc4 	movi	r5,255
 8001fd0:	31401626 	beq	r6,r5,800202c <__subsf3+0x454>
 8001fd4:	0109c83a 	sub	r4,zero,r4
 8001fd8:	18c10034 	orhi	r3,r3,1024
 8001fdc:	003fea06 	br	8001f88 <__subsf3+0x3b0>
 8001fe0:	383f1626 	beq	r7,zero,8001c3c <__subsf3+0x64>
 8001fe4:	19c9c83a 	sub	r4,r3,r7
 8001fe8:	2141002c 	andhi	r5,r4,1024
 8001fec:	283f5026 	beq	r5,zero,8001d30 <__subsf3+0x158>
 8001ff0:	38c7c83a 	sub	r3,r7,r3
 8001ff4:	1023883a 	mov	r17,r2
 8001ff8:	003f1006 	br	8001c3c <__subsf3+0x64>
 8001ffc:	38001b26 	beq	r7,zero,800206c <__subsf3+0x494>
 8002000:	1806d0fa 	srli	r3,r3,3
 8002004:	1900102c 	andhi	r4,r3,64
 8002008:	20000526 	beq	r4,zero,8002020 <__subsf3+0x448>
 800200c:	380ed0fa 	srli	r7,r7,3
 8002010:	3900102c 	andhi	r4,r7,64
 8002014:	2000021e 	bne	r4,zero,8002020 <__subsf3+0x448>
 8002018:	3807883a 	mov	r3,r7
 800201c:	1023883a 	mov	r17,r2
 8002020:	180690fa 	slli	r3,r3,3
 8002024:	04003fc4 	movi	r16,255
 8002028:	003f0406 	br	8001c3c <__subsf3+0x64>
 800202c:	3807883a 	mov	r3,r7
 8002030:	3021883a 	mov	r16,r6
 8002034:	003f0106 	br	8001c3c <__subsf3+0x64>
 8002038:	18001726 	beq	r3,zero,8002098 <__subsf3+0x4c0>
 800203c:	38000b26 	beq	r7,zero,800206c <__subsf3+0x494>
 8002040:	1806d0fa 	srli	r3,r3,3
 8002044:	1900102c 	andhi	r4,r3,64
 8002048:	20000426 	beq	r4,zero,800205c <__subsf3+0x484>
 800204c:	380ed0fa 	srli	r7,r7,3
 8002050:	3900102c 	andhi	r4,r7,64
 8002054:	2000011e 	bne	r4,zero,800205c <__subsf3+0x484>
 8002058:	3807883a 	mov	r3,r7
 800205c:	180690fa 	slli	r3,r3,3
 8002060:	1023883a 	mov	r17,r2
 8002064:	04003fc4 	movi	r16,255
 8002068:	003ef406 	br	8001c3c <__subsf3+0x64>
 800206c:	04003fc4 	movi	r16,255
 8002070:	003ef206 	br	8001c3c <__subsf3+0x64>
 8002074:	00c00044 	movi	r3,1
 8002078:	003f9606 	br	8001ed4 <__subsf3+0x2fc>
 800207c:	000b883a 	mov	r5,zero
 8002080:	0005883a 	mov	r2,zero
 8002084:	003f3506 	br	8001d5c <__subsf3+0x184>
 8002088:	01402034 	movhi	r5,128
 800208c:	297fffc4 	addi	r5,r5,-1
 8002090:	0005883a 	mov	r2,zero
 8002094:	003f2f06 	br	8001d54 <__subsf3+0x17c>
 8002098:	3807883a 	mov	r3,r7
 800209c:	04003fc4 	movi	r16,255
 80020a0:	003ee606 	br	8001c3c <__subsf3+0x64>
 80020a4:	3807883a 	mov	r3,r7
 80020a8:	003ee406 	br	8001c3c <__subsf3+0x64>
 80020ac:	00c00044 	movi	r3,1
 80020b0:	003fbd06 	br	8001fa8 <__subsf3+0x3d0>
 80020b4:	0005883a 	mov	r2,zero
 80020b8:	003f2806 	br	8001d5c <__subsf3+0x184>

080020bc <__adddf3>:
 80020bc:	02c00434 	movhi	r11,16
 80020c0:	5affffc4 	addi	r11,r11,-1
 80020c4:	2806d7fa 	srli	r3,r5,31
 80020c8:	2ad4703a 	and	r10,r5,r11
 80020cc:	3ad2703a 	and	r9,r7,r11
 80020d0:	3804d53a 	srli	r2,r7,20
 80020d4:	3018d77a 	srli	r12,r6,29
 80020d8:	280ad53a 	srli	r5,r5,20
 80020dc:	501490fa 	slli	r10,r10,3
 80020e0:	2010d77a 	srli	r8,r4,29
 80020e4:	481290fa 	slli	r9,r9,3
 80020e8:	380ed7fa 	srli	r7,r7,31
 80020ec:	defffb04 	addi	sp,sp,-20
 80020f0:	dc800215 	stw	r18,8(sp)
 80020f4:	dc400115 	stw	r17,4(sp)
 80020f8:	dc000015 	stw	r16,0(sp)
 80020fc:	dfc00415 	stw	ra,16(sp)
 8002100:	dcc00315 	stw	r19,12(sp)
 8002104:	1c803fcc 	andi	r18,r3,255
 8002108:	2c01ffcc 	andi	r16,r5,2047
 800210c:	5210b03a 	or	r8,r10,r8
 8002110:	202290fa 	slli	r17,r4,3
 8002114:	1081ffcc 	andi	r2,r2,2047
 8002118:	4b12b03a 	or	r9,r9,r12
 800211c:	300c90fa 	slli	r6,r6,3
 8002120:	91c07526 	beq	r18,r7,80022f8 <__adddf3+0x23c>
 8002124:	8087c83a 	sub	r3,r16,r2
 8002128:	00c0ab0e 	bge	zero,r3,80023d8 <__adddf3+0x31c>
 800212c:	10002a1e 	bne	r2,zero,80021d8 <__adddf3+0x11c>
 8002130:	4984b03a 	or	r2,r9,r6
 8002134:	1000961e 	bne	r2,zero,8002390 <__adddf3+0x2d4>
 8002138:	888001cc 	andi	r2,r17,7
 800213c:	10000726 	beq	r2,zero,800215c <__adddf3+0xa0>
 8002140:	888003cc 	andi	r2,r17,15
 8002144:	00c00104 	movi	r3,4
 8002148:	10c00426 	beq	r2,r3,800215c <__adddf3+0xa0>
 800214c:	88c7883a 	add	r3,r17,r3
 8002150:	1c63803a 	cmpltu	r17,r3,r17
 8002154:	4451883a 	add	r8,r8,r17
 8002158:	1823883a 	mov	r17,r3
 800215c:	4080202c 	andhi	r2,r8,128
 8002160:	10005926 	beq	r2,zero,80022c8 <__adddf3+0x20c>
 8002164:	84000044 	addi	r16,r16,1
 8002168:	0081ffc4 	movi	r2,2047
 800216c:	8080ba26 	beq	r16,r2,8002458 <__adddf3+0x39c>
 8002170:	00bfe034 	movhi	r2,65408
 8002174:	10bfffc4 	addi	r2,r2,-1
 8002178:	4090703a 	and	r8,r8,r2
 800217c:	4004977a 	slli	r2,r8,29
 8002180:	4010927a 	slli	r8,r8,9
 8002184:	8822d0fa 	srli	r17,r17,3
 8002188:	8401ffcc 	andi	r16,r16,2047
 800218c:	4010d33a 	srli	r8,r8,12
 8002190:	9007883a 	mov	r3,r18
 8002194:	1444b03a 	or	r2,r2,r17
 8002198:	8401ffcc 	andi	r16,r16,2047
 800219c:	8020953a 	slli	r16,r16,20
 80021a0:	18c03fcc 	andi	r3,r3,255
 80021a4:	01000434 	movhi	r4,16
 80021a8:	213fffc4 	addi	r4,r4,-1
 80021ac:	180697fa 	slli	r3,r3,31
 80021b0:	4110703a 	and	r8,r8,r4
 80021b4:	4410b03a 	or	r8,r8,r16
 80021b8:	40c6b03a 	or	r3,r8,r3
 80021bc:	dfc00417 	ldw	ra,16(sp)
 80021c0:	dcc00317 	ldw	r19,12(sp)
 80021c4:	dc800217 	ldw	r18,8(sp)
 80021c8:	dc400117 	ldw	r17,4(sp)
 80021cc:	dc000017 	ldw	r16,0(sp)
 80021d0:	dec00504 	addi	sp,sp,20
 80021d4:	f800283a 	ret
 80021d8:	0081ffc4 	movi	r2,2047
 80021dc:	80bfd626 	beq	r16,r2,8002138 <__adddf3+0x7c>
 80021e0:	4a402034 	orhi	r9,r9,128
 80021e4:	00800e04 	movi	r2,56
 80021e8:	10c09f16 	blt	r2,r3,8002468 <__adddf3+0x3ac>
 80021ec:	008007c4 	movi	r2,31
 80021f0:	10c0c216 	blt	r2,r3,80024fc <__adddf3+0x440>
 80021f4:	00800804 	movi	r2,32
 80021f8:	10c5c83a 	sub	r2,r2,r3
 80021fc:	488a983a 	sll	r5,r9,r2
 8002200:	30c8d83a 	srl	r4,r6,r3
 8002204:	3084983a 	sll	r2,r6,r2
 8002208:	48c6d83a 	srl	r3,r9,r3
 800220c:	290cb03a 	or	r6,r5,r4
 8002210:	1004c03a 	cmpne	r2,r2,zero
 8002214:	308cb03a 	or	r6,r6,r2
 8002218:	898dc83a 	sub	r6,r17,r6
 800221c:	89a3803a 	cmpltu	r17,r17,r6
 8002220:	40d1c83a 	sub	r8,r8,r3
 8002224:	4451c83a 	sub	r8,r8,r17
 8002228:	3023883a 	mov	r17,r6
 800222c:	4080202c 	andhi	r2,r8,128
 8002230:	10002326 	beq	r2,zero,80022c0 <__adddf3+0x204>
 8002234:	04c02034 	movhi	r19,128
 8002238:	9cffffc4 	addi	r19,r19,-1
 800223c:	44e6703a 	and	r19,r8,r19
 8002240:	98007626 	beq	r19,zero,800241c <__adddf3+0x360>
 8002244:	9809883a 	mov	r4,r19
 8002248:	8003cdc0 	call	8003cdc <__clzsi2>
 800224c:	10fffe04 	addi	r3,r2,-8
 8002250:	010007c4 	movi	r4,31
 8002254:	20c07716 	blt	r4,r3,8002434 <__adddf3+0x378>
 8002258:	00800804 	movi	r2,32
 800225c:	10c5c83a 	sub	r2,r2,r3
 8002260:	8884d83a 	srl	r2,r17,r2
 8002264:	98d0983a 	sll	r8,r19,r3
 8002268:	88e2983a 	sll	r17,r17,r3
 800226c:	1204b03a 	or	r2,r2,r8
 8002270:	1c007416 	blt	r3,r16,8002444 <__adddf3+0x388>
 8002274:	1c21c83a 	sub	r16,r3,r16
 8002278:	82000044 	addi	r8,r16,1
 800227c:	00c007c4 	movi	r3,31
 8002280:	1a009116 	blt	r3,r8,80024c8 <__adddf3+0x40c>
 8002284:	00c00804 	movi	r3,32
 8002288:	1a07c83a 	sub	r3,r3,r8
 800228c:	8a08d83a 	srl	r4,r17,r8
 8002290:	88e2983a 	sll	r17,r17,r3
 8002294:	10c6983a 	sll	r3,r2,r3
 8002298:	1210d83a 	srl	r8,r2,r8
 800229c:	8804c03a 	cmpne	r2,r17,zero
 80022a0:	1906b03a 	or	r3,r3,r4
 80022a4:	18a2b03a 	or	r17,r3,r2
 80022a8:	0021883a 	mov	r16,zero
 80022ac:	003fa206 	br	8002138 <__adddf3+0x7c>
 80022b0:	1890b03a 	or	r8,r3,r2
 80022b4:	40017d26 	beq	r8,zero,80028ac <__adddf3+0x7f0>
 80022b8:	1011883a 	mov	r8,r2
 80022bc:	1823883a 	mov	r17,r3
 80022c0:	888001cc 	andi	r2,r17,7
 80022c4:	103f9e1e 	bne	r2,zero,8002140 <__adddf3+0x84>
 80022c8:	4004977a 	slli	r2,r8,29
 80022cc:	8822d0fa 	srli	r17,r17,3
 80022d0:	4010d0fa 	srli	r8,r8,3
 80022d4:	9007883a 	mov	r3,r18
 80022d8:	1444b03a 	or	r2,r2,r17
 80022dc:	0101ffc4 	movi	r4,2047
 80022e0:	81002426 	beq	r16,r4,8002374 <__adddf3+0x2b8>
 80022e4:	8120703a 	and	r16,r16,r4
 80022e8:	01000434 	movhi	r4,16
 80022ec:	213fffc4 	addi	r4,r4,-1
 80022f0:	4110703a 	and	r8,r8,r4
 80022f4:	003fa806 	br	8002198 <__adddf3+0xdc>
 80022f8:	8089c83a 	sub	r4,r16,r2
 80022fc:	01005e0e 	bge	zero,r4,8002478 <__adddf3+0x3bc>
 8002300:	10002b26 	beq	r2,zero,80023b0 <__adddf3+0x2f4>
 8002304:	0081ffc4 	movi	r2,2047
 8002308:	80bf8b26 	beq	r16,r2,8002138 <__adddf3+0x7c>
 800230c:	4a402034 	orhi	r9,r9,128
 8002310:	00800e04 	movi	r2,56
 8002314:	1100a40e 	bge	r2,r4,80025a8 <__adddf3+0x4ec>
 8002318:	498cb03a 	or	r6,r9,r6
 800231c:	300ac03a 	cmpne	r5,r6,zero
 8002320:	0013883a 	mov	r9,zero
 8002324:	2c4b883a 	add	r5,r5,r17
 8002328:	2c63803a 	cmpltu	r17,r5,r17
 800232c:	4a11883a 	add	r8,r9,r8
 8002330:	8a11883a 	add	r8,r17,r8
 8002334:	2823883a 	mov	r17,r5
 8002338:	4080202c 	andhi	r2,r8,128
 800233c:	103fe026 	beq	r2,zero,80022c0 <__adddf3+0x204>
 8002340:	84000044 	addi	r16,r16,1
 8002344:	0081ffc4 	movi	r2,2047
 8002348:	8080d226 	beq	r16,r2,8002694 <__adddf3+0x5d8>
 800234c:	00bfe034 	movhi	r2,65408
 8002350:	10bfffc4 	addi	r2,r2,-1
 8002354:	4090703a 	and	r8,r8,r2
 8002358:	880ad07a 	srli	r5,r17,1
 800235c:	400897fa 	slli	r4,r8,31
 8002360:	88c0004c 	andi	r3,r17,1
 8002364:	28e2b03a 	or	r17,r5,r3
 8002368:	4010d07a 	srli	r8,r8,1
 800236c:	2462b03a 	or	r17,r4,r17
 8002370:	003f7106 	br	8002138 <__adddf3+0x7c>
 8002374:	4088b03a 	or	r4,r8,r2
 8002378:	20014526 	beq	r4,zero,8002890 <__adddf3+0x7d4>
 800237c:	01000434 	movhi	r4,16
 8002380:	42000234 	orhi	r8,r8,8
 8002384:	213fffc4 	addi	r4,r4,-1
 8002388:	4110703a 	and	r8,r8,r4
 800238c:	003f8206 	br	8002198 <__adddf3+0xdc>
 8002390:	18ffffc4 	addi	r3,r3,-1
 8002394:	1800491e 	bne	r3,zero,80024bc <__adddf3+0x400>
 8002398:	898bc83a 	sub	r5,r17,r6
 800239c:	8963803a 	cmpltu	r17,r17,r5
 80023a0:	4251c83a 	sub	r8,r8,r9
 80023a4:	4451c83a 	sub	r8,r8,r17
 80023a8:	2823883a 	mov	r17,r5
 80023ac:	003f9f06 	br	800222c <__adddf3+0x170>
 80023b0:	4984b03a 	or	r2,r9,r6
 80023b4:	103f6026 	beq	r2,zero,8002138 <__adddf3+0x7c>
 80023b8:	213fffc4 	addi	r4,r4,-1
 80023bc:	2000931e 	bne	r4,zero,800260c <__adddf3+0x550>
 80023c0:	898d883a 	add	r6,r17,r6
 80023c4:	3463803a 	cmpltu	r17,r6,r17
 80023c8:	4251883a 	add	r8,r8,r9
 80023cc:	8a11883a 	add	r8,r17,r8
 80023d0:	3023883a 	mov	r17,r6
 80023d4:	003fd806 	br	8002338 <__adddf3+0x27c>
 80023d8:	1800541e 	bne	r3,zero,800252c <__adddf3+0x470>
 80023dc:	80800044 	addi	r2,r16,1
 80023e0:	1081ffcc 	andi	r2,r2,2047
 80023e4:	00c00044 	movi	r3,1
 80023e8:	1880a00e 	bge	r3,r2,800266c <__adddf3+0x5b0>
 80023ec:	8989c83a 	sub	r4,r17,r6
 80023f0:	8905803a 	cmpltu	r2,r17,r4
 80023f4:	4267c83a 	sub	r19,r8,r9
 80023f8:	98a7c83a 	sub	r19,r19,r2
 80023fc:	9880202c 	andhi	r2,r19,128
 8002400:	10006326 	beq	r2,zero,8002590 <__adddf3+0x4d4>
 8002404:	3463c83a 	sub	r17,r6,r17
 8002408:	4a07c83a 	sub	r3,r9,r8
 800240c:	344d803a 	cmpltu	r6,r6,r17
 8002410:	19a7c83a 	sub	r19,r3,r6
 8002414:	3825883a 	mov	r18,r7
 8002418:	983f8a1e 	bne	r19,zero,8002244 <__adddf3+0x188>
 800241c:	8809883a 	mov	r4,r17
 8002420:	8003cdc0 	call	8003cdc <__clzsi2>
 8002424:	10800804 	addi	r2,r2,32
 8002428:	10fffe04 	addi	r3,r2,-8
 800242c:	010007c4 	movi	r4,31
 8002430:	20ff890e 	bge	r4,r3,8002258 <__adddf3+0x19c>
 8002434:	10bff604 	addi	r2,r2,-40
 8002438:	8884983a 	sll	r2,r17,r2
 800243c:	0023883a 	mov	r17,zero
 8002440:	1c3f8c0e 	bge	r3,r16,8002274 <__adddf3+0x1b8>
 8002444:	023fe034 	movhi	r8,65408
 8002448:	423fffc4 	addi	r8,r8,-1
 800244c:	80e1c83a 	sub	r16,r16,r3
 8002450:	1210703a 	and	r8,r2,r8
 8002454:	003f3806 	br	8002138 <__adddf3+0x7c>
 8002458:	9007883a 	mov	r3,r18
 800245c:	0011883a 	mov	r8,zero
 8002460:	0005883a 	mov	r2,zero
 8002464:	003f4c06 	br	8002198 <__adddf3+0xdc>
 8002468:	498cb03a 	or	r6,r9,r6
 800246c:	300cc03a 	cmpne	r6,r6,zero
 8002470:	0007883a 	mov	r3,zero
 8002474:	003f6806 	br	8002218 <__adddf3+0x15c>
 8002478:	20009c1e 	bne	r4,zero,80026ec <__adddf3+0x630>
 800247c:	80800044 	addi	r2,r16,1
 8002480:	1141ffcc 	andi	r5,r2,2047
 8002484:	01000044 	movi	r4,1
 8002488:	2140670e 	bge	r4,r5,8002628 <__adddf3+0x56c>
 800248c:	0101ffc4 	movi	r4,2047
 8002490:	11007f26 	beq	r2,r4,8002690 <__adddf3+0x5d4>
 8002494:	898d883a 	add	r6,r17,r6
 8002498:	4247883a 	add	r3,r8,r9
 800249c:	3451803a 	cmpltu	r8,r6,r17
 80024a0:	40d1883a 	add	r8,r8,r3
 80024a4:	402297fa 	slli	r17,r8,31
 80024a8:	300cd07a 	srli	r6,r6,1
 80024ac:	4010d07a 	srli	r8,r8,1
 80024b0:	1021883a 	mov	r16,r2
 80024b4:	89a2b03a 	or	r17,r17,r6
 80024b8:	003f1f06 	br	8002138 <__adddf3+0x7c>
 80024bc:	0081ffc4 	movi	r2,2047
 80024c0:	80bf481e 	bne	r16,r2,80021e4 <__adddf3+0x128>
 80024c4:	003f1c06 	br	8002138 <__adddf3+0x7c>
 80024c8:	843ff844 	addi	r16,r16,-31
 80024cc:	01000804 	movi	r4,32
 80024d0:	1406d83a 	srl	r3,r2,r16
 80024d4:	41005026 	beq	r8,r4,8002618 <__adddf3+0x55c>
 80024d8:	01001004 	movi	r4,64
 80024dc:	2211c83a 	sub	r8,r4,r8
 80024e0:	1204983a 	sll	r2,r2,r8
 80024e4:	88a2b03a 	or	r17,r17,r2
 80024e8:	8822c03a 	cmpne	r17,r17,zero
 80024ec:	1c62b03a 	or	r17,r3,r17
 80024f0:	0011883a 	mov	r8,zero
 80024f4:	0021883a 	mov	r16,zero
 80024f8:	003f7106 	br	80022c0 <__adddf3+0x204>
 80024fc:	193ff804 	addi	r4,r3,-32
 8002500:	00800804 	movi	r2,32
 8002504:	4908d83a 	srl	r4,r9,r4
 8002508:	18804526 	beq	r3,r2,8002620 <__adddf3+0x564>
 800250c:	00801004 	movi	r2,64
 8002510:	10c5c83a 	sub	r2,r2,r3
 8002514:	4886983a 	sll	r3,r9,r2
 8002518:	198cb03a 	or	r6,r3,r6
 800251c:	300cc03a 	cmpne	r6,r6,zero
 8002520:	218cb03a 	or	r6,r4,r6
 8002524:	0007883a 	mov	r3,zero
 8002528:	003f3b06 	br	8002218 <__adddf3+0x15c>
 800252c:	80002a26 	beq	r16,zero,80025d8 <__adddf3+0x51c>
 8002530:	0101ffc4 	movi	r4,2047
 8002534:	11006826 	beq	r2,r4,80026d8 <__adddf3+0x61c>
 8002538:	00c7c83a 	sub	r3,zero,r3
 800253c:	42002034 	orhi	r8,r8,128
 8002540:	01000e04 	movi	r4,56
 8002544:	20c07c16 	blt	r4,r3,8002738 <__adddf3+0x67c>
 8002548:	010007c4 	movi	r4,31
 800254c:	20c0da16 	blt	r4,r3,80028b8 <__adddf3+0x7fc>
 8002550:	01000804 	movi	r4,32
 8002554:	20c9c83a 	sub	r4,r4,r3
 8002558:	4114983a 	sll	r10,r8,r4
 800255c:	88cad83a 	srl	r5,r17,r3
 8002560:	8908983a 	sll	r4,r17,r4
 8002564:	40c6d83a 	srl	r3,r8,r3
 8002568:	5162b03a 	or	r17,r10,r5
 800256c:	2008c03a 	cmpne	r4,r4,zero
 8002570:	8922b03a 	or	r17,r17,r4
 8002574:	3463c83a 	sub	r17,r6,r17
 8002578:	48c7c83a 	sub	r3,r9,r3
 800257c:	344d803a 	cmpltu	r6,r6,r17
 8002580:	1991c83a 	sub	r8,r3,r6
 8002584:	1021883a 	mov	r16,r2
 8002588:	3825883a 	mov	r18,r7
 800258c:	003f2706 	br	800222c <__adddf3+0x170>
 8002590:	24d0b03a 	or	r8,r4,r19
 8002594:	40001b1e 	bne	r8,zero,8002604 <__adddf3+0x548>
 8002598:	0005883a 	mov	r2,zero
 800259c:	0007883a 	mov	r3,zero
 80025a0:	0021883a 	mov	r16,zero
 80025a4:	003f4d06 	br	80022dc <__adddf3+0x220>
 80025a8:	008007c4 	movi	r2,31
 80025ac:	11003c16 	blt	r2,r4,80026a0 <__adddf3+0x5e4>
 80025b0:	00800804 	movi	r2,32
 80025b4:	1105c83a 	sub	r2,r2,r4
 80025b8:	488e983a 	sll	r7,r9,r2
 80025bc:	310ad83a 	srl	r5,r6,r4
 80025c0:	3084983a 	sll	r2,r6,r2
 80025c4:	4912d83a 	srl	r9,r9,r4
 80025c8:	394ab03a 	or	r5,r7,r5
 80025cc:	1004c03a 	cmpne	r2,r2,zero
 80025d0:	288ab03a 	or	r5,r5,r2
 80025d4:	003f5306 	br	8002324 <__adddf3+0x268>
 80025d8:	4448b03a 	or	r4,r8,r17
 80025dc:	20003e26 	beq	r4,zero,80026d8 <__adddf3+0x61c>
 80025e0:	00c6303a 	nor	r3,zero,r3
 80025e4:	18003a1e 	bne	r3,zero,80026d0 <__adddf3+0x614>
 80025e8:	3463c83a 	sub	r17,r6,r17
 80025ec:	4a07c83a 	sub	r3,r9,r8
 80025f0:	344d803a 	cmpltu	r6,r6,r17
 80025f4:	1991c83a 	sub	r8,r3,r6
 80025f8:	1021883a 	mov	r16,r2
 80025fc:	3825883a 	mov	r18,r7
 8002600:	003f0a06 	br	800222c <__adddf3+0x170>
 8002604:	2023883a 	mov	r17,r4
 8002608:	003f0d06 	br	8002240 <__adddf3+0x184>
 800260c:	0081ffc4 	movi	r2,2047
 8002610:	80bf3f1e 	bne	r16,r2,8002310 <__adddf3+0x254>
 8002614:	003ec806 	br	8002138 <__adddf3+0x7c>
 8002618:	0005883a 	mov	r2,zero
 800261c:	003fb106 	br	80024e4 <__adddf3+0x428>
 8002620:	0007883a 	mov	r3,zero
 8002624:	003fbc06 	br	8002518 <__adddf3+0x45c>
 8002628:	4444b03a 	or	r2,r8,r17
 800262c:	8000871e 	bne	r16,zero,800284c <__adddf3+0x790>
 8002630:	1000ba26 	beq	r2,zero,800291c <__adddf3+0x860>
 8002634:	4984b03a 	or	r2,r9,r6
 8002638:	103ebf26 	beq	r2,zero,8002138 <__adddf3+0x7c>
 800263c:	8985883a 	add	r2,r17,r6
 8002640:	4247883a 	add	r3,r8,r9
 8002644:	1451803a 	cmpltu	r8,r2,r17
 8002648:	40d1883a 	add	r8,r8,r3
 800264c:	40c0202c 	andhi	r3,r8,128
 8002650:	1023883a 	mov	r17,r2
 8002654:	183f1a26 	beq	r3,zero,80022c0 <__adddf3+0x204>
 8002658:	00bfe034 	movhi	r2,65408
 800265c:	10bfffc4 	addi	r2,r2,-1
 8002660:	2021883a 	mov	r16,r4
 8002664:	4090703a 	and	r8,r8,r2
 8002668:	003eb306 	br	8002138 <__adddf3+0x7c>
 800266c:	4444b03a 	or	r2,r8,r17
 8002670:	8000291e 	bne	r16,zero,8002718 <__adddf3+0x65c>
 8002674:	10004b1e 	bne	r2,zero,80027a4 <__adddf3+0x6e8>
 8002678:	4990b03a 	or	r8,r9,r6
 800267c:	40008b26 	beq	r8,zero,80028ac <__adddf3+0x7f0>
 8002680:	4811883a 	mov	r8,r9
 8002684:	3023883a 	mov	r17,r6
 8002688:	3825883a 	mov	r18,r7
 800268c:	003eaa06 	br	8002138 <__adddf3+0x7c>
 8002690:	1021883a 	mov	r16,r2
 8002694:	0011883a 	mov	r8,zero
 8002698:	0005883a 	mov	r2,zero
 800269c:	003f0f06 	br	80022dc <__adddf3+0x220>
 80026a0:	217ff804 	addi	r5,r4,-32
 80026a4:	00800804 	movi	r2,32
 80026a8:	494ad83a 	srl	r5,r9,r5
 80026ac:	20807d26 	beq	r4,r2,80028a4 <__adddf3+0x7e8>
 80026b0:	00801004 	movi	r2,64
 80026b4:	1109c83a 	sub	r4,r2,r4
 80026b8:	4912983a 	sll	r9,r9,r4
 80026bc:	498cb03a 	or	r6,r9,r6
 80026c0:	300cc03a 	cmpne	r6,r6,zero
 80026c4:	298ab03a 	or	r5,r5,r6
 80026c8:	0013883a 	mov	r9,zero
 80026cc:	003f1506 	br	8002324 <__adddf3+0x268>
 80026d0:	0101ffc4 	movi	r4,2047
 80026d4:	113f9a1e 	bne	r2,r4,8002540 <__adddf3+0x484>
 80026d8:	4811883a 	mov	r8,r9
 80026dc:	3023883a 	mov	r17,r6
 80026e0:	1021883a 	mov	r16,r2
 80026e4:	3825883a 	mov	r18,r7
 80026e8:	003e9306 	br	8002138 <__adddf3+0x7c>
 80026ec:	8000161e 	bne	r16,zero,8002748 <__adddf3+0x68c>
 80026f0:	444ab03a 	or	r5,r8,r17
 80026f4:	28005126 	beq	r5,zero,800283c <__adddf3+0x780>
 80026f8:	0108303a 	nor	r4,zero,r4
 80026fc:	20004d1e 	bne	r4,zero,8002834 <__adddf3+0x778>
 8002700:	89a3883a 	add	r17,r17,r6
 8002704:	4253883a 	add	r9,r8,r9
 8002708:	898d803a 	cmpltu	r6,r17,r6
 800270c:	3251883a 	add	r8,r6,r9
 8002710:	1021883a 	mov	r16,r2
 8002714:	003f0806 	br	8002338 <__adddf3+0x27c>
 8002718:	1000301e 	bne	r2,zero,80027dc <__adddf3+0x720>
 800271c:	4984b03a 	or	r2,r9,r6
 8002720:	10007126 	beq	r2,zero,80028e8 <__adddf3+0x82c>
 8002724:	4811883a 	mov	r8,r9
 8002728:	3023883a 	mov	r17,r6
 800272c:	3825883a 	mov	r18,r7
 8002730:	0401ffc4 	movi	r16,2047
 8002734:	003e8006 	br	8002138 <__adddf3+0x7c>
 8002738:	4462b03a 	or	r17,r8,r17
 800273c:	8822c03a 	cmpne	r17,r17,zero
 8002740:	0007883a 	mov	r3,zero
 8002744:	003f8b06 	br	8002574 <__adddf3+0x4b8>
 8002748:	0141ffc4 	movi	r5,2047
 800274c:	11403b26 	beq	r2,r5,800283c <__adddf3+0x780>
 8002750:	0109c83a 	sub	r4,zero,r4
 8002754:	42002034 	orhi	r8,r8,128
 8002758:	01400e04 	movi	r5,56
 800275c:	29006716 	blt	r5,r4,80028fc <__adddf3+0x840>
 8002760:	014007c4 	movi	r5,31
 8002764:	29007016 	blt	r5,r4,8002928 <__adddf3+0x86c>
 8002768:	01400804 	movi	r5,32
 800276c:	290bc83a 	sub	r5,r5,r4
 8002770:	4154983a 	sll	r10,r8,r5
 8002774:	890ed83a 	srl	r7,r17,r4
 8002778:	894a983a 	sll	r5,r17,r5
 800277c:	4108d83a 	srl	r4,r8,r4
 8002780:	51e2b03a 	or	r17,r10,r7
 8002784:	280ac03a 	cmpne	r5,r5,zero
 8002788:	8962b03a 	or	r17,r17,r5
 800278c:	89a3883a 	add	r17,r17,r6
 8002790:	2253883a 	add	r9,r4,r9
 8002794:	898d803a 	cmpltu	r6,r17,r6
 8002798:	3251883a 	add	r8,r6,r9
 800279c:	1021883a 	mov	r16,r2
 80027a0:	003ee506 	br	8002338 <__adddf3+0x27c>
 80027a4:	4984b03a 	or	r2,r9,r6
 80027a8:	103e6326 	beq	r2,zero,8002138 <__adddf3+0x7c>
 80027ac:	8987c83a 	sub	r3,r17,r6
 80027b0:	88c9803a 	cmpltu	r4,r17,r3
 80027b4:	4245c83a 	sub	r2,r8,r9
 80027b8:	1105c83a 	sub	r2,r2,r4
 80027bc:	1100202c 	andhi	r4,r2,128
 80027c0:	203ebb26 	beq	r4,zero,80022b0 <__adddf3+0x1f4>
 80027c4:	3463c83a 	sub	r17,r6,r17
 80027c8:	4a07c83a 	sub	r3,r9,r8
 80027cc:	344d803a 	cmpltu	r6,r6,r17
 80027d0:	1991c83a 	sub	r8,r3,r6
 80027d4:	3825883a 	mov	r18,r7
 80027d8:	003e5706 	br	8002138 <__adddf3+0x7c>
 80027dc:	4984b03a 	or	r2,r9,r6
 80027e0:	10002e26 	beq	r2,zero,800289c <__adddf3+0x7e0>
 80027e4:	4004d0fa 	srli	r2,r8,3
 80027e8:	8822d0fa 	srli	r17,r17,3
 80027ec:	4010977a 	slli	r8,r8,29
 80027f0:	10c0022c 	andhi	r3,r2,8
 80027f4:	4462b03a 	or	r17,r8,r17
 80027f8:	18000826 	beq	r3,zero,800281c <__adddf3+0x760>
 80027fc:	4808d0fa 	srli	r4,r9,3
 8002800:	20c0022c 	andhi	r3,r4,8
 8002804:	1800051e 	bne	r3,zero,800281c <__adddf3+0x760>
 8002808:	300cd0fa 	srli	r6,r6,3
 800280c:	4806977a 	slli	r3,r9,29
 8002810:	2005883a 	mov	r2,r4
 8002814:	3825883a 	mov	r18,r7
 8002818:	19a2b03a 	or	r17,r3,r6
 800281c:	8810d77a 	srli	r8,r17,29
 8002820:	100490fa 	slli	r2,r2,3
 8002824:	882290fa 	slli	r17,r17,3
 8002828:	0401ffc4 	movi	r16,2047
 800282c:	4090b03a 	or	r8,r8,r2
 8002830:	003e4106 	br	8002138 <__adddf3+0x7c>
 8002834:	0141ffc4 	movi	r5,2047
 8002838:	117fc71e 	bne	r2,r5,8002758 <__adddf3+0x69c>
 800283c:	4811883a 	mov	r8,r9
 8002840:	3023883a 	mov	r17,r6
 8002844:	1021883a 	mov	r16,r2
 8002848:	003e3b06 	br	8002138 <__adddf3+0x7c>
 800284c:	10002f26 	beq	r2,zero,800290c <__adddf3+0x850>
 8002850:	4984b03a 	or	r2,r9,r6
 8002854:	10001126 	beq	r2,zero,800289c <__adddf3+0x7e0>
 8002858:	4004d0fa 	srli	r2,r8,3
 800285c:	8822d0fa 	srli	r17,r17,3
 8002860:	4010977a 	slli	r8,r8,29
 8002864:	10c0022c 	andhi	r3,r2,8
 8002868:	4462b03a 	or	r17,r8,r17
 800286c:	183feb26 	beq	r3,zero,800281c <__adddf3+0x760>
 8002870:	4808d0fa 	srli	r4,r9,3
 8002874:	20c0022c 	andhi	r3,r4,8
 8002878:	183fe81e 	bne	r3,zero,800281c <__adddf3+0x760>
 800287c:	300cd0fa 	srli	r6,r6,3
 8002880:	4806977a 	slli	r3,r9,29
 8002884:	2005883a 	mov	r2,r4
 8002888:	19a2b03a 	or	r17,r3,r6
 800288c:	003fe306 	br	800281c <__adddf3+0x760>
 8002890:	0011883a 	mov	r8,zero
 8002894:	0005883a 	mov	r2,zero
 8002898:	003e3f06 	br	8002198 <__adddf3+0xdc>
 800289c:	0401ffc4 	movi	r16,2047
 80028a0:	003e2506 	br	8002138 <__adddf3+0x7c>
 80028a4:	0013883a 	mov	r9,zero
 80028a8:	003f8406 	br	80026bc <__adddf3+0x600>
 80028ac:	0005883a 	mov	r2,zero
 80028b0:	0007883a 	mov	r3,zero
 80028b4:	003e8906 	br	80022dc <__adddf3+0x220>
 80028b8:	197ff804 	addi	r5,r3,-32
 80028bc:	01000804 	movi	r4,32
 80028c0:	414ad83a 	srl	r5,r8,r5
 80028c4:	19002426 	beq	r3,r4,8002958 <__adddf3+0x89c>
 80028c8:	01001004 	movi	r4,64
 80028cc:	20c7c83a 	sub	r3,r4,r3
 80028d0:	40c6983a 	sll	r3,r8,r3
 80028d4:	1c46b03a 	or	r3,r3,r17
 80028d8:	1806c03a 	cmpne	r3,r3,zero
 80028dc:	28e2b03a 	or	r17,r5,r3
 80028e0:	0007883a 	mov	r3,zero
 80028e4:	003f2306 	br	8002574 <__adddf3+0x4b8>
 80028e8:	0007883a 	mov	r3,zero
 80028ec:	5811883a 	mov	r8,r11
 80028f0:	00bfffc4 	movi	r2,-1
 80028f4:	0401ffc4 	movi	r16,2047
 80028f8:	003e7806 	br	80022dc <__adddf3+0x220>
 80028fc:	4462b03a 	or	r17,r8,r17
 8002900:	8822c03a 	cmpne	r17,r17,zero
 8002904:	0009883a 	mov	r4,zero
 8002908:	003fa006 	br	800278c <__adddf3+0x6d0>
 800290c:	4811883a 	mov	r8,r9
 8002910:	3023883a 	mov	r17,r6
 8002914:	0401ffc4 	movi	r16,2047
 8002918:	003e0706 	br	8002138 <__adddf3+0x7c>
 800291c:	4811883a 	mov	r8,r9
 8002920:	3023883a 	mov	r17,r6
 8002924:	003e0406 	br	8002138 <__adddf3+0x7c>
 8002928:	21fff804 	addi	r7,r4,-32
 800292c:	01400804 	movi	r5,32
 8002930:	41ced83a 	srl	r7,r8,r7
 8002934:	21400a26 	beq	r4,r5,8002960 <__adddf3+0x8a4>
 8002938:	01401004 	movi	r5,64
 800293c:	2909c83a 	sub	r4,r5,r4
 8002940:	4108983a 	sll	r4,r8,r4
 8002944:	2448b03a 	or	r4,r4,r17
 8002948:	2008c03a 	cmpne	r4,r4,zero
 800294c:	3922b03a 	or	r17,r7,r4
 8002950:	0009883a 	mov	r4,zero
 8002954:	003f8d06 	br	800278c <__adddf3+0x6d0>
 8002958:	0007883a 	mov	r3,zero
 800295c:	003fdd06 	br	80028d4 <__adddf3+0x818>
 8002960:	0009883a 	mov	r4,zero
 8002964:	003ff706 	br	8002944 <__adddf3+0x888>

08002968 <__muldf3>:
 8002968:	defff304 	addi	sp,sp,-52
 800296c:	2804d53a 	srli	r2,r5,20
 8002970:	dd800915 	stw	r22,36(sp)
 8002974:	282cd7fa 	srli	r22,r5,31
 8002978:	dc000315 	stw	r16,12(sp)
 800297c:	04000434 	movhi	r16,16
 8002980:	dd400815 	stw	r21,32(sp)
 8002984:	dc800515 	stw	r18,20(sp)
 8002988:	843fffc4 	addi	r16,r16,-1
 800298c:	dfc00c15 	stw	ra,48(sp)
 8002990:	df000b15 	stw	fp,44(sp)
 8002994:	ddc00a15 	stw	r23,40(sp)
 8002998:	dd000715 	stw	r20,28(sp)
 800299c:	dcc00615 	stw	r19,24(sp)
 80029a0:	dc400415 	stw	r17,16(sp)
 80029a4:	1481ffcc 	andi	r18,r2,2047
 80029a8:	2c20703a 	and	r16,r5,r16
 80029ac:	b02b883a 	mov	r21,r22
 80029b0:	b2403fcc 	andi	r9,r22,255
 80029b4:	90006026 	beq	r18,zero,8002b38 <__muldf3+0x1d0>
 80029b8:	0081ffc4 	movi	r2,2047
 80029bc:	2029883a 	mov	r20,r4
 80029c0:	90803626 	beq	r18,r2,8002a9c <__muldf3+0x134>
 80029c4:	80800434 	orhi	r2,r16,16
 80029c8:	100490fa 	slli	r2,r2,3
 80029cc:	2020d77a 	srli	r16,r4,29
 80029d0:	202890fa 	slli	r20,r4,3
 80029d4:	94bf0044 	addi	r18,r18,-1023
 80029d8:	80a0b03a 	or	r16,r16,r2
 80029dc:	0027883a 	mov	r19,zero
 80029e0:	0039883a 	mov	fp,zero
 80029e4:	3804d53a 	srli	r2,r7,20
 80029e8:	382ed7fa 	srli	r23,r7,31
 80029ec:	04400434 	movhi	r17,16
 80029f0:	8c7fffc4 	addi	r17,r17,-1
 80029f4:	1081ffcc 	andi	r2,r2,2047
 80029f8:	3011883a 	mov	r8,r6
 80029fc:	3c62703a 	and	r17,r7,r17
 8002a00:	ba803fcc 	andi	r10,r23,255
 8002a04:	10006d26 	beq	r2,zero,8002bbc <__muldf3+0x254>
 8002a08:	00c1ffc4 	movi	r3,2047
 8002a0c:	10c06526 	beq	r2,r3,8002ba4 <__muldf3+0x23c>
 8002a10:	88c00434 	orhi	r3,r17,16
 8002a14:	180690fa 	slli	r3,r3,3
 8002a18:	3022d77a 	srli	r17,r6,29
 8002a1c:	301090fa 	slli	r8,r6,3
 8002a20:	10bf0044 	addi	r2,r2,-1023
 8002a24:	88e2b03a 	or	r17,r17,r3
 8002a28:	000b883a 	mov	r5,zero
 8002a2c:	9085883a 	add	r2,r18,r2
 8002a30:	2cc8b03a 	or	r4,r5,r19
 8002a34:	00c003c4 	movi	r3,15
 8002a38:	bdacf03a 	xor	r22,r23,r22
 8002a3c:	12c00044 	addi	r11,r2,1
 8002a40:	19009936 	bltu	r3,r4,8002ca8 <__muldf3+0x340>
 8002a44:	200890ba 	slli	r4,r4,2
 8002a48:	00c20034 	movhi	r3,2048
 8002a4c:	18ca9704 	addi	r3,r3,10844
 8002a50:	20c9883a 	add	r4,r4,r3
 8002a54:	20c00017 	ldw	r3,0(r4)
 8002a58:	1800683a 	jmp	r3
 8002a5c:	08002ca8 	cmpgeui	zero,at,178
 8002a60:	08002abc 	xorhi	zero,at,170
 8002a64:	08002abc 	xorhi	zero,at,170
 8002a68:	08002ab8 	rdprs	zero,at,170
 8002a6c:	08002c84 	addi	zero,at,178
 8002a70:	08002c84 	addi	zero,at,178
 8002a74:	08002c6c 	andhi	zero,at,177
 8002a78:	08002ab8 	rdprs	zero,at,170
 8002a7c:	08002c84 	addi	zero,at,178
 8002a80:	08002c6c 	andhi	zero,at,177
 8002a84:	08002c84 	addi	zero,at,178
 8002a88:	08002ab8 	rdprs	zero,at,170
 8002a8c:	08002c94 	ori	zero,at,178
 8002a90:	08002c94 	ori	zero,at,178
 8002a94:	08002c94 	ori	zero,at,178
 8002a98:	08002eb0 	cmpltui	zero,at,186
 8002a9c:	2404b03a 	or	r2,r4,r16
 8002aa0:	10006f1e 	bne	r2,zero,8002c60 <__muldf3+0x2f8>
 8002aa4:	04c00204 	movi	r19,8
 8002aa8:	0021883a 	mov	r16,zero
 8002aac:	0029883a 	mov	r20,zero
 8002ab0:	07000084 	movi	fp,2
 8002ab4:	003fcb06 	br	80029e4 <__muldf3+0x7c>
 8002ab8:	502d883a 	mov	r22,r10
 8002abc:	00800084 	movi	r2,2
 8002ac0:	28805726 	beq	r5,r2,8002c20 <__muldf3+0x2b8>
 8002ac4:	008000c4 	movi	r2,3
 8002ac8:	28816626 	beq	r5,r2,8003064 <__muldf3+0x6fc>
 8002acc:	00800044 	movi	r2,1
 8002ad0:	2881411e 	bne	r5,r2,8002fd8 <__muldf3+0x670>
 8002ad4:	b02b883a 	mov	r21,r22
 8002ad8:	0005883a 	mov	r2,zero
 8002adc:	000b883a 	mov	r5,zero
 8002ae0:	0029883a 	mov	r20,zero
 8002ae4:	1004953a 	slli	r2,r2,20
 8002ae8:	a8c03fcc 	andi	r3,r21,255
 8002aec:	04400434 	movhi	r17,16
 8002af0:	8c7fffc4 	addi	r17,r17,-1
 8002af4:	180697fa 	slli	r3,r3,31
 8002af8:	2c4a703a 	and	r5,r5,r17
 8002afc:	288ab03a 	or	r5,r5,r2
 8002b00:	28c6b03a 	or	r3,r5,r3
 8002b04:	a005883a 	mov	r2,r20
 8002b08:	dfc00c17 	ldw	ra,48(sp)
 8002b0c:	df000b17 	ldw	fp,44(sp)
 8002b10:	ddc00a17 	ldw	r23,40(sp)
 8002b14:	dd800917 	ldw	r22,36(sp)
 8002b18:	dd400817 	ldw	r21,32(sp)
 8002b1c:	dd000717 	ldw	r20,28(sp)
 8002b20:	dcc00617 	ldw	r19,24(sp)
 8002b24:	dc800517 	ldw	r18,20(sp)
 8002b28:	dc400417 	ldw	r17,16(sp)
 8002b2c:	dc000317 	ldw	r16,12(sp)
 8002b30:	dec00d04 	addi	sp,sp,52
 8002b34:	f800283a 	ret
 8002b38:	2404b03a 	or	r2,r4,r16
 8002b3c:	2027883a 	mov	r19,r4
 8002b40:	10004226 	beq	r2,zero,8002c4c <__muldf3+0x2e4>
 8002b44:	8000fc26 	beq	r16,zero,8002f38 <__muldf3+0x5d0>
 8002b48:	8009883a 	mov	r4,r16
 8002b4c:	d9800215 	stw	r6,8(sp)
 8002b50:	d9c00015 	stw	r7,0(sp)
 8002b54:	da400115 	stw	r9,4(sp)
 8002b58:	8003cdc0 	call	8003cdc <__clzsi2>
 8002b5c:	d9800217 	ldw	r6,8(sp)
 8002b60:	d9c00017 	ldw	r7,0(sp)
 8002b64:	da400117 	ldw	r9,4(sp)
 8002b68:	113ffd44 	addi	r4,r2,-11
 8002b6c:	00c00704 	movi	r3,28
 8002b70:	1900ed16 	blt	r3,r4,8002f28 <__muldf3+0x5c0>
 8002b74:	00c00744 	movi	r3,29
 8002b78:	147ffe04 	addi	r17,r2,-8
 8002b7c:	1907c83a 	sub	r3,r3,r4
 8002b80:	8460983a 	sll	r16,r16,r17
 8002b84:	98c6d83a 	srl	r3,r19,r3
 8002b88:	9c68983a 	sll	r20,r19,r17
 8002b8c:	1c20b03a 	or	r16,r3,r16
 8002b90:	1080fcc4 	addi	r2,r2,1011
 8002b94:	00a5c83a 	sub	r18,zero,r2
 8002b98:	0027883a 	mov	r19,zero
 8002b9c:	0039883a 	mov	fp,zero
 8002ba0:	003f9006 	br	80029e4 <__muldf3+0x7c>
 8002ba4:	3446b03a 	or	r3,r6,r17
 8002ba8:	1800261e 	bne	r3,zero,8002c44 <__muldf3+0x2dc>
 8002bac:	0023883a 	mov	r17,zero
 8002bb0:	0011883a 	mov	r8,zero
 8002bb4:	01400084 	movi	r5,2
 8002bb8:	003f9c06 	br	8002a2c <__muldf3+0xc4>
 8002bbc:	3446b03a 	or	r3,r6,r17
 8002bc0:	18001c26 	beq	r3,zero,8002c34 <__muldf3+0x2cc>
 8002bc4:	8800ce26 	beq	r17,zero,8002f00 <__muldf3+0x598>
 8002bc8:	8809883a 	mov	r4,r17
 8002bcc:	d9800215 	stw	r6,8(sp)
 8002bd0:	da400115 	stw	r9,4(sp)
 8002bd4:	da800015 	stw	r10,0(sp)
 8002bd8:	8003cdc0 	call	8003cdc <__clzsi2>
 8002bdc:	d9800217 	ldw	r6,8(sp)
 8002be0:	da400117 	ldw	r9,4(sp)
 8002be4:	da800017 	ldw	r10,0(sp)
 8002be8:	113ffd44 	addi	r4,r2,-11
 8002bec:	00c00704 	movi	r3,28
 8002bf0:	1900bf16 	blt	r3,r4,8002ef0 <__muldf3+0x588>
 8002bf4:	00c00744 	movi	r3,29
 8002bf8:	123ffe04 	addi	r8,r2,-8
 8002bfc:	1907c83a 	sub	r3,r3,r4
 8002c00:	8a22983a 	sll	r17,r17,r8
 8002c04:	30c6d83a 	srl	r3,r6,r3
 8002c08:	3210983a 	sll	r8,r6,r8
 8002c0c:	1c62b03a 	or	r17,r3,r17
 8002c10:	1080fcc4 	addi	r2,r2,1011
 8002c14:	0085c83a 	sub	r2,zero,r2
 8002c18:	000b883a 	mov	r5,zero
 8002c1c:	003f8306 	br	8002a2c <__muldf3+0xc4>
 8002c20:	b02b883a 	mov	r21,r22
 8002c24:	0081ffc4 	movi	r2,2047
 8002c28:	000b883a 	mov	r5,zero
 8002c2c:	0029883a 	mov	r20,zero
 8002c30:	003fac06 	br	8002ae4 <__muldf3+0x17c>
 8002c34:	0023883a 	mov	r17,zero
 8002c38:	0011883a 	mov	r8,zero
 8002c3c:	01400044 	movi	r5,1
 8002c40:	003f7a06 	br	8002a2c <__muldf3+0xc4>
 8002c44:	014000c4 	movi	r5,3
 8002c48:	003f7806 	br	8002a2c <__muldf3+0xc4>
 8002c4c:	04c00104 	movi	r19,4
 8002c50:	0021883a 	mov	r16,zero
 8002c54:	0029883a 	mov	r20,zero
 8002c58:	07000044 	movi	fp,1
 8002c5c:	003f6106 	br	80029e4 <__muldf3+0x7c>
 8002c60:	04c00304 	movi	r19,12
 8002c64:	070000c4 	movi	fp,3
 8002c68:	003f5e06 	br	80029e4 <__muldf3+0x7c>
 8002c6c:	01400434 	movhi	r5,16
 8002c70:	002b883a 	mov	r21,zero
 8002c74:	297fffc4 	addi	r5,r5,-1
 8002c78:	053fffc4 	movi	r20,-1
 8002c7c:	0081ffc4 	movi	r2,2047
 8002c80:	003f9806 	br	8002ae4 <__muldf3+0x17c>
 8002c84:	8023883a 	mov	r17,r16
 8002c88:	a011883a 	mov	r8,r20
 8002c8c:	e00b883a 	mov	r5,fp
 8002c90:	003f8a06 	br	8002abc <__muldf3+0x154>
 8002c94:	8023883a 	mov	r17,r16
 8002c98:	a011883a 	mov	r8,r20
 8002c9c:	482d883a 	mov	r22,r9
 8002ca0:	e00b883a 	mov	r5,fp
 8002ca4:	003f8506 	br	8002abc <__muldf3+0x154>
 8002ca8:	a00ad43a 	srli	r5,r20,16
 8002cac:	401ad43a 	srli	r13,r8,16
 8002cb0:	a53fffcc 	andi	r20,r20,65535
 8002cb4:	423fffcc 	andi	r8,r8,65535
 8002cb8:	4519383a 	mul	r12,r8,r20
 8002cbc:	4147383a 	mul	r3,r8,r5
 8002cc0:	6d09383a 	mul	r4,r13,r20
 8002cc4:	600cd43a 	srli	r6,r12,16
 8002cc8:	2b5d383a 	mul	r14,r5,r13
 8002ccc:	20c9883a 	add	r4,r4,r3
 8002cd0:	310d883a 	add	r6,r6,r4
 8002cd4:	30c0022e 	bgeu	r6,r3,8002ce0 <__muldf3+0x378>
 8002cd8:	00c00074 	movhi	r3,1
 8002cdc:	70dd883a 	add	r14,r14,r3
 8002ce0:	8826d43a 	srli	r19,r17,16
 8002ce4:	8bffffcc 	andi	r15,r17,65535
 8002ce8:	7d23383a 	mul	r17,r15,r20
 8002cec:	7949383a 	mul	r4,r15,r5
 8002cf0:	9d29383a 	mul	r20,r19,r20
 8002cf4:	8814d43a 	srli	r10,r17,16
 8002cf8:	3012943a 	slli	r9,r6,16
 8002cfc:	a129883a 	add	r20,r20,r4
 8002d00:	633fffcc 	andi	r12,r12,65535
 8002d04:	5515883a 	add	r10,r10,r20
 8002d08:	3006d43a 	srli	r3,r6,16
 8002d0c:	4b13883a 	add	r9,r9,r12
 8002d10:	2ccb383a 	mul	r5,r5,r19
 8002d14:	5100022e 	bgeu	r10,r4,8002d20 <__muldf3+0x3b8>
 8002d18:	01000074 	movhi	r4,1
 8002d1c:	290b883a 	add	r5,r5,r4
 8002d20:	802ad43a 	srli	r21,r16,16
 8002d24:	843fffcc 	andi	r16,r16,65535
 8002d28:	440d383a 	mul	r6,r8,r16
 8002d2c:	4565383a 	mul	r18,r8,r21
 8002d30:	8349383a 	mul	r4,r16,r13
 8002d34:	500e943a 	slli	r7,r10,16
 8002d38:	3010d43a 	srli	r8,r6,16
 8002d3c:	5028d43a 	srli	r20,r10,16
 8002d40:	2489883a 	add	r4,r4,r18
 8002d44:	8abfffcc 	andi	r10,r17,65535
 8002d48:	3a95883a 	add	r10,r7,r10
 8002d4c:	4119883a 	add	r12,r8,r4
 8002d50:	a169883a 	add	r20,r20,r5
 8002d54:	1a87883a 	add	r3,r3,r10
 8002d58:	6d5b383a 	mul	r13,r13,r21
 8002d5c:	6480022e 	bgeu	r12,r18,8002d68 <__muldf3+0x400>
 8002d60:	01000074 	movhi	r4,1
 8002d64:	691b883a 	add	r13,r13,r4
 8002d68:	7c25383a 	mul	r18,r15,r16
 8002d6c:	7d4b383a 	mul	r5,r15,r21
 8002d70:	84cf383a 	mul	r7,r16,r19
 8002d74:	901ed43a 	srli	r15,r18,16
 8002d78:	6008d43a 	srli	r4,r12,16
 8002d7c:	6010943a 	slli	r8,r12,16
 8002d80:	394f883a 	add	r7,r7,r5
 8002d84:	333fffcc 	andi	r12,r6,65535
 8002d88:	79df883a 	add	r15,r15,r7
 8002d8c:	235b883a 	add	r13,r4,r13
 8002d90:	9d63383a 	mul	r17,r19,r21
 8002d94:	4309883a 	add	r4,r8,r12
 8002d98:	7940022e 	bgeu	r15,r5,8002da4 <__muldf3+0x43c>
 8002d9c:	01400074 	movhi	r5,1
 8002da0:	8963883a 	add	r17,r17,r5
 8002da4:	780a943a 	slli	r5,r15,16
 8002da8:	91bfffcc 	andi	r6,r18,65535
 8002dac:	70c7883a 	add	r3,r14,r3
 8002db0:	298d883a 	add	r6,r5,r6
 8002db4:	1a8f803a 	cmpltu	r7,r3,r10
 8002db8:	350b883a 	add	r5,r6,r20
 8002dbc:	20c7883a 	add	r3,r4,r3
 8002dc0:	3955883a 	add	r10,r7,r5
 8002dc4:	1909803a 	cmpltu	r4,r3,r4
 8002dc8:	6a91883a 	add	r8,r13,r10
 8002dcc:	780cd43a 	srli	r6,r15,16
 8002dd0:	2219883a 	add	r12,r4,r8
 8002dd4:	2d0b803a 	cmpltu	r5,r5,r20
 8002dd8:	51cf803a 	cmpltu	r7,r10,r7
 8002ddc:	29ceb03a 	or	r7,r5,r7
 8002de0:	4351803a 	cmpltu	r8,r8,r13
 8002de4:	610b803a 	cmpltu	r5,r12,r4
 8002de8:	4148b03a 	or	r4,r8,r5
 8002dec:	398f883a 	add	r7,r7,r6
 8002df0:	3909883a 	add	r4,r7,r4
 8002df4:	1810927a 	slli	r8,r3,9
 8002df8:	2449883a 	add	r4,r4,r17
 8002dfc:	2008927a 	slli	r4,r4,9
 8002e00:	6022d5fa 	srli	r17,r12,23
 8002e04:	1806d5fa 	srli	r3,r3,23
 8002e08:	4252b03a 	or	r9,r8,r9
 8002e0c:	600a927a 	slli	r5,r12,9
 8002e10:	4810c03a 	cmpne	r8,r9,zero
 8002e14:	2462b03a 	or	r17,r4,r17
 8002e18:	40c6b03a 	or	r3,r8,r3
 8002e1c:	8900402c 	andhi	r4,r17,256
 8002e20:	1950b03a 	or	r8,r3,r5
 8002e24:	20000726 	beq	r4,zero,8002e44 <__muldf3+0x4dc>
 8002e28:	4006d07a 	srli	r3,r8,1
 8002e2c:	880497fa 	slli	r2,r17,31
 8002e30:	4200004c 	andi	r8,r8,1
 8002e34:	8822d07a 	srli	r17,r17,1
 8002e38:	1a10b03a 	or	r8,r3,r8
 8002e3c:	1210b03a 	or	r8,r2,r8
 8002e40:	5805883a 	mov	r2,r11
 8002e44:	1140ffc4 	addi	r5,r2,1023
 8002e48:	0140440e 	bge	zero,r5,8002f5c <__muldf3+0x5f4>
 8002e4c:	40c001cc 	andi	r3,r8,7
 8002e50:	18000726 	beq	r3,zero,8002e70 <__muldf3+0x508>
 8002e54:	40c003cc 	andi	r3,r8,15
 8002e58:	01000104 	movi	r4,4
 8002e5c:	19000426 	beq	r3,r4,8002e70 <__muldf3+0x508>
 8002e60:	4107883a 	add	r3,r8,r4
 8002e64:	1a11803a 	cmpltu	r8,r3,r8
 8002e68:	8a23883a 	add	r17,r17,r8
 8002e6c:	1811883a 	mov	r8,r3
 8002e70:	88c0402c 	andhi	r3,r17,256
 8002e74:	18000426 	beq	r3,zero,8002e88 <__muldf3+0x520>
 8002e78:	11410004 	addi	r5,r2,1024
 8002e7c:	00bfc034 	movhi	r2,65280
 8002e80:	10bfffc4 	addi	r2,r2,-1
 8002e84:	88a2703a 	and	r17,r17,r2
 8002e88:	0081ff84 	movi	r2,2046
 8002e8c:	117f6416 	blt	r2,r5,8002c20 <__muldf3+0x2b8>
 8002e90:	8828977a 	slli	r20,r17,29
 8002e94:	4010d0fa 	srli	r8,r8,3
 8002e98:	8822927a 	slli	r17,r17,9
 8002e9c:	2881ffcc 	andi	r2,r5,2047
 8002ea0:	a228b03a 	or	r20,r20,r8
 8002ea4:	880ad33a 	srli	r5,r17,12
 8002ea8:	b02b883a 	mov	r21,r22
 8002eac:	003f0d06 	br	8002ae4 <__muldf3+0x17c>
 8002eb0:	8080022c 	andhi	r2,r16,8
 8002eb4:	10000926 	beq	r2,zero,8002edc <__muldf3+0x574>
 8002eb8:	8880022c 	andhi	r2,r17,8
 8002ebc:	1000071e 	bne	r2,zero,8002edc <__muldf3+0x574>
 8002ec0:	00800434 	movhi	r2,16
 8002ec4:	89400234 	orhi	r5,r17,8
 8002ec8:	10bfffc4 	addi	r2,r2,-1
 8002ecc:	b82b883a 	mov	r21,r23
 8002ed0:	288a703a 	and	r5,r5,r2
 8002ed4:	4029883a 	mov	r20,r8
 8002ed8:	003f6806 	br	8002c7c <__muldf3+0x314>
 8002edc:	00800434 	movhi	r2,16
 8002ee0:	81400234 	orhi	r5,r16,8
 8002ee4:	10bfffc4 	addi	r2,r2,-1
 8002ee8:	288a703a 	and	r5,r5,r2
 8002eec:	003f6306 	br	8002c7c <__muldf3+0x314>
 8002ef0:	147ff604 	addi	r17,r2,-40
 8002ef4:	3462983a 	sll	r17,r6,r17
 8002ef8:	0011883a 	mov	r8,zero
 8002efc:	003f4406 	br	8002c10 <__muldf3+0x2a8>
 8002f00:	3009883a 	mov	r4,r6
 8002f04:	d9800215 	stw	r6,8(sp)
 8002f08:	da400115 	stw	r9,4(sp)
 8002f0c:	da800015 	stw	r10,0(sp)
 8002f10:	8003cdc0 	call	8003cdc <__clzsi2>
 8002f14:	10800804 	addi	r2,r2,32
 8002f18:	da800017 	ldw	r10,0(sp)
 8002f1c:	da400117 	ldw	r9,4(sp)
 8002f20:	d9800217 	ldw	r6,8(sp)
 8002f24:	003f3006 	br	8002be8 <__muldf3+0x280>
 8002f28:	143ff604 	addi	r16,r2,-40
 8002f2c:	9c20983a 	sll	r16,r19,r16
 8002f30:	0029883a 	mov	r20,zero
 8002f34:	003f1606 	br	8002b90 <__muldf3+0x228>
 8002f38:	d9800215 	stw	r6,8(sp)
 8002f3c:	d9c00015 	stw	r7,0(sp)
 8002f40:	da400115 	stw	r9,4(sp)
 8002f44:	8003cdc0 	call	8003cdc <__clzsi2>
 8002f48:	10800804 	addi	r2,r2,32
 8002f4c:	da400117 	ldw	r9,4(sp)
 8002f50:	d9c00017 	ldw	r7,0(sp)
 8002f54:	d9800217 	ldw	r6,8(sp)
 8002f58:	003f0306 	br	8002b68 <__muldf3+0x200>
 8002f5c:	00c00044 	movi	r3,1
 8002f60:	1947c83a 	sub	r3,r3,r5
 8002f64:	00800e04 	movi	r2,56
 8002f68:	10feda16 	blt	r2,r3,8002ad4 <__muldf3+0x16c>
 8002f6c:	008007c4 	movi	r2,31
 8002f70:	10c01b16 	blt	r2,r3,8002fe0 <__muldf3+0x678>
 8002f74:	00800804 	movi	r2,32
 8002f78:	10c5c83a 	sub	r2,r2,r3
 8002f7c:	888a983a 	sll	r5,r17,r2
 8002f80:	40c8d83a 	srl	r4,r8,r3
 8002f84:	4084983a 	sll	r2,r8,r2
 8002f88:	88e2d83a 	srl	r17,r17,r3
 8002f8c:	2906b03a 	or	r3,r5,r4
 8002f90:	1004c03a 	cmpne	r2,r2,zero
 8002f94:	1886b03a 	or	r3,r3,r2
 8002f98:	188001cc 	andi	r2,r3,7
 8002f9c:	10000726 	beq	r2,zero,8002fbc <__muldf3+0x654>
 8002fa0:	188003cc 	andi	r2,r3,15
 8002fa4:	01000104 	movi	r4,4
 8002fa8:	11000426 	beq	r2,r4,8002fbc <__muldf3+0x654>
 8002fac:	1805883a 	mov	r2,r3
 8002fb0:	10c00104 	addi	r3,r2,4
 8002fb4:	1885803a 	cmpltu	r2,r3,r2
 8002fb8:	88a3883a 	add	r17,r17,r2
 8002fbc:	8880202c 	andhi	r2,r17,128
 8002fc0:	10001c26 	beq	r2,zero,8003034 <__muldf3+0x6cc>
 8002fc4:	b02b883a 	mov	r21,r22
 8002fc8:	00800044 	movi	r2,1
 8002fcc:	000b883a 	mov	r5,zero
 8002fd0:	0029883a 	mov	r20,zero
 8002fd4:	003ec306 	br	8002ae4 <__muldf3+0x17c>
 8002fd8:	5805883a 	mov	r2,r11
 8002fdc:	003f9906 	br	8002e44 <__muldf3+0x4dc>
 8002fe0:	00bff844 	movi	r2,-31
 8002fe4:	1145c83a 	sub	r2,r2,r5
 8002fe8:	8888d83a 	srl	r4,r17,r2
 8002fec:	00800804 	movi	r2,32
 8002ff0:	18801a26 	beq	r3,r2,800305c <__muldf3+0x6f4>
 8002ff4:	00801004 	movi	r2,64
 8002ff8:	10c5c83a 	sub	r2,r2,r3
 8002ffc:	8884983a 	sll	r2,r17,r2
 8003000:	1204b03a 	or	r2,r2,r8
 8003004:	1004c03a 	cmpne	r2,r2,zero
 8003008:	2084b03a 	or	r2,r4,r2
 800300c:	144001cc 	andi	r17,r2,7
 8003010:	88000d1e 	bne	r17,zero,8003048 <__muldf3+0x6e0>
 8003014:	000b883a 	mov	r5,zero
 8003018:	1028d0fa 	srli	r20,r2,3
 800301c:	b02b883a 	mov	r21,r22
 8003020:	0005883a 	mov	r2,zero
 8003024:	a468b03a 	or	r20,r20,r17
 8003028:	003eae06 	br	8002ae4 <__muldf3+0x17c>
 800302c:	1007883a 	mov	r3,r2
 8003030:	0023883a 	mov	r17,zero
 8003034:	880a927a 	slli	r5,r17,9
 8003038:	1805883a 	mov	r2,r3
 800303c:	8822977a 	slli	r17,r17,29
 8003040:	280ad33a 	srli	r5,r5,12
 8003044:	003ff406 	br	8003018 <__muldf3+0x6b0>
 8003048:	10c003cc 	andi	r3,r2,15
 800304c:	01000104 	movi	r4,4
 8003050:	193ff626 	beq	r3,r4,800302c <__muldf3+0x6c4>
 8003054:	0023883a 	mov	r17,zero
 8003058:	003fd506 	br	8002fb0 <__muldf3+0x648>
 800305c:	0005883a 	mov	r2,zero
 8003060:	003fe706 	br	8003000 <__muldf3+0x698>
 8003064:	00800434 	movhi	r2,16
 8003068:	89400234 	orhi	r5,r17,8
 800306c:	10bfffc4 	addi	r2,r2,-1
 8003070:	b02b883a 	mov	r21,r22
 8003074:	288a703a 	and	r5,r5,r2
 8003078:	4029883a 	mov	r20,r8
 800307c:	003eff06 	br	8002c7c <__muldf3+0x314>

08003080 <__subdf3>:
 8003080:	02000434 	movhi	r8,16
 8003084:	423fffc4 	addi	r8,r8,-1
 8003088:	defffb04 	addi	sp,sp,-20
 800308c:	2a14703a 	and	r10,r5,r8
 8003090:	3812d53a 	srli	r9,r7,20
 8003094:	3a10703a 	and	r8,r7,r8
 8003098:	2006d77a 	srli	r3,r4,29
 800309c:	3004d77a 	srli	r2,r6,29
 80030a0:	dc000015 	stw	r16,0(sp)
 80030a4:	501490fa 	slli	r10,r10,3
 80030a8:	2820d53a 	srli	r16,r5,20
 80030ac:	401090fa 	slli	r8,r8,3
 80030b0:	dc800215 	stw	r18,8(sp)
 80030b4:	dc400115 	stw	r17,4(sp)
 80030b8:	dfc00415 	stw	ra,16(sp)
 80030bc:	202290fa 	slli	r17,r4,3
 80030c0:	dcc00315 	stw	r19,12(sp)
 80030c4:	4a41ffcc 	andi	r9,r9,2047
 80030c8:	0101ffc4 	movi	r4,2047
 80030cc:	2824d7fa 	srli	r18,r5,31
 80030d0:	8401ffcc 	andi	r16,r16,2047
 80030d4:	50c6b03a 	or	r3,r10,r3
 80030d8:	380ed7fa 	srli	r7,r7,31
 80030dc:	408ab03a 	or	r5,r8,r2
 80030e0:	300c90fa 	slli	r6,r6,3
 80030e4:	49009626 	beq	r9,r4,8003340 <__subdf3+0x2c0>
 80030e8:	39c0005c 	xori	r7,r7,1
 80030ec:	8245c83a 	sub	r2,r16,r9
 80030f0:	3c807426 	beq	r7,r18,80032c4 <__subdf3+0x244>
 80030f4:	0080af0e 	bge	zero,r2,80033b4 <__subdf3+0x334>
 80030f8:	48002a1e 	bne	r9,zero,80031a4 <__subdf3+0x124>
 80030fc:	2988b03a 	or	r4,r5,r6
 8003100:	20009a1e 	bne	r4,zero,800336c <__subdf3+0x2ec>
 8003104:	888001cc 	andi	r2,r17,7
 8003108:	10000726 	beq	r2,zero,8003128 <__subdf3+0xa8>
 800310c:	888003cc 	andi	r2,r17,15
 8003110:	01000104 	movi	r4,4
 8003114:	11000426 	beq	r2,r4,8003128 <__subdf3+0xa8>
 8003118:	890b883a 	add	r5,r17,r4
 800311c:	2c63803a 	cmpltu	r17,r5,r17
 8003120:	1c47883a 	add	r3,r3,r17
 8003124:	2823883a 	mov	r17,r5
 8003128:	1880202c 	andhi	r2,r3,128
 800312c:	10005926 	beq	r2,zero,8003294 <__subdf3+0x214>
 8003130:	84000044 	addi	r16,r16,1
 8003134:	0081ffc4 	movi	r2,2047
 8003138:	8080be26 	beq	r16,r2,8003434 <__subdf3+0x3b4>
 800313c:	017fe034 	movhi	r5,65408
 8003140:	297fffc4 	addi	r5,r5,-1
 8003144:	1946703a 	and	r3,r3,r5
 8003148:	1804977a 	slli	r2,r3,29
 800314c:	1806927a 	slli	r3,r3,9
 8003150:	8822d0fa 	srli	r17,r17,3
 8003154:	8401ffcc 	andi	r16,r16,2047
 8003158:	180ad33a 	srli	r5,r3,12
 800315c:	9100004c 	andi	r4,r18,1
 8003160:	1444b03a 	or	r2,r2,r17
 8003164:	80c1ffcc 	andi	r3,r16,2047
 8003168:	1820953a 	slli	r16,r3,20
 800316c:	20c03fcc 	andi	r3,r4,255
 8003170:	180897fa 	slli	r4,r3,31
 8003174:	00c00434 	movhi	r3,16
 8003178:	18ffffc4 	addi	r3,r3,-1
 800317c:	28c6703a 	and	r3,r5,r3
 8003180:	1c06b03a 	or	r3,r3,r16
 8003184:	1906b03a 	or	r3,r3,r4
 8003188:	dfc00417 	ldw	ra,16(sp)
 800318c:	dcc00317 	ldw	r19,12(sp)
 8003190:	dc800217 	ldw	r18,8(sp)
 8003194:	dc400117 	ldw	r17,4(sp)
 8003198:	dc000017 	ldw	r16,0(sp)
 800319c:	dec00504 	addi	sp,sp,20
 80031a0:	f800283a 	ret
 80031a4:	0101ffc4 	movi	r4,2047
 80031a8:	813fd626 	beq	r16,r4,8003104 <__subdf3+0x84>
 80031ac:	29402034 	orhi	r5,r5,128
 80031b0:	01000e04 	movi	r4,56
 80031b4:	2080a316 	blt	r4,r2,8003444 <__subdf3+0x3c4>
 80031b8:	010007c4 	movi	r4,31
 80031bc:	2080c616 	blt	r4,r2,80034d8 <__subdf3+0x458>
 80031c0:	01000804 	movi	r4,32
 80031c4:	2089c83a 	sub	r4,r4,r2
 80031c8:	2910983a 	sll	r8,r5,r4
 80031cc:	308ed83a 	srl	r7,r6,r2
 80031d0:	3108983a 	sll	r4,r6,r4
 80031d4:	2884d83a 	srl	r2,r5,r2
 80031d8:	41ccb03a 	or	r6,r8,r7
 80031dc:	2008c03a 	cmpne	r4,r4,zero
 80031e0:	310cb03a 	or	r6,r6,r4
 80031e4:	898dc83a 	sub	r6,r17,r6
 80031e8:	89a3803a 	cmpltu	r17,r17,r6
 80031ec:	1887c83a 	sub	r3,r3,r2
 80031f0:	1c47c83a 	sub	r3,r3,r17
 80031f4:	3023883a 	mov	r17,r6
 80031f8:	1880202c 	andhi	r2,r3,128
 80031fc:	10002326 	beq	r2,zero,800328c <__subdf3+0x20c>
 8003200:	04c02034 	movhi	r19,128
 8003204:	9cffffc4 	addi	r19,r19,-1
 8003208:	1ce6703a 	and	r19,r3,r19
 800320c:	98007a26 	beq	r19,zero,80033f8 <__subdf3+0x378>
 8003210:	9809883a 	mov	r4,r19
 8003214:	8003cdc0 	call	8003cdc <__clzsi2>
 8003218:	113ffe04 	addi	r4,r2,-8
 800321c:	00c007c4 	movi	r3,31
 8003220:	19007b16 	blt	r3,r4,8003410 <__subdf3+0x390>
 8003224:	00800804 	movi	r2,32
 8003228:	1105c83a 	sub	r2,r2,r4
 800322c:	8884d83a 	srl	r2,r17,r2
 8003230:	9906983a 	sll	r3,r19,r4
 8003234:	8922983a 	sll	r17,r17,r4
 8003238:	10c4b03a 	or	r2,r2,r3
 800323c:	24007816 	blt	r4,r16,8003420 <__subdf3+0x3a0>
 8003240:	2421c83a 	sub	r16,r4,r16
 8003244:	80c00044 	addi	r3,r16,1
 8003248:	010007c4 	movi	r4,31
 800324c:	20c09516 	blt	r4,r3,80034a4 <__subdf3+0x424>
 8003250:	01400804 	movi	r5,32
 8003254:	28cbc83a 	sub	r5,r5,r3
 8003258:	88c8d83a 	srl	r4,r17,r3
 800325c:	8962983a 	sll	r17,r17,r5
 8003260:	114a983a 	sll	r5,r2,r5
 8003264:	10c6d83a 	srl	r3,r2,r3
 8003268:	8804c03a 	cmpne	r2,r17,zero
 800326c:	290ab03a 	or	r5,r5,r4
 8003270:	28a2b03a 	or	r17,r5,r2
 8003274:	0021883a 	mov	r16,zero
 8003278:	003fa206 	br	8003104 <__subdf3+0x84>
 800327c:	2090b03a 	or	r8,r4,r2
 8003280:	40018e26 	beq	r8,zero,80038bc <__subdf3+0x83c>
 8003284:	1007883a 	mov	r3,r2
 8003288:	2023883a 	mov	r17,r4
 800328c:	888001cc 	andi	r2,r17,7
 8003290:	103f9e1e 	bne	r2,zero,800310c <__subdf3+0x8c>
 8003294:	1804977a 	slli	r2,r3,29
 8003298:	8822d0fa 	srli	r17,r17,3
 800329c:	1810d0fa 	srli	r8,r3,3
 80032a0:	9100004c 	andi	r4,r18,1
 80032a4:	1444b03a 	or	r2,r2,r17
 80032a8:	00c1ffc4 	movi	r3,2047
 80032ac:	80c02826 	beq	r16,r3,8003350 <__subdf3+0x2d0>
 80032b0:	01400434 	movhi	r5,16
 80032b4:	297fffc4 	addi	r5,r5,-1
 80032b8:	80e0703a 	and	r16,r16,r3
 80032bc:	414a703a 	and	r5,r8,r5
 80032c0:	003fa806 	br	8003164 <__subdf3+0xe4>
 80032c4:	0080630e 	bge	zero,r2,8003454 <__subdf3+0x3d4>
 80032c8:	48003026 	beq	r9,zero,800338c <__subdf3+0x30c>
 80032cc:	0101ffc4 	movi	r4,2047
 80032d0:	813f8c26 	beq	r16,r4,8003104 <__subdf3+0x84>
 80032d4:	29402034 	orhi	r5,r5,128
 80032d8:	01000e04 	movi	r4,56
 80032dc:	2080a90e 	bge	r4,r2,8003584 <__subdf3+0x504>
 80032e0:	298cb03a 	or	r6,r5,r6
 80032e4:	3012c03a 	cmpne	r9,r6,zero
 80032e8:	0005883a 	mov	r2,zero
 80032ec:	4c53883a 	add	r9,r9,r17
 80032f0:	4c63803a 	cmpltu	r17,r9,r17
 80032f4:	10c7883a 	add	r3,r2,r3
 80032f8:	88c7883a 	add	r3,r17,r3
 80032fc:	4823883a 	mov	r17,r9
 8003300:	1880202c 	andhi	r2,r3,128
 8003304:	1000d026 	beq	r2,zero,8003648 <__subdf3+0x5c8>
 8003308:	84000044 	addi	r16,r16,1
 800330c:	0081ffc4 	movi	r2,2047
 8003310:	8080fe26 	beq	r16,r2,800370c <__subdf3+0x68c>
 8003314:	00bfe034 	movhi	r2,65408
 8003318:	10bfffc4 	addi	r2,r2,-1
 800331c:	1886703a 	and	r3,r3,r2
 8003320:	880ad07a 	srli	r5,r17,1
 8003324:	180497fa 	slli	r2,r3,31
 8003328:	8900004c 	andi	r4,r17,1
 800332c:	2922b03a 	or	r17,r5,r4
 8003330:	1806d07a 	srli	r3,r3,1
 8003334:	1462b03a 	or	r17,r2,r17
 8003338:	3825883a 	mov	r18,r7
 800333c:	003f7106 	br	8003104 <__subdf3+0x84>
 8003340:	2984b03a 	or	r2,r5,r6
 8003344:	103f6826 	beq	r2,zero,80030e8 <__subdf3+0x68>
 8003348:	39c03fcc 	andi	r7,r7,255
 800334c:	003f6706 	br	80030ec <__subdf3+0x6c>
 8003350:	4086b03a 	or	r3,r8,r2
 8003354:	18015226 	beq	r3,zero,80038a0 <__subdf3+0x820>
 8003358:	00c00434 	movhi	r3,16
 800335c:	41400234 	orhi	r5,r8,8
 8003360:	18ffffc4 	addi	r3,r3,-1
 8003364:	28ca703a 	and	r5,r5,r3
 8003368:	003f7e06 	br	8003164 <__subdf3+0xe4>
 800336c:	10bfffc4 	addi	r2,r2,-1
 8003370:	1000491e 	bne	r2,zero,8003498 <__subdf3+0x418>
 8003374:	898fc83a 	sub	r7,r17,r6
 8003378:	89e3803a 	cmpltu	r17,r17,r7
 800337c:	1947c83a 	sub	r3,r3,r5
 8003380:	1c47c83a 	sub	r3,r3,r17
 8003384:	3823883a 	mov	r17,r7
 8003388:	003f9b06 	br	80031f8 <__subdf3+0x178>
 800338c:	2988b03a 	or	r4,r5,r6
 8003390:	203f5c26 	beq	r4,zero,8003104 <__subdf3+0x84>
 8003394:	10bfffc4 	addi	r2,r2,-1
 8003398:	1000931e 	bne	r2,zero,80035e8 <__subdf3+0x568>
 800339c:	898d883a 	add	r6,r17,r6
 80033a0:	3463803a 	cmpltu	r17,r6,r17
 80033a4:	1947883a 	add	r3,r3,r5
 80033a8:	88c7883a 	add	r3,r17,r3
 80033ac:	3023883a 	mov	r17,r6
 80033b0:	003fd306 	br	8003300 <__subdf3+0x280>
 80033b4:	1000541e 	bne	r2,zero,8003508 <__subdf3+0x488>
 80033b8:	80800044 	addi	r2,r16,1
 80033bc:	1081ffcc 	andi	r2,r2,2047
 80033c0:	01000044 	movi	r4,1
 80033c4:	2080a20e 	bge	r4,r2,8003650 <__subdf3+0x5d0>
 80033c8:	8989c83a 	sub	r4,r17,r6
 80033cc:	8905803a 	cmpltu	r2,r17,r4
 80033d0:	1967c83a 	sub	r19,r3,r5
 80033d4:	98a7c83a 	sub	r19,r19,r2
 80033d8:	9880202c 	andhi	r2,r19,128
 80033dc:	10006326 	beq	r2,zero,800356c <__subdf3+0x4ec>
 80033e0:	3463c83a 	sub	r17,r6,r17
 80033e4:	28c7c83a 	sub	r3,r5,r3
 80033e8:	344d803a 	cmpltu	r6,r6,r17
 80033ec:	19a7c83a 	sub	r19,r3,r6
 80033f0:	3825883a 	mov	r18,r7
 80033f4:	983f861e 	bne	r19,zero,8003210 <__subdf3+0x190>
 80033f8:	8809883a 	mov	r4,r17
 80033fc:	8003cdc0 	call	8003cdc <__clzsi2>
 8003400:	10800804 	addi	r2,r2,32
 8003404:	113ffe04 	addi	r4,r2,-8
 8003408:	00c007c4 	movi	r3,31
 800340c:	193f850e 	bge	r3,r4,8003224 <__subdf3+0x1a4>
 8003410:	10bff604 	addi	r2,r2,-40
 8003414:	8884983a 	sll	r2,r17,r2
 8003418:	0023883a 	mov	r17,zero
 800341c:	243f880e 	bge	r4,r16,8003240 <__subdf3+0x1c0>
 8003420:	00ffe034 	movhi	r3,65408
 8003424:	18ffffc4 	addi	r3,r3,-1
 8003428:	8121c83a 	sub	r16,r16,r4
 800342c:	10c6703a 	and	r3,r2,r3
 8003430:	003f3406 	br	8003104 <__subdf3+0x84>
 8003434:	9100004c 	andi	r4,r18,1
 8003438:	000b883a 	mov	r5,zero
 800343c:	0005883a 	mov	r2,zero
 8003440:	003f4806 	br	8003164 <__subdf3+0xe4>
 8003444:	298cb03a 	or	r6,r5,r6
 8003448:	300cc03a 	cmpne	r6,r6,zero
 800344c:	0005883a 	mov	r2,zero
 8003450:	003f6406 	br	80031e4 <__subdf3+0x164>
 8003454:	10009a1e 	bne	r2,zero,80036c0 <__subdf3+0x640>
 8003458:	82400044 	addi	r9,r16,1
 800345c:	4881ffcc 	andi	r2,r9,2047
 8003460:	02800044 	movi	r10,1
 8003464:	5080670e 	bge	r10,r2,8003604 <__subdf3+0x584>
 8003468:	0081ffc4 	movi	r2,2047
 800346c:	4880af26 	beq	r9,r2,800372c <__subdf3+0x6ac>
 8003470:	898d883a 	add	r6,r17,r6
 8003474:	1945883a 	add	r2,r3,r5
 8003478:	3447803a 	cmpltu	r3,r6,r17
 800347c:	1887883a 	add	r3,r3,r2
 8003480:	182297fa 	slli	r17,r3,31
 8003484:	300cd07a 	srli	r6,r6,1
 8003488:	1806d07a 	srli	r3,r3,1
 800348c:	4821883a 	mov	r16,r9
 8003490:	89a2b03a 	or	r17,r17,r6
 8003494:	003f1b06 	br	8003104 <__subdf3+0x84>
 8003498:	0101ffc4 	movi	r4,2047
 800349c:	813f441e 	bne	r16,r4,80031b0 <__subdf3+0x130>
 80034a0:	003f1806 	br	8003104 <__subdf3+0x84>
 80034a4:	843ff844 	addi	r16,r16,-31
 80034a8:	01400804 	movi	r5,32
 80034ac:	1408d83a 	srl	r4,r2,r16
 80034b0:	19405026 	beq	r3,r5,80035f4 <__subdf3+0x574>
 80034b4:	01401004 	movi	r5,64
 80034b8:	28c7c83a 	sub	r3,r5,r3
 80034bc:	10c4983a 	sll	r2,r2,r3
 80034c0:	88a2b03a 	or	r17,r17,r2
 80034c4:	8822c03a 	cmpne	r17,r17,zero
 80034c8:	2462b03a 	or	r17,r4,r17
 80034cc:	0007883a 	mov	r3,zero
 80034d0:	0021883a 	mov	r16,zero
 80034d4:	003f6d06 	br	800328c <__subdf3+0x20c>
 80034d8:	11fff804 	addi	r7,r2,-32
 80034dc:	01000804 	movi	r4,32
 80034e0:	29ced83a 	srl	r7,r5,r7
 80034e4:	11004526 	beq	r2,r4,80035fc <__subdf3+0x57c>
 80034e8:	01001004 	movi	r4,64
 80034ec:	2089c83a 	sub	r4,r4,r2
 80034f0:	2904983a 	sll	r2,r5,r4
 80034f4:	118cb03a 	or	r6,r2,r6
 80034f8:	300cc03a 	cmpne	r6,r6,zero
 80034fc:	398cb03a 	or	r6,r7,r6
 8003500:	0005883a 	mov	r2,zero
 8003504:	003f3706 	br	80031e4 <__subdf3+0x164>
 8003508:	80002a26 	beq	r16,zero,80035b4 <__subdf3+0x534>
 800350c:	0101ffc4 	movi	r4,2047
 8003510:	49006626 	beq	r9,r4,80036ac <__subdf3+0x62c>
 8003514:	0085c83a 	sub	r2,zero,r2
 8003518:	18c02034 	orhi	r3,r3,128
 800351c:	01000e04 	movi	r4,56
 8003520:	20807e16 	blt	r4,r2,800371c <__subdf3+0x69c>
 8003524:	010007c4 	movi	r4,31
 8003528:	2080e716 	blt	r4,r2,80038c8 <__subdf3+0x848>
 800352c:	01000804 	movi	r4,32
 8003530:	2089c83a 	sub	r4,r4,r2
 8003534:	1914983a 	sll	r10,r3,r4
 8003538:	8890d83a 	srl	r8,r17,r2
 800353c:	8908983a 	sll	r4,r17,r4
 8003540:	1884d83a 	srl	r2,r3,r2
 8003544:	5222b03a 	or	r17,r10,r8
 8003548:	2006c03a 	cmpne	r3,r4,zero
 800354c:	88e2b03a 	or	r17,r17,r3
 8003550:	3463c83a 	sub	r17,r6,r17
 8003554:	2885c83a 	sub	r2,r5,r2
 8003558:	344d803a 	cmpltu	r6,r6,r17
 800355c:	1187c83a 	sub	r3,r2,r6
 8003560:	4821883a 	mov	r16,r9
 8003564:	3825883a 	mov	r18,r7
 8003568:	003f2306 	br	80031f8 <__subdf3+0x178>
 800356c:	24d0b03a 	or	r8,r4,r19
 8003570:	40001b1e 	bne	r8,zero,80035e0 <__subdf3+0x560>
 8003574:	0005883a 	mov	r2,zero
 8003578:	0009883a 	mov	r4,zero
 800357c:	0021883a 	mov	r16,zero
 8003580:	003f4906 	br	80032a8 <__subdf3+0x228>
 8003584:	010007c4 	movi	r4,31
 8003588:	20803a16 	blt	r4,r2,8003674 <__subdf3+0x5f4>
 800358c:	01000804 	movi	r4,32
 8003590:	2089c83a 	sub	r4,r4,r2
 8003594:	2912983a 	sll	r9,r5,r4
 8003598:	3090d83a 	srl	r8,r6,r2
 800359c:	3108983a 	sll	r4,r6,r4
 80035a0:	2884d83a 	srl	r2,r5,r2
 80035a4:	4a12b03a 	or	r9,r9,r8
 80035a8:	2008c03a 	cmpne	r4,r4,zero
 80035ac:	4912b03a 	or	r9,r9,r4
 80035b0:	003f4e06 	br	80032ec <__subdf3+0x26c>
 80035b4:	1c48b03a 	or	r4,r3,r17
 80035b8:	20003c26 	beq	r4,zero,80036ac <__subdf3+0x62c>
 80035bc:	0084303a 	nor	r2,zero,r2
 80035c0:	1000381e 	bne	r2,zero,80036a4 <__subdf3+0x624>
 80035c4:	3463c83a 	sub	r17,r6,r17
 80035c8:	28c5c83a 	sub	r2,r5,r3
 80035cc:	344d803a 	cmpltu	r6,r6,r17
 80035d0:	1187c83a 	sub	r3,r2,r6
 80035d4:	4821883a 	mov	r16,r9
 80035d8:	3825883a 	mov	r18,r7
 80035dc:	003f0606 	br	80031f8 <__subdf3+0x178>
 80035e0:	2023883a 	mov	r17,r4
 80035e4:	003f0906 	br	800320c <__subdf3+0x18c>
 80035e8:	0101ffc4 	movi	r4,2047
 80035ec:	813f3a1e 	bne	r16,r4,80032d8 <__subdf3+0x258>
 80035f0:	003ec406 	br	8003104 <__subdf3+0x84>
 80035f4:	0005883a 	mov	r2,zero
 80035f8:	003fb106 	br	80034c0 <__subdf3+0x440>
 80035fc:	0005883a 	mov	r2,zero
 8003600:	003fbc06 	br	80034f4 <__subdf3+0x474>
 8003604:	1c44b03a 	or	r2,r3,r17
 8003608:	80008e1e 	bne	r16,zero,8003844 <__subdf3+0x7c4>
 800360c:	1000c826 	beq	r2,zero,8003930 <__subdf3+0x8b0>
 8003610:	2984b03a 	or	r2,r5,r6
 8003614:	103ebb26 	beq	r2,zero,8003104 <__subdf3+0x84>
 8003618:	8989883a 	add	r4,r17,r6
 800361c:	1945883a 	add	r2,r3,r5
 8003620:	2447803a 	cmpltu	r3,r4,r17
 8003624:	1887883a 	add	r3,r3,r2
 8003628:	1880202c 	andhi	r2,r3,128
 800362c:	2023883a 	mov	r17,r4
 8003630:	103f1626 	beq	r2,zero,800328c <__subdf3+0x20c>
 8003634:	00bfe034 	movhi	r2,65408
 8003638:	10bfffc4 	addi	r2,r2,-1
 800363c:	5021883a 	mov	r16,r10
 8003640:	1886703a 	and	r3,r3,r2
 8003644:	003eaf06 	br	8003104 <__subdf3+0x84>
 8003648:	3825883a 	mov	r18,r7
 800364c:	003f0f06 	br	800328c <__subdf3+0x20c>
 8003650:	1c44b03a 	or	r2,r3,r17
 8003654:	8000251e 	bne	r16,zero,80036ec <__subdf3+0x66c>
 8003658:	1000661e 	bne	r2,zero,80037f4 <__subdf3+0x774>
 800365c:	2990b03a 	or	r8,r5,r6
 8003660:	40009626 	beq	r8,zero,80038bc <__subdf3+0x83c>
 8003664:	2807883a 	mov	r3,r5
 8003668:	3023883a 	mov	r17,r6
 800366c:	3825883a 	mov	r18,r7
 8003670:	003ea406 	br	8003104 <__subdf3+0x84>
 8003674:	127ff804 	addi	r9,r2,-32
 8003678:	01000804 	movi	r4,32
 800367c:	2a52d83a 	srl	r9,r5,r9
 8003680:	11008c26 	beq	r2,r4,80038b4 <__subdf3+0x834>
 8003684:	01001004 	movi	r4,64
 8003688:	2085c83a 	sub	r2,r4,r2
 800368c:	2884983a 	sll	r2,r5,r2
 8003690:	118cb03a 	or	r6,r2,r6
 8003694:	300cc03a 	cmpne	r6,r6,zero
 8003698:	4992b03a 	or	r9,r9,r6
 800369c:	0005883a 	mov	r2,zero
 80036a0:	003f1206 	br	80032ec <__subdf3+0x26c>
 80036a4:	0101ffc4 	movi	r4,2047
 80036a8:	493f9c1e 	bne	r9,r4,800351c <__subdf3+0x49c>
 80036ac:	2807883a 	mov	r3,r5
 80036b0:	3023883a 	mov	r17,r6
 80036b4:	4821883a 	mov	r16,r9
 80036b8:	3825883a 	mov	r18,r7
 80036bc:	003e9106 	br	8003104 <__subdf3+0x84>
 80036c0:	80001f1e 	bne	r16,zero,8003740 <__subdf3+0x6c0>
 80036c4:	1c48b03a 	or	r4,r3,r17
 80036c8:	20005a26 	beq	r4,zero,8003834 <__subdf3+0x7b4>
 80036cc:	0084303a 	nor	r2,zero,r2
 80036d0:	1000561e 	bne	r2,zero,800382c <__subdf3+0x7ac>
 80036d4:	89a3883a 	add	r17,r17,r6
 80036d8:	1945883a 	add	r2,r3,r5
 80036dc:	898d803a 	cmpltu	r6,r17,r6
 80036e0:	3087883a 	add	r3,r6,r2
 80036e4:	4821883a 	mov	r16,r9
 80036e8:	003f0506 	br	8003300 <__subdf3+0x280>
 80036ec:	10002b1e 	bne	r2,zero,800379c <__subdf3+0x71c>
 80036f0:	2984b03a 	or	r2,r5,r6
 80036f4:	10008026 	beq	r2,zero,80038f8 <__subdf3+0x878>
 80036f8:	2807883a 	mov	r3,r5
 80036fc:	3023883a 	mov	r17,r6
 8003700:	3825883a 	mov	r18,r7
 8003704:	0401ffc4 	movi	r16,2047
 8003708:	003e7e06 	br	8003104 <__subdf3+0x84>
 800370c:	3809883a 	mov	r4,r7
 8003710:	0011883a 	mov	r8,zero
 8003714:	0005883a 	mov	r2,zero
 8003718:	003ee306 	br	80032a8 <__subdf3+0x228>
 800371c:	1c62b03a 	or	r17,r3,r17
 8003720:	8822c03a 	cmpne	r17,r17,zero
 8003724:	0005883a 	mov	r2,zero
 8003728:	003f8906 	br	8003550 <__subdf3+0x4d0>
 800372c:	3809883a 	mov	r4,r7
 8003730:	4821883a 	mov	r16,r9
 8003734:	0011883a 	mov	r8,zero
 8003738:	0005883a 	mov	r2,zero
 800373c:	003eda06 	br	80032a8 <__subdf3+0x228>
 8003740:	0101ffc4 	movi	r4,2047
 8003744:	49003b26 	beq	r9,r4,8003834 <__subdf3+0x7b4>
 8003748:	0085c83a 	sub	r2,zero,r2
 800374c:	18c02034 	orhi	r3,r3,128
 8003750:	01000e04 	movi	r4,56
 8003754:	20806e16 	blt	r4,r2,8003910 <__subdf3+0x890>
 8003758:	010007c4 	movi	r4,31
 800375c:	20807716 	blt	r4,r2,800393c <__subdf3+0x8bc>
 8003760:	01000804 	movi	r4,32
 8003764:	2089c83a 	sub	r4,r4,r2
 8003768:	1914983a 	sll	r10,r3,r4
 800376c:	8890d83a 	srl	r8,r17,r2
 8003770:	8908983a 	sll	r4,r17,r4
 8003774:	1884d83a 	srl	r2,r3,r2
 8003778:	5222b03a 	or	r17,r10,r8
 800377c:	2006c03a 	cmpne	r3,r4,zero
 8003780:	88e2b03a 	or	r17,r17,r3
 8003784:	89a3883a 	add	r17,r17,r6
 8003788:	1145883a 	add	r2,r2,r5
 800378c:	898d803a 	cmpltu	r6,r17,r6
 8003790:	3087883a 	add	r3,r6,r2
 8003794:	4821883a 	mov	r16,r9
 8003798:	003ed906 	br	8003300 <__subdf3+0x280>
 800379c:	2984b03a 	or	r2,r5,r6
 80037a0:	10004226 	beq	r2,zero,80038ac <__subdf3+0x82c>
 80037a4:	1808d0fa 	srli	r4,r3,3
 80037a8:	8822d0fa 	srli	r17,r17,3
 80037ac:	1806977a 	slli	r3,r3,29
 80037b0:	2080022c 	andhi	r2,r4,8
 80037b4:	1c62b03a 	or	r17,r3,r17
 80037b8:	10000826 	beq	r2,zero,80037dc <__subdf3+0x75c>
 80037bc:	2812d0fa 	srli	r9,r5,3
 80037c0:	4880022c 	andhi	r2,r9,8
 80037c4:	1000051e 	bne	r2,zero,80037dc <__subdf3+0x75c>
 80037c8:	300cd0fa 	srli	r6,r6,3
 80037cc:	2804977a 	slli	r2,r5,29
 80037d0:	4809883a 	mov	r4,r9
 80037d4:	3825883a 	mov	r18,r7
 80037d8:	11a2b03a 	or	r17,r2,r6
 80037dc:	8806d77a 	srli	r3,r17,29
 80037e0:	200890fa 	slli	r4,r4,3
 80037e4:	882290fa 	slli	r17,r17,3
 80037e8:	0401ffc4 	movi	r16,2047
 80037ec:	1906b03a 	or	r3,r3,r4
 80037f0:	003e4406 	br	8003104 <__subdf3+0x84>
 80037f4:	2984b03a 	or	r2,r5,r6
 80037f8:	103e4226 	beq	r2,zero,8003104 <__subdf3+0x84>
 80037fc:	8989c83a 	sub	r4,r17,r6
 8003800:	8911803a 	cmpltu	r8,r17,r4
 8003804:	1945c83a 	sub	r2,r3,r5
 8003808:	1205c83a 	sub	r2,r2,r8
 800380c:	1200202c 	andhi	r8,r2,128
 8003810:	403e9a26 	beq	r8,zero,800327c <__subdf3+0x1fc>
 8003814:	3463c83a 	sub	r17,r6,r17
 8003818:	28c5c83a 	sub	r2,r5,r3
 800381c:	344d803a 	cmpltu	r6,r6,r17
 8003820:	1187c83a 	sub	r3,r2,r6
 8003824:	3825883a 	mov	r18,r7
 8003828:	003e3606 	br	8003104 <__subdf3+0x84>
 800382c:	0101ffc4 	movi	r4,2047
 8003830:	493fc71e 	bne	r9,r4,8003750 <__subdf3+0x6d0>
 8003834:	2807883a 	mov	r3,r5
 8003838:	3023883a 	mov	r17,r6
 800383c:	4821883a 	mov	r16,r9
 8003840:	003e3006 	br	8003104 <__subdf3+0x84>
 8003844:	10003626 	beq	r2,zero,8003920 <__subdf3+0x8a0>
 8003848:	2984b03a 	or	r2,r5,r6
 800384c:	10001726 	beq	r2,zero,80038ac <__subdf3+0x82c>
 8003850:	1808d0fa 	srli	r4,r3,3
 8003854:	8822d0fa 	srli	r17,r17,3
 8003858:	1806977a 	slli	r3,r3,29
 800385c:	2080022c 	andhi	r2,r4,8
 8003860:	1c62b03a 	or	r17,r3,r17
 8003864:	10000726 	beq	r2,zero,8003884 <__subdf3+0x804>
 8003868:	2812d0fa 	srli	r9,r5,3
 800386c:	4880022c 	andhi	r2,r9,8
 8003870:	1000041e 	bne	r2,zero,8003884 <__subdf3+0x804>
 8003874:	300cd0fa 	srli	r6,r6,3
 8003878:	2804977a 	slli	r2,r5,29
 800387c:	4809883a 	mov	r4,r9
 8003880:	11a2b03a 	or	r17,r2,r6
 8003884:	8806d77a 	srli	r3,r17,29
 8003888:	200890fa 	slli	r4,r4,3
 800388c:	882290fa 	slli	r17,r17,3
 8003890:	3825883a 	mov	r18,r7
 8003894:	1906b03a 	or	r3,r3,r4
 8003898:	0401ffc4 	movi	r16,2047
 800389c:	003e1906 	br	8003104 <__subdf3+0x84>
 80038a0:	000b883a 	mov	r5,zero
 80038a4:	0005883a 	mov	r2,zero
 80038a8:	003e2e06 	br	8003164 <__subdf3+0xe4>
 80038ac:	0401ffc4 	movi	r16,2047
 80038b0:	003e1406 	br	8003104 <__subdf3+0x84>
 80038b4:	0005883a 	mov	r2,zero
 80038b8:	003f7506 	br	8003690 <__subdf3+0x610>
 80038bc:	0005883a 	mov	r2,zero
 80038c0:	0009883a 	mov	r4,zero
 80038c4:	003e7806 	br	80032a8 <__subdf3+0x228>
 80038c8:	123ff804 	addi	r8,r2,-32
 80038cc:	01000804 	movi	r4,32
 80038d0:	1a10d83a 	srl	r8,r3,r8
 80038d4:	11002526 	beq	r2,r4,800396c <__subdf3+0x8ec>
 80038d8:	01001004 	movi	r4,64
 80038dc:	2085c83a 	sub	r2,r4,r2
 80038e0:	1884983a 	sll	r2,r3,r2
 80038e4:	1444b03a 	or	r2,r2,r17
 80038e8:	1004c03a 	cmpne	r2,r2,zero
 80038ec:	40a2b03a 	or	r17,r8,r2
 80038f0:	0005883a 	mov	r2,zero
 80038f4:	003f1606 	br	8003550 <__subdf3+0x4d0>
 80038f8:	02000434 	movhi	r8,16
 80038fc:	0009883a 	mov	r4,zero
 8003900:	423fffc4 	addi	r8,r8,-1
 8003904:	00bfffc4 	movi	r2,-1
 8003908:	0401ffc4 	movi	r16,2047
 800390c:	003e6606 	br	80032a8 <__subdf3+0x228>
 8003910:	1c62b03a 	or	r17,r3,r17
 8003914:	8822c03a 	cmpne	r17,r17,zero
 8003918:	0005883a 	mov	r2,zero
 800391c:	003f9906 	br	8003784 <__subdf3+0x704>
 8003920:	2807883a 	mov	r3,r5
 8003924:	3023883a 	mov	r17,r6
 8003928:	0401ffc4 	movi	r16,2047
 800392c:	003df506 	br	8003104 <__subdf3+0x84>
 8003930:	2807883a 	mov	r3,r5
 8003934:	3023883a 	mov	r17,r6
 8003938:	003df206 	br	8003104 <__subdf3+0x84>
 800393c:	123ff804 	addi	r8,r2,-32
 8003940:	01000804 	movi	r4,32
 8003944:	1a10d83a 	srl	r8,r3,r8
 8003948:	11000a26 	beq	r2,r4,8003974 <__subdf3+0x8f4>
 800394c:	01001004 	movi	r4,64
 8003950:	2085c83a 	sub	r2,r4,r2
 8003954:	1884983a 	sll	r2,r3,r2
 8003958:	1444b03a 	or	r2,r2,r17
 800395c:	1004c03a 	cmpne	r2,r2,zero
 8003960:	40a2b03a 	or	r17,r8,r2
 8003964:	0005883a 	mov	r2,zero
 8003968:	003f8606 	br	8003784 <__subdf3+0x704>
 800396c:	0005883a 	mov	r2,zero
 8003970:	003fdc06 	br	80038e4 <__subdf3+0x864>
 8003974:	0005883a 	mov	r2,zero
 8003978:	003ff706 	br	8003958 <__subdf3+0x8d8>

0800397c <__floatunsidf>:
 800397c:	defffe04 	addi	sp,sp,-8
 8003980:	dc000015 	stw	r16,0(sp)
 8003984:	dfc00115 	stw	ra,4(sp)
 8003988:	2021883a 	mov	r16,r4
 800398c:	20002226 	beq	r4,zero,8003a18 <__floatunsidf+0x9c>
 8003990:	8003cdc0 	call	8003cdc <__clzsi2>
 8003994:	01010784 	movi	r4,1054
 8003998:	2089c83a 	sub	r4,r4,r2
 800399c:	01810cc4 	movi	r6,1075
 80039a0:	310dc83a 	sub	r6,r6,r4
 80039a4:	00c007c4 	movi	r3,31
 80039a8:	1980120e 	bge	r3,r6,80039f4 <__floatunsidf+0x78>
 80039ac:	00c104c4 	movi	r3,1043
 80039b0:	1907c83a 	sub	r3,r3,r4
 80039b4:	80ca983a 	sll	r5,r16,r3
 80039b8:	00800434 	movhi	r2,16
 80039bc:	10bfffc4 	addi	r2,r2,-1
 80039c0:	2101ffcc 	andi	r4,r4,2047
 80039c4:	0021883a 	mov	r16,zero
 80039c8:	288a703a 	and	r5,r5,r2
 80039cc:	2008953a 	slli	r4,r4,20
 80039d0:	00c00434 	movhi	r3,16
 80039d4:	18ffffc4 	addi	r3,r3,-1
 80039d8:	28c6703a 	and	r3,r5,r3
 80039dc:	8005883a 	mov	r2,r16
 80039e0:	1906b03a 	or	r3,r3,r4
 80039e4:	dfc00117 	ldw	ra,4(sp)
 80039e8:	dc000017 	ldw	r16,0(sp)
 80039ec:	dec00204 	addi	sp,sp,8
 80039f0:	f800283a 	ret
 80039f4:	00c002c4 	movi	r3,11
 80039f8:	188bc83a 	sub	r5,r3,r2
 80039fc:	814ad83a 	srl	r5,r16,r5
 8003a00:	00c00434 	movhi	r3,16
 8003a04:	18ffffc4 	addi	r3,r3,-1
 8003a08:	81a0983a 	sll	r16,r16,r6
 8003a0c:	2101ffcc 	andi	r4,r4,2047
 8003a10:	28ca703a 	and	r5,r5,r3
 8003a14:	003fed06 	br	80039cc <__floatunsidf+0x50>
 8003a18:	0009883a 	mov	r4,zero
 8003a1c:	000b883a 	mov	r5,zero
 8003a20:	003fea06 	br	80039cc <__floatunsidf+0x50>

08003a24 <__extendsfdf2>:
 8003a24:	200ad5fa 	srli	r5,r4,23
 8003a28:	defffd04 	addi	sp,sp,-12
 8003a2c:	dc400115 	stw	r17,4(sp)
 8003a30:	29403fcc 	andi	r5,r5,255
 8003a34:	29800044 	addi	r6,r5,1
 8003a38:	04402034 	movhi	r17,128
 8003a3c:	dc000015 	stw	r16,0(sp)
 8003a40:	8c7fffc4 	addi	r17,r17,-1
 8003a44:	dfc00215 	stw	ra,8(sp)
 8003a48:	31803fcc 	andi	r6,r6,255
 8003a4c:	00800044 	movi	r2,1
 8003a50:	8922703a 	and	r17,r17,r4
 8003a54:	2020d7fa 	srli	r16,r4,31
 8003a58:	1180110e 	bge	r2,r6,8003aa0 <__extendsfdf2+0x7c>
 8003a5c:	880cd0fa 	srli	r6,r17,3
 8003a60:	8822977a 	slli	r17,r17,29
 8003a64:	2940e004 	addi	r5,r5,896
 8003a68:	2941ffcc 	andi	r5,r5,2047
 8003a6c:	2804953a 	slli	r2,r5,20
 8003a70:	01400434 	movhi	r5,16
 8003a74:	800697fa 	slli	r3,r16,31
 8003a78:	297fffc4 	addi	r5,r5,-1
 8003a7c:	314a703a 	and	r5,r6,r5
 8003a80:	288ab03a 	or	r5,r5,r2
 8003a84:	28c6b03a 	or	r3,r5,r3
 8003a88:	8805883a 	mov	r2,r17
 8003a8c:	dfc00217 	ldw	ra,8(sp)
 8003a90:	dc400117 	ldw	r17,4(sp)
 8003a94:	dc000017 	ldw	r16,0(sp)
 8003a98:	dec00304 	addi	sp,sp,12
 8003a9c:	f800283a 	ret
 8003aa0:	2800111e 	bne	r5,zero,8003ae8 <__extendsfdf2+0xc4>
 8003aa4:	88001c26 	beq	r17,zero,8003b18 <__extendsfdf2+0xf4>
 8003aa8:	8809883a 	mov	r4,r17
 8003aac:	8003cdc0 	call	8003cdc <__clzsi2>
 8003ab0:	00c00284 	movi	r3,10
 8003ab4:	18801b16 	blt	r3,r2,8003b24 <__extendsfdf2+0x100>
 8003ab8:	018002c4 	movi	r6,11
 8003abc:	308dc83a 	sub	r6,r6,r2
 8003ac0:	11000544 	addi	r4,r2,21
 8003ac4:	8986d83a 	srl	r3,r17,r6
 8003ac8:	8922983a 	sll	r17,r17,r4
 8003acc:	0180e244 	movi	r6,905
 8003ad0:	01400434 	movhi	r5,16
 8003ad4:	3085c83a 	sub	r2,r6,r2
 8003ad8:	297fffc4 	addi	r5,r5,-1
 8003adc:	194c703a 	and	r6,r3,r5
 8003ae0:	1141ffcc 	andi	r5,r2,2047
 8003ae4:	003fe006 	br	8003a68 <__extendsfdf2+0x44>
 8003ae8:	88000826 	beq	r17,zero,8003b0c <__extendsfdf2+0xe8>
 8003aec:	880cd0fa 	srli	r6,r17,3
 8003af0:	00800434 	movhi	r2,16
 8003af4:	10bfffc4 	addi	r2,r2,-1
 8003af8:	31800234 	orhi	r6,r6,8
 8003afc:	8822977a 	slli	r17,r17,29
 8003b00:	308c703a 	and	r6,r6,r2
 8003b04:	0141ffc4 	movi	r5,2047
 8003b08:	003fd706 	br	8003a68 <__extendsfdf2+0x44>
 8003b0c:	0141ffc4 	movi	r5,2047
 8003b10:	000d883a 	mov	r6,zero
 8003b14:	003fd406 	br	8003a68 <__extendsfdf2+0x44>
 8003b18:	000b883a 	mov	r5,zero
 8003b1c:	000d883a 	mov	r6,zero
 8003b20:	003fd106 	br	8003a68 <__extendsfdf2+0x44>
 8003b24:	11bffd44 	addi	r6,r2,-11
 8003b28:	8986983a 	sll	r3,r17,r6
 8003b2c:	0023883a 	mov	r17,zero
 8003b30:	003fe606 	br	8003acc <__extendsfdf2+0xa8>

08003b34 <__truncdfsf2>:
 8003b34:	2810d53a 	srli	r8,r5,20
 8003b38:	01c00434 	movhi	r7,16
 8003b3c:	39ffffc4 	addi	r7,r7,-1
 8003b40:	29ce703a 	and	r7,r5,r7
 8003b44:	4201ffcc 	andi	r8,r8,2047
 8003b48:	380e90fa 	slli	r7,r7,3
 8003b4c:	200cd77a 	srli	r6,r4,29
 8003b50:	42400044 	addi	r9,r8,1
 8003b54:	4a41ffcc 	andi	r9,r9,2047
 8003b58:	00c00044 	movi	r3,1
 8003b5c:	280ad7fa 	srli	r5,r5,31
 8003b60:	31ceb03a 	or	r7,r6,r7
 8003b64:	200490fa 	slli	r2,r4,3
 8003b68:	1a40230e 	bge	r3,r9,8003bf8 <__truncdfsf2+0xc4>
 8003b6c:	40ff2004 	addi	r3,r8,-896
 8003b70:	01803f84 	movi	r6,254
 8003b74:	30c01516 	blt	r6,r3,8003bcc <__truncdfsf2+0x98>
 8003b78:	00c0380e 	bge	zero,r3,8003c5c <__truncdfsf2+0x128>
 8003b7c:	200c91ba 	slli	r6,r4,6
 8003b80:	380e90fa 	slli	r7,r7,3
 8003b84:	1004d77a 	srli	r2,r2,29
 8003b88:	300cc03a 	cmpne	r6,r6,zero
 8003b8c:	31ccb03a 	or	r6,r6,r7
 8003b90:	308cb03a 	or	r6,r6,r2
 8003b94:	308001cc 	andi	r2,r6,7
 8003b98:	10000426 	beq	r2,zero,8003bac <__truncdfsf2+0x78>
 8003b9c:	308003cc 	andi	r2,r6,15
 8003ba0:	01000104 	movi	r4,4
 8003ba4:	11000126 	beq	r2,r4,8003bac <__truncdfsf2+0x78>
 8003ba8:	31800104 	addi	r6,r6,4
 8003bac:	3081002c 	andhi	r2,r6,1024
 8003bb0:	10001626 	beq	r2,zero,8003c0c <__truncdfsf2+0xd8>
 8003bb4:	18c00044 	addi	r3,r3,1
 8003bb8:	00803fc4 	movi	r2,255
 8003bbc:	18800326 	beq	r3,r2,8003bcc <__truncdfsf2+0x98>
 8003bc0:	300c91ba 	slli	r6,r6,6
 8003bc4:	300cd27a 	srli	r6,r6,9
 8003bc8:	00000206 	br	8003bd4 <__truncdfsf2+0xa0>
 8003bcc:	00ffffc4 	movi	r3,-1
 8003bd0:	000d883a 	mov	r6,zero
 8003bd4:	18c03fcc 	andi	r3,r3,255
 8003bd8:	180895fa 	slli	r4,r3,23
 8003bdc:	00c02034 	movhi	r3,128
 8003be0:	280a97fa 	slli	r5,r5,31
 8003be4:	18ffffc4 	addi	r3,r3,-1
 8003be8:	30c6703a 	and	r3,r6,r3
 8003bec:	1906b03a 	or	r3,r3,r4
 8003bf0:	1944b03a 	or	r2,r3,r5
 8003bf4:	f800283a 	ret
 8003bf8:	40000b1e 	bne	r8,zero,8003c28 <__truncdfsf2+0xf4>
 8003bfc:	388cb03a 	or	r6,r7,r2
 8003c00:	0007883a 	mov	r3,zero
 8003c04:	30000426 	beq	r6,zero,8003c18 <__truncdfsf2+0xe4>
 8003c08:	01800144 	movi	r6,5
 8003c0c:	00803fc4 	movi	r2,255
 8003c10:	300cd0fa 	srli	r6,r6,3
 8003c14:	18800a26 	beq	r3,r2,8003c40 <__truncdfsf2+0x10c>
 8003c18:	00802034 	movhi	r2,128
 8003c1c:	10bfffc4 	addi	r2,r2,-1
 8003c20:	308c703a 	and	r6,r6,r2
 8003c24:	003feb06 	br	8003bd4 <__truncdfsf2+0xa0>
 8003c28:	3888b03a 	or	r4,r7,r2
 8003c2c:	203fe726 	beq	r4,zero,8003bcc <__truncdfsf2+0x98>
 8003c30:	380c90fa 	slli	r6,r7,3
 8003c34:	00c03fc4 	movi	r3,255
 8003c38:	31808034 	orhi	r6,r6,512
 8003c3c:	003fd506 	br	8003b94 <__truncdfsf2+0x60>
 8003c40:	303fe226 	beq	r6,zero,8003bcc <__truncdfsf2+0x98>
 8003c44:	00802034 	movhi	r2,128
 8003c48:	31801034 	orhi	r6,r6,64
 8003c4c:	10bfffc4 	addi	r2,r2,-1
 8003c50:	00ffffc4 	movi	r3,-1
 8003c54:	308c703a 	and	r6,r6,r2
 8003c58:	003fde06 	br	8003bd4 <__truncdfsf2+0xa0>
 8003c5c:	013ffa44 	movi	r4,-23
 8003c60:	19000e16 	blt	r3,r4,8003c9c <__truncdfsf2+0x168>
 8003c64:	01000784 	movi	r4,30
 8003c68:	20c9c83a 	sub	r4,r4,r3
 8003c6c:	018007c4 	movi	r6,31
 8003c70:	39c02034 	orhi	r7,r7,128
 8003c74:	31000b16 	blt	r6,r4,8003ca4 <__truncdfsf2+0x170>
 8003c78:	423f2084 	addi	r8,r8,-894
 8003c7c:	120c983a 	sll	r6,r2,r8
 8003c80:	3a0e983a 	sll	r7,r7,r8
 8003c84:	1104d83a 	srl	r2,r2,r4
 8003c88:	300cc03a 	cmpne	r6,r6,zero
 8003c8c:	31ceb03a 	or	r7,r6,r7
 8003c90:	388cb03a 	or	r6,r7,r2
 8003c94:	0007883a 	mov	r3,zero
 8003c98:	003fbe06 	br	8003b94 <__truncdfsf2+0x60>
 8003c9c:	0007883a 	mov	r3,zero
 8003ca0:	003fd906 	br	8003c08 <__truncdfsf2+0xd4>
 8003ca4:	01bfff84 	movi	r6,-2
 8003ca8:	30cdc83a 	sub	r6,r6,r3
 8003cac:	00c00804 	movi	r3,32
 8003cb0:	398cd83a 	srl	r6,r7,r6
 8003cb4:	20c00726 	beq	r4,r3,8003cd4 <__truncdfsf2+0x1a0>
 8003cb8:	423f2884 	addi	r8,r8,-862
 8003cbc:	3a0e983a 	sll	r7,r7,r8
 8003cc0:	3884b03a 	or	r2,r7,r2
 8003cc4:	1004c03a 	cmpne	r2,r2,zero
 8003cc8:	118cb03a 	or	r6,r2,r6
 8003ccc:	0007883a 	mov	r3,zero
 8003cd0:	003fb006 	br	8003b94 <__truncdfsf2+0x60>
 8003cd4:	000f883a 	mov	r7,zero
 8003cd8:	003ff906 	br	8003cc0 <__truncdfsf2+0x18c>

08003cdc <__clzsi2>:
 8003cdc:	00bfffd4 	movui	r2,65535
 8003ce0:	11000536 	bltu	r2,r4,8003cf8 <__clzsi2+0x1c>
 8003ce4:	00803fc4 	movi	r2,255
 8003ce8:	11000f36 	bltu	r2,r4,8003d28 <__clzsi2+0x4c>
 8003cec:	00800804 	movi	r2,32
 8003cf0:	0007883a 	mov	r3,zero
 8003cf4:	00000506 	br	8003d0c <__clzsi2+0x30>
 8003cf8:	00804034 	movhi	r2,256
 8003cfc:	10bfffc4 	addi	r2,r2,-1
 8003d00:	11000c2e 	bgeu	r2,r4,8003d34 <__clzsi2+0x58>
 8003d04:	00800204 	movi	r2,8
 8003d08:	00c00604 	movi	r3,24
 8003d0c:	20c8d83a 	srl	r4,r4,r3
 8003d10:	00c20074 	movhi	r3,2049
 8003d14:	18e48144 	addi	r3,r3,-28155
 8003d18:	1909883a 	add	r4,r3,r4
 8003d1c:	20c00003 	ldbu	r3,0(r4)
 8003d20:	10c5c83a 	sub	r2,r2,r3
 8003d24:	f800283a 	ret
 8003d28:	00800604 	movi	r2,24
 8003d2c:	00c00204 	movi	r3,8
 8003d30:	003ff606 	br	8003d0c <__clzsi2+0x30>
 8003d34:	00800404 	movi	r2,16
 8003d38:	1007883a 	mov	r3,r2
 8003d3c:	003ff306 	br	8003d0c <__clzsi2+0x30>

08003d40 <__fixunsdfsi>:
 8003d40:	defffd04 	addi	sp,sp,-12
 8003d44:	000d883a 	mov	r6,zero
 8003d48:	01d07834 	movhi	r7,16864
 8003d4c:	dc400115 	stw	r17,4(sp)
 8003d50:	dc000015 	stw	r16,0(sp)
 8003d54:	dfc00215 	stw	ra,8(sp)
 8003d58:	2023883a 	mov	r17,r4
 8003d5c:	2821883a 	mov	r16,r5
 8003d60:	8003db40 	call	8003db4 <__gedf2>
 8003d64:	1000080e 	bge	r2,zero,8003d88 <__fixunsdfsi+0x48>
 8003d68:	8809883a 	mov	r4,r17
 8003d6c:	800b883a 	mov	r5,r16
 8003d70:	8003e900 	call	8003e90 <__fixdfsi>
 8003d74:	dfc00217 	ldw	ra,8(sp)
 8003d78:	dc400117 	ldw	r17,4(sp)
 8003d7c:	dc000017 	ldw	r16,0(sp)
 8003d80:	dec00304 	addi	sp,sp,12
 8003d84:	f800283a 	ret
 8003d88:	000d883a 	mov	r6,zero
 8003d8c:	01d07834 	movhi	r7,16864
 8003d90:	8809883a 	mov	r4,r17
 8003d94:	800b883a 	mov	r5,r16
 8003d98:	80030800 	call	8003080 <__subdf3>
 8003d9c:	180b883a 	mov	r5,r3
 8003da0:	1009883a 	mov	r4,r2
 8003da4:	8003e900 	call	8003e90 <__fixdfsi>
 8003da8:	00e00034 	movhi	r3,32768
 8003dac:	10c5883a 	add	r2,r2,r3
 8003db0:	003ff006 	br	8003d74 <__fixunsdfsi+0x34>

08003db4 <__gedf2>:
 8003db4:	2804d53a 	srli	r2,r5,20
 8003db8:	3806d53a 	srli	r3,r7,20
 8003dbc:	02000434 	movhi	r8,16
 8003dc0:	423fffc4 	addi	r8,r8,-1
 8003dc4:	1081ffcc 	andi	r2,r2,2047
 8003dc8:	0241ffc4 	movi	r9,2047
 8003dcc:	2a14703a 	and	r10,r5,r8
 8003dd0:	18c1ffcc 	andi	r3,r3,2047
 8003dd4:	3a10703a 	and	r8,r7,r8
 8003dd8:	280ad7fa 	srli	r5,r5,31
 8003ddc:	380ed7fa 	srli	r7,r7,31
 8003de0:	12401d26 	beq	r2,r9,8003e58 <__gedf2+0xa4>
 8003de4:	0241ffc4 	movi	r9,2047
 8003de8:	1a401226 	beq	r3,r9,8003e34 <__gedf2+0x80>
 8003dec:	1000081e 	bne	r2,zero,8003e10 <__gedf2+0x5c>
 8003df0:	2296b03a 	or	r11,r4,r10
 8003df4:	5813003a 	cmpeq	r9,r11,zero
 8003df8:	1800091e 	bne	r3,zero,8003e20 <__gedf2+0x6c>
 8003dfc:	3218b03a 	or	r12,r6,r8
 8003e00:	6000071e 	bne	r12,zero,8003e20 <__gedf2+0x6c>
 8003e04:	0005883a 	mov	r2,zero
 8003e08:	5800101e 	bne	r11,zero,8003e4c <__gedf2+0x98>
 8003e0c:	f800283a 	ret
 8003e10:	18000c1e 	bne	r3,zero,8003e44 <__gedf2+0x90>
 8003e14:	3212b03a 	or	r9,r6,r8
 8003e18:	48000c26 	beq	r9,zero,8003e4c <__gedf2+0x98>
 8003e1c:	0013883a 	mov	r9,zero
 8003e20:	39c03fcc 	andi	r7,r7,255
 8003e24:	48000826 	beq	r9,zero,8003e48 <__gedf2+0x94>
 8003e28:	38000926 	beq	r7,zero,8003e50 <__gedf2+0x9c>
 8003e2c:	00800044 	movi	r2,1
 8003e30:	f800283a 	ret
 8003e34:	3212b03a 	or	r9,r6,r8
 8003e38:	483fec26 	beq	r9,zero,8003dec <__gedf2+0x38>
 8003e3c:	00bfff84 	movi	r2,-2
 8003e40:	f800283a 	ret
 8003e44:	39c03fcc 	andi	r7,r7,255
 8003e48:	29c00626 	beq	r5,r7,8003e64 <__gedf2+0xb0>
 8003e4c:	283ff726 	beq	r5,zero,8003e2c <__gedf2+0x78>
 8003e50:	00bfffc4 	movi	r2,-1
 8003e54:	f800283a 	ret
 8003e58:	2292b03a 	or	r9,r4,r10
 8003e5c:	483fe126 	beq	r9,zero,8003de4 <__gedf2+0x30>
 8003e60:	003ff606 	br	8003e3c <__gedf2+0x88>
 8003e64:	18bff916 	blt	r3,r2,8003e4c <__gedf2+0x98>
 8003e68:	10c00316 	blt	r2,r3,8003e78 <__gedf2+0xc4>
 8003e6c:	42bff736 	bltu	r8,r10,8003e4c <__gedf2+0x98>
 8003e70:	52000326 	beq	r10,r8,8003e80 <__gedf2+0xcc>
 8003e74:	5200042e 	bgeu	r10,r8,8003e88 <__gedf2+0xd4>
 8003e78:	283fec1e 	bne	r5,zero,8003e2c <__gedf2+0x78>
 8003e7c:	003ff406 	br	8003e50 <__gedf2+0x9c>
 8003e80:	313ff236 	bltu	r6,r4,8003e4c <__gedf2+0x98>
 8003e84:	21bffc36 	bltu	r4,r6,8003e78 <__gedf2+0xc4>
 8003e88:	0005883a 	mov	r2,zero
 8003e8c:	f800283a 	ret

08003e90 <__fixdfsi>:
 8003e90:	280cd53a 	srli	r6,r5,20
 8003e94:	00c00434 	movhi	r3,16
 8003e98:	18ffffc4 	addi	r3,r3,-1
 8003e9c:	3181ffcc 	andi	r6,r6,2047
 8003ea0:	01c0ff84 	movi	r7,1022
 8003ea4:	28c6703a 	and	r3,r5,r3
 8003ea8:	280ad7fa 	srli	r5,r5,31
 8003eac:	3980120e 	bge	r7,r6,8003ef8 <__fixdfsi+0x68>
 8003eb0:	00810744 	movi	r2,1053
 8003eb4:	11800c16 	blt	r2,r6,8003ee8 <__fixdfsi+0x58>
 8003eb8:	00810cc4 	movi	r2,1075
 8003ebc:	1185c83a 	sub	r2,r2,r6
 8003ec0:	01c007c4 	movi	r7,31
 8003ec4:	18c00434 	orhi	r3,r3,16
 8003ec8:	38800d16 	blt	r7,r2,8003f00 <__fixdfsi+0x70>
 8003ecc:	31befb44 	addi	r6,r6,-1043
 8003ed0:	2084d83a 	srl	r2,r4,r2
 8003ed4:	1986983a 	sll	r3,r3,r6
 8003ed8:	1884b03a 	or	r2,r3,r2
 8003edc:	28000726 	beq	r5,zero,8003efc <__fixdfsi+0x6c>
 8003ee0:	0085c83a 	sub	r2,zero,r2
 8003ee4:	f800283a 	ret
 8003ee8:	00a00034 	movhi	r2,32768
 8003eec:	10bfffc4 	addi	r2,r2,-1
 8003ef0:	2885883a 	add	r2,r5,r2
 8003ef4:	f800283a 	ret
 8003ef8:	0005883a 	mov	r2,zero
 8003efc:	f800283a 	ret
 8003f00:	008104c4 	movi	r2,1043
 8003f04:	1185c83a 	sub	r2,r2,r6
 8003f08:	1884d83a 	srl	r2,r3,r2
 8003f0c:	003ff306 	br	8003edc <__fixdfsi+0x4c>

08003f10 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003f10:	defffc04 	addi	sp,sp,-16
 8003f14:	df000315 	stw	fp,12(sp)
 8003f18:	df000304 	addi	fp,sp,12
 8003f1c:	e13ffd15 	stw	r4,-12(fp)
 8003f20:	e17ffe15 	stw	r5,-8(fp)
 8003f24:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003f28:	e0fffe17 	ldw	r3,-8(fp)
 8003f2c:	e0bffd17 	ldw	r2,-12(fp)
 8003f30:	18800c26 	beq	r3,r2,8003f64 <alt_load_section+0x54>
  {
    while( to != end )
 8003f34:	00000806 	br	8003f58 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8003f38:	e0bffe17 	ldw	r2,-8(fp)
 8003f3c:	10c00104 	addi	r3,r2,4
 8003f40:	e0fffe15 	stw	r3,-8(fp)
 8003f44:	e0fffd17 	ldw	r3,-12(fp)
 8003f48:	19000104 	addi	r4,r3,4
 8003f4c:	e13ffd15 	stw	r4,-12(fp)
 8003f50:	18c00017 	ldw	r3,0(r3)
 8003f54:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8003f58:	e0fffe17 	ldw	r3,-8(fp)
 8003f5c:	e0bfff17 	ldw	r2,-4(fp)
 8003f60:	18bff51e 	bne	r3,r2,8003f38 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8003f64:	0001883a 	nop
 8003f68:	e037883a 	mov	sp,fp
 8003f6c:	df000017 	ldw	fp,0(sp)
 8003f70:	dec00104 	addi	sp,sp,4
 8003f74:	f800283a 	ret

08003f78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003f78:	defffe04 	addi	sp,sp,-8
 8003f7c:	dfc00115 	stw	ra,4(sp)
 8003f80:	df000015 	stw	fp,0(sp)
 8003f84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003f88:	01820074 	movhi	r6,2049
 8003f8c:	31ab6b04 	addi	r6,r6,-21076
 8003f90:	01420074 	movhi	r5,2049
 8003f94:	2964d004 	addi	r5,r5,-27840
 8003f98:	01020074 	movhi	r4,2049
 8003f9c:	212b6b04 	addi	r4,r4,-21076
 8003fa0:	8003f100 	call	8003f10 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003fa4:	01820034 	movhi	r6,2048
 8003fa8:	31809104 	addi	r6,r6,580
 8003fac:	01420034 	movhi	r5,2048
 8003fb0:	29400804 	addi	r5,r5,32
 8003fb4:	01020034 	movhi	r4,2048
 8003fb8:	21000804 	addi	r4,r4,32
 8003fbc:	8003f100 	call	8003f10 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003fc0:	01820074 	movhi	r6,2049
 8003fc4:	31a4d004 	addi	r6,r6,-27840
 8003fc8:	01420074 	movhi	r5,2049
 8003fcc:	29647c04 	addi	r5,r5,-28176
 8003fd0:	01020074 	movhi	r4,2049
 8003fd4:	21247c04 	addi	r4,r4,-28176
 8003fd8:	8003f100 	call	8003f10 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003fdc:	8004e180 	call	8004e18 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003fe0:	800502c0 	call	800502c <alt_icache_flush_all>
}
 8003fe4:	0001883a 	nop
 8003fe8:	e037883a 	mov	sp,fp
 8003fec:	dfc00117 	ldw	ra,4(sp)
 8003ff0:	df000017 	ldw	fp,0(sp)
 8003ff4:	dec00204 	addi	sp,sp,8
 8003ff8:	f800283a 	ret

08003ffc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003ffc:	defffd04 	addi	sp,sp,-12
 8004000:	dfc00215 	stw	ra,8(sp)
 8004004:	df000115 	stw	fp,4(sp)
 8004008:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800400c:	0009883a 	mov	r4,zero
 8004010:	80040e80 	call	80040e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8004014:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8004018:	80041200 	call	8004120 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800401c:	01820074 	movhi	r6,2049
 8004020:	31a4c204 	addi	r6,r6,-27896
 8004024:	01420074 	movhi	r5,2049
 8004028:	2964c204 	addi	r5,r5,-27896
 800402c:	01020074 	movhi	r4,2049
 8004030:	2124c204 	addi	r4,r4,-27896
 8004034:	80053c40 	call	80053c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8004038:	8004f6c0 	call	8004f6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800403c:	01020034 	movhi	r4,2048
 8004040:	2113f304 	addi	r4,r4,20428
 8004044:	8005c280 	call	8005c28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004048:	d0a6a917 	ldw	r2,-25948(gp)
 800404c:	d0e6aa17 	ldw	r3,-25944(gp)
 8004050:	d126ab17 	ldw	r4,-25940(gp)
 8004054:	200d883a 	mov	r6,r4
 8004058:	180b883a 	mov	r5,r3
 800405c:	1009883a 	mov	r4,r2
 8004060:	80002900 	call	8000290 <main>
 8004064:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8004068:	01000044 	movi	r4,1
 800406c:	8004d480 	call	8004d48 <close>
  exit (result);
 8004070:	e13fff17 	ldw	r4,-4(fp)
 8004074:	8005c3c0 	call	8005c3c <exit>

08004078 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 8004078:	defffd04 	addi	sp,sp,-12
 800407c:	dfc00215 	stw	ra,8(sp)
 8004080:	df000115 	stw	fp,4(sp)
 8004084:	df000104 	addi	fp,sp,4
 8004088:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
 800408c:	d0a00a17 	ldw	r2,-32728(gp)
 8004090:	10800217 	ldw	r2,8(r2)
 8004094:	100b883a 	mov	r5,r2
 8004098:	e13fff17 	ldw	r4,-4(fp)
 800409c:	8005d100 	call	8005d10 <fputs>
#endif
#endif
}
 80040a0:	e037883a 	mov	sp,fp
 80040a4:	dfc00117 	ldw	ra,4(sp)
 80040a8:	df000017 	ldw	fp,0(sp)
 80040ac:	dec00204 	addi	sp,sp,8
 80040b0:	f800283a 	ret

080040b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80040b4:	defffd04 	addi	sp,sp,-12
 80040b8:	dfc00215 	stw	ra,8(sp)
 80040bc:	df000115 	stw	fp,4(sp)
 80040c0:	df000104 	addi	fp,sp,4
 80040c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80040c8:	d1600204 	addi	r5,gp,-32760
 80040cc:	e13fff17 	ldw	r4,-4(fp)
 80040d0:	8004ec80 	call	8004ec8 <alt_dev_llist_insert>
}
 80040d4:	e037883a 	mov	sp,fp
 80040d8:	dfc00117 	ldw	ra,4(sp)
 80040dc:	df000017 	ldw	fp,0(sp)
 80040e0:	dec00204 	addi	sp,sp,8
 80040e4:	f800283a 	ret

080040e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80040e8:	defffd04 	addi	sp,sp,-12
 80040ec:	dfc00215 	stw	ra,8(sp)
 80040f0:	df000115 	stw	fp,4(sp)
 80040f4:	df000104 	addi	fp,sp,4
 80040f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80040fc:	800589c0 	call	800589c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004100:	00800044 	movi	r2,1
 8004104:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004108:	0001883a 	nop
 800410c:	e037883a 	mov	sp,fp
 8004110:	dfc00117 	ldw	ra,4(sp)
 8004114:	df000017 	ldw	fp,0(sp)
 8004118:	dec00204 	addi	sp,sp,8
 800411c:	f800283a 	ret

08004120 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004120:	defffe04 	addi	sp,sp,-8
 8004124:	dfc00115 	stw	ra,4(sp)
 8004128:	df000015 	stw	fp,0(sp)
 800412c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004130:	000d883a 	mov	r6,zero
 8004134:	000b883a 	mov	r5,zero
 8004138:	01020074 	movhi	r4,2049
 800413c:	2124da04 	addi	r4,r4,-27800
 8004140:	80042dc0 	call	80042dc <altera_avalon_jtag_uart_init>
 8004144:	01020074 	movhi	r4,2049
 8004148:	2124d004 	addi	r4,r4,-27840
 800414c:	80040b40 	call	80040b4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8004150:	00c00044 	movi	r3,1
 8004154:	00840034 	movhi	r2,4096
 8004158:	10840004 	addi	r2,r2,4096
 800415c:	10c00035 	stwio	r3,0(r2)
}
 8004160:	0001883a 	nop
 8004164:	e037883a 	mov	sp,fp
 8004168:	dfc00117 	ldw	ra,4(sp)
 800416c:	df000017 	ldw	fp,0(sp)
 8004170:	dec00204 	addi	sp,sp,8
 8004174:	f800283a 	ret

08004178 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8004178:	defffa04 	addi	sp,sp,-24
 800417c:	dfc00515 	stw	ra,20(sp)
 8004180:	df000415 	stw	fp,16(sp)
 8004184:	df000404 	addi	fp,sp,16
 8004188:	e13ffd15 	stw	r4,-12(fp)
 800418c:	e17ffe15 	stw	r5,-8(fp)
 8004190:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004194:	e0bffd17 	ldw	r2,-12(fp)
 8004198:	10800017 	ldw	r2,0(r2)
 800419c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80041a0:	e0bffc17 	ldw	r2,-16(fp)
 80041a4:	10c00a04 	addi	r3,r2,40
 80041a8:	e0bffd17 	ldw	r2,-12(fp)
 80041ac:	10800217 	ldw	r2,8(r2)
 80041b0:	100f883a 	mov	r7,r2
 80041b4:	e1bfff17 	ldw	r6,-4(fp)
 80041b8:	e17ffe17 	ldw	r5,-8(fp)
 80041bc:	1809883a 	mov	r4,r3
 80041c0:	80047a00 	call	80047a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80041c4:	e037883a 	mov	sp,fp
 80041c8:	dfc00117 	ldw	ra,4(sp)
 80041cc:	df000017 	ldw	fp,0(sp)
 80041d0:	dec00204 	addi	sp,sp,8
 80041d4:	f800283a 	ret

080041d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80041d8:	defffa04 	addi	sp,sp,-24
 80041dc:	dfc00515 	stw	ra,20(sp)
 80041e0:	df000415 	stw	fp,16(sp)
 80041e4:	df000404 	addi	fp,sp,16
 80041e8:	e13ffd15 	stw	r4,-12(fp)
 80041ec:	e17ffe15 	stw	r5,-8(fp)
 80041f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80041f4:	e0bffd17 	ldw	r2,-12(fp)
 80041f8:	10800017 	ldw	r2,0(r2)
 80041fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8004200:	e0bffc17 	ldw	r2,-16(fp)
 8004204:	10c00a04 	addi	r3,r2,40
 8004208:	e0bffd17 	ldw	r2,-12(fp)
 800420c:	10800217 	ldw	r2,8(r2)
 8004210:	100f883a 	mov	r7,r2
 8004214:	e1bfff17 	ldw	r6,-4(fp)
 8004218:	e17ffe17 	ldw	r5,-8(fp)
 800421c:	1809883a 	mov	r4,r3
 8004220:	80049bc0 	call	80049bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8004224:	e037883a 	mov	sp,fp
 8004228:	dfc00117 	ldw	ra,4(sp)
 800422c:	df000017 	ldw	fp,0(sp)
 8004230:	dec00204 	addi	sp,sp,8
 8004234:	f800283a 	ret

08004238 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8004238:	defffc04 	addi	sp,sp,-16
 800423c:	dfc00315 	stw	ra,12(sp)
 8004240:	df000215 	stw	fp,8(sp)
 8004244:	df000204 	addi	fp,sp,8
 8004248:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800424c:	e0bfff17 	ldw	r2,-4(fp)
 8004250:	10800017 	ldw	r2,0(r2)
 8004254:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8004258:	e0bffe17 	ldw	r2,-8(fp)
 800425c:	10c00a04 	addi	r3,r2,40
 8004260:	e0bfff17 	ldw	r2,-4(fp)
 8004264:	10800217 	ldw	r2,8(r2)
 8004268:	100b883a 	mov	r5,r2
 800426c:	1809883a 	mov	r4,r3
 8004270:	80046480 	call	8004648 <altera_avalon_jtag_uart_close>
}
 8004274:	e037883a 	mov	sp,fp
 8004278:	dfc00117 	ldw	ra,4(sp)
 800427c:	df000017 	ldw	fp,0(sp)
 8004280:	dec00204 	addi	sp,sp,8
 8004284:	f800283a 	ret

08004288 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8004288:	defffa04 	addi	sp,sp,-24
 800428c:	dfc00515 	stw	ra,20(sp)
 8004290:	df000415 	stw	fp,16(sp)
 8004294:	df000404 	addi	fp,sp,16
 8004298:	e13ffd15 	stw	r4,-12(fp)
 800429c:	e17ffe15 	stw	r5,-8(fp)
 80042a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80042a4:	e0bffd17 	ldw	r2,-12(fp)
 80042a8:	10800017 	ldw	r2,0(r2)
 80042ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80042b0:	e0bffc17 	ldw	r2,-16(fp)
 80042b4:	10800a04 	addi	r2,r2,40
 80042b8:	e1bfff17 	ldw	r6,-4(fp)
 80042bc:	e17ffe17 	ldw	r5,-8(fp)
 80042c0:	1009883a 	mov	r4,r2
 80042c4:	80046b00 	call	80046b0 <altera_avalon_jtag_uart_ioctl>
}
 80042c8:	e037883a 	mov	sp,fp
 80042cc:	dfc00117 	ldw	ra,4(sp)
 80042d0:	df000017 	ldw	fp,0(sp)
 80042d4:	dec00204 	addi	sp,sp,8
 80042d8:	f800283a 	ret

080042dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80042dc:	defffa04 	addi	sp,sp,-24
 80042e0:	dfc00515 	stw	ra,20(sp)
 80042e4:	df000415 	stw	fp,16(sp)
 80042e8:	df000404 	addi	fp,sp,16
 80042ec:	e13ffd15 	stw	r4,-12(fp)
 80042f0:	e17ffe15 	stw	r5,-8(fp)
 80042f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80042f8:	e0bffd17 	ldw	r2,-12(fp)
 80042fc:	00c00044 	movi	r3,1
 8004300:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8004304:	e0bffd17 	ldw	r2,-12(fp)
 8004308:	10800017 	ldw	r2,0(r2)
 800430c:	10800104 	addi	r2,r2,4
 8004310:	1007883a 	mov	r3,r2
 8004314:	e0bffd17 	ldw	r2,-12(fp)
 8004318:	10800817 	ldw	r2,32(r2)
 800431c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8004320:	e0bffe17 	ldw	r2,-8(fp)
 8004324:	e0ffff17 	ldw	r3,-4(fp)
 8004328:	d8000015 	stw	zero,0(sp)
 800432c:	e1fffd17 	ldw	r7,-12(fp)
 8004330:	01820034 	movhi	r6,2048
 8004334:	3190e704 	addi	r6,r6,17308
 8004338:	180b883a 	mov	r5,r3
 800433c:	1009883a 	mov	r4,r2
 8004340:	80050600 	call	8005060 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8004344:	e0bffd17 	ldw	r2,-12(fp)
 8004348:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800434c:	e0bffd17 	ldw	r2,-12(fp)
 8004350:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004354:	d0e6ad17 	ldw	r3,-25932(gp)
 8004358:	e1fffd17 	ldw	r7,-12(fp)
 800435c:	01820034 	movhi	r6,2048
 8004360:	31916a04 	addi	r6,r6,17832
 8004364:	180b883a 	mov	r5,r3
 8004368:	1009883a 	mov	r4,r2
 800436c:	8004be00 	call	8004be0 <alt_alarm_start>
 8004370:	1000040e 	bge	r2,zero,8004384 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8004374:	e0fffd17 	ldw	r3,-12(fp)
 8004378:	00a00034 	movhi	r2,32768
 800437c:	10bfffc4 	addi	r2,r2,-1
 8004380:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8004384:	0001883a 	nop
 8004388:	e037883a 	mov	sp,fp
 800438c:	dfc00117 	ldw	ra,4(sp)
 8004390:	df000017 	ldw	fp,0(sp)
 8004394:	dec00204 	addi	sp,sp,8
 8004398:	f800283a 	ret

0800439c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800439c:	defff804 	addi	sp,sp,-32
 80043a0:	df000715 	stw	fp,28(sp)
 80043a4:	df000704 	addi	fp,sp,28
 80043a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80043ac:	e0bfff17 	ldw	r2,-4(fp)
 80043b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80043b4:	e0bffb17 	ldw	r2,-20(fp)
 80043b8:	10800017 	ldw	r2,0(r2)
 80043bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80043c0:	e0bffc17 	ldw	r2,-16(fp)
 80043c4:	10800104 	addi	r2,r2,4
 80043c8:	10800037 	ldwio	r2,0(r2)
 80043cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80043d0:	e0bffd17 	ldw	r2,-12(fp)
 80043d4:	1080c00c 	andi	r2,r2,768
 80043d8:	10006d26 	beq	r2,zero,8004590 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80043dc:	e0bffd17 	ldw	r2,-12(fp)
 80043e0:	1080400c 	andi	r2,r2,256
 80043e4:	10003526 	beq	r2,zero,80044bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80043e8:	00800074 	movhi	r2,1
 80043ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80043f0:	e0bffb17 	ldw	r2,-20(fp)
 80043f4:	10800a17 	ldw	r2,40(r2)
 80043f8:	10800044 	addi	r2,r2,1
 80043fc:	1081ffcc 	andi	r2,r2,2047
 8004400:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8004404:	e0bffb17 	ldw	r2,-20(fp)
 8004408:	10c00b17 	ldw	r3,44(r2)
 800440c:	e0bffe17 	ldw	r2,-8(fp)
 8004410:	18801526 	beq	r3,r2,8004468 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8004414:	e0bffc17 	ldw	r2,-16(fp)
 8004418:	10800037 	ldwio	r2,0(r2)
 800441c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8004420:	e0bff917 	ldw	r2,-28(fp)
 8004424:	10a0000c 	andi	r2,r2,32768
 8004428:	10001126 	beq	r2,zero,8004470 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800442c:	e0bffb17 	ldw	r2,-20(fp)
 8004430:	10800a17 	ldw	r2,40(r2)
 8004434:	e0fff917 	ldw	r3,-28(fp)
 8004438:	1809883a 	mov	r4,r3
 800443c:	e0fffb17 	ldw	r3,-20(fp)
 8004440:	1885883a 	add	r2,r3,r2
 8004444:	10800e04 	addi	r2,r2,56
 8004448:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800444c:	e0bffb17 	ldw	r2,-20(fp)
 8004450:	10800a17 	ldw	r2,40(r2)
 8004454:	10800044 	addi	r2,r2,1
 8004458:	10c1ffcc 	andi	r3,r2,2047
 800445c:	e0bffb17 	ldw	r2,-20(fp)
 8004460:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8004464:	003fe206 	br	80043f0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8004468:	0001883a 	nop
 800446c:	00000106 	br	8004474 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8004470:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8004474:	e0bff917 	ldw	r2,-28(fp)
 8004478:	10bfffec 	andhi	r2,r2,65535
 800447c:	10000f26 	beq	r2,zero,80044bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004480:	e0bffb17 	ldw	r2,-20(fp)
 8004484:	10c00817 	ldw	r3,32(r2)
 8004488:	00bfff84 	movi	r2,-2
 800448c:	1886703a 	and	r3,r3,r2
 8004490:	e0bffb17 	ldw	r2,-20(fp)
 8004494:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8004498:	e0bffc17 	ldw	r2,-16(fp)
 800449c:	10800104 	addi	r2,r2,4
 80044a0:	1007883a 	mov	r3,r2
 80044a4:	e0bffb17 	ldw	r2,-20(fp)
 80044a8:	10800817 	ldw	r2,32(r2)
 80044ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80044b0:	e0bffc17 	ldw	r2,-16(fp)
 80044b4:	10800104 	addi	r2,r2,4
 80044b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80044bc:	e0bffd17 	ldw	r2,-12(fp)
 80044c0:	1080800c 	andi	r2,r2,512
 80044c4:	103fbe26 	beq	r2,zero,80043c0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80044c8:	e0bffd17 	ldw	r2,-12(fp)
 80044cc:	1004d43a 	srli	r2,r2,16
 80044d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80044d4:	00001406 	br	8004528 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80044d8:	e0bffc17 	ldw	r2,-16(fp)
 80044dc:	e0fffb17 	ldw	r3,-20(fp)
 80044e0:	18c00d17 	ldw	r3,52(r3)
 80044e4:	e13ffb17 	ldw	r4,-20(fp)
 80044e8:	20c7883a 	add	r3,r4,r3
 80044ec:	18c20e04 	addi	r3,r3,2104
 80044f0:	18c00003 	ldbu	r3,0(r3)
 80044f4:	18c03fcc 	andi	r3,r3,255
 80044f8:	18c0201c 	xori	r3,r3,128
 80044fc:	18ffe004 	addi	r3,r3,-128
 8004500:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004504:	e0bffb17 	ldw	r2,-20(fp)
 8004508:	10800d17 	ldw	r2,52(r2)
 800450c:	10800044 	addi	r2,r2,1
 8004510:	10c1ffcc 	andi	r3,r2,2047
 8004514:	e0bffb17 	ldw	r2,-20(fp)
 8004518:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800451c:	e0bffa17 	ldw	r2,-24(fp)
 8004520:	10bfffc4 	addi	r2,r2,-1
 8004524:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8004528:	e0bffa17 	ldw	r2,-24(fp)
 800452c:	10000526 	beq	r2,zero,8004544 <altera_avalon_jtag_uart_irq+0x1a8>
 8004530:	e0bffb17 	ldw	r2,-20(fp)
 8004534:	10c00d17 	ldw	r3,52(r2)
 8004538:	e0bffb17 	ldw	r2,-20(fp)
 800453c:	10800c17 	ldw	r2,48(r2)
 8004540:	18bfe51e 	bne	r3,r2,80044d8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8004544:	e0bffa17 	ldw	r2,-24(fp)
 8004548:	103f9d26 	beq	r2,zero,80043c0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800454c:	e0bffb17 	ldw	r2,-20(fp)
 8004550:	10c00817 	ldw	r3,32(r2)
 8004554:	00bfff44 	movi	r2,-3
 8004558:	1886703a 	and	r3,r3,r2
 800455c:	e0bffb17 	ldw	r2,-20(fp)
 8004560:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004564:	e0bffb17 	ldw	r2,-20(fp)
 8004568:	10800017 	ldw	r2,0(r2)
 800456c:	10800104 	addi	r2,r2,4
 8004570:	1007883a 	mov	r3,r2
 8004574:	e0bffb17 	ldw	r2,-20(fp)
 8004578:	10800817 	ldw	r2,32(r2)
 800457c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8004580:	e0bffc17 	ldw	r2,-16(fp)
 8004584:	10800104 	addi	r2,r2,4
 8004588:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800458c:	003f8c06 	br	80043c0 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8004590:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8004594:	0001883a 	nop
 8004598:	e037883a 	mov	sp,fp
 800459c:	df000017 	ldw	fp,0(sp)
 80045a0:	dec00104 	addi	sp,sp,4
 80045a4:	f800283a 	ret

080045a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80045a8:	defff804 	addi	sp,sp,-32
 80045ac:	df000715 	stw	fp,28(sp)
 80045b0:	df000704 	addi	fp,sp,28
 80045b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80045b8:	e0bffb17 	ldw	r2,-20(fp)
 80045bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80045c0:	e0bff917 	ldw	r2,-28(fp)
 80045c4:	10800017 	ldw	r2,0(r2)
 80045c8:	10800104 	addi	r2,r2,4
 80045cc:	10800037 	ldwio	r2,0(r2)
 80045d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80045d4:	e0bffa17 	ldw	r2,-24(fp)
 80045d8:	1081000c 	andi	r2,r2,1024
 80045dc:	10000b26 	beq	r2,zero,800460c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80045e0:	e0bff917 	ldw	r2,-28(fp)
 80045e4:	10800017 	ldw	r2,0(r2)
 80045e8:	10800104 	addi	r2,r2,4
 80045ec:	1007883a 	mov	r3,r2
 80045f0:	e0bff917 	ldw	r2,-28(fp)
 80045f4:	10800817 	ldw	r2,32(r2)
 80045f8:	10810014 	ori	r2,r2,1024
 80045fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8004600:	e0bff917 	ldw	r2,-28(fp)
 8004604:	10000915 	stw	zero,36(r2)
 8004608:	00000a06 	br	8004634 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800460c:	e0bff917 	ldw	r2,-28(fp)
 8004610:	10c00917 	ldw	r3,36(r2)
 8004614:	00a00034 	movhi	r2,32768
 8004618:	10bfff04 	addi	r2,r2,-4
 800461c:	10c00536 	bltu	r2,r3,8004634 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8004620:	e0bff917 	ldw	r2,-28(fp)
 8004624:	10800917 	ldw	r2,36(r2)
 8004628:	10c00044 	addi	r3,r2,1
 800462c:	e0bff917 	ldw	r2,-28(fp)
 8004630:	10c00915 	stw	r3,36(r2)
 8004634:	d0a6ad17 	ldw	r2,-25932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8004638:	e037883a 	mov	sp,fp
 800463c:	df000017 	ldw	fp,0(sp)
 8004640:	dec00104 	addi	sp,sp,4
 8004644:	f800283a 	ret

08004648 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8004648:	defffd04 	addi	sp,sp,-12
 800464c:	df000215 	stw	fp,8(sp)
 8004650:	df000204 	addi	fp,sp,8
 8004654:	e13ffe15 	stw	r4,-8(fp)
 8004658:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800465c:	00000506 	br	8004674 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8004660:	e0bfff17 	ldw	r2,-4(fp)
 8004664:	1090000c 	andi	r2,r2,16384
 8004668:	10000226 	beq	r2,zero,8004674 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800466c:	00bffd44 	movi	r2,-11
 8004670:	00000b06 	br	80046a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004674:	e0bffe17 	ldw	r2,-8(fp)
 8004678:	10c00d17 	ldw	r3,52(r2)
 800467c:	e0bffe17 	ldw	r2,-8(fp)
 8004680:	10800c17 	ldw	r2,48(r2)
 8004684:	18800526 	beq	r3,r2,800469c <altera_avalon_jtag_uart_close+0x54>
 8004688:	e0bffe17 	ldw	r2,-8(fp)
 800468c:	10c00917 	ldw	r3,36(r2)
 8004690:	e0bffe17 	ldw	r2,-8(fp)
 8004694:	10800117 	ldw	r2,4(r2)
 8004698:	18bff136 	bltu	r3,r2,8004660 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800469c:	0005883a 	mov	r2,zero
}
 80046a0:	e037883a 	mov	sp,fp
 80046a4:	df000017 	ldw	fp,0(sp)
 80046a8:	dec00104 	addi	sp,sp,4
 80046ac:	f800283a 	ret

080046b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80046b0:	defffa04 	addi	sp,sp,-24
 80046b4:	df000515 	stw	fp,20(sp)
 80046b8:	df000504 	addi	fp,sp,20
 80046bc:	e13ffd15 	stw	r4,-12(fp)
 80046c0:	e17ffe15 	stw	r5,-8(fp)
 80046c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80046c8:	00bff9c4 	movi	r2,-25
 80046cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80046d0:	e0bffe17 	ldw	r2,-8(fp)
 80046d4:	10da8060 	cmpeqi	r3,r2,27137
 80046d8:	1800031e 	bne	r3,zero,80046e8 <altera_avalon_jtag_uart_ioctl+0x38>
 80046dc:	109a80a0 	cmpeqi	r2,r2,27138
 80046e0:	1000181e 	bne	r2,zero,8004744 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80046e4:	00002906 	br	800478c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80046e8:	e0bffd17 	ldw	r2,-12(fp)
 80046ec:	10c00117 	ldw	r3,4(r2)
 80046f0:	00a00034 	movhi	r2,32768
 80046f4:	10bfffc4 	addi	r2,r2,-1
 80046f8:	18802126 	beq	r3,r2,8004780 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80046fc:	e0bfff17 	ldw	r2,-4(fp)
 8004700:	10800017 	ldw	r2,0(r2)
 8004704:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8004708:	e0bffc17 	ldw	r2,-16(fp)
 800470c:	10800090 	cmplti	r2,r2,2
 8004710:	1000061e 	bne	r2,zero,800472c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004714:	e0fffc17 	ldw	r3,-16(fp)
 8004718:	00a00034 	movhi	r2,32768
 800471c:	10bfffc4 	addi	r2,r2,-1
 8004720:	18800226 	beq	r3,r2,800472c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004724:	e0bffc17 	ldw	r2,-16(fp)
 8004728:	00000206 	br	8004734 <altera_avalon_jtag_uart_ioctl+0x84>
 800472c:	00a00034 	movhi	r2,32768
 8004730:	10bfff84 	addi	r2,r2,-2
 8004734:	e0fffd17 	ldw	r3,-12(fp)
 8004738:	18800115 	stw	r2,4(r3)
      rc = 0;
 800473c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8004740:	00000f06 	br	8004780 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8004744:	e0bffd17 	ldw	r2,-12(fp)
 8004748:	10c00117 	ldw	r3,4(r2)
 800474c:	00a00034 	movhi	r2,32768
 8004750:	10bfffc4 	addi	r2,r2,-1
 8004754:	18800c26 	beq	r3,r2,8004788 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004758:	e0bffd17 	ldw	r2,-12(fp)
 800475c:	10c00917 	ldw	r3,36(r2)
 8004760:	e0bffd17 	ldw	r2,-12(fp)
 8004764:	10800117 	ldw	r2,4(r2)
 8004768:	1885803a 	cmpltu	r2,r3,r2
 800476c:	10c03fcc 	andi	r3,r2,255
 8004770:	e0bfff17 	ldw	r2,-4(fp)
 8004774:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8004778:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800477c:	00000206 	br	8004788 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8004780:	0001883a 	nop
 8004784:	00000106 	br	800478c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8004788:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800478c:	e0bffb17 	ldw	r2,-20(fp)
}
 8004790:	e037883a 	mov	sp,fp
 8004794:	df000017 	ldw	fp,0(sp)
 8004798:	dec00104 	addi	sp,sp,4
 800479c:	f800283a 	ret

080047a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80047a0:	defff304 	addi	sp,sp,-52
 80047a4:	dfc00c15 	stw	ra,48(sp)
 80047a8:	df000b15 	stw	fp,44(sp)
 80047ac:	df000b04 	addi	fp,sp,44
 80047b0:	e13ffc15 	stw	r4,-16(fp)
 80047b4:	e17ffd15 	stw	r5,-12(fp)
 80047b8:	e1bffe15 	stw	r6,-8(fp)
 80047bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80047c0:	e0bffd17 	ldw	r2,-12(fp)
 80047c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80047c8:	00004706 	br	80048e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80047cc:	e0bffc17 	ldw	r2,-16(fp)
 80047d0:	10800a17 	ldw	r2,40(r2)
 80047d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80047d8:	e0bffc17 	ldw	r2,-16(fp)
 80047dc:	10800b17 	ldw	r2,44(r2)
 80047e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80047e4:	e0fff717 	ldw	r3,-36(fp)
 80047e8:	e0bff817 	ldw	r2,-32(fp)
 80047ec:	18800536 	bltu	r3,r2,8004804 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80047f0:	e0fff717 	ldw	r3,-36(fp)
 80047f4:	e0bff817 	ldw	r2,-32(fp)
 80047f8:	1885c83a 	sub	r2,r3,r2
 80047fc:	e0bff615 	stw	r2,-40(fp)
 8004800:	00000406 	br	8004814 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004804:	00c20004 	movi	r3,2048
 8004808:	e0bff817 	ldw	r2,-32(fp)
 800480c:	1885c83a 	sub	r2,r3,r2
 8004810:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004814:	e0bff617 	ldw	r2,-40(fp)
 8004818:	10001e26 	beq	r2,zero,8004894 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800481c:	e0fffe17 	ldw	r3,-8(fp)
 8004820:	e0bff617 	ldw	r2,-40(fp)
 8004824:	1880022e 	bgeu	r3,r2,8004830 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8004828:	e0bffe17 	ldw	r2,-8(fp)
 800482c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004830:	e0bffc17 	ldw	r2,-16(fp)
 8004834:	10c00e04 	addi	r3,r2,56
 8004838:	e0bff817 	ldw	r2,-32(fp)
 800483c:	1885883a 	add	r2,r3,r2
 8004840:	e1bff617 	ldw	r6,-40(fp)
 8004844:	100b883a 	mov	r5,r2
 8004848:	e13ff517 	ldw	r4,-44(fp)
 800484c:	8006b500 	call	8006b50 <memcpy>
      ptr   += n;
 8004850:	e0fff517 	ldw	r3,-44(fp)
 8004854:	e0bff617 	ldw	r2,-40(fp)
 8004858:	1885883a 	add	r2,r3,r2
 800485c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8004860:	e0fffe17 	ldw	r3,-8(fp)
 8004864:	e0bff617 	ldw	r2,-40(fp)
 8004868:	1885c83a 	sub	r2,r3,r2
 800486c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004870:	e0fff817 	ldw	r3,-32(fp)
 8004874:	e0bff617 	ldw	r2,-40(fp)
 8004878:	1885883a 	add	r2,r3,r2
 800487c:	10c1ffcc 	andi	r3,r2,2047
 8004880:	e0bffc17 	ldw	r2,-16(fp)
 8004884:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8004888:	e0bffe17 	ldw	r2,-8(fp)
 800488c:	00bfcf16 	blt	zero,r2,80047cc <altera_avalon_jtag_uart_read+0x2c>
 8004890:	00000106 	br	8004898 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8004894:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8004898:	e0fff517 	ldw	r3,-44(fp)
 800489c:	e0bffd17 	ldw	r2,-12(fp)
 80048a0:	1880141e 	bne	r3,r2,80048f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80048a4:	e0bfff17 	ldw	r2,-4(fp)
 80048a8:	1090000c 	andi	r2,r2,16384
 80048ac:	1000131e 	bne	r2,zero,80048fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80048b0:	0001883a 	nop
 80048b4:	e0bffc17 	ldw	r2,-16(fp)
 80048b8:	10c00a17 	ldw	r3,40(r2)
 80048bc:	e0bff717 	ldw	r2,-36(fp)
 80048c0:	1880051e 	bne	r3,r2,80048d8 <altera_avalon_jtag_uart_read+0x138>
 80048c4:	e0bffc17 	ldw	r2,-16(fp)
 80048c8:	10c00917 	ldw	r3,36(r2)
 80048cc:	e0bffc17 	ldw	r2,-16(fp)
 80048d0:	10800117 	ldw	r2,4(r2)
 80048d4:	18bff736 	bltu	r3,r2,80048b4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80048d8:	e0bffc17 	ldw	r2,-16(fp)
 80048dc:	10c00a17 	ldw	r3,40(r2)
 80048e0:	e0bff717 	ldw	r2,-36(fp)
 80048e4:	18800726 	beq	r3,r2,8004904 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80048e8:	e0bffe17 	ldw	r2,-8(fp)
 80048ec:	00bfb716 	blt	zero,r2,80047cc <altera_avalon_jtag_uart_read+0x2c>
 80048f0:	00000506 	br	8004908 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80048f4:	0001883a 	nop
 80048f8:	00000306 	br	8004908 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80048fc:	0001883a 	nop
 8004900:	00000106 	br	8004908 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8004904:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004908:	e0fff517 	ldw	r3,-44(fp)
 800490c:	e0bffd17 	ldw	r2,-12(fp)
 8004910:	18801826 	beq	r3,r2,8004974 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004914:	0005303a 	rdctl	r2,status
 8004918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800491c:	e0fffb17 	ldw	r3,-20(fp)
 8004920:	00bfff84 	movi	r2,-2
 8004924:	1884703a 	and	r2,r3,r2
 8004928:	1001703a 	wrctl	status,r2
  
  return context;
 800492c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004930:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004934:	e0bffc17 	ldw	r2,-16(fp)
 8004938:	10800817 	ldw	r2,32(r2)
 800493c:	10c00054 	ori	r3,r2,1
 8004940:	e0bffc17 	ldw	r2,-16(fp)
 8004944:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004948:	e0bffc17 	ldw	r2,-16(fp)
 800494c:	10800017 	ldw	r2,0(r2)
 8004950:	10800104 	addi	r2,r2,4
 8004954:	1007883a 	mov	r3,r2
 8004958:	e0bffc17 	ldw	r2,-16(fp)
 800495c:	10800817 	ldw	r2,32(r2)
 8004960:	18800035 	stwio	r2,0(r3)
 8004964:	e0bffa17 	ldw	r2,-24(fp)
 8004968:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800496c:	e0bff917 	ldw	r2,-28(fp)
 8004970:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004974:	e0fff517 	ldw	r3,-44(fp)
 8004978:	e0bffd17 	ldw	r2,-12(fp)
 800497c:	18800426 	beq	r3,r2,8004990 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8004980:	e0fff517 	ldw	r3,-44(fp)
 8004984:	e0bffd17 	ldw	r2,-12(fp)
 8004988:	1885c83a 	sub	r2,r3,r2
 800498c:	00000606 	br	80049a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8004990:	e0bfff17 	ldw	r2,-4(fp)
 8004994:	1090000c 	andi	r2,r2,16384
 8004998:	10000226 	beq	r2,zero,80049a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800499c:	00bffd44 	movi	r2,-11
 80049a0:	00000106 	br	80049a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80049a4:	00bffec4 	movi	r2,-5
}
 80049a8:	e037883a 	mov	sp,fp
 80049ac:	dfc00117 	ldw	ra,4(sp)
 80049b0:	df000017 	ldw	fp,0(sp)
 80049b4:	dec00204 	addi	sp,sp,8
 80049b8:	f800283a 	ret

080049bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80049bc:	defff304 	addi	sp,sp,-52
 80049c0:	dfc00c15 	stw	ra,48(sp)
 80049c4:	df000b15 	stw	fp,44(sp)
 80049c8:	df000b04 	addi	fp,sp,44
 80049cc:	e13ffc15 	stw	r4,-16(fp)
 80049d0:	e17ffd15 	stw	r5,-12(fp)
 80049d4:	e1bffe15 	stw	r6,-8(fp)
 80049d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80049dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80049e0:	e0bffd17 	ldw	r2,-12(fp)
 80049e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80049e8:	00003706 	br	8004ac8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80049ec:	e0bffc17 	ldw	r2,-16(fp)
 80049f0:	10800c17 	ldw	r2,48(r2)
 80049f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80049f8:	e0bffc17 	ldw	r2,-16(fp)
 80049fc:	10800d17 	ldw	r2,52(r2)
 8004a00:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004a04:	e0fff917 	ldw	r3,-28(fp)
 8004a08:	e0bff517 	ldw	r2,-44(fp)
 8004a0c:	1880062e 	bgeu	r3,r2,8004a28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004a10:	e0fff517 	ldw	r3,-44(fp)
 8004a14:	e0bff917 	ldw	r2,-28(fp)
 8004a18:	1885c83a 	sub	r2,r3,r2
 8004a1c:	10bfffc4 	addi	r2,r2,-1
 8004a20:	e0bff615 	stw	r2,-40(fp)
 8004a24:	00000b06 	br	8004a54 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004a28:	e0bff517 	ldw	r2,-44(fp)
 8004a2c:	10000526 	beq	r2,zero,8004a44 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004a30:	00c20004 	movi	r3,2048
 8004a34:	e0bff917 	ldw	r2,-28(fp)
 8004a38:	1885c83a 	sub	r2,r3,r2
 8004a3c:	e0bff615 	stw	r2,-40(fp)
 8004a40:	00000406 	br	8004a54 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004a44:	00c1ffc4 	movi	r3,2047
 8004a48:	e0bff917 	ldw	r2,-28(fp)
 8004a4c:	1885c83a 	sub	r2,r3,r2
 8004a50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004a54:	e0bff617 	ldw	r2,-40(fp)
 8004a58:	10001e26 	beq	r2,zero,8004ad4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8004a5c:	e0fffe17 	ldw	r3,-8(fp)
 8004a60:	e0bff617 	ldw	r2,-40(fp)
 8004a64:	1880022e 	bgeu	r3,r2,8004a70 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8004a68:	e0bffe17 	ldw	r2,-8(fp)
 8004a6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004a70:	e0bffc17 	ldw	r2,-16(fp)
 8004a74:	10c20e04 	addi	r3,r2,2104
 8004a78:	e0bff917 	ldw	r2,-28(fp)
 8004a7c:	1885883a 	add	r2,r3,r2
 8004a80:	e1bff617 	ldw	r6,-40(fp)
 8004a84:	e17ffd17 	ldw	r5,-12(fp)
 8004a88:	1009883a 	mov	r4,r2
 8004a8c:	8006b500 	call	8006b50 <memcpy>
      ptr   += n;
 8004a90:	e0fffd17 	ldw	r3,-12(fp)
 8004a94:	e0bff617 	ldw	r2,-40(fp)
 8004a98:	1885883a 	add	r2,r3,r2
 8004a9c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8004aa0:	e0fffe17 	ldw	r3,-8(fp)
 8004aa4:	e0bff617 	ldw	r2,-40(fp)
 8004aa8:	1885c83a 	sub	r2,r3,r2
 8004aac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004ab0:	e0fff917 	ldw	r3,-28(fp)
 8004ab4:	e0bff617 	ldw	r2,-40(fp)
 8004ab8:	1885883a 	add	r2,r3,r2
 8004abc:	10c1ffcc 	andi	r3,r2,2047
 8004ac0:	e0bffc17 	ldw	r2,-16(fp)
 8004ac4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004ac8:	e0bffe17 	ldw	r2,-8(fp)
 8004acc:	00bfc716 	blt	zero,r2,80049ec <altera_avalon_jtag_uart_write+0x30>
 8004ad0:	00000106 	br	8004ad8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8004ad4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004ad8:	0005303a 	rdctl	r2,status
 8004adc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004ae0:	e0fffb17 	ldw	r3,-20(fp)
 8004ae4:	00bfff84 	movi	r2,-2
 8004ae8:	1884703a 	and	r2,r3,r2
 8004aec:	1001703a 	wrctl	status,r2
  
  return context;
 8004af0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004af4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004af8:	e0bffc17 	ldw	r2,-16(fp)
 8004afc:	10800817 	ldw	r2,32(r2)
 8004b00:	10c00094 	ori	r3,r2,2
 8004b04:	e0bffc17 	ldw	r2,-16(fp)
 8004b08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004b0c:	e0bffc17 	ldw	r2,-16(fp)
 8004b10:	10800017 	ldw	r2,0(r2)
 8004b14:	10800104 	addi	r2,r2,4
 8004b18:	1007883a 	mov	r3,r2
 8004b1c:	e0bffc17 	ldw	r2,-16(fp)
 8004b20:	10800817 	ldw	r2,32(r2)
 8004b24:	18800035 	stwio	r2,0(r3)
 8004b28:	e0bffa17 	ldw	r2,-24(fp)
 8004b2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004b30:	e0bff817 	ldw	r2,-32(fp)
 8004b34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004b38:	e0bffe17 	ldw	r2,-8(fp)
 8004b3c:	0080100e 	bge	zero,r2,8004b80 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8004b40:	e0bfff17 	ldw	r2,-4(fp)
 8004b44:	1090000c 	andi	r2,r2,16384
 8004b48:	1000101e 	bne	r2,zero,8004b8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004b4c:	0001883a 	nop
 8004b50:	e0bffc17 	ldw	r2,-16(fp)
 8004b54:	10c00d17 	ldw	r3,52(r2)
 8004b58:	e0bff517 	ldw	r2,-44(fp)
 8004b5c:	1880051e 	bne	r3,r2,8004b74 <altera_avalon_jtag_uart_write+0x1b8>
 8004b60:	e0bffc17 	ldw	r2,-16(fp)
 8004b64:	10c00917 	ldw	r3,36(r2)
 8004b68:	e0bffc17 	ldw	r2,-16(fp)
 8004b6c:	10800117 	ldw	r2,4(r2)
 8004b70:	18bff736 	bltu	r3,r2,8004b50 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8004b74:	e0bffc17 	ldw	r2,-16(fp)
 8004b78:	10800917 	ldw	r2,36(r2)
 8004b7c:	1000051e 	bne	r2,zero,8004b94 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8004b80:	e0bffe17 	ldw	r2,-8(fp)
 8004b84:	00bfd016 	blt	zero,r2,8004ac8 <altera_avalon_jtag_uart_write+0x10c>
 8004b88:	00000306 	br	8004b98 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8004b8c:	0001883a 	nop
 8004b90:	00000106 	br	8004b98 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8004b94:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8004b98:	e0fffd17 	ldw	r3,-12(fp)
 8004b9c:	e0bff717 	ldw	r2,-36(fp)
 8004ba0:	18800426 	beq	r3,r2,8004bb4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8004ba4:	e0fffd17 	ldw	r3,-12(fp)
 8004ba8:	e0bff717 	ldw	r2,-36(fp)
 8004bac:	1885c83a 	sub	r2,r3,r2
 8004bb0:	00000606 	br	8004bcc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8004bb4:	e0bfff17 	ldw	r2,-4(fp)
 8004bb8:	1090000c 	andi	r2,r2,16384
 8004bbc:	10000226 	beq	r2,zero,8004bc8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8004bc0:	00bffd44 	movi	r2,-11
 8004bc4:	00000106 	br	8004bcc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8004bc8:	00bffec4 	movi	r2,-5
}
 8004bcc:	e037883a 	mov	sp,fp
 8004bd0:	dfc00117 	ldw	ra,4(sp)
 8004bd4:	df000017 	ldw	fp,0(sp)
 8004bd8:	dec00204 	addi	sp,sp,8
 8004bdc:	f800283a 	ret

08004be0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8004be0:	defff504 	addi	sp,sp,-44
 8004be4:	df000a15 	stw	fp,40(sp)
 8004be8:	df000a04 	addi	fp,sp,40
 8004bec:	e13ffc15 	stw	r4,-16(fp)
 8004bf0:	e17ffd15 	stw	r5,-12(fp)
 8004bf4:	e1bffe15 	stw	r6,-8(fp)
 8004bf8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8004bfc:	e03ff615 	stw	zero,-40(fp)
 8004c00:	d0a6ad17 	ldw	r2,-25932(gp)
  
  if (alt_ticks_per_second ())
 8004c04:	10003c26 	beq	r2,zero,8004cf8 <alt_alarm_start+0x118>
  {
    if (alarm)
 8004c08:	e0bffc17 	ldw	r2,-16(fp)
 8004c0c:	10003826 	beq	r2,zero,8004cf0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8004c10:	e0bffc17 	ldw	r2,-16(fp)
 8004c14:	e0fffe17 	ldw	r3,-8(fp)
 8004c18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8004c1c:	e0bffc17 	ldw	r2,-16(fp)
 8004c20:	e0ffff17 	ldw	r3,-4(fp)
 8004c24:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c28:	0005303a 	rdctl	r2,status
 8004c2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c30:	e0fff917 	ldw	r3,-28(fp)
 8004c34:	00bfff84 	movi	r2,-2
 8004c38:	1884703a 	and	r2,r3,r2
 8004c3c:	1001703a 	wrctl	status,r2
  
  return context;
 8004c40:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8004c44:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004c48:	d0a6ae17 	ldw	r2,-25928(gp)
      
      current_nticks = alt_nticks();
 8004c4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8004c50:	e0fffd17 	ldw	r3,-12(fp)
 8004c54:	e0bff617 	ldw	r2,-40(fp)
 8004c58:	1885883a 	add	r2,r3,r2
 8004c5c:	10c00044 	addi	r3,r2,1
 8004c60:	e0bffc17 	ldw	r2,-16(fp)
 8004c64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8004c68:	e0bffc17 	ldw	r2,-16(fp)
 8004c6c:	10c00217 	ldw	r3,8(r2)
 8004c70:	e0bff617 	ldw	r2,-40(fp)
 8004c74:	1880042e 	bgeu	r3,r2,8004c88 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8004c78:	e0bffc17 	ldw	r2,-16(fp)
 8004c7c:	00c00044 	movi	r3,1
 8004c80:	10c00405 	stb	r3,16(r2)
 8004c84:	00000206 	br	8004c90 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8004c88:	e0bffc17 	ldw	r2,-16(fp)
 8004c8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8004c90:	e0bffc17 	ldw	r2,-16(fp)
 8004c94:	d0e00704 	addi	r3,gp,-32740
 8004c98:	e0fffa15 	stw	r3,-24(fp)
 8004c9c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004ca0:	e0bffb17 	ldw	r2,-20(fp)
 8004ca4:	e0fffa17 	ldw	r3,-24(fp)
 8004ca8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004cac:	e0bffa17 	ldw	r2,-24(fp)
 8004cb0:	10c00017 	ldw	r3,0(r2)
 8004cb4:	e0bffb17 	ldw	r2,-20(fp)
 8004cb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004cbc:	e0bffa17 	ldw	r2,-24(fp)
 8004cc0:	10800017 	ldw	r2,0(r2)
 8004cc4:	e0fffb17 	ldw	r3,-20(fp)
 8004cc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004ccc:	e0bffa17 	ldw	r2,-24(fp)
 8004cd0:	e0fffb17 	ldw	r3,-20(fp)
 8004cd4:	10c00015 	stw	r3,0(r2)
 8004cd8:	e0bff817 	ldw	r2,-32(fp)
 8004cdc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004ce0:	e0bff717 	ldw	r2,-36(fp)
 8004ce4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8004ce8:	0005883a 	mov	r2,zero
 8004cec:	00000306 	br	8004cfc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8004cf0:	00bffa84 	movi	r2,-22
 8004cf4:	00000106 	br	8004cfc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8004cf8:	00bfde84 	movi	r2,-134
  }
}
 8004cfc:	e037883a 	mov	sp,fp
 8004d00:	df000017 	ldw	fp,0(sp)
 8004d04:	dec00104 	addi	sp,sp,4
 8004d08:	f800283a 	ret

08004d0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004d0c:	defffe04 	addi	sp,sp,-8
 8004d10:	dfc00115 	stw	ra,4(sp)
 8004d14:	df000015 	stw	fp,0(sp)
 8004d18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d1c:	d0a00517 	ldw	r2,-32748(gp)
 8004d20:	10000326 	beq	r2,zero,8004d30 <alt_get_errno+0x24>
 8004d24:	d0a00517 	ldw	r2,-32748(gp)
 8004d28:	103ee83a 	callr	r2
 8004d2c:	00000106 	br	8004d34 <alt_get_errno+0x28>
 8004d30:	d0a6b004 	addi	r2,gp,-25920
}
 8004d34:	e037883a 	mov	sp,fp
 8004d38:	dfc00117 	ldw	ra,4(sp)
 8004d3c:	df000017 	ldw	fp,0(sp)
 8004d40:	dec00204 	addi	sp,sp,8
 8004d44:	f800283a 	ret

08004d48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8004d48:	defffb04 	addi	sp,sp,-20
 8004d4c:	dfc00415 	stw	ra,16(sp)
 8004d50:	df000315 	stw	fp,12(sp)
 8004d54:	df000304 	addi	fp,sp,12
 8004d58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8004d5c:	e0bfff17 	ldw	r2,-4(fp)
 8004d60:	10000616 	blt	r2,zero,8004d7c <close+0x34>
 8004d64:	e0bfff17 	ldw	r2,-4(fp)
 8004d68:	10c00324 	muli	r3,r2,12
 8004d6c:	00820074 	movhi	r2,2049
 8004d70:	10a8f204 	addi	r2,r2,-23608
 8004d74:	1885883a 	add	r2,r3,r2
 8004d78:	00000106 	br	8004d80 <close+0x38>
 8004d7c:	0005883a 	mov	r2,zero
 8004d80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8004d84:	e0bffd17 	ldw	r2,-12(fp)
 8004d88:	10001926 	beq	r2,zero,8004df0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8004d8c:	e0bffd17 	ldw	r2,-12(fp)
 8004d90:	10800017 	ldw	r2,0(r2)
 8004d94:	10800417 	ldw	r2,16(r2)
 8004d98:	10000626 	beq	r2,zero,8004db4 <close+0x6c>
 8004d9c:	e0bffd17 	ldw	r2,-12(fp)
 8004da0:	10800017 	ldw	r2,0(r2)
 8004da4:	10800417 	ldw	r2,16(r2)
 8004da8:	e13ffd17 	ldw	r4,-12(fp)
 8004dac:	103ee83a 	callr	r2
 8004db0:	00000106 	br	8004db8 <close+0x70>
 8004db4:	0005883a 	mov	r2,zero
 8004db8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8004dbc:	e13fff17 	ldw	r4,-4(fp)
 8004dc0:	80056940 	call	8005694 <alt_release_fd>
    if (rval < 0)
 8004dc4:	e0bffe17 	ldw	r2,-8(fp)
 8004dc8:	1000070e 	bge	r2,zero,8004de8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8004dcc:	8004d0c0 	call	8004d0c <alt_get_errno>
 8004dd0:	1007883a 	mov	r3,r2
 8004dd4:	e0bffe17 	ldw	r2,-8(fp)
 8004dd8:	0085c83a 	sub	r2,zero,r2
 8004ddc:	18800015 	stw	r2,0(r3)
      return -1;
 8004de0:	00bfffc4 	movi	r2,-1
 8004de4:	00000706 	br	8004e04 <close+0xbc>
    }
    return 0;
 8004de8:	0005883a 	mov	r2,zero
 8004dec:	00000506 	br	8004e04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8004df0:	8004d0c0 	call	8004d0c <alt_get_errno>
 8004df4:	1007883a 	mov	r3,r2
 8004df8:	00801444 	movi	r2,81
 8004dfc:	18800015 	stw	r2,0(r3)
    return -1;
 8004e00:	00bfffc4 	movi	r2,-1
  }
}
 8004e04:	e037883a 	mov	sp,fp
 8004e08:	dfc00117 	ldw	ra,4(sp)
 8004e0c:	df000017 	ldw	fp,0(sp)
 8004e10:	dec00204 	addi	sp,sp,8
 8004e14:	f800283a 	ret

08004e18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8004e18:	defffe04 	addi	sp,sp,-8
 8004e1c:	df000115 	stw	fp,4(sp)
 8004e20:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8004e24:	e03fff15 	stw	zero,-4(fp)
 8004e28:	00000506 	br	8004e40 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8004e2c:	e0bfff17 	ldw	r2,-4(fp)
 8004e30:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8004e34:	e0bfff17 	ldw	r2,-4(fp)
 8004e38:	10800804 	addi	r2,r2,32
 8004e3c:	e0bfff15 	stw	r2,-4(fp)
 8004e40:	e0bfff17 	ldw	r2,-4(fp)
 8004e44:	10820030 	cmpltui	r2,r2,2048
 8004e48:	103ff81e 	bne	r2,zero,8004e2c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004e4c:	0001883a 	nop
 8004e50:	e037883a 	mov	sp,fp
 8004e54:	df000017 	ldw	fp,0(sp)
 8004e58:	dec00104 	addi	sp,sp,4
 8004e5c:	f800283a 	ret

08004e60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8004e60:	defffc04 	addi	sp,sp,-16
 8004e64:	df000315 	stw	fp,12(sp)
 8004e68:	df000304 	addi	fp,sp,12
 8004e6c:	e13ffd15 	stw	r4,-12(fp)
 8004e70:	e17ffe15 	stw	r5,-8(fp)
 8004e74:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8004e78:	e0bfff17 	ldw	r2,-4(fp)
}
 8004e7c:	e037883a 	mov	sp,fp
 8004e80:	df000017 	ldw	fp,0(sp)
 8004e84:	dec00104 	addi	sp,sp,4
 8004e88:	f800283a 	ret

08004e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004e8c:	defffe04 	addi	sp,sp,-8
 8004e90:	dfc00115 	stw	ra,4(sp)
 8004e94:	df000015 	stw	fp,0(sp)
 8004e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004e9c:	d0a00517 	ldw	r2,-32748(gp)
 8004ea0:	10000326 	beq	r2,zero,8004eb0 <alt_get_errno+0x24>
 8004ea4:	d0a00517 	ldw	r2,-32748(gp)
 8004ea8:	103ee83a 	callr	r2
 8004eac:	00000106 	br	8004eb4 <alt_get_errno+0x28>
 8004eb0:	d0a6b004 	addi	r2,gp,-25920
}
 8004eb4:	e037883a 	mov	sp,fp
 8004eb8:	dfc00117 	ldw	ra,4(sp)
 8004ebc:	df000017 	ldw	fp,0(sp)
 8004ec0:	dec00204 	addi	sp,sp,8
 8004ec4:	f800283a 	ret

08004ec8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004ec8:	defffa04 	addi	sp,sp,-24
 8004ecc:	dfc00515 	stw	ra,20(sp)
 8004ed0:	df000415 	stw	fp,16(sp)
 8004ed4:	df000404 	addi	fp,sp,16
 8004ed8:	e13ffe15 	stw	r4,-8(fp)
 8004edc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8004ee0:	e0bffe17 	ldw	r2,-8(fp)
 8004ee4:	10000326 	beq	r2,zero,8004ef4 <alt_dev_llist_insert+0x2c>
 8004ee8:	e0bffe17 	ldw	r2,-8(fp)
 8004eec:	10800217 	ldw	r2,8(r2)
 8004ef0:	1000061e 	bne	r2,zero,8004f0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8004ef4:	8004e8c0 	call	8004e8c <alt_get_errno>
 8004ef8:	1007883a 	mov	r3,r2
 8004efc:	00800584 	movi	r2,22
 8004f00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8004f04:	00bffa84 	movi	r2,-22
 8004f08:	00001306 	br	8004f58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8004f0c:	e0bffe17 	ldw	r2,-8(fp)
 8004f10:	e0ffff17 	ldw	r3,-4(fp)
 8004f14:	e0fffc15 	stw	r3,-16(fp)
 8004f18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004f1c:	e0bffd17 	ldw	r2,-12(fp)
 8004f20:	e0fffc17 	ldw	r3,-16(fp)
 8004f24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004f28:	e0bffc17 	ldw	r2,-16(fp)
 8004f2c:	10c00017 	ldw	r3,0(r2)
 8004f30:	e0bffd17 	ldw	r2,-12(fp)
 8004f34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004f38:	e0bffc17 	ldw	r2,-16(fp)
 8004f3c:	10800017 	ldw	r2,0(r2)
 8004f40:	e0fffd17 	ldw	r3,-12(fp)
 8004f44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004f48:	e0bffc17 	ldw	r2,-16(fp)
 8004f4c:	e0fffd17 	ldw	r3,-12(fp)
 8004f50:	10c00015 	stw	r3,0(r2)

  return 0;  
 8004f54:	0005883a 	mov	r2,zero
}
 8004f58:	e037883a 	mov	sp,fp
 8004f5c:	dfc00117 	ldw	ra,4(sp)
 8004f60:	df000017 	ldw	fp,0(sp)
 8004f64:	dec00204 	addi	sp,sp,8
 8004f68:	f800283a 	ret

08004f6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004f6c:	defffd04 	addi	sp,sp,-12
 8004f70:	dfc00215 	stw	ra,8(sp)
 8004f74:	df000115 	stw	fp,4(sp)
 8004f78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004f7c:	00820074 	movhi	r2,2049
 8004f80:	10a47b04 	addi	r2,r2,-28180
 8004f84:	e0bfff15 	stw	r2,-4(fp)
 8004f88:	00000606 	br	8004fa4 <_do_ctors+0x38>
        (*ctor) (); 
 8004f8c:	e0bfff17 	ldw	r2,-4(fp)
 8004f90:	10800017 	ldw	r2,0(r2)
 8004f94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004f98:	e0bfff17 	ldw	r2,-4(fp)
 8004f9c:	10bfff04 	addi	r2,r2,-4
 8004fa0:	e0bfff15 	stw	r2,-4(fp)
 8004fa4:	e0ffff17 	ldw	r3,-4(fp)
 8004fa8:	00820074 	movhi	r2,2049
 8004fac:	10a47c04 	addi	r2,r2,-28176
 8004fb0:	18bff62e 	bgeu	r3,r2,8004f8c <_do_ctors+0x20>
        (*ctor) (); 
}
 8004fb4:	0001883a 	nop
 8004fb8:	e037883a 	mov	sp,fp
 8004fbc:	dfc00117 	ldw	ra,4(sp)
 8004fc0:	df000017 	ldw	fp,0(sp)
 8004fc4:	dec00204 	addi	sp,sp,8
 8004fc8:	f800283a 	ret

08004fcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004fcc:	defffd04 	addi	sp,sp,-12
 8004fd0:	dfc00215 	stw	ra,8(sp)
 8004fd4:	df000115 	stw	fp,4(sp)
 8004fd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004fdc:	00820074 	movhi	r2,2049
 8004fe0:	10a47b04 	addi	r2,r2,-28180
 8004fe4:	e0bfff15 	stw	r2,-4(fp)
 8004fe8:	00000606 	br	8005004 <_do_dtors+0x38>
        (*dtor) (); 
 8004fec:	e0bfff17 	ldw	r2,-4(fp)
 8004ff0:	10800017 	ldw	r2,0(r2)
 8004ff4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004ff8:	e0bfff17 	ldw	r2,-4(fp)
 8004ffc:	10bfff04 	addi	r2,r2,-4
 8005000:	e0bfff15 	stw	r2,-4(fp)
 8005004:	e0ffff17 	ldw	r3,-4(fp)
 8005008:	00820074 	movhi	r2,2049
 800500c:	10a47c04 	addi	r2,r2,-28176
 8005010:	18bff62e 	bgeu	r3,r2,8004fec <_do_dtors+0x20>
        (*dtor) (); 
}
 8005014:	0001883a 	nop
 8005018:	e037883a 	mov	sp,fp
 800501c:	dfc00117 	ldw	ra,4(sp)
 8005020:	df000017 	ldw	fp,0(sp)
 8005024:	dec00204 	addi	sp,sp,8
 8005028:	f800283a 	ret

0800502c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800502c:	defffe04 	addi	sp,sp,-8
 8005030:	dfc00115 	stw	ra,4(sp)
 8005034:	df000015 	stw	fp,0(sp)
 8005038:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800503c:	01440004 	movi	r5,4096
 8005040:	0009883a 	mov	r4,zero
 8005044:	8005afc0 	call	8005afc <alt_icache_flush>
#endif
}
 8005048:	0001883a 	nop
 800504c:	e037883a 	mov	sp,fp
 8005050:	dfc00117 	ldw	ra,4(sp)
 8005054:	df000017 	ldw	fp,0(sp)
 8005058:	dec00204 	addi	sp,sp,8
 800505c:	f800283a 	ret

08005060 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005060:	defff904 	addi	sp,sp,-28
 8005064:	dfc00615 	stw	ra,24(sp)
 8005068:	df000515 	stw	fp,20(sp)
 800506c:	df000504 	addi	fp,sp,20
 8005070:	e13ffc15 	stw	r4,-16(fp)
 8005074:	e17ffd15 	stw	r5,-12(fp)
 8005078:	e1bffe15 	stw	r6,-8(fp)
 800507c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8005080:	e0800217 	ldw	r2,8(fp)
 8005084:	d8800015 	stw	r2,0(sp)
 8005088:	e1ffff17 	ldw	r7,-4(fp)
 800508c:	e1bffe17 	ldw	r6,-8(fp)
 8005090:	e17ffd17 	ldw	r5,-12(fp)
 8005094:	e13ffc17 	ldw	r4,-16(fp)
 8005098:	80052100 	call	8005210 <alt_iic_isr_register>
}  
 800509c:	e037883a 	mov	sp,fp
 80050a0:	dfc00117 	ldw	ra,4(sp)
 80050a4:	df000017 	ldw	fp,0(sp)
 80050a8:	dec00204 	addi	sp,sp,8
 80050ac:	f800283a 	ret

080050b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80050b0:	defff904 	addi	sp,sp,-28
 80050b4:	df000615 	stw	fp,24(sp)
 80050b8:	df000604 	addi	fp,sp,24
 80050bc:	e13ffe15 	stw	r4,-8(fp)
 80050c0:	e17fff15 	stw	r5,-4(fp)
 80050c4:	e0bfff17 	ldw	r2,-4(fp)
 80050c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80050cc:	0005303a 	rdctl	r2,status
 80050d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80050d4:	e0fffb17 	ldw	r3,-20(fp)
 80050d8:	00bfff84 	movi	r2,-2
 80050dc:	1884703a 	and	r2,r3,r2
 80050e0:	1001703a 	wrctl	status,r2
  
  return context;
 80050e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80050e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80050ec:	00c00044 	movi	r3,1
 80050f0:	e0bffa17 	ldw	r2,-24(fp)
 80050f4:	1884983a 	sll	r2,r3,r2
 80050f8:	1007883a 	mov	r3,r2
 80050fc:	d0a6ac17 	ldw	r2,-25936(gp)
 8005100:	1884b03a 	or	r2,r3,r2
 8005104:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005108:	d0a6ac17 	ldw	r2,-25936(gp)
 800510c:	100170fa 	wrctl	ienable,r2
 8005110:	e0bffc17 	ldw	r2,-16(fp)
 8005114:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005118:	e0bffd17 	ldw	r2,-12(fp)
 800511c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005120:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8005124:	0001883a 	nop
}
 8005128:	e037883a 	mov	sp,fp
 800512c:	df000017 	ldw	fp,0(sp)
 8005130:	dec00104 	addi	sp,sp,4
 8005134:	f800283a 	ret

08005138 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8005138:	defff904 	addi	sp,sp,-28
 800513c:	df000615 	stw	fp,24(sp)
 8005140:	df000604 	addi	fp,sp,24
 8005144:	e13ffe15 	stw	r4,-8(fp)
 8005148:	e17fff15 	stw	r5,-4(fp)
 800514c:	e0bfff17 	ldw	r2,-4(fp)
 8005150:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005154:	0005303a 	rdctl	r2,status
 8005158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800515c:	e0fffb17 	ldw	r3,-20(fp)
 8005160:	00bfff84 	movi	r2,-2
 8005164:	1884703a 	and	r2,r3,r2
 8005168:	1001703a 	wrctl	status,r2
  
  return context;
 800516c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005170:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8005174:	00c00044 	movi	r3,1
 8005178:	e0bffa17 	ldw	r2,-24(fp)
 800517c:	1884983a 	sll	r2,r3,r2
 8005180:	0084303a 	nor	r2,zero,r2
 8005184:	1007883a 	mov	r3,r2
 8005188:	d0a6ac17 	ldw	r2,-25936(gp)
 800518c:	1884703a 	and	r2,r3,r2
 8005190:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005194:	d0a6ac17 	ldw	r2,-25936(gp)
 8005198:	100170fa 	wrctl	ienable,r2
 800519c:	e0bffc17 	ldw	r2,-16(fp)
 80051a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80051a4:	e0bffd17 	ldw	r2,-12(fp)
 80051a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80051ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80051b0:	0001883a 	nop
}
 80051b4:	e037883a 	mov	sp,fp
 80051b8:	df000017 	ldw	fp,0(sp)
 80051bc:	dec00104 	addi	sp,sp,4
 80051c0:	f800283a 	ret

080051c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80051c4:	defffc04 	addi	sp,sp,-16
 80051c8:	df000315 	stw	fp,12(sp)
 80051cc:	df000304 	addi	fp,sp,12
 80051d0:	e13ffe15 	stw	r4,-8(fp)
 80051d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80051d8:	000530fa 	rdctl	r2,ienable
 80051dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80051e0:	00c00044 	movi	r3,1
 80051e4:	e0bfff17 	ldw	r2,-4(fp)
 80051e8:	1884983a 	sll	r2,r3,r2
 80051ec:	1007883a 	mov	r3,r2
 80051f0:	e0bffd17 	ldw	r2,-12(fp)
 80051f4:	1884703a 	and	r2,r3,r2
 80051f8:	1004c03a 	cmpne	r2,r2,zero
 80051fc:	10803fcc 	andi	r2,r2,255
}
 8005200:	e037883a 	mov	sp,fp
 8005204:	df000017 	ldw	fp,0(sp)
 8005208:	dec00104 	addi	sp,sp,4
 800520c:	f800283a 	ret

08005210 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005210:	defff504 	addi	sp,sp,-44
 8005214:	dfc00a15 	stw	ra,40(sp)
 8005218:	df000915 	stw	fp,36(sp)
 800521c:	df000904 	addi	fp,sp,36
 8005220:	e13ffc15 	stw	r4,-16(fp)
 8005224:	e17ffd15 	stw	r5,-12(fp)
 8005228:	e1bffe15 	stw	r6,-8(fp)
 800522c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8005230:	00bffa84 	movi	r2,-22
 8005234:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8005238:	e0bffd17 	ldw	r2,-12(fp)
 800523c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8005240:	e0bff817 	ldw	r2,-32(fp)
 8005244:	10800808 	cmpgei	r2,r2,32
 8005248:	1000271e 	bne	r2,zero,80052e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800524c:	0005303a 	rdctl	r2,status
 8005250:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005254:	e0fffb17 	ldw	r3,-20(fp)
 8005258:	00bfff84 	movi	r2,-2
 800525c:	1884703a 	and	r2,r3,r2
 8005260:	1001703a 	wrctl	status,r2
  
  return context;
 8005264:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8005268:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800526c:	00820074 	movhi	r2,2049
 8005270:	10b21b04 	addi	r2,r2,-14228
 8005274:	e0fff817 	ldw	r3,-32(fp)
 8005278:	180690fa 	slli	r3,r3,3
 800527c:	10c5883a 	add	r2,r2,r3
 8005280:	e0fffe17 	ldw	r3,-8(fp)
 8005284:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8005288:	00820074 	movhi	r2,2049
 800528c:	10b21b04 	addi	r2,r2,-14228
 8005290:	e0fff817 	ldw	r3,-32(fp)
 8005294:	180690fa 	slli	r3,r3,3
 8005298:	10c5883a 	add	r2,r2,r3
 800529c:	10800104 	addi	r2,r2,4
 80052a0:	e0ffff17 	ldw	r3,-4(fp)
 80052a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80052a8:	e0bffe17 	ldw	r2,-8(fp)
 80052ac:	10000526 	beq	r2,zero,80052c4 <alt_iic_isr_register+0xb4>
 80052b0:	e0bff817 	ldw	r2,-32(fp)
 80052b4:	100b883a 	mov	r5,r2
 80052b8:	e13ffc17 	ldw	r4,-16(fp)
 80052bc:	80050b00 	call	80050b0 <alt_ic_irq_enable>
 80052c0:	00000406 	br	80052d4 <alt_iic_isr_register+0xc4>
 80052c4:	e0bff817 	ldw	r2,-32(fp)
 80052c8:	100b883a 	mov	r5,r2
 80052cc:	e13ffc17 	ldw	r4,-16(fp)
 80052d0:	80051380 	call	8005138 <alt_ic_irq_disable>
 80052d4:	e0bff715 	stw	r2,-36(fp)
 80052d8:	e0bffa17 	ldw	r2,-24(fp)
 80052dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80052e0:	e0bff917 	ldw	r2,-28(fp)
 80052e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80052e8:	e0bff717 	ldw	r2,-36(fp)
}
 80052ec:	e037883a 	mov	sp,fp
 80052f0:	dfc00117 	ldw	ra,4(sp)
 80052f4:	df000017 	ldw	fp,0(sp)
 80052f8:	dec00204 	addi	sp,sp,8
 80052fc:	f800283a 	ret

08005300 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8005300:	defff904 	addi	sp,sp,-28
 8005304:	dfc00615 	stw	ra,24(sp)
 8005308:	df000515 	stw	fp,20(sp)
 800530c:	df000504 	addi	fp,sp,20
 8005310:	e13ffc15 	stw	r4,-16(fp)
 8005314:	e17ffd15 	stw	r5,-12(fp)
 8005318:	e1bffe15 	stw	r6,-8(fp)
 800531c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8005320:	e1bfff17 	ldw	r6,-4(fp)
 8005324:	e17ffe17 	ldw	r5,-8(fp)
 8005328:	e13ffd17 	ldw	r4,-12(fp)
 800532c:	80055400 	call	8005540 <open>
 8005330:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8005334:	e0bffb17 	ldw	r2,-20(fp)
 8005338:	10001c16 	blt	r2,zero,80053ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800533c:	00820074 	movhi	r2,2049
 8005340:	10a8f204 	addi	r2,r2,-23608
 8005344:	e0fffb17 	ldw	r3,-20(fp)
 8005348:	18c00324 	muli	r3,r3,12
 800534c:	10c5883a 	add	r2,r2,r3
 8005350:	10c00017 	ldw	r3,0(r2)
 8005354:	e0bffc17 	ldw	r2,-16(fp)
 8005358:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800535c:	00820074 	movhi	r2,2049
 8005360:	10a8f204 	addi	r2,r2,-23608
 8005364:	e0fffb17 	ldw	r3,-20(fp)
 8005368:	18c00324 	muli	r3,r3,12
 800536c:	10c5883a 	add	r2,r2,r3
 8005370:	10800104 	addi	r2,r2,4
 8005374:	10c00017 	ldw	r3,0(r2)
 8005378:	e0bffc17 	ldw	r2,-16(fp)
 800537c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8005380:	00820074 	movhi	r2,2049
 8005384:	10a8f204 	addi	r2,r2,-23608
 8005388:	e0fffb17 	ldw	r3,-20(fp)
 800538c:	18c00324 	muli	r3,r3,12
 8005390:	10c5883a 	add	r2,r2,r3
 8005394:	10800204 	addi	r2,r2,8
 8005398:	10c00017 	ldw	r3,0(r2)
 800539c:	e0bffc17 	ldw	r2,-16(fp)
 80053a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80053a4:	e13ffb17 	ldw	r4,-20(fp)
 80053a8:	80056940 	call	8005694 <alt_release_fd>
  }
} 
 80053ac:	0001883a 	nop
 80053b0:	e037883a 	mov	sp,fp
 80053b4:	dfc00117 	ldw	ra,4(sp)
 80053b8:	df000017 	ldw	fp,0(sp)
 80053bc:	dec00204 	addi	sp,sp,8
 80053c0:	f800283a 	ret

080053c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80053c4:	defffb04 	addi	sp,sp,-20
 80053c8:	dfc00415 	stw	ra,16(sp)
 80053cc:	df000315 	stw	fp,12(sp)
 80053d0:	df000304 	addi	fp,sp,12
 80053d4:	e13ffd15 	stw	r4,-12(fp)
 80053d8:	e17ffe15 	stw	r5,-8(fp)
 80053dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80053e0:	01c07fc4 	movi	r7,511
 80053e4:	01800044 	movi	r6,1
 80053e8:	e17ffd17 	ldw	r5,-12(fp)
 80053ec:	01020074 	movhi	r4,2049
 80053f0:	2128f504 	addi	r4,r4,-23596
 80053f4:	80053000 	call	8005300 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80053f8:	01c07fc4 	movi	r7,511
 80053fc:	000d883a 	mov	r6,zero
 8005400:	e17ffe17 	ldw	r5,-8(fp)
 8005404:	01020074 	movhi	r4,2049
 8005408:	2128f204 	addi	r4,r4,-23608
 800540c:	80053000 	call	8005300 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8005410:	01c07fc4 	movi	r7,511
 8005414:	01800044 	movi	r6,1
 8005418:	e17fff17 	ldw	r5,-4(fp)
 800541c:	01020074 	movhi	r4,2049
 8005420:	2128f804 	addi	r4,r4,-23584
 8005424:	80053000 	call	8005300 <alt_open_fd>
}  
 8005428:	0001883a 	nop
 800542c:	e037883a 	mov	sp,fp
 8005430:	dfc00117 	ldw	ra,4(sp)
 8005434:	df000017 	ldw	fp,0(sp)
 8005438:	dec00204 	addi	sp,sp,8
 800543c:	f800283a 	ret

08005440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005440:	defffe04 	addi	sp,sp,-8
 8005444:	dfc00115 	stw	ra,4(sp)
 8005448:	df000015 	stw	fp,0(sp)
 800544c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005450:	d0a00517 	ldw	r2,-32748(gp)
 8005454:	10000326 	beq	r2,zero,8005464 <alt_get_errno+0x24>
 8005458:	d0a00517 	ldw	r2,-32748(gp)
 800545c:	103ee83a 	callr	r2
 8005460:	00000106 	br	8005468 <alt_get_errno+0x28>
 8005464:	d0a6b004 	addi	r2,gp,-25920
}
 8005468:	e037883a 	mov	sp,fp
 800546c:	dfc00117 	ldw	ra,4(sp)
 8005470:	df000017 	ldw	fp,0(sp)
 8005474:	dec00204 	addi	sp,sp,8
 8005478:	f800283a 	ret

0800547c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800547c:	defffd04 	addi	sp,sp,-12
 8005480:	df000215 	stw	fp,8(sp)
 8005484:	df000204 	addi	fp,sp,8
 8005488:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800548c:	e0bfff17 	ldw	r2,-4(fp)
 8005490:	10800217 	ldw	r2,8(r2)
 8005494:	10d00034 	orhi	r3,r2,16384
 8005498:	e0bfff17 	ldw	r2,-4(fp)
 800549c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80054a0:	e03ffe15 	stw	zero,-8(fp)
 80054a4:	00001d06 	br	800551c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80054a8:	00820074 	movhi	r2,2049
 80054ac:	10a8f204 	addi	r2,r2,-23608
 80054b0:	e0fffe17 	ldw	r3,-8(fp)
 80054b4:	18c00324 	muli	r3,r3,12
 80054b8:	10c5883a 	add	r2,r2,r3
 80054bc:	10c00017 	ldw	r3,0(r2)
 80054c0:	e0bfff17 	ldw	r2,-4(fp)
 80054c4:	10800017 	ldw	r2,0(r2)
 80054c8:	1880111e 	bne	r3,r2,8005510 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80054cc:	00820074 	movhi	r2,2049
 80054d0:	10a8f204 	addi	r2,r2,-23608
 80054d4:	e0fffe17 	ldw	r3,-8(fp)
 80054d8:	18c00324 	muli	r3,r3,12
 80054dc:	10c5883a 	add	r2,r2,r3
 80054e0:	10800204 	addi	r2,r2,8
 80054e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80054e8:	1000090e 	bge	r2,zero,8005510 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80054ec:	e0bffe17 	ldw	r2,-8(fp)
 80054f0:	10c00324 	muli	r3,r2,12
 80054f4:	00820074 	movhi	r2,2049
 80054f8:	10a8f204 	addi	r2,r2,-23608
 80054fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005500:	e0bfff17 	ldw	r2,-4(fp)
 8005504:	18800226 	beq	r3,r2,8005510 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8005508:	00bffcc4 	movi	r2,-13
 800550c:	00000806 	br	8005530 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005510:	e0bffe17 	ldw	r2,-8(fp)
 8005514:	10800044 	addi	r2,r2,1
 8005518:	e0bffe15 	stw	r2,-8(fp)
 800551c:	d0a00417 	ldw	r2,-32752(gp)
 8005520:	1007883a 	mov	r3,r2
 8005524:	e0bffe17 	ldw	r2,-8(fp)
 8005528:	18bfdf2e 	bgeu	r3,r2,80054a8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800552c:	0005883a 	mov	r2,zero
}
 8005530:	e037883a 	mov	sp,fp
 8005534:	df000017 	ldw	fp,0(sp)
 8005538:	dec00104 	addi	sp,sp,4
 800553c:	f800283a 	ret

08005540 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8005540:	defff604 	addi	sp,sp,-40
 8005544:	dfc00915 	stw	ra,36(sp)
 8005548:	df000815 	stw	fp,32(sp)
 800554c:	df000804 	addi	fp,sp,32
 8005550:	e13ffd15 	stw	r4,-12(fp)
 8005554:	e17ffe15 	stw	r5,-8(fp)
 8005558:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800555c:	00bfffc4 	movi	r2,-1
 8005560:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8005564:	00bffb44 	movi	r2,-19
 8005568:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800556c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8005570:	d1600204 	addi	r5,gp,-32760
 8005574:	e13ffd17 	ldw	r4,-12(fp)
 8005578:	80058c00 	call	80058c0 <alt_find_dev>
 800557c:	e0bff815 	stw	r2,-32(fp)
 8005580:	e0bff817 	ldw	r2,-32(fp)
 8005584:	1000051e 	bne	r2,zero,800559c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8005588:	e13ffd17 	ldw	r4,-12(fp)
 800558c:	80059500 	call	8005950 <alt_find_file>
 8005590:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8005594:	00800044 	movi	r2,1
 8005598:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800559c:	e0bff817 	ldw	r2,-32(fp)
 80055a0:	10002926 	beq	r2,zero,8005648 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80055a4:	e13ff817 	ldw	r4,-32(fp)
 80055a8:	8005a580 	call	8005a58 <alt_get_fd>
 80055ac:	e0bff915 	stw	r2,-28(fp)
 80055b0:	e0bff917 	ldw	r2,-28(fp)
 80055b4:	1000030e 	bge	r2,zero,80055c4 <open+0x84>
    {
      status = index;
 80055b8:	e0bff917 	ldw	r2,-28(fp)
 80055bc:	e0bffa15 	stw	r2,-24(fp)
 80055c0:	00002306 	br	8005650 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80055c4:	e0bff917 	ldw	r2,-28(fp)
 80055c8:	10c00324 	muli	r3,r2,12
 80055cc:	00820074 	movhi	r2,2049
 80055d0:	10a8f204 	addi	r2,r2,-23608
 80055d4:	1885883a 	add	r2,r3,r2
 80055d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80055dc:	e0fffe17 	ldw	r3,-8(fp)
 80055e0:	00900034 	movhi	r2,16384
 80055e4:	10bfffc4 	addi	r2,r2,-1
 80055e8:	1886703a 	and	r3,r3,r2
 80055ec:	e0bffc17 	ldw	r2,-16(fp)
 80055f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80055f4:	e0bffb17 	ldw	r2,-20(fp)
 80055f8:	1000051e 	bne	r2,zero,8005610 <open+0xd0>
 80055fc:	e13ffc17 	ldw	r4,-16(fp)
 8005600:	800547c0 	call	800547c <alt_file_locked>
 8005604:	e0bffa15 	stw	r2,-24(fp)
 8005608:	e0bffa17 	ldw	r2,-24(fp)
 800560c:	10001016 	blt	r2,zero,8005650 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8005610:	e0bff817 	ldw	r2,-32(fp)
 8005614:	10800317 	ldw	r2,12(r2)
 8005618:	10000826 	beq	r2,zero,800563c <open+0xfc>
 800561c:	e0bff817 	ldw	r2,-32(fp)
 8005620:	10800317 	ldw	r2,12(r2)
 8005624:	e1ffff17 	ldw	r7,-4(fp)
 8005628:	e1bffe17 	ldw	r6,-8(fp)
 800562c:	e17ffd17 	ldw	r5,-12(fp)
 8005630:	e13ffc17 	ldw	r4,-16(fp)
 8005634:	103ee83a 	callr	r2
 8005638:	00000106 	br	8005640 <open+0x100>
 800563c:	0005883a 	mov	r2,zero
 8005640:	e0bffa15 	stw	r2,-24(fp)
 8005644:	00000206 	br	8005650 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8005648:	00bffb44 	movi	r2,-19
 800564c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8005650:	e0bffa17 	ldw	r2,-24(fp)
 8005654:	1000090e 	bge	r2,zero,800567c <open+0x13c>
  {
    alt_release_fd (index);  
 8005658:	e13ff917 	ldw	r4,-28(fp)
 800565c:	80056940 	call	8005694 <alt_release_fd>
    ALT_ERRNO = -status;
 8005660:	80054400 	call	8005440 <alt_get_errno>
 8005664:	1007883a 	mov	r3,r2
 8005668:	e0bffa17 	ldw	r2,-24(fp)
 800566c:	0085c83a 	sub	r2,zero,r2
 8005670:	18800015 	stw	r2,0(r3)
    return -1;
 8005674:	00bfffc4 	movi	r2,-1
 8005678:	00000106 	br	8005680 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800567c:	e0bff917 	ldw	r2,-28(fp)
}
 8005680:	e037883a 	mov	sp,fp
 8005684:	dfc00117 	ldw	ra,4(sp)
 8005688:	df000017 	ldw	fp,0(sp)
 800568c:	dec00204 	addi	sp,sp,8
 8005690:	f800283a 	ret

08005694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8005694:	defffe04 	addi	sp,sp,-8
 8005698:	df000115 	stw	fp,4(sp)
 800569c:	df000104 	addi	fp,sp,4
 80056a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80056a4:	e0bfff17 	ldw	r2,-4(fp)
 80056a8:	108000d0 	cmplti	r2,r2,3
 80056ac:	10000d1e 	bne	r2,zero,80056e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80056b0:	00820074 	movhi	r2,2049
 80056b4:	10a8f204 	addi	r2,r2,-23608
 80056b8:	e0ffff17 	ldw	r3,-4(fp)
 80056bc:	18c00324 	muli	r3,r3,12
 80056c0:	10c5883a 	add	r2,r2,r3
 80056c4:	10800204 	addi	r2,r2,8
 80056c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80056cc:	00820074 	movhi	r2,2049
 80056d0:	10a8f204 	addi	r2,r2,-23608
 80056d4:	e0ffff17 	ldw	r3,-4(fp)
 80056d8:	18c00324 	muli	r3,r3,12
 80056dc:	10c5883a 	add	r2,r2,r3
 80056e0:	10000015 	stw	zero,0(r2)
  }
}
 80056e4:	0001883a 	nop
 80056e8:	e037883a 	mov	sp,fp
 80056ec:	df000017 	ldw	fp,0(sp)
 80056f0:	dec00104 	addi	sp,sp,4
 80056f4:	f800283a 	ret

080056f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80056f8:	defffa04 	addi	sp,sp,-24
 80056fc:	df000515 	stw	fp,20(sp)
 8005700:	df000504 	addi	fp,sp,20
 8005704:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005708:	0005303a 	rdctl	r2,status
 800570c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005710:	e0fffc17 	ldw	r3,-16(fp)
 8005714:	00bfff84 	movi	r2,-2
 8005718:	1884703a 	and	r2,r3,r2
 800571c:	1001703a 	wrctl	status,r2
  
  return context;
 8005720:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8005724:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8005728:	e0bfff17 	ldw	r2,-4(fp)
 800572c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8005730:	e0bffd17 	ldw	r2,-12(fp)
 8005734:	10800017 	ldw	r2,0(r2)
 8005738:	e0fffd17 	ldw	r3,-12(fp)
 800573c:	18c00117 	ldw	r3,4(r3)
 8005740:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8005744:	e0bffd17 	ldw	r2,-12(fp)
 8005748:	10800117 	ldw	r2,4(r2)
 800574c:	e0fffd17 	ldw	r3,-12(fp)
 8005750:	18c00017 	ldw	r3,0(r3)
 8005754:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8005758:	e0bffd17 	ldw	r2,-12(fp)
 800575c:	e0fffd17 	ldw	r3,-12(fp)
 8005760:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8005764:	e0bffd17 	ldw	r2,-12(fp)
 8005768:	e0fffd17 	ldw	r3,-12(fp)
 800576c:	10c00015 	stw	r3,0(r2)
 8005770:	e0bffb17 	ldw	r2,-20(fp)
 8005774:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005778:	e0bffe17 	ldw	r2,-8(fp)
 800577c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8005780:	0001883a 	nop
 8005784:	e037883a 	mov	sp,fp
 8005788:	df000017 	ldw	fp,0(sp)
 800578c:	dec00104 	addi	sp,sp,4
 8005790:	f800283a 	ret

08005794 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8005794:	defffb04 	addi	sp,sp,-20
 8005798:	dfc00415 	stw	ra,16(sp)
 800579c:	df000315 	stw	fp,12(sp)
 80057a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80057a4:	d0a00717 	ldw	r2,-32740(gp)
 80057a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80057ac:	d0a6ae17 	ldw	r2,-25928(gp)
 80057b0:	10800044 	addi	r2,r2,1
 80057b4:	d0a6ae15 	stw	r2,-25928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80057b8:	00002e06 	br	8005874 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80057bc:	e0bffd17 	ldw	r2,-12(fp)
 80057c0:	10800017 	ldw	r2,0(r2)
 80057c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80057c8:	e0bffd17 	ldw	r2,-12(fp)
 80057cc:	10800403 	ldbu	r2,16(r2)
 80057d0:	10803fcc 	andi	r2,r2,255
 80057d4:	10000426 	beq	r2,zero,80057e8 <alt_tick+0x54>
 80057d8:	d0a6ae17 	ldw	r2,-25928(gp)
 80057dc:	1000021e 	bne	r2,zero,80057e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80057e0:	e0bffd17 	ldw	r2,-12(fp)
 80057e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80057e8:	e0bffd17 	ldw	r2,-12(fp)
 80057ec:	10800217 	ldw	r2,8(r2)
 80057f0:	d0e6ae17 	ldw	r3,-25928(gp)
 80057f4:	18801d36 	bltu	r3,r2,800586c <alt_tick+0xd8>
 80057f8:	e0bffd17 	ldw	r2,-12(fp)
 80057fc:	10800403 	ldbu	r2,16(r2)
 8005800:	10803fcc 	andi	r2,r2,255
 8005804:	1000191e 	bne	r2,zero,800586c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8005808:	e0bffd17 	ldw	r2,-12(fp)
 800580c:	10800317 	ldw	r2,12(r2)
 8005810:	e0fffd17 	ldw	r3,-12(fp)
 8005814:	18c00517 	ldw	r3,20(r3)
 8005818:	1809883a 	mov	r4,r3
 800581c:	103ee83a 	callr	r2
 8005820:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8005824:	e0bfff17 	ldw	r2,-4(fp)
 8005828:	1000031e 	bne	r2,zero,8005838 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800582c:	e13ffd17 	ldw	r4,-12(fp)
 8005830:	80056f80 	call	80056f8 <alt_alarm_stop>
 8005834:	00000d06 	br	800586c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8005838:	e0bffd17 	ldw	r2,-12(fp)
 800583c:	10c00217 	ldw	r3,8(r2)
 8005840:	e0bfff17 	ldw	r2,-4(fp)
 8005844:	1887883a 	add	r3,r3,r2
 8005848:	e0bffd17 	ldw	r2,-12(fp)
 800584c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8005850:	e0bffd17 	ldw	r2,-12(fp)
 8005854:	10c00217 	ldw	r3,8(r2)
 8005858:	d0a6ae17 	ldw	r2,-25928(gp)
 800585c:	1880032e 	bgeu	r3,r2,800586c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8005860:	e0bffd17 	ldw	r2,-12(fp)
 8005864:	00c00044 	movi	r3,1
 8005868:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800586c:	e0bffe17 	ldw	r2,-8(fp)
 8005870:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005874:	e0fffd17 	ldw	r3,-12(fp)
 8005878:	d0a00704 	addi	r2,gp,-32740
 800587c:	18bfcf1e 	bne	r3,r2,80057bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8005880:	0001883a 	nop
}
 8005884:	0001883a 	nop
 8005888:	e037883a 	mov	sp,fp
 800588c:	dfc00117 	ldw	ra,4(sp)
 8005890:	df000017 	ldw	fp,0(sp)
 8005894:	dec00204 	addi	sp,sp,8
 8005898:	f800283a 	ret

0800589c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800589c:	deffff04 	addi	sp,sp,-4
 80058a0:	df000015 	stw	fp,0(sp)
 80058a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80058a8:	000170fa 	wrctl	ienable,zero
}
 80058ac:	0001883a 	nop
 80058b0:	e037883a 	mov	sp,fp
 80058b4:	df000017 	ldw	fp,0(sp)
 80058b8:	dec00104 	addi	sp,sp,4
 80058bc:	f800283a 	ret

080058c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80058c0:	defffa04 	addi	sp,sp,-24
 80058c4:	dfc00515 	stw	ra,20(sp)
 80058c8:	df000415 	stw	fp,16(sp)
 80058cc:	df000404 	addi	fp,sp,16
 80058d0:	e13ffe15 	stw	r4,-8(fp)
 80058d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80058d8:	e0bfff17 	ldw	r2,-4(fp)
 80058dc:	10800017 	ldw	r2,0(r2)
 80058e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80058e4:	e13ffe17 	ldw	r4,-8(fp)
 80058e8:	80073ac0 	call	80073ac <strlen>
 80058ec:	10800044 	addi	r2,r2,1
 80058f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80058f4:	00000d06 	br	800592c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80058f8:	e0bffc17 	ldw	r2,-16(fp)
 80058fc:	10800217 	ldw	r2,8(r2)
 8005900:	e0fffd17 	ldw	r3,-12(fp)
 8005904:	180d883a 	mov	r6,r3
 8005908:	e17ffe17 	ldw	r5,-8(fp)
 800590c:	1009883a 	mov	r4,r2
 8005910:	8006ad40 	call	8006ad4 <memcmp>
 8005914:	1000021e 	bne	r2,zero,8005920 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8005918:	e0bffc17 	ldw	r2,-16(fp)
 800591c:	00000706 	br	800593c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8005920:	e0bffc17 	ldw	r2,-16(fp)
 8005924:	10800017 	ldw	r2,0(r2)
 8005928:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800592c:	e0fffc17 	ldw	r3,-16(fp)
 8005930:	e0bfff17 	ldw	r2,-4(fp)
 8005934:	18bff01e 	bne	r3,r2,80058f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8005938:	0005883a 	mov	r2,zero
}
 800593c:	e037883a 	mov	sp,fp
 8005940:	dfc00117 	ldw	ra,4(sp)
 8005944:	df000017 	ldw	fp,0(sp)
 8005948:	dec00204 	addi	sp,sp,8
 800594c:	f800283a 	ret

08005950 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8005950:	defffb04 	addi	sp,sp,-20
 8005954:	dfc00415 	stw	ra,16(sp)
 8005958:	df000315 	stw	fp,12(sp)
 800595c:	df000304 	addi	fp,sp,12
 8005960:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8005964:	d0a00017 	ldw	r2,-32768(gp)
 8005968:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800596c:	00003106 	br	8005a34 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8005970:	e0bffd17 	ldw	r2,-12(fp)
 8005974:	10800217 	ldw	r2,8(r2)
 8005978:	1009883a 	mov	r4,r2
 800597c:	80073ac0 	call	80073ac <strlen>
 8005980:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8005984:	e0bffd17 	ldw	r2,-12(fp)
 8005988:	10c00217 	ldw	r3,8(r2)
 800598c:	e0bffe17 	ldw	r2,-8(fp)
 8005990:	10bfffc4 	addi	r2,r2,-1
 8005994:	1885883a 	add	r2,r3,r2
 8005998:	10800003 	ldbu	r2,0(r2)
 800599c:	10803fcc 	andi	r2,r2,255
 80059a0:	1080201c 	xori	r2,r2,128
 80059a4:	10bfe004 	addi	r2,r2,-128
 80059a8:	10800bd8 	cmpnei	r2,r2,47
 80059ac:	1000031e 	bne	r2,zero,80059bc <alt_find_file+0x6c>
    {
      len -= 1;
 80059b0:	e0bffe17 	ldw	r2,-8(fp)
 80059b4:	10bfffc4 	addi	r2,r2,-1
 80059b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80059bc:	e0bffe17 	ldw	r2,-8(fp)
 80059c0:	e0ffff17 	ldw	r3,-4(fp)
 80059c4:	1885883a 	add	r2,r3,r2
 80059c8:	10800003 	ldbu	r2,0(r2)
 80059cc:	10803fcc 	andi	r2,r2,255
 80059d0:	1080201c 	xori	r2,r2,128
 80059d4:	10bfe004 	addi	r2,r2,-128
 80059d8:	10800be0 	cmpeqi	r2,r2,47
 80059dc:	1000081e 	bne	r2,zero,8005a00 <alt_find_file+0xb0>
 80059e0:	e0bffe17 	ldw	r2,-8(fp)
 80059e4:	e0ffff17 	ldw	r3,-4(fp)
 80059e8:	1885883a 	add	r2,r3,r2
 80059ec:	10800003 	ldbu	r2,0(r2)
 80059f0:	10803fcc 	andi	r2,r2,255
 80059f4:	1080201c 	xori	r2,r2,128
 80059f8:	10bfe004 	addi	r2,r2,-128
 80059fc:	10000a1e 	bne	r2,zero,8005a28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8005a00:	e0bffd17 	ldw	r2,-12(fp)
 8005a04:	10800217 	ldw	r2,8(r2)
 8005a08:	e0fffe17 	ldw	r3,-8(fp)
 8005a0c:	180d883a 	mov	r6,r3
 8005a10:	e17fff17 	ldw	r5,-4(fp)
 8005a14:	1009883a 	mov	r4,r2
 8005a18:	8006ad40 	call	8006ad4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005a1c:	1000021e 	bne	r2,zero,8005a28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8005a20:	e0bffd17 	ldw	r2,-12(fp)
 8005a24:	00000706 	br	8005a44 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8005a28:	e0bffd17 	ldw	r2,-12(fp)
 8005a2c:	10800017 	ldw	r2,0(r2)
 8005a30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8005a34:	e0fffd17 	ldw	r3,-12(fp)
 8005a38:	d0a00004 	addi	r2,gp,-32768
 8005a3c:	18bfcc1e 	bne	r3,r2,8005970 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8005a40:	0005883a 	mov	r2,zero
}
 8005a44:	e037883a 	mov	sp,fp
 8005a48:	dfc00117 	ldw	ra,4(sp)
 8005a4c:	df000017 	ldw	fp,0(sp)
 8005a50:	dec00204 	addi	sp,sp,8
 8005a54:	f800283a 	ret

08005a58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8005a58:	defffc04 	addi	sp,sp,-16
 8005a5c:	df000315 	stw	fp,12(sp)
 8005a60:	df000304 	addi	fp,sp,12
 8005a64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8005a68:	00bffa04 	movi	r2,-24
 8005a6c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005a70:	e03ffd15 	stw	zero,-12(fp)
 8005a74:	00001906 	br	8005adc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8005a78:	00820074 	movhi	r2,2049
 8005a7c:	10a8f204 	addi	r2,r2,-23608
 8005a80:	e0fffd17 	ldw	r3,-12(fp)
 8005a84:	18c00324 	muli	r3,r3,12
 8005a88:	10c5883a 	add	r2,r2,r3
 8005a8c:	10800017 	ldw	r2,0(r2)
 8005a90:	10000f1e 	bne	r2,zero,8005ad0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8005a94:	00820074 	movhi	r2,2049
 8005a98:	10a8f204 	addi	r2,r2,-23608
 8005a9c:	e0fffd17 	ldw	r3,-12(fp)
 8005aa0:	18c00324 	muli	r3,r3,12
 8005aa4:	10c5883a 	add	r2,r2,r3
 8005aa8:	e0ffff17 	ldw	r3,-4(fp)
 8005aac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8005ab0:	d0e00417 	ldw	r3,-32752(gp)
 8005ab4:	e0bffd17 	ldw	r2,-12(fp)
 8005ab8:	1880020e 	bge	r3,r2,8005ac4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8005abc:	e0bffd17 	ldw	r2,-12(fp)
 8005ac0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 8005ac4:	e0bffd17 	ldw	r2,-12(fp)
 8005ac8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8005acc:	00000606 	br	8005ae8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005ad0:	e0bffd17 	ldw	r2,-12(fp)
 8005ad4:	10800044 	addi	r2,r2,1
 8005ad8:	e0bffd15 	stw	r2,-12(fp)
 8005adc:	e0bffd17 	ldw	r2,-12(fp)
 8005ae0:	10800810 	cmplti	r2,r2,32
 8005ae4:	103fe41e 	bne	r2,zero,8005a78 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8005ae8:	e0bffe17 	ldw	r2,-8(fp)
}
 8005aec:	e037883a 	mov	sp,fp
 8005af0:	df000017 	ldw	fp,0(sp)
 8005af4:	dec00104 	addi	sp,sp,4
 8005af8:	f800283a 	ret

08005afc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8005afc:	defffb04 	addi	sp,sp,-20
 8005b00:	df000415 	stw	fp,16(sp)
 8005b04:	df000404 	addi	fp,sp,16
 8005b08:	e13ffe15 	stw	r4,-8(fp)
 8005b0c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8005b10:	e0bfff17 	ldw	r2,-4(fp)
 8005b14:	10840070 	cmpltui	r2,r2,4097
 8005b18:	1000021e 	bne	r2,zero,8005b24 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8005b1c:	00840004 	movi	r2,4096
 8005b20:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8005b24:	e0fffe17 	ldw	r3,-8(fp)
 8005b28:	e0bfff17 	ldw	r2,-4(fp)
 8005b2c:	1885883a 	add	r2,r3,r2
 8005b30:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8005b34:	e0bffe17 	ldw	r2,-8(fp)
 8005b38:	e0bffc15 	stw	r2,-16(fp)
 8005b3c:	00000506 	br	8005b54 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8005b40:	e0bffc17 	ldw	r2,-16(fp)
 8005b44:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8005b48:	e0bffc17 	ldw	r2,-16(fp)
 8005b4c:	10800804 	addi	r2,r2,32
 8005b50:	e0bffc15 	stw	r2,-16(fp)
 8005b54:	e0fffc17 	ldw	r3,-16(fp)
 8005b58:	e0bffd17 	ldw	r2,-12(fp)
 8005b5c:	18bff836 	bltu	r3,r2,8005b40 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8005b60:	e0bffe17 	ldw	r2,-8(fp)
 8005b64:	108007cc 	andi	r2,r2,31
 8005b68:	10000226 	beq	r2,zero,8005b74 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8005b6c:	e0bffc17 	ldw	r2,-16(fp)
 8005b70:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8005b74:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8005b78:	0001883a 	nop
 8005b7c:	e037883a 	mov	sp,fp
 8005b80:	df000017 	ldw	fp,0(sp)
 8005b84:	dec00104 	addi	sp,sp,4
 8005b88:	f800283a 	ret

08005b8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8005b8c:	defffe04 	addi	sp,sp,-8
 8005b90:	df000115 	stw	fp,4(sp)
 8005b94:	df000104 	addi	fp,sp,4
 8005b98:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8005b9c:	e0bfff17 	ldw	r2,-4(fp)
 8005ba0:	10bffe84 	addi	r2,r2,-6
 8005ba4:	10c00428 	cmpgeui	r3,r2,16
 8005ba8:	18001a1e 	bne	r3,zero,8005c14 <alt_exception_cause_generated_bad_addr+0x88>
 8005bac:	100690ba 	slli	r3,r2,2
 8005bb0:	00820034 	movhi	r2,2048
 8005bb4:	1096f104 	addi	r2,r2,23492
 8005bb8:	1885883a 	add	r2,r3,r2
 8005bbc:	10800017 	ldw	r2,0(r2)
 8005bc0:	1000683a 	jmp	r2
 8005bc4:	08005c04 	addi	zero,at,368
 8005bc8:	08005c04 	addi	zero,at,368
 8005bcc:	08005c14 	ori	zero,at,368
 8005bd0:	08005c14 	ori	zero,at,368
 8005bd4:	08005c14 	ori	zero,at,368
 8005bd8:	08005c04 	addi	zero,at,368
 8005bdc:	08005c0c 	andi	zero,at,368
 8005be0:	08005c14 	ori	zero,at,368
 8005be4:	08005c04 	addi	zero,at,368
 8005be8:	08005c04 	addi	zero,at,368
 8005bec:	08005c14 	ori	zero,at,368
 8005bf0:	08005c04 	addi	zero,at,368
 8005bf4:	08005c0c 	andi	zero,at,368
 8005bf8:	08005c14 	ori	zero,at,368
 8005bfc:	08005c14 	ori	zero,at,368
 8005c00:	08005c04 	addi	zero,at,368
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8005c04:	00800044 	movi	r2,1
 8005c08:	00000306 	br	8005c18 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8005c0c:	0005883a 	mov	r2,zero
 8005c10:	00000106 	br	8005c18 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8005c14:	0005883a 	mov	r2,zero
  }
}
 8005c18:	e037883a 	mov	sp,fp
 8005c1c:	df000017 	ldw	fp,0(sp)
 8005c20:	dec00104 	addi	sp,sp,4
 8005c24:	f800283a 	ret

08005c28 <atexit>:
 8005c28:	200b883a 	mov	r5,r4
 8005c2c:	000f883a 	mov	r7,zero
 8005c30:	000d883a 	mov	r6,zero
 8005c34:	0009883a 	mov	r4,zero
 8005c38:	80075981 	jmpi	8007598 <__register_exitproc>

08005c3c <exit>:
 8005c3c:	defffe04 	addi	sp,sp,-8
 8005c40:	000b883a 	mov	r5,zero
 8005c44:	dc000015 	stw	r16,0(sp)
 8005c48:	dfc00115 	stw	ra,4(sp)
 8005c4c:	2021883a 	mov	r16,r4
 8005c50:	80076b00 	call	80076b0 <__call_exitprocs>
 8005c54:	00820074 	movhi	r2,2049
 8005c58:	10ab6604 	addi	r2,r2,-21096
 8005c5c:	11000017 	ldw	r4,0(r2)
 8005c60:	20800f17 	ldw	r2,60(r4)
 8005c64:	10000126 	beq	r2,zero,8005c6c <exit+0x30>
 8005c68:	103ee83a 	callr	r2
 8005c6c:	8009883a 	mov	r4,r16
 8005c70:	8008b7c0 	call	8008b7c <_exit>

08005c74 <_fputs_r>:
 8005c74:	defff804 	addi	sp,sp,-32
 8005c78:	dc400615 	stw	r17,24(sp)
 8005c7c:	2023883a 	mov	r17,r4
 8005c80:	2809883a 	mov	r4,r5
 8005c84:	dc000515 	stw	r16,20(sp)
 8005c88:	dfc00715 	stw	ra,28(sp)
 8005c8c:	3021883a 	mov	r16,r6
 8005c90:	d9400315 	stw	r5,12(sp)
 8005c94:	80073ac0 	call	80073ac <strlen>
 8005c98:	d8800215 	stw	r2,8(sp)
 8005c9c:	d8800415 	stw	r2,16(sp)
 8005ca0:	d8800304 	addi	r2,sp,12
 8005ca4:	d8800015 	stw	r2,0(sp)
 8005ca8:	00800044 	movi	r2,1
 8005cac:	d8800115 	stw	r2,4(sp)
 8005cb0:	88000226 	beq	r17,zero,8005cbc <_fputs_r+0x48>
 8005cb4:	88800e17 	ldw	r2,56(r17)
 8005cb8:	10001226 	beq	r2,zero,8005d04 <_fputs_r+0x90>
 8005cbc:	8080030b 	ldhu	r2,12(r16)
 8005cc0:	10c8000c 	andi	r3,r2,8192
 8005cc4:	1800061e 	bne	r3,zero,8005ce0 <_fputs_r+0x6c>
 8005cc8:	81001917 	ldw	r4,100(r16)
 8005ccc:	00f7ffc4 	movi	r3,-8193
 8005cd0:	10880014 	ori	r2,r2,8192
 8005cd4:	20c6703a 	and	r3,r4,r3
 8005cd8:	8080030d 	sth	r2,12(r16)
 8005cdc:	80c01915 	stw	r3,100(r16)
 8005ce0:	d80d883a 	mov	r6,sp
 8005ce4:	800b883a 	mov	r5,r16
 8005ce8:	8809883a 	mov	r4,r17
 8005cec:	8005d280 	call	8005d28 <__sfvwrite_r>
 8005cf0:	dfc00717 	ldw	ra,28(sp)
 8005cf4:	dc400617 	ldw	r17,24(sp)
 8005cf8:	dc000517 	ldw	r16,20(sp)
 8005cfc:	dec00804 	addi	sp,sp,32
 8005d00:	f800283a 	ret
 8005d04:	8809883a 	mov	r4,r17
 8005d08:	8007e280 	call	8007e28 <__sinit>
 8005d0c:	003feb06 	br	8005cbc <_fputs_r+0x48>

08005d10 <fputs>:
 8005d10:	00820074 	movhi	r2,2049
 8005d14:	10ab6704 	addi	r2,r2,-21092
 8005d18:	280d883a 	mov	r6,r5
 8005d1c:	200b883a 	mov	r5,r4
 8005d20:	11000017 	ldw	r4,0(r2)
 8005d24:	8005c741 	jmpi	8005c74 <_fputs_r>

08005d28 <__sfvwrite_r>:
 8005d28:	30800217 	ldw	r2,8(r6)
 8005d2c:	10006726 	beq	r2,zero,8005ecc <__sfvwrite_r+0x1a4>
 8005d30:	28c0030b 	ldhu	r3,12(r5)
 8005d34:	defff404 	addi	sp,sp,-48
 8005d38:	dd400715 	stw	r21,28(sp)
 8005d3c:	dd000615 	stw	r20,24(sp)
 8005d40:	dc000215 	stw	r16,8(sp)
 8005d44:	dfc00b15 	stw	ra,44(sp)
 8005d48:	df000a15 	stw	fp,40(sp)
 8005d4c:	ddc00915 	stw	r23,36(sp)
 8005d50:	dd800815 	stw	r22,32(sp)
 8005d54:	dcc00515 	stw	r19,20(sp)
 8005d58:	dc800415 	stw	r18,16(sp)
 8005d5c:	dc400315 	stw	r17,12(sp)
 8005d60:	1880020c 	andi	r2,r3,8
 8005d64:	2821883a 	mov	r16,r5
 8005d68:	202b883a 	mov	r21,r4
 8005d6c:	3029883a 	mov	r20,r6
 8005d70:	10002726 	beq	r2,zero,8005e10 <__sfvwrite_r+0xe8>
 8005d74:	28800417 	ldw	r2,16(r5)
 8005d78:	10002526 	beq	r2,zero,8005e10 <__sfvwrite_r+0xe8>
 8005d7c:	1880008c 	andi	r2,r3,2
 8005d80:	a4400017 	ldw	r17,0(r20)
 8005d84:	10002a26 	beq	r2,zero,8005e30 <__sfvwrite_r+0x108>
 8005d88:	05a00034 	movhi	r22,32768
 8005d8c:	0027883a 	mov	r19,zero
 8005d90:	0025883a 	mov	r18,zero
 8005d94:	b5bf0004 	addi	r22,r22,-1024
 8005d98:	980d883a 	mov	r6,r19
 8005d9c:	a809883a 	mov	r4,r21
 8005da0:	90004626 	beq	r18,zero,8005ebc <__sfvwrite_r+0x194>
 8005da4:	900f883a 	mov	r7,r18
 8005da8:	b480022e 	bgeu	r22,r18,8005db4 <__sfvwrite_r+0x8c>
 8005dac:	01e00034 	movhi	r7,32768
 8005db0:	39ff0004 	addi	r7,r7,-1024
 8005db4:	80800917 	ldw	r2,36(r16)
 8005db8:	81400717 	ldw	r5,28(r16)
 8005dbc:	103ee83a 	callr	r2
 8005dc0:	0080570e 	bge	zero,r2,8005f20 <__sfvwrite_r+0x1f8>
 8005dc4:	a0c00217 	ldw	r3,8(r20)
 8005dc8:	98a7883a 	add	r19,r19,r2
 8005dcc:	90a5c83a 	sub	r18,r18,r2
 8005dd0:	1885c83a 	sub	r2,r3,r2
 8005dd4:	a0800215 	stw	r2,8(r20)
 8005dd8:	103fef1e 	bne	r2,zero,8005d98 <__sfvwrite_r+0x70>
 8005ddc:	0005883a 	mov	r2,zero
 8005de0:	dfc00b17 	ldw	ra,44(sp)
 8005de4:	df000a17 	ldw	fp,40(sp)
 8005de8:	ddc00917 	ldw	r23,36(sp)
 8005dec:	dd800817 	ldw	r22,32(sp)
 8005df0:	dd400717 	ldw	r21,28(sp)
 8005df4:	dd000617 	ldw	r20,24(sp)
 8005df8:	dcc00517 	ldw	r19,20(sp)
 8005dfc:	dc800417 	ldw	r18,16(sp)
 8005e00:	dc400317 	ldw	r17,12(sp)
 8005e04:	dc000217 	ldw	r16,8(sp)
 8005e08:	dec00c04 	addi	sp,sp,48
 8005e0c:	f800283a 	ret
 8005e10:	800b883a 	mov	r5,r16
 8005e14:	a809883a 	mov	r4,r21
 8005e18:	80074440 	call	8007444 <__swsetup_r>
 8005e1c:	1000eb1e 	bne	r2,zero,80061cc <__sfvwrite_r+0x4a4>
 8005e20:	80c0030b 	ldhu	r3,12(r16)
 8005e24:	a4400017 	ldw	r17,0(r20)
 8005e28:	1880008c 	andi	r2,r3,2
 8005e2c:	103fd61e 	bne	r2,zero,8005d88 <__sfvwrite_r+0x60>
 8005e30:	1880004c 	andi	r2,r3,1
 8005e34:	10003f1e 	bne	r2,zero,8005f34 <__sfvwrite_r+0x20c>
 8005e38:	0039883a 	mov	fp,zero
 8005e3c:	0025883a 	mov	r18,zero
 8005e40:	90001a26 	beq	r18,zero,8005eac <__sfvwrite_r+0x184>
 8005e44:	1880800c 	andi	r2,r3,512
 8005e48:	84c00217 	ldw	r19,8(r16)
 8005e4c:	10002126 	beq	r2,zero,8005ed4 <__sfvwrite_r+0x1ac>
 8005e50:	982f883a 	mov	r23,r19
 8005e54:	94c09336 	bltu	r18,r19,80060a4 <__sfvwrite_r+0x37c>
 8005e58:	1881200c 	andi	r2,r3,1152
 8005e5c:	10009e1e 	bne	r2,zero,80060d8 <__sfvwrite_r+0x3b0>
 8005e60:	81000017 	ldw	r4,0(r16)
 8005e64:	b80d883a 	mov	r6,r23
 8005e68:	e00b883a 	mov	r5,fp
 8005e6c:	8006c980 	call	8006c98 <memmove>
 8005e70:	80c00217 	ldw	r3,8(r16)
 8005e74:	81000017 	ldw	r4,0(r16)
 8005e78:	9005883a 	mov	r2,r18
 8005e7c:	1ce7c83a 	sub	r19,r3,r19
 8005e80:	25cf883a 	add	r7,r4,r23
 8005e84:	84c00215 	stw	r19,8(r16)
 8005e88:	81c00015 	stw	r7,0(r16)
 8005e8c:	a0c00217 	ldw	r3,8(r20)
 8005e90:	e0b9883a 	add	fp,fp,r2
 8005e94:	90a5c83a 	sub	r18,r18,r2
 8005e98:	18a7c83a 	sub	r19,r3,r2
 8005e9c:	a4c00215 	stw	r19,8(r20)
 8005ea0:	983fce26 	beq	r19,zero,8005ddc <__sfvwrite_r+0xb4>
 8005ea4:	80c0030b 	ldhu	r3,12(r16)
 8005ea8:	903fe61e 	bne	r18,zero,8005e44 <__sfvwrite_r+0x11c>
 8005eac:	8f000017 	ldw	fp,0(r17)
 8005eb0:	8c800117 	ldw	r18,4(r17)
 8005eb4:	8c400204 	addi	r17,r17,8
 8005eb8:	003fe106 	br	8005e40 <__sfvwrite_r+0x118>
 8005ebc:	8cc00017 	ldw	r19,0(r17)
 8005ec0:	8c800117 	ldw	r18,4(r17)
 8005ec4:	8c400204 	addi	r17,r17,8
 8005ec8:	003fb306 	br	8005d98 <__sfvwrite_r+0x70>
 8005ecc:	0005883a 	mov	r2,zero
 8005ed0:	f800283a 	ret
 8005ed4:	81000017 	ldw	r4,0(r16)
 8005ed8:	80800417 	ldw	r2,16(r16)
 8005edc:	11005736 	bltu	r2,r4,800603c <__sfvwrite_r+0x314>
 8005ee0:	85c00517 	ldw	r23,20(r16)
 8005ee4:	95c05536 	bltu	r18,r23,800603c <__sfvwrite_r+0x314>
 8005ee8:	00a00034 	movhi	r2,32768
 8005eec:	10bfffc4 	addi	r2,r2,-1
 8005ef0:	9009883a 	mov	r4,r18
 8005ef4:	1480012e 	bgeu	r2,r18,8005efc <__sfvwrite_r+0x1d4>
 8005ef8:	1009883a 	mov	r4,r2
 8005efc:	b80b883a 	mov	r5,r23
 8005f00:	8000c580 	call	8000c58 <__divsi3>
 8005f04:	15cf383a 	mul	r7,r2,r23
 8005f08:	81400717 	ldw	r5,28(r16)
 8005f0c:	80800917 	ldw	r2,36(r16)
 8005f10:	e00d883a 	mov	r6,fp
 8005f14:	a809883a 	mov	r4,r21
 8005f18:	103ee83a 	callr	r2
 8005f1c:	00bfdb16 	blt	zero,r2,8005e8c <__sfvwrite_r+0x164>
 8005f20:	8080030b 	ldhu	r2,12(r16)
 8005f24:	10801014 	ori	r2,r2,64
 8005f28:	8080030d 	sth	r2,12(r16)
 8005f2c:	00bfffc4 	movi	r2,-1
 8005f30:	003fab06 	br	8005de0 <__sfvwrite_r+0xb8>
 8005f34:	0027883a 	mov	r19,zero
 8005f38:	0011883a 	mov	r8,zero
 8005f3c:	0039883a 	mov	fp,zero
 8005f40:	0025883a 	mov	r18,zero
 8005f44:	90001f26 	beq	r18,zero,8005fc4 <__sfvwrite_r+0x29c>
 8005f48:	40005a26 	beq	r8,zero,80060b4 <__sfvwrite_r+0x38c>
 8005f4c:	982d883a 	mov	r22,r19
 8005f50:	94c0012e 	bgeu	r18,r19,8005f58 <__sfvwrite_r+0x230>
 8005f54:	902d883a 	mov	r22,r18
 8005f58:	81000017 	ldw	r4,0(r16)
 8005f5c:	80800417 	ldw	r2,16(r16)
 8005f60:	b02f883a 	mov	r23,r22
 8005f64:	81c00517 	ldw	r7,20(r16)
 8005f68:	1100032e 	bgeu	r2,r4,8005f78 <__sfvwrite_r+0x250>
 8005f6c:	80c00217 	ldw	r3,8(r16)
 8005f70:	38c7883a 	add	r3,r7,r3
 8005f74:	1d801816 	blt	r3,r22,8005fd8 <__sfvwrite_r+0x2b0>
 8005f78:	b1c03e16 	blt	r22,r7,8006074 <__sfvwrite_r+0x34c>
 8005f7c:	80800917 	ldw	r2,36(r16)
 8005f80:	81400717 	ldw	r5,28(r16)
 8005f84:	e00d883a 	mov	r6,fp
 8005f88:	da000115 	stw	r8,4(sp)
 8005f8c:	a809883a 	mov	r4,r21
 8005f90:	103ee83a 	callr	r2
 8005f94:	102f883a 	mov	r23,r2
 8005f98:	da000117 	ldw	r8,4(sp)
 8005f9c:	00bfe00e 	bge	zero,r2,8005f20 <__sfvwrite_r+0x1f8>
 8005fa0:	9de7c83a 	sub	r19,r19,r23
 8005fa4:	98001f26 	beq	r19,zero,8006024 <__sfvwrite_r+0x2fc>
 8005fa8:	a0800217 	ldw	r2,8(r20)
 8005fac:	e5f9883a 	add	fp,fp,r23
 8005fb0:	95e5c83a 	sub	r18,r18,r23
 8005fb4:	15efc83a 	sub	r23,r2,r23
 8005fb8:	a5c00215 	stw	r23,8(r20)
 8005fbc:	b83f8726 	beq	r23,zero,8005ddc <__sfvwrite_r+0xb4>
 8005fc0:	903fe11e 	bne	r18,zero,8005f48 <__sfvwrite_r+0x220>
 8005fc4:	8f000017 	ldw	fp,0(r17)
 8005fc8:	8c800117 	ldw	r18,4(r17)
 8005fcc:	0011883a 	mov	r8,zero
 8005fd0:	8c400204 	addi	r17,r17,8
 8005fd4:	003fdb06 	br	8005f44 <__sfvwrite_r+0x21c>
 8005fd8:	180d883a 	mov	r6,r3
 8005fdc:	e00b883a 	mov	r5,fp
 8005fe0:	da000115 	stw	r8,4(sp)
 8005fe4:	d8c00015 	stw	r3,0(sp)
 8005fe8:	8006c980 	call	8006c98 <memmove>
 8005fec:	d8c00017 	ldw	r3,0(sp)
 8005ff0:	80800017 	ldw	r2,0(r16)
 8005ff4:	800b883a 	mov	r5,r16
 8005ff8:	a809883a 	mov	r4,r21
 8005ffc:	10c5883a 	add	r2,r2,r3
 8006000:	80800015 	stw	r2,0(r16)
 8006004:	d8c00015 	stw	r3,0(sp)
 8006008:	8007a4c0 	call	8007a4c <_fflush_r>
 800600c:	d8c00017 	ldw	r3,0(sp)
 8006010:	da000117 	ldw	r8,4(sp)
 8006014:	103fc21e 	bne	r2,zero,8005f20 <__sfvwrite_r+0x1f8>
 8006018:	182f883a 	mov	r23,r3
 800601c:	9de7c83a 	sub	r19,r19,r23
 8006020:	983fe11e 	bne	r19,zero,8005fa8 <__sfvwrite_r+0x280>
 8006024:	800b883a 	mov	r5,r16
 8006028:	a809883a 	mov	r4,r21
 800602c:	8007a4c0 	call	8007a4c <_fflush_r>
 8006030:	103fbb1e 	bne	r2,zero,8005f20 <__sfvwrite_r+0x1f8>
 8006034:	0011883a 	mov	r8,zero
 8006038:	003fdb06 	br	8005fa8 <__sfvwrite_r+0x280>
 800603c:	94c0012e 	bgeu	r18,r19,8006044 <__sfvwrite_r+0x31c>
 8006040:	9027883a 	mov	r19,r18
 8006044:	980d883a 	mov	r6,r19
 8006048:	e00b883a 	mov	r5,fp
 800604c:	8006c980 	call	8006c98 <memmove>
 8006050:	80800217 	ldw	r2,8(r16)
 8006054:	80c00017 	ldw	r3,0(r16)
 8006058:	14c5c83a 	sub	r2,r2,r19
 800605c:	1cc7883a 	add	r3,r3,r19
 8006060:	80800215 	stw	r2,8(r16)
 8006064:	80c00015 	stw	r3,0(r16)
 8006068:	10004326 	beq	r2,zero,8006178 <__sfvwrite_r+0x450>
 800606c:	9805883a 	mov	r2,r19
 8006070:	003f8606 	br	8005e8c <__sfvwrite_r+0x164>
 8006074:	b00d883a 	mov	r6,r22
 8006078:	e00b883a 	mov	r5,fp
 800607c:	da000115 	stw	r8,4(sp)
 8006080:	8006c980 	call	8006c98 <memmove>
 8006084:	80800217 	ldw	r2,8(r16)
 8006088:	80c00017 	ldw	r3,0(r16)
 800608c:	da000117 	ldw	r8,4(sp)
 8006090:	1585c83a 	sub	r2,r2,r22
 8006094:	1dad883a 	add	r22,r3,r22
 8006098:	80800215 	stw	r2,8(r16)
 800609c:	85800015 	stw	r22,0(r16)
 80060a0:	003fbf06 	br	8005fa0 <__sfvwrite_r+0x278>
 80060a4:	81000017 	ldw	r4,0(r16)
 80060a8:	9027883a 	mov	r19,r18
 80060ac:	902f883a 	mov	r23,r18
 80060b0:	003f6c06 	br	8005e64 <__sfvwrite_r+0x13c>
 80060b4:	900d883a 	mov	r6,r18
 80060b8:	01400284 	movi	r5,10
 80060bc:	e009883a 	mov	r4,fp
 80060c0:	80069f00 	call	80069f0 <memchr>
 80060c4:	10003e26 	beq	r2,zero,80061c0 <__sfvwrite_r+0x498>
 80060c8:	10800044 	addi	r2,r2,1
 80060cc:	1727c83a 	sub	r19,r2,fp
 80060d0:	02000044 	movi	r8,1
 80060d4:	003f9d06 	br	8005f4c <__sfvwrite_r+0x224>
 80060d8:	80800517 	ldw	r2,20(r16)
 80060dc:	81400417 	ldw	r5,16(r16)
 80060e0:	81c00017 	ldw	r7,0(r16)
 80060e4:	10a7883a 	add	r19,r2,r2
 80060e8:	9885883a 	add	r2,r19,r2
 80060ec:	1026d7fa 	srli	r19,r2,31
 80060f0:	396dc83a 	sub	r22,r7,r5
 80060f4:	b1000044 	addi	r4,r22,1
 80060f8:	9885883a 	add	r2,r19,r2
 80060fc:	1027d07a 	srai	r19,r2,1
 8006100:	2485883a 	add	r2,r4,r18
 8006104:	980d883a 	mov	r6,r19
 8006108:	9880022e 	bgeu	r19,r2,8006114 <__sfvwrite_r+0x3ec>
 800610c:	1027883a 	mov	r19,r2
 8006110:	100d883a 	mov	r6,r2
 8006114:	18c1000c 	andi	r3,r3,1024
 8006118:	18001c26 	beq	r3,zero,800618c <__sfvwrite_r+0x464>
 800611c:	300b883a 	mov	r5,r6
 8006120:	a809883a 	mov	r4,r21
 8006124:	80061e40 	call	80061e4 <_malloc_r>
 8006128:	102f883a 	mov	r23,r2
 800612c:	10002926 	beq	r2,zero,80061d4 <__sfvwrite_r+0x4ac>
 8006130:	81400417 	ldw	r5,16(r16)
 8006134:	b00d883a 	mov	r6,r22
 8006138:	1009883a 	mov	r4,r2
 800613c:	8006b500 	call	8006b50 <memcpy>
 8006140:	8080030b 	ldhu	r2,12(r16)
 8006144:	00fedfc4 	movi	r3,-1153
 8006148:	10c4703a 	and	r2,r2,r3
 800614c:	10802014 	ori	r2,r2,128
 8006150:	8080030d 	sth	r2,12(r16)
 8006154:	bd89883a 	add	r4,r23,r22
 8006158:	9d8fc83a 	sub	r7,r19,r22
 800615c:	85c00415 	stw	r23,16(r16)
 8006160:	84c00515 	stw	r19,20(r16)
 8006164:	81000015 	stw	r4,0(r16)
 8006168:	9027883a 	mov	r19,r18
 800616c:	81c00215 	stw	r7,8(r16)
 8006170:	902f883a 	mov	r23,r18
 8006174:	003f3b06 	br	8005e64 <__sfvwrite_r+0x13c>
 8006178:	800b883a 	mov	r5,r16
 800617c:	a809883a 	mov	r4,r21
 8006180:	8007a4c0 	call	8007a4c <_fflush_r>
 8006184:	103fb926 	beq	r2,zero,800606c <__sfvwrite_r+0x344>
 8006188:	003f6506 	br	8005f20 <__sfvwrite_r+0x1f8>
 800618c:	a809883a 	mov	r4,r21
 8006190:	8006df40 	call	8006df4 <_realloc_r>
 8006194:	102f883a 	mov	r23,r2
 8006198:	103fee1e 	bne	r2,zero,8006154 <__sfvwrite_r+0x42c>
 800619c:	81400417 	ldw	r5,16(r16)
 80061a0:	a809883a 	mov	r4,r21
 80061a4:	8007f9c0 	call	8007f9c <_free_r>
 80061a8:	8080030b 	ldhu	r2,12(r16)
 80061ac:	00ffdfc4 	movi	r3,-129
 80061b0:	1884703a 	and	r2,r3,r2
 80061b4:	00c00304 	movi	r3,12
 80061b8:	a8c00015 	stw	r3,0(r21)
 80061bc:	003f5906 	br	8005f24 <__sfvwrite_r+0x1fc>
 80061c0:	94c00044 	addi	r19,r18,1
 80061c4:	02000044 	movi	r8,1
 80061c8:	003f6006 	br	8005f4c <__sfvwrite_r+0x224>
 80061cc:	00bfffc4 	movi	r2,-1
 80061d0:	003f0306 	br	8005de0 <__sfvwrite_r+0xb8>
 80061d4:	00800304 	movi	r2,12
 80061d8:	a8800015 	stw	r2,0(r21)
 80061dc:	8080030b 	ldhu	r2,12(r16)
 80061e0:	003f5006 	br	8005f24 <__sfvwrite_r+0x1fc>

080061e4 <_malloc_r>:
 80061e4:	defff504 	addi	sp,sp,-44
 80061e8:	dc800315 	stw	r18,12(sp)
 80061ec:	dfc00a15 	stw	ra,40(sp)
 80061f0:	df000915 	stw	fp,36(sp)
 80061f4:	ddc00815 	stw	r23,32(sp)
 80061f8:	dd800715 	stw	r22,28(sp)
 80061fc:	dd400615 	stw	r21,24(sp)
 8006200:	dd000515 	stw	r20,20(sp)
 8006204:	dcc00415 	stw	r19,16(sp)
 8006208:	dc400215 	stw	r17,8(sp)
 800620c:	dc000115 	stw	r16,4(sp)
 8006210:	288002c4 	addi	r2,r5,11
 8006214:	00c00584 	movi	r3,22
 8006218:	2025883a 	mov	r18,r4
 800621c:	18807f2e 	bgeu	r3,r2,800641c <_malloc_r+0x238>
 8006220:	047ffe04 	movi	r17,-8
 8006224:	1462703a 	and	r17,r2,r17
 8006228:	8800a316 	blt	r17,zero,80064b8 <_malloc_r+0x2d4>
 800622c:	8940a236 	bltu	r17,r5,80064b8 <_malloc_r+0x2d4>
 8006230:	8008e8c0 	call	8008e8c <__malloc_lock>
 8006234:	00807dc4 	movi	r2,503
 8006238:	1441e92e 	bgeu	r2,r17,80069e0 <_malloc_r+0x7fc>
 800623c:	8804d27a 	srli	r2,r17,9
 8006240:	1000a126 	beq	r2,zero,80064c8 <_malloc_r+0x2e4>
 8006244:	00c00104 	movi	r3,4
 8006248:	18811e36 	bltu	r3,r2,80066c4 <_malloc_r+0x4e0>
 800624c:	8804d1ba 	srli	r2,r17,6
 8006250:	12000e44 	addi	r8,r2,57
 8006254:	11c00e04 	addi	r7,r2,56
 8006258:	4209883a 	add	r4,r8,r8
 800625c:	04c20074 	movhi	r19,2049
 8006260:	2109883a 	add	r4,r4,r4
 8006264:	9cea5b04 	addi	r19,r19,-22164
 8006268:	2109883a 	add	r4,r4,r4
 800626c:	9909883a 	add	r4,r19,r4
 8006270:	24000117 	ldw	r16,4(r4)
 8006274:	213ffe04 	addi	r4,r4,-8
 8006278:	24009726 	beq	r4,r16,80064d8 <_malloc_r+0x2f4>
 800627c:	80800117 	ldw	r2,4(r16)
 8006280:	01bfff04 	movi	r6,-4
 8006284:	014003c4 	movi	r5,15
 8006288:	1184703a 	and	r2,r2,r6
 800628c:	1447c83a 	sub	r3,r2,r17
 8006290:	28c00716 	blt	r5,r3,80062b0 <_malloc_r+0xcc>
 8006294:	1800920e 	bge	r3,zero,80064e0 <_malloc_r+0x2fc>
 8006298:	84000317 	ldw	r16,12(r16)
 800629c:	24008e26 	beq	r4,r16,80064d8 <_malloc_r+0x2f4>
 80062a0:	80800117 	ldw	r2,4(r16)
 80062a4:	1184703a 	and	r2,r2,r6
 80062a8:	1447c83a 	sub	r3,r2,r17
 80062ac:	28fff90e 	bge	r5,r3,8006294 <_malloc_r+0xb0>
 80062b0:	3809883a 	mov	r4,r7
 80062b4:	01820074 	movhi	r6,2049
 80062b8:	9c000417 	ldw	r16,16(r19)
 80062bc:	31aa5b04 	addi	r6,r6,-22164
 80062c0:	32000204 	addi	r8,r6,8
 80062c4:	82013426 	beq	r16,r8,8006798 <_malloc_r+0x5b4>
 80062c8:	80c00117 	ldw	r3,4(r16)
 80062cc:	00bfff04 	movi	r2,-4
 80062d0:	188e703a 	and	r7,r3,r2
 80062d4:	3c45c83a 	sub	r2,r7,r17
 80062d8:	00c003c4 	movi	r3,15
 80062dc:	18811f16 	blt	r3,r2,800675c <_malloc_r+0x578>
 80062e0:	32000515 	stw	r8,20(r6)
 80062e4:	32000415 	stw	r8,16(r6)
 80062e8:	10007f0e 	bge	r2,zero,80064e8 <_malloc_r+0x304>
 80062ec:	00807fc4 	movi	r2,511
 80062f0:	11c0fd36 	bltu	r2,r7,80066e8 <_malloc_r+0x504>
 80062f4:	3806d0fa 	srli	r3,r7,3
 80062f8:	01c00044 	movi	r7,1
 80062fc:	30800117 	ldw	r2,4(r6)
 8006300:	19400044 	addi	r5,r3,1
 8006304:	294b883a 	add	r5,r5,r5
 8006308:	1807d0ba 	srai	r3,r3,2
 800630c:	294b883a 	add	r5,r5,r5
 8006310:	294b883a 	add	r5,r5,r5
 8006314:	298b883a 	add	r5,r5,r6
 8006318:	38c6983a 	sll	r3,r7,r3
 800631c:	29c00017 	ldw	r7,0(r5)
 8006320:	2a7ffe04 	addi	r9,r5,-8
 8006324:	1886b03a 	or	r3,r3,r2
 8006328:	82400315 	stw	r9,12(r16)
 800632c:	81c00215 	stw	r7,8(r16)
 8006330:	30c00115 	stw	r3,4(r6)
 8006334:	2c000015 	stw	r16,0(r5)
 8006338:	3c000315 	stw	r16,12(r7)
 800633c:	2005d0ba 	srai	r2,r4,2
 8006340:	01400044 	movi	r5,1
 8006344:	288a983a 	sll	r5,r5,r2
 8006348:	19406f36 	bltu	r3,r5,8006508 <_malloc_r+0x324>
 800634c:	28c4703a 	and	r2,r5,r3
 8006350:	10000a1e 	bne	r2,zero,800637c <_malloc_r+0x198>
 8006354:	00bfff04 	movi	r2,-4
 8006358:	294b883a 	add	r5,r5,r5
 800635c:	2088703a 	and	r4,r4,r2
 8006360:	28c4703a 	and	r2,r5,r3
 8006364:	21000104 	addi	r4,r4,4
 8006368:	1000041e 	bne	r2,zero,800637c <_malloc_r+0x198>
 800636c:	294b883a 	add	r5,r5,r5
 8006370:	28c4703a 	and	r2,r5,r3
 8006374:	21000104 	addi	r4,r4,4
 8006378:	103ffc26 	beq	r2,zero,800636c <_malloc_r+0x188>
 800637c:	02bfff04 	movi	r10,-4
 8006380:	024003c4 	movi	r9,15
 8006384:	21800044 	addi	r6,r4,1
 8006388:	318d883a 	add	r6,r6,r6
 800638c:	318d883a 	add	r6,r6,r6
 8006390:	318d883a 	add	r6,r6,r6
 8006394:	998d883a 	add	r6,r19,r6
 8006398:	333ffe04 	addi	r12,r6,-8
 800639c:	2017883a 	mov	r11,r4
 80063a0:	31800104 	addi	r6,r6,4
 80063a4:	34000017 	ldw	r16,0(r6)
 80063a8:	31fffd04 	addi	r7,r6,-12
 80063ac:	81c0041e 	bne	r16,r7,80063c0 <_malloc_r+0x1dc>
 80063b0:	0000fb06 	br	80067a0 <_malloc_r+0x5bc>
 80063b4:	1801030e 	bge	r3,zero,80067c4 <_malloc_r+0x5e0>
 80063b8:	84000317 	ldw	r16,12(r16)
 80063bc:	81c0f826 	beq	r16,r7,80067a0 <_malloc_r+0x5bc>
 80063c0:	80800117 	ldw	r2,4(r16)
 80063c4:	1284703a 	and	r2,r2,r10
 80063c8:	1447c83a 	sub	r3,r2,r17
 80063cc:	48fff90e 	bge	r9,r3,80063b4 <_malloc_r+0x1d0>
 80063d0:	80800317 	ldw	r2,12(r16)
 80063d4:	81000217 	ldw	r4,8(r16)
 80063d8:	89400054 	ori	r5,r17,1
 80063dc:	81400115 	stw	r5,4(r16)
 80063e0:	20800315 	stw	r2,12(r4)
 80063e4:	11000215 	stw	r4,8(r2)
 80063e8:	8463883a 	add	r17,r16,r17
 80063ec:	9c400515 	stw	r17,20(r19)
 80063f0:	9c400415 	stw	r17,16(r19)
 80063f4:	18800054 	ori	r2,r3,1
 80063f8:	88800115 	stw	r2,4(r17)
 80063fc:	8a000315 	stw	r8,12(r17)
 8006400:	8a000215 	stw	r8,8(r17)
 8006404:	88e3883a 	add	r17,r17,r3
 8006408:	88c00015 	stw	r3,0(r17)
 800640c:	9009883a 	mov	r4,r18
 8006410:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006414:	80800204 	addi	r2,r16,8
 8006418:	00001b06 	br	8006488 <_malloc_r+0x2a4>
 800641c:	04400404 	movi	r17,16
 8006420:	89402536 	bltu	r17,r5,80064b8 <_malloc_r+0x2d4>
 8006424:	8008e8c0 	call	8008e8c <__malloc_lock>
 8006428:	00800184 	movi	r2,6
 800642c:	01000084 	movi	r4,2
 8006430:	04c20074 	movhi	r19,2049
 8006434:	1085883a 	add	r2,r2,r2
 8006438:	9cea5b04 	addi	r19,r19,-22164
 800643c:	1085883a 	add	r2,r2,r2
 8006440:	9885883a 	add	r2,r19,r2
 8006444:	14000117 	ldw	r16,4(r2)
 8006448:	10fffe04 	addi	r3,r2,-8
 800644c:	80c0d926 	beq	r16,r3,80067b4 <_malloc_r+0x5d0>
 8006450:	80c00117 	ldw	r3,4(r16)
 8006454:	81000317 	ldw	r4,12(r16)
 8006458:	00bfff04 	movi	r2,-4
 800645c:	1884703a 	and	r2,r3,r2
 8006460:	81400217 	ldw	r5,8(r16)
 8006464:	8085883a 	add	r2,r16,r2
 8006468:	10c00117 	ldw	r3,4(r2)
 800646c:	29000315 	stw	r4,12(r5)
 8006470:	21400215 	stw	r5,8(r4)
 8006474:	18c00054 	ori	r3,r3,1
 8006478:	10c00115 	stw	r3,4(r2)
 800647c:	9009883a 	mov	r4,r18
 8006480:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006484:	80800204 	addi	r2,r16,8
 8006488:	dfc00a17 	ldw	ra,40(sp)
 800648c:	df000917 	ldw	fp,36(sp)
 8006490:	ddc00817 	ldw	r23,32(sp)
 8006494:	dd800717 	ldw	r22,28(sp)
 8006498:	dd400617 	ldw	r21,24(sp)
 800649c:	dd000517 	ldw	r20,20(sp)
 80064a0:	dcc00417 	ldw	r19,16(sp)
 80064a4:	dc800317 	ldw	r18,12(sp)
 80064a8:	dc400217 	ldw	r17,8(sp)
 80064ac:	dc000117 	ldw	r16,4(sp)
 80064b0:	dec00b04 	addi	sp,sp,44
 80064b4:	f800283a 	ret
 80064b8:	00800304 	movi	r2,12
 80064bc:	90800015 	stw	r2,0(r18)
 80064c0:	0005883a 	mov	r2,zero
 80064c4:	003ff006 	br	8006488 <_malloc_r+0x2a4>
 80064c8:	01002004 	movi	r4,128
 80064cc:	02001004 	movi	r8,64
 80064d0:	01c00fc4 	movi	r7,63
 80064d4:	003f6106 	br	800625c <_malloc_r+0x78>
 80064d8:	4009883a 	mov	r4,r8
 80064dc:	003f7506 	br	80062b4 <_malloc_r+0xd0>
 80064e0:	81000317 	ldw	r4,12(r16)
 80064e4:	003fde06 	br	8006460 <_malloc_r+0x27c>
 80064e8:	81c5883a 	add	r2,r16,r7
 80064ec:	11400117 	ldw	r5,4(r2)
 80064f0:	9009883a 	mov	r4,r18
 80064f4:	29400054 	ori	r5,r5,1
 80064f8:	11400115 	stw	r5,4(r2)
 80064fc:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006500:	80800204 	addi	r2,r16,8
 8006504:	003fe006 	br	8006488 <_malloc_r+0x2a4>
 8006508:	9c000217 	ldw	r16,8(r19)
 800650c:	00bfff04 	movi	r2,-4
 8006510:	85800117 	ldw	r22,4(r16)
 8006514:	b0ac703a 	and	r22,r22,r2
 8006518:	b4400336 	bltu	r22,r17,8006528 <_malloc_r+0x344>
 800651c:	b445c83a 	sub	r2,r22,r17
 8006520:	00c003c4 	movi	r3,15
 8006524:	18805d16 	blt	r3,r2,800669c <_malloc_r+0x4b8>
 8006528:	05c20074 	movhi	r23,2049
 800652c:	00820074 	movhi	r2,2049
 8006530:	10b21004 	addi	r2,r2,-14272
 8006534:	bdeb6804 	addi	r23,r23,-21088
 8006538:	15400017 	ldw	r21,0(r2)
 800653c:	b8c00017 	ldw	r3,0(r23)
 8006540:	00bfffc4 	movi	r2,-1
 8006544:	858d883a 	add	r6,r16,r22
 8006548:	8d6b883a 	add	r21,r17,r21
 800654c:	1880ea26 	beq	r3,r2,80068f8 <_malloc_r+0x714>
 8006550:	ad4403c4 	addi	r21,r21,4111
 8006554:	00bc0004 	movi	r2,-4096
 8006558:	a8aa703a 	and	r21,r21,r2
 800655c:	a80b883a 	mov	r5,r21
 8006560:	9009883a 	mov	r4,r18
 8006564:	d9800015 	stw	r6,0(sp)
 8006568:	80073580 	call	8007358 <_sbrk_r>
 800656c:	1029883a 	mov	r20,r2
 8006570:	00bfffc4 	movi	r2,-1
 8006574:	d9800017 	ldw	r6,0(sp)
 8006578:	a080e826 	beq	r20,r2,800691c <_malloc_r+0x738>
 800657c:	a180a636 	bltu	r20,r6,8006818 <_malloc_r+0x634>
 8006580:	07020074 	movhi	fp,2049
 8006584:	e7321104 	addi	fp,fp,-14268
 8006588:	e0800017 	ldw	r2,0(fp)
 800658c:	a887883a 	add	r3,r21,r2
 8006590:	e0c00015 	stw	r3,0(fp)
 8006594:	3500e626 	beq	r6,r20,8006930 <_malloc_r+0x74c>
 8006598:	b9000017 	ldw	r4,0(r23)
 800659c:	00bfffc4 	movi	r2,-1
 80065a0:	2080ee26 	beq	r4,r2,800695c <_malloc_r+0x778>
 80065a4:	a185c83a 	sub	r2,r20,r6
 80065a8:	10c5883a 	add	r2,r2,r3
 80065ac:	e0800015 	stw	r2,0(fp)
 80065b0:	a0c001cc 	andi	r3,r20,7
 80065b4:	1800bc26 	beq	r3,zero,80068a8 <_malloc_r+0x6c4>
 80065b8:	a0e9c83a 	sub	r20,r20,r3
 80065bc:	00840204 	movi	r2,4104
 80065c0:	a5000204 	addi	r20,r20,8
 80065c4:	10c7c83a 	sub	r3,r2,r3
 80065c8:	a545883a 	add	r2,r20,r21
 80065cc:	1083ffcc 	andi	r2,r2,4095
 80065d0:	18abc83a 	sub	r21,r3,r2
 80065d4:	a80b883a 	mov	r5,r21
 80065d8:	9009883a 	mov	r4,r18
 80065dc:	80073580 	call	8007358 <_sbrk_r>
 80065e0:	00ffffc4 	movi	r3,-1
 80065e4:	10c0e126 	beq	r2,r3,800696c <_malloc_r+0x788>
 80065e8:	1505c83a 	sub	r2,r2,r20
 80065ec:	1545883a 	add	r2,r2,r21
 80065f0:	10800054 	ori	r2,r2,1
 80065f4:	e0c00017 	ldw	r3,0(fp)
 80065f8:	9d000215 	stw	r20,8(r19)
 80065fc:	a0800115 	stw	r2,4(r20)
 8006600:	a8c7883a 	add	r3,r21,r3
 8006604:	e0c00015 	stw	r3,0(fp)
 8006608:	84c00e26 	beq	r16,r19,8006644 <_malloc_r+0x460>
 800660c:	018003c4 	movi	r6,15
 8006610:	3580a72e 	bgeu	r6,r22,80068b0 <_malloc_r+0x6cc>
 8006614:	81400117 	ldw	r5,4(r16)
 8006618:	013ffe04 	movi	r4,-8
 800661c:	b0bffd04 	addi	r2,r22,-12
 8006620:	1104703a 	and	r2,r2,r4
 8006624:	2900004c 	andi	r4,r5,1
 8006628:	2088b03a 	or	r4,r4,r2
 800662c:	81000115 	stw	r4,4(r16)
 8006630:	01400144 	movi	r5,5
 8006634:	8089883a 	add	r4,r16,r2
 8006638:	21400115 	stw	r5,4(r4)
 800663c:	21400215 	stw	r5,8(r4)
 8006640:	3080cd36 	bltu	r6,r2,8006978 <_malloc_r+0x794>
 8006644:	00820074 	movhi	r2,2049
 8006648:	10b20f04 	addi	r2,r2,-14276
 800664c:	11000017 	ldw	r4,0(r2)
 8006650:	20c0012e 	bgeu	r4,r3,8006658 <_malloc_r+0x474>
 8006654:	10c00015 	stw	r3,0(r2)
 8006658:	00820074 	movhi	r2,2049
 800665c:	10b20e04 	addi	r2,r2,-14280
 8006660:	11000017 	ldw	r4,0(r2)
 8006664:	9c000217 	ldw	r16,8(r19)
 8006668:	20c0012e 	bgeu	r4,r3,8006670 <_malloc_r+0x48c>
 800666c:	10c00015 	stw	r3,0(r2)
 8006670:	80c00117 	ldw	r3,4(r16)
 8006674:	00bfff04 	movi	r2,-4
 8006678:	1886703a 	and	r3,r3,r2
 800667c:	1c45c83a 	sub	r2,r3,r17
 8006680:	1c400236 	bltu	r3,r17,800668c <_malloc_r+0x4a8>
 8006684:	00c003c4 	movi	r3,15
 8006688:	18800416 	blt	r3,r2,800669c <_malloc_r+0x4b8>
 800668c:	9009883a 	mov	r4,r18
 8006690:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006694:	0005883a 	mov	r2,zero
 8006698:	003f7b06 	br	8006488 <_malloc_r+0x2a4>
 800669c:	88c00054 	ori	r3,r17,1
 80066a0:	80c00115 	stw	r3,4(r16)
 80066a4:	8463883a 	add	r17,r16,r17
 80066a8:	10800054 	ori	r2,r2,1
 80066ac:	9c400215 	stw	r17,8(r19)
 80066b0:	88800115 	stw	r2,4(r17)
 80066b4:	9009883a 	mov	r4,r18
 80066b8:	8008eb00 	call	8008eb0 <__malloc_unlock>
 80066bc:	80800204 	addi	r2,r16,8
 80066c0:	003f7106 	br	8006488 <_malloc_r+0x2a4>
 80066c4:	00c00504 	movi	r3,20
 80066c8:	18804a2e 	bgeu	r3,r2,80067f4 <_malloc_r+0x610>
 80066cc:	00c01504 	movi	r3,84
 80066d0:	18806e36 	bltu	r3,r2,800688c <_malloc_r+0x6a8>
 80066d4:	8804d33a 	srli	r2,r17,12
 80066d8:	12001bc4 	addi	r8,r2,111
 80066dc:	11c01b84 	addi	r7,r2,110
 80066e0:	4209883a 	add	r4,r8,r8
 80066e4:	003edd06 	br	800625c <_malloc_r+0x78>
 80066e8:	3804d27a 	srli	r2,r7,9
 80066ec:	00c00104 	movi	r3,4
 80066f0:	1880442e 	bgeu	r3,r2,8006804 <_malloc_r+0x620>
 80066f4:	00c00504 	movi	r3,20
 80066f8:	18808136 	bltu	r3,r2,8006900 <_malloc_r+0x71c>
 80066fc:	11401704 	addi	r5,r2,92
 8006700:	10c016c4 	addi	r3,r2,91
 8006704:	294b883a 	add	r5,r5,r5
 8006708:	294b883a 	add	r5,r5,r5
 800670c:	294b883a 	add	r5,r5,r5
 8006710:	994b883a 	add	r5,r19,r5
 8006714:	28800017 	ldw	r2,0(r5)
 8006718:	01820074 	movhi	r6,2049
 800671c:	297ffe04 	addi	r5,r5,-8
 8006720:	31aa5b04 	addi	r6,r6,-22164
 8006724:	28806526 	beq	r5,r2,80068bc <_malloc_r+0x6d8>
 8006728:	01bfff04 	movi	r6,-4
 800672c:	10c00117 	ldw	r3,4(r2)
 8006730:	1986703a 	and	r3,r3,r6
 8006734:	38c0022e 	bgeu	r7,r3,8006740 <_malloc_r+0x55c>
 8006738:	10800217 	ldw	r2,8(r2)
 800673c:	28bffb1e 	bne	r5,r2,800672c <_malloc_r+0x548>
 8006740:	11400317 	ldw	r5,12(r2)
 8006744:	98c00117 	ldw	r3,4(r19)
 8006748:	81400315 	stw	r5,12(r16)
 800674c:	80800215 	stw	r2,8(r16)
 8006750:	2c000215 	stw	r16,8(r5)
 8006754:	14000315 	stw	r16,12(r2)
 8006758:	003ef806 	br	800633c <_malloc_r+0x158>
 800675c:	88c00054 	ori	r3,r17,1
 8006760:	80c00115 	stw	r3,4(r16)
 8006764:	8463883a 	add	r17,r16,r17
 8006768:	34400515 	stw	r17,20(r6)
 800676c:	34400415 	stw	r17,16(r6)
 8006770:	10c00054 	ori	r3,r2,1
 8006774:	8a000315 	stw	r8,12(r17)
 8006778:	8a000215 	stw	r8,8(r17)
 800677c:	88c00115 	stw	r3,4(r17)
 8006780:	88a3883a 	add	r17,r17,r2
 8006784:	88800015 	stw	r2,0(r17)
 8006788:	9009883a 	mov	r4,r18
 800678c:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006790:	80800204 	addi	r2,r16,8
 8006794:	003f3c06 	br	8006488 <_malloc_r+0x2a4>
 8006798:	30c00117 	ldw	r3,4(r6)
 800679c:	003ee706 	br	800633c <_malloc_r+0x158>
 80067a0:	5ac00044 	addi	r11,r11,1
 80067a4:	588000cc 	andi	r2,r11,3
 80067a8:	31800204 	addi	r6,r6,8
 80067ac:	103efd1e 	bne	r2,zero,80063a4 <_malloc_r+0x1c0>
 80067b0:	00002406 	br	8006844 <_malloc_r+0x660>
 80067b4:	14000317 	ldw	r16,12(r2)
 80067b8:	143f251e 	bne	r2,r16,8006450 <_malloc_r+0x26c>
 80067bc:	21000084 	addi	r4,r4,2
 80067c0:	003ebc06 	br	80062b4 <_malloc_r+0xd0>
 80067c4:	8085883a 	add	r2,r16,r2
 80067c8:	10c00117 	ldw	r3,4(r2)
 80067cc:	81000317 	ldw	r4,12(r16)
 80067d0:	81400217 	ldw	r5,8(r16)
 80067d4:	18c00054 	ori	r3,r3,1
 80067d8:	10c00115 	stw	r3,4(r2)
 80067dc:	29000315 	stw	r4,12(r5)
 80067e0:	21400215 	stw	r5,8(r4)
 80067e4:	9009883a 	mov	r4,r18
 80067e8:	8008eb00 	call	8008eb0 <__malloc_unlock>
 80067ec:	80800204 	addi	r2,r16,8
 80067f0:	003f2506 	br	8006488 <_malloc_r+0x2a4>
 80067f4:	12001704 	addi	r8,r2,92
 80067f8:	11c016c4 	addi	r7,r2,91
 80067fc:	4209883a 	add	r4,r8,r8
 8006800:	003e9606 	br	800625c <_malloc_r+0x78>
 8006804:	3804d1ba 	srli	r2,r7,6
 8006808:	11400e44 	addi	r5,r2,57
 800680c:	10c00e04 	addi	r3,r2,56
 8006810:	294b883a 	add	r5,r5,r5
 8006814:	003fbc06 	br	8006708 <_malloc_r+0x524>
 8006818:	84ff5926 	beq	r16,r19,8006580 <_malloc_r+0x39c>
 800681c:	00820074 	movhi	r2,2049
 8006820:	10aa5b04 	addi	r2,r2,-22164
 8006824:	14000217 	ldw	r16,8(r2)
 8006828:	00bfff04 	movi	r2,-4
 800682c:	80c00117 	ldw	r3,4(r16)
 8006830:	1886703a 	and	r3,r3,r2
 8006834:	003f9106 	br	800667c <_malloc_r+0x498>
 8006838:	60800217 	ldw	r2,8(r12)
 800683c:	213fffc4 	addi	r4,r4,-1
 8006840:	1300651e 	bne	r2,r12,80069d8 <_malloc_r+0x7f4>
 8006844:	208000cc 	andi	r2,r4,3
 8006848:	633ffe04 	addi	r12,r12,-8
 800684c:	103ffa1e 	bne	r2,zero,8006838 <_malloc_r+0x654>
 8006850:	98800117 	ldw	r2,4(r19)
 8006854:	0146303a 	nor	r3,zero,r5
 8006858:	1884703a 	and	r2,r3,r2
 800685c:	98800115 	stw	r2,4(r19)
 8006860:	294b883a 	add	r5,r5,r5
 8006864:	117f2836 	bltu	r2,r5,8006508 <_malloc_r+0x324>
 8006868:	283f2726 	beq	r5,zero,8006508 <_malloc_r+0x324>
 800686c:	2886703a 	and	r3,r5,r2
 8006870:	5809883a 	mov	r4,r11
 8006874:	183ec31e 	bne	r3,zero,8006384 <_malloc_r+0x1a0>
 8006878:	294b883a 	add	r5,r5,r5
 800687c:	2886703a 	and	r3,r5,r2
 8006880:	21000104 	addi	r4,r4,4
 8006884:	183ffc26 	beq	r3,zero,8006878 <_malloc_r+0x694>
 8006888:	003ebe06 	br	8006384 <_malloc_r+0x1a0>
 800688c:	00c05504 	movi	r3,340
 8006890:	18801236 	bltu	r3,r2,80068dc <_malloc_r+0x6f8>
 8006894:	8804d3fa 	srli	r2,r17,15
 8006898:	12001e04 	addi	r8,r2,120
 800689c:	11c01dc4 	addi	r7,r2,119
 80068a0:	4209883a 	add	r4,r8,r8
 80068a4:	003e6d06 	br	800625c <_malloc_r+0x78>
 80068a8:	00c40004 	movi	r3,4096
 80068ac:	003f4606 	br	80065c8 <_malloc_r+0x3e4>
 80068b0:	00800044 	movi	r2,1
 80068b4:	a0800115 	stw	r2,4(r20)
 80068b8:	003f7406 	br	800668c <_malloc_r+0x4a8>
 80068bc:	1805d0ba 	srai	r2,r3,2
 80068c0:	01c00044 	movi	r7,1
 80068c4:	30c00117 	ldw	r3,4(r6)
 80068c8:	388e983a 	sll	r7,r7,r2
 80068cc:	2805883a 	mov	r2,r5
 80068d0:	38c6b03a 	or	r3,r7,r3
 80068d4:	30c00115 	stw	r3,4(r6)
 80068d8:	003f9b06 	br	8006748 <_malloc_r+0x564>
 80068dc:	00c15504 	movi	r3,1364
 80068e0:	18801a36 	bltu	r3,r2,800694c <_malloc_r+0x768>
 80068e4:	8804d4ba 	srli	r2,r17,18
 80068e8:	12001f44 	addi	r8,r2,125
 80068ec:	11c01f04 	addi	r7,r2,124
 80068f0:	4209883a 	add	r4,r8,r8
 80068f4:	003e5906 	br	800625c <_malloc_r+0x78>
 80068f8:	ad400404 	addi	r21,r21,16
 80068fc:	003f1706 	br	800655c <_malloc_r+0x378>
 8006900:	00c01504 	movi	r3,84
 8006904:	18802336 	bltu	r3,r2,8006994 <_malloc_r+0x7b0>
 8006908:	3804d33a 	srli	r2,r7,12
 800690c:	11401bc4 	addi	r5,r2,111
 8006910:	10c01b84 	addi	r3,r2,110
 8006914:	294b883a 	add	r5,r5,r5
 8006918:	003f7b06 	br	8006708 <_malloc_r+0x524>
 800691c:	9c000217 	ldw	r16,8(r19)
 8006920:	00bfff04 	movi	r2,-4
 8006924:	80c00117 	ldw	r3,4(r16)
 8006928:	1886703a 	and	r3,r3,r2
 800692c:	003f5306 	br	800667c <_malloc_r+0x498>
 8006930:	3083ffcc 	andi	r2,r6,4095
 8006934:	103f181e 	bne	r2,zero,8006598 <_malloc_r+0x3b4>
 8006938:	99000217 	ldw	r4,8(r19)
 800693c:	b545883a 	add	r2,r22,r21
 8006940:	10800054 	ori	r2,r2,1
 8006944:	20800115 	stw	r2,4(r4)
 8006948:	003f3e06 	br	8006644 <_malloc_r+0x460>
 800694c:	01003f84 	movi	r4,254
 8006950:	02001fc4 	movi	r8,127
 8006954:	01c01f84 	movi	r7,126
 8006958:	003e4006 	br	800625c <_malloc_r+0x78>
 800695c:	00820074 	movhi	r2,2049
 8006960:	10ab6804 	addi	r2,r2,-21088
 8006964:	15000015 	stw	r20,0(r2)
 8006968:	003f1106 	br	80065b0 <_malloc_r+0x3cc>
 800696c:	00800044 	movi	r2,1
 8006970:	002b883a 	mov	r21,zero
 8006974:	003f1f06 	br	80065f4 <_malloc_r+0x410>
 8006978:	81400204 	addi	r5,r16,8
 800697c:	9009883a 	mov	r4,r18
 8006980:	8007f9c0 	call	8007f9c <_free_r>
 8006984:	00820074 	movhi	r2,2049
 8006988:	10b21104 	addi	r2,r2,-14268
 800698c:	10c00017 	ldw	r3,0(r2)
 8006990:	003f2c06 	br	8006644 <_malloc_r+0x460>
 8006994:	00c05504 	movi	r3,340
 8006998:	18800536 	bltu	r3,r2,80069b0 <_malloc_r+0x7cc>
 800699c:	3804d3fa 	srli	r2,r7,15
 80069a0:	11401e04 	addi	r5,r2,120
 80069a4:	10c01dc4 	addi	r3,r2,119
 80069a8:	294b883a 	add	r5,r5,r5
 80069ac:	003f5606 	br	8006708 <_malloc_r+0x524>
 80069b0:	00c15504 	movi	r3,1364
 80069b4:	18800536 	bltu	r3,r2,80069cc <_malloc_r+0x7e8>
 80069b8:	3804d4ba 	srli	r2,r7,18
 80069bc:	11401f44 	addi	r5,r2,125
 80069c0:	10c01f04 	addi	r3,r2,124
 80069c4:	294b883a 	add	r5,r5,r5
 80069c8:	003f4f06 	br	8006708 <_malloc_r+0x524>
 80069cc:	01403f84 	movi	r5,254
 80069d0:	00c01f84 	movi	r3,126
 80069d4:	003f4c06 	br	8006708 <_malloc_r+0x524>
 80069d8:	98800117 	ldw	r2,4(r19)
 80069dc:	003fa006 	br	8006860 <_malloc_r+0x67c>
 80069e0:	8808d0fa 	srli	r4,r17,3
 80069e4:	20800044 	addi	r2,r4,1
 80069e8:	1085883a 	add	r2,r2,r2
 80069ec:	003e9006 	br	8006430 <_malloc_r+0x24c>

080069f0 <memchr>:
 80069f0:	208000cc 	andi	r2,r4,3
 80069f4:	280f883a 	mov	r7,r5
 80069f8:	10003426 	beq	r2,zero,8006acc <memchr+0xdc>
 80069fc:	30bfffc4 	addi	r2,r6,-1
 8006a00:	30001a26 	beq	r6,zero,8006a6c <memchr+0x7c>
 8006a04:	20c00003 	ldbu	r3,0(r4)
 8006a08:	29803fcc 	andi	r6,r5,255
 8006a0c:	30c0051e 	bne	r6,r3,8006a24 <memchr+0x34>
 8006a10:	00001806 	br	8006a74 <memchr+0x84>
 8006a14:	10001526 	beq	r2,zero,8006a6c <memchr+0x7c>
 8006a18:	20c00003 	ldbu	r3,0(r4)
 8006a1c:	10bfffc4 	addi	r2,r2,-1
 8006a20:	30c01426 	beq	r6,r3,8006a74 <memchr+0x84>
 8006a24:	21000044 	addi	r4,r4,1
 8006a28:	20c000cc 	andi	r3,r4,3
 8006a2c:	183ff91e 	bne	r3,zero,8006a14 <memchr+0x24>
 8006a30:	020000c4 	movi	r8,3
 8006a34:	40801136 	bltu	r8,r2,8006a7c <memchr+0x8c>
 8006a38:	10000c26 	beq	r2,zero,8006a6c <memchr+0x7c>
 8006a3c:	20c00003 	ldbu	r3,0(r4)
 8006a40:	29403fcc 	andi	r5,r5,255
 8006a44:	28c00b26 	beq	r5,r3,8006a74 <memchr+0x84>
 8006a48:	20c00044 	addi	r3,r4,1
 8006a4c:	39803fcc 	andi	r6,r7,255
 8006a50:	2089883a 	add	r4,r4,r2
 8006a54:	00000306 	br	8006a64 <memchr+0x74>
 8006a58:	18c00044 	addi	r3,r3,1
 8006a5c:	197fffc3 	ldbu	r5,-1(r3)
 8006a60:	31400526 	beq	r6,r5,8006a78 <memchr+0x88>
 8006a64:	1805883a 	mov	r2,r3
 8006a68:	20fffb1e 	bne	r4,r3,8006a58 <memchr+0x68>
 8006a6c:	0005883a 	mov	r2,zero
 8006a70:	f800283a 	ret
 8006a74:	2005883a 	mov	r2,r4
 8006a78:	f800283a 	ret
 8006a7c:	28c03fcc 	andi	r3,r5,255
 8006a80:	1812923a 	slli	r9,r3,8
 8006a84:	02ffbff4 	movhi	r11,65279
 8006a88:	02a02074 	movhi	r10,32897
 8006a8c:	48d2b03a 	or	r9,r9,r3
 8006a90:	4806943a 	slli	r3,r9,16
 8006a94:	5affbfc4 	addi	r11,r11,-257
 8006a98:	52a02004 	addi	r10,r10,-32640
 8006a9c:	48d2b03a 	or	r9,r9,r3
 8006aa0:	20c00017 	ldw	r3,0(r4)
 8006aa4:	48c6f03a 	xor	r3,r9,r3
 8006aa8:	1acd883a 	add	r6,r3,r11
 8006aac:	00c6303a 	nor	r3,zero,r3
 8006ab0:	30c6703a 	and	r3,r6,r3
 8006ab4:	1a86703a 	and	r3,r3,r10
 8006ab8:	183fe01e 	bne	r3,zero,8006a3c <memchr+0x4c>
 8006abc:	10bfff04 	addi	r2,r2,-4
 8006ac0:	21000104 	addi	r4,r4,4
 8006ac4:	40bff636 	bltu	r8,r2,8006aa0 <memchr+0xb0>
 8006ac8:	003fdb06 	br	8006a38 <memchr+0x48>
 8006acc:	3005883a 	mov	r2,r6
 8006ad0:	003fd706 	br	8006a30 <memchr+0x40>

08006ad4 <memcmp>:
 8006ad4:	01c000c4 	movi	r7,3
 8006ad8:	3980192e 	bgeu	r7,r6,8006b40 <memcmp+0x6c>
 8006adc:	2144b03a 	or	r2,r4,r5
 8006ae0:	11c4703a 	and	r2,r2,r7
 8006ae4:	10000f26 	beq	r2,zero,8006b24 <memcmp+0x50>
 8006ae8:	20800003 	ldbu	r2,0(r4)
 8006aec:	28c00003 	ldbu	r3,0(r5)
 8006af0:	10c0151e 	bne	r2,r3,8006b48 <memcmp+0x74>
 8006af4:	31bfff84 	addi	r6,r6,-2
 8006af8:	01ffffc4 	movi	r7,-1
 8006afc:	00000406 	br	8006b10 <memcmp+0x3c>
 8006b00:	20800003 	ldbu	r2,0(r4)
 8006b04:	28c00003 	ldbu	r3,0(r5)
 8006b08:	31bfffc4 	addi	r6,r6,-1
 8006b0c:	10c00e1e 	bne	r2,r3,8006b48 <memcmp+0x74>
 8006b10:	21000044 	addi	r4,r4,1
 8006b14:	29400044 	addi	r5,r5,1
 8006b18:	31fff91e 	bne	r6,r7,8006b00 <memcmp+0x2c>
 8006b1c:	0005883a 	mov	r2,zero
 8006b20:	f800283a 	ret
 8006b24:	20c00017 	ldw	r3,0(r4)
 8006b28:	28800017 	ldw	r2,0(r5)
 8006b2c:	18bfee1e 	bne	r3,r2,8006ae8 <memcmp+0x14>
 8006b30:	31bfff04 	addi	r6,r6,-4
 8006b34:	21000104 	addi	r4,r4,4
 8006b38:	29400104 	addi	r5,r5,4
 8006b3c:	39bff936 	bltu	r7,r6,8006b24 <memcmp+0x50>
 8006b40:	303fe91e 	bne	r6,zero,8006ae8 <memcmp+0x14>
 8006b44:	003ff506 	br	8006b1c <memcmp+0x48>
 8006b48:	10c5c83a 	sub	r2,r2,r3
 8006b4c:	f800283a 	ret

08006b50 <memcpy>:
 8006b50:	defffd04 	addi	sp,sp,-12
 8006b54:	dfc00215 	stw	ra,8(sp)
 8006b58:	dc400115 	stw	r17,4(sp)
 8006b5c:	dc000015 	stw	r16,0(sp)
 8006b60:	00c003c4 	movi	r3,15
 8006b64:	2005883a 	mov	r2,r4
 8006b68:	1980452e 	bgeu	r3,r6,8006c80 <memcpy+0x130>
 8006b6c:	2906b03a 	or	r3,r5,r4
 8006b70:	18c000cc 	andi	r3,r3,3
 8006b74:	1800441e 	bne	r3,zero,8006c88 <memcpy+0x138>
 8006b78:	347ffc04 	addi	r17,r6,-16
 8006b7c:	8822d13a 	srli	r17,r17,4
 8006b80:	28c00104 	addi	r3,r5,4
 8006b84:	23400104 	addi	r13,r4,4
 8006b88:	8820913a 	slli	r16,r17,4
 8006b8c:	2b000204 	addi	r12,r5,8
 8006b90:	22c00204 	addi	r11,r4,8
 8006b94:	84000504 	addi	r16,r16,20
 8006b98:	2a800304 	addi	r10,r5,12
 8006b9c:	22400304 	addi	r9,r4,12
 8006ba0:	2c21883a 	add	r16,r5,r16
 8006ba4:	2811883a 	mov	r8,r5
 8006ba8:	200f883a 	mov	r7,r4
 8006bac:	41000017 	ldw	r4,0(r8)
 8006bb0:	1fc00017 	ldw	ra,0(r3)
 8006bb4:	63c00017 	ldw	r15,0(r12)
 8006bb8:	39000015 	stw	r4,0(r7)
 8006bbc:	53800017 	ldw	r14,0(r10)
 8006bc0:	6fc00015 	stw	ra,0(r13)
 8006bc4:	5bc00015 	stw	r15,0(r11)
 8006bc8:	4b800015 	stw	r14,0(r9)
 8006bcc:	18c00404 	addi	r3,r3,16
 8006bd0:	39c00404 	addi	r7,r7,16
 8006bd4:	42000404 	addi	r8,r8,16
 8006bd8:	6b400404 	addi	r13,r13,16
 8006bdc:	63000404 	addi	r12,r12,16
 8006be0:	5ac00404 	addi	r11,r11,16
 8006be4:	52800404 	addi	r10,r10,16
 8006be8:	4a400404 	addi	r9,r9,16
 8006bec:	1c3fef1e 	bne	r3,r16,8006bac <memcpy+0x5c>
 8006bf0:	89c00044 	addi	r7,r17,1
 8006bf4:	380e913a 	slli	r7,r7,4
 8006bf8:	310003cc 	andi	r4,r6,15
 8006bfc:	02c000c4 	movi	r11,3
 8006c00:	11c7883a 	add	r3,r2,r7
 8006c04:	29cb883a 	add	r5,r5,r7
 8006c08:	5900212e 	bgeu	r11,r4,8006c90 <memcpy+0x140>
 8006c0c:	1813883a 	mov	r9,r3
 8006c10:	2811883a 	mov	r8,r5
 8006c14:	200f883a 	mov	r7,r4
 8006c18:	42800017 	ldw	r10,0(r8)
 8006c1c:	4a400104 	addi	r9,r9,4
 8006c20:	39ffff04 	addi	r7,r7,-4
 8006c24:	4abfff15 	stw	r10,-4(r9)
 8006c28:	42000104 	addi	r8,r8,4
 8006c2c:	59fffa36 	bltu	r11,r7,8006c18 <memcpy+0xc8>
 8006c30:	213fff04 	addi	r4,r4,-4
 8006c34:	2008d0ba 	srli	r4,r4,2
 8006c38:	318000cc 	andi	r6,r6,3
 8006c3c:	21000044 	addi	r4,r4,1
 8006c40:	2109883a 	add	r4,r4,r4
 8006c44:	2109883a 	add	r4,r4,r4
 8006c48:	1907883a 	add	r3,r3,r4
 8006c4c:	290b883a 	add	r5,r5,r4
 8006c50:	30000626 	beq	r6,zero,8006c6c <memcpy+0x11c>
 8006c54:	198d883a 	add	r6,r3,r6
 8006c58:	29c00003 	ldbu	r7,0(r5)
 8006c5c:	18c00044 	addi	r3,r3,1
 8006c60:	29400044 	addi	r5,r5,1
 8006c64:	19ffffc5 	stb	r7,-1(r3)
 8006c68:	19bffb1e 	bne	r3,r6,8006c58 <memcpy+0x108>
 8006c6c:	dfc00217 	ldw	ra,8(sp)
 8006c70:	dc400117 	ldw	r17,4(sp)
 8006c74:	dc000017 	ldw	r16,0(sp)
 8006c78:	dec00304 	addi	sp,sp,12
 8006c7c:	f800283a 	ret
 8006c80:	2007883a 	mov	r3,r4
 8006c84:	003ff206 	br	8006c50 <memcpy+0x100>
 8006c88:	2007883a 	mov	r3,r4
 8006c8c:	003ff106 	br	8006c54 <memcpy+0x104>
 8006c90:	200d883a 	mov	r6,r4
 8006c94:	003fee06 	br	8006c50 <memcpy+0x100>

08006c98 <memmove>:
 8006c98:	2005883a 	mov	r2,r4
 8006c9c:	29000b2e 	bgeu	r5,r4,8006ccc <memmove+0x34>
 8006ca0:	298f883a 	add	r7,r5,r6
 8006ca4:	21c0092e 	bgeu	r4,r7,8006ccc <memmove+0x34>
 8006ca8:	2187883a 	add	r3,r4,r6
 8006cac:	198bc83a 	sub	r5,r3,r6
 8006cb0:	30004826 	beq	r6,zero,8006dd4 <memmove+0x13c>
 8006cb4:	39ffffc4 	addi	r7,r7,-1
 8006cb8:	39000003 	ldbu	r4,0(r7)
 8006cbc:	18ffffc4 	addi	r3,r3,-1
 8006cc0:	19000005 	stb	r4,0(r3)
 8006cc4:	28fffb1e 	bne	r5,r3,8006cb4 <memmove+0x1c>
 8006cc8:	f800283a 	ret
 8006ccc:	00c003c4 	movi	r3,15
 8006cd0:	1980412e 	bgeu	r3,r6,8006dd8 <memmove+0x140>
 8006cd4:	2886b03a 	or	r3,r5,r2
 8006cd8:	18c000cc 	andi	r3,r3,3
 8006cdc:	1800401e 	bne	r3,zero,8006de0 <memmove+0x148>
 8006ce0:	33fffc04 	addi	r15,r6,-16
 8006ce4:	781ed13a 	srli	r15,r15,4
 8006ce8:	28c00104 	addi	r3,r5,4
 8006cec:	13400104 	addi	r13,r2,4
 8006cf0:	781c913a 	slli	r14,r15,4
 8006cf4:	2b000204 	addi	r12,r5,8
 8006cf8:	12c00204 	addi	r11,r2,8
 8006cfc:	73800504 	addi	r14,r14,20
 8006d00:	2a800304 	addi	r10,r5,12
 8006d04:	12400304 	addi	r9,r2,12
 8006d08:	2b9d883a 	add	r14,r5,r14
 8006d0c:	2811883a 	mov	r8,r5
 8006d10:	100f883a 	mov	r7,r2
 8006d14:	41000017 	ldw	r4,0(r8)
 8006d18:	39c00404 	addi	r7,r7,16
 8006d1c:	18c00404 	addi	r3,r3,16
 8006d20:	393ffc15 	stw	r4,-16(r7)
 8006d24:	193ffc17 	ldw	r4,-16(r3)
 8006d28:	6b400404 	addi	r13,r13,16
 8006d2c:	5ac00404 	addi	r11,r11,16
 8006d30:	693ffc15 	stw	r4,-16(r13)
 8006d34:	61000017 	ldw	r4,0(r12)
 8006d38:	4a400404 	addi	r9,r9,16
 8006d3c:	42000404 	addi	r8,r8,16
 8006d40:	593ffc15 	stw	r4,-16(r11)
 8006d44:	51000017 	ldw	r4,0(r10)
 8006d48:	63000404 	addi	r12,r12,16
 8006d4c:	52800404 	addi	r10,r10,16
 8006d50:	493ffc15 	stw	r4,-16(r9)
 8006d54:	1bbfef1e 	bne	r3,r14,8006d14 <memmove+0x7c>
 8006d58:	79000044 	addi	r4,r15,1
 8006d5c:	2008913a 	slli	r4,r4,4
 8006d60:	328003cc 	andi	r10,r6,15
 8006d64:	02c000c4 	movi	r11,3
 8006d68:	1107883a 	add	r3,r2,r4
 8006d6c:	290b883a 	add	r5,r5,r4
 8006d70:	5a801e2e 	bgeu	r11,r10,8006dec <memmove+0x154>
 8006d74:	1813883a 	mov	r9,r3
 8006d78:	2811883a 	mov	r8,r5
 8006d7c:	500f883a 	mov	r7,r10
 8006d80:	41000017 	ldw	r4,0(r8)
 8006d84:	4a400104 	addi	r9,r9,4
 8006d88:	39ffff04 	addi	r7,r7,-4
 8006d8c:	493fff15 	stw	r4,-4(r9)
 8006d90:	42000104 	addi	r8,r8,4
 8006d94:	59fffa36 	bltu	r11,r7,8006d80 <memmove+0xe8>
 8006d98:	513fff04 	addi	r4,r10,-4
 8006d9c:	2008d0ba 	srli	r4,r4,2
 8006da0:	318000cc 	andi	r6,r6,3
 8006da4:	21000044 	addi	r4,r4,1
 8006da8:	2109883a 	add	r4,r4,r4
 8006dac:	2109883a 	add	r4,r4,r4
 8006db0:	1907883a 	add	r3,r3,r4
 8006db4:	290b883a 	add	r5,r5,r4
 8006db8:	30000b26 	beq	r6,zero,8006de8 <memmove+0x150>
 8006dbc:	198d883a 	add	r6,r3,r6
 8006dc0:	29c00003 	ldbu	r7,0(r5)
 8006dc4:	18c00044 	addi	r3,r3,1
 8006dc8:	29400044 	addi	r5,r5,1
 8006dcc:	19ffffc5 	stb	r7,-1(r3)
 8006dd0:	19bffb1e 	bne	r3,r6,8006dc0 <memmove+0x128>
 8006dd4:	f800283a 	ret
 8006dd8:	1007883a 	mov	r3,r2
 8006ddc:	003ff606 	br	8006db8 <memmove+0x120>
 8006de0:	1007883a 	mov	r3,r2
 8006de4:	003ff506 	br	8006dbc <memmove+0x124>
 8006de8:	f800283a 	ret
 8006dec:	500d883a 	mov	r6,r10
 8006df0:	003ff106 	br	8006db8 <memmove+0x120>

08006df4 <_realloc_r>:
 8006df4:	defff604 	addi	sp,sp,-40
 8006df8:	dc800215 	stw	r18,8(sp)
 8006dfc:	dfc00915 	stw	ra,36(sp)
 8006e00:	df000815 	stw	fp,32(sp)
 8006e04:	ddc00715 	stw	r23,28(sp)
 8006e08:	dd800615 	stw	r22,24(sp)
 8006e0c:	dd400515 	stw	r21,20(sp)
 8006e10:	dd000415 	stw	r20,16(sp)
 8006e14:	dcc00315 	stw	r19,12(sp)
 8006e18:	dc400115 	stw	r17,4(sp)
 8006e1c:	dc000015 	stw	r16,0(sp)
 8006e20:	3025883a 	mov	r18,r6
 8006e24:	2800b726 	beq	r5,zero,8007104 <_realloc_r+0x310>
 8006e28:	282b883a 	mov	r21,r5
 8006e2c:	2029883a 	mov	r20,r4
 8006e30:	8008e8c0 	call	8008e8c <__malloc_lock>
 8006e34:	a8bfff17 	ldw	r2,-4(r21)
 8006e38:	043fff04 	movi	r16,-4
 8006e3c:	90c002c4 	addi	r3,r18,11
 8006e40:	01000584 	movi	r4,22
 8006e44:	acfffe04 	addi	r19,r21,-8
 8006e48:	1420703a 	and	r16,r2,r16
 8006e4c:	20c0332e 	bgeu	r4,r3,8006f1c <_realloc_r+0x128>
 8006e50:	047ffe04 	movi	r17,-8
 8006e54:	1c62703a 	and	r17,r3,r17
 8006e58:	8807883a 	mov	r3,r17
 8006e5c:	88005816 	blt	r17,zero,8006fc0 <_realloc_r+0x1cc>
 8006e60:	8c805736 	bltu	r17,r18,8006fc0 <_realloc_r+0x1cc>
 8006e64:	80c0300e 	bge	r16,r3,8006f28 <_realloc_r+0x134>
 8006e68:	07020074 	movhi	fp,2049
 8006e6c:	e72a5b04 	addi	fp,fp,-22164
 8006e70:	e1c00217 	ldw	r7,8(fp)
 8006e74:	9c09883a 	add	r4,r19,r16
 8006e78:	22000117 	ldw	r8,4(r4)
 8006e7c:	21c06326 	beq	r4,r7,800700c <_realloc_r+0x218>
 8006e80:	017fff84 	movi	r5,-2
 8006e84:	414a703a 	and	r5,r8,r5
 8006e88:	214b883a 	add	r5,r4,r5
 8006e8c:	29800117 	ldw	r6,4(r5)
 8006e90:	3180004c 	andi	r6,r6,1
 8006e94:	30003f26 	beq	r6,zero,8006f94 <_realloc_r+0x1a0>
 8006e98:	1080004c 	andi	r2,r2,1
 8006e9c:	10008326 	beq	r2,zero,80070ac <_realloc_r+0x2b8>
 8006ea0:	900b883a 	mov	r5,r18
 8006ea4:	a009883a 	mov	r4,r20
 8006ea8:	80061e40 	call	80061e4 <_malloc_r>
 8006eac:	1025883a 	mov	r18,r2
 8006eb0:	10011e26 	beq	r2,zero,800732c <_realloc_r+0x538>
 8006eb4:	a93fff17 	ldw	r4,-4(r21)
 8006eb8:	10fffe04 	addi	r3,r2,-8
 8006ebc:	00bfff84 	movi	r2,-2
 8006ec0:	2084703a 	and	r2,r4,r2
 8006ec4:	9885883a 	add	r2,r19,r2
 8006ec8:	1880ee26 	beq	r3,r2,8007284 <_realloc_r+0x490>
 8006ecc:	81bfff04 	addi	r6,r16,-4
 8006ed0:	00800904 	movi	r2,36
 8006ed4:	1180b836 	bltu	r2,r6,80071b8 <_realloc_r+0x3c4>
 8006ed8:	00c004c4 	movi	r3,19
 8006edc:	19809636 	bltu	r3,r6,8007138 <_realloc_r+0x344>
 8006ee0:	9005883a 	mov	r2,r18
 8006ee4:	a807883a 	mov	r3,r21
 8006ee8:	19000017 	ldw	r4,0(r3)
 8006eec:	11000015 	stw	r4,0(r2)
 8006ef0:	19000117 	ldw	r4,4(r3)
 8006ef4:	11000115 	stw	r4,4(r2)
 8006ef8:	18c00217 	ldw	r3,8(r3)
 8006efc:	10c00215 	stw	r3,8(r2)
 8006f00:	a80b883a 	mov	r5,r21
 8006f04:	a009883a 	mov	r4,r20
 8006f08:	8007f9c0 	call	8007f9c <_free_r>
 8006f0c:	a009883a 	mov	r4,r20
 8006f10:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006f14:	9005883a 	mov	r2,r18
 8006f18:	00001206 	br	8006f64 <_realloc_r+0x170>
 8006f1c:	00c00404 	movi	r3,16
 8006f20:	1823883a 	mov	r17,r3
 8006f24:	003fce06 	br	8006e60 <_realloc_r+0x6c>
 8006f28:	a825883a 	mov	r18,r21
 8006f2c:	8445c83a 	sub	r2,r16,r17
 8006f30:	00c003c4 	movi	r3,15
 8006f34:	18802636 	bltu	r3,r2,8006fd0 <_realloc_r+0x1dc>
 8006f38:	99800117 	ldw	r6,4(r19)
 8006f3c:	9c07883a 	add	r3,r19,r16
 8006f40:	3180004c 	andi	r6,r6,1
 8006f44:	3420b03a 	or	r16,r6,r16
 8006f48:	9c000115 	stw	r16,4(r19)
 8006f4c:	18800117 	ldw	r2,4(r3)
 8006f50:	10800054 	ori	r2,r2,1
 8006f54:	18800115 	stw	r2,4(r3)
 8006f58:	a009883a 	mov	r4,r20
 8006f5c:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8006f60:	9005883a 	mov	r2,r18
 8006f64:	dfc00917 	ldw	ra,36(sp)
 8006f68:	df000817 	ldw	fp,32(sp)
 8006f6c:	ddc00717 	ldw	r23,28(sp)
 8006f70:	dd800617 	ldw	r22,24(sp)
 8006f74:	dd400517 	ldw	r21,20(sp)
 8006f78:	dd000417 	ldw	r20,16(sp)
 8006f7c:	dcc00317 	ldw	r19,12(sp)
 8006f80:	dc800217 	ldw	r18,8(sp)
 8006f84:	dc400117 	ldw	r17,4(sp)
 8006f88:	dc000017 	ldw	r16,0(sp)
 8006f8c:	dec00a04 	addi	sp,sp,40
 8006f90:	f800283a 	ret
 8006f94:	017fff04 	movi	r5,-4
 8006f98:	414a703a 	and	r5,r8,r5
 8006f9c:	814d883a 	add	r6,r16,r5
 8006fa0:	30c01f16 	blt	r6,r3,8007020 <_realloc_r+0x22c>
 8006fa4:	20800317 	ldw	r2,12(r4)
 8006fa8:	20c00217 	ldw	r3,8(r4)
 8006fac:	a825883a 	mov	r18,r21
 8006fb0:	3021883a 	mov	r16,r6
 8006fb4:	18800315 	stw	r2,12(r3)
 8006fb8:	10c00215 	stw	r3,8(r2)
 8006fbc:	003fdb06 	br	8006f2c <_realloc_r+0x138>
 8006fc0:	00800304 	movi	r2,12
 8006fc4:	a0800015 	stw	r2,0(r20)
 8006fc8:	0005883a 	mov	r2,zero
 8006fcc:	003fe506 	br	8006f64 <_realloc_r+0x170>
 8006fd0:	98c00117 	ldw	r3,4(r19)
 8006fd4:	9c4b883a 	add	r5,r19,r17
 8006fd8:	11000054 	ori	r4,r2,1
 8006fdc:	18c0004c 	andi	r3,r3,1
 8006fe0:	1c62b03a 	or	r17,r3,r17
 8006fe4:	9c400115 	stw	r17,4(r19)
 8006fe8:	29000115 	stw	r4,4(r5)
 8006fec:	2885883a 	add	r2,r5,r2
 8006ff0:	10c00117 	ldw	r3,4(r2)
 8006ff4:	29400204 	addi	r5,r5,8
 8006ff8:	a009883a 	mov	r4,r20
 8006ffc:	18c00054 	ori	r3,r3,1
 8007000:	10c00115 	stw	r3,4(r2)
 8007004:	8007f9c0 	call	8007f9c <_free_r>
 8007008:	003fd306 	br	8006f58 <_realloc_r+0x164>
 800700c:	017fff04 	movi	r5,-4
 8007010:	414a703a 	and	r5,r8,r5
 8007014:	89800404 	addi	r6,r17,16
 8007018:	8151883a 	add	r8,r16,r5
 800701c:	4180590e 	bge	r8,r6,8007184 <_realloc_r+0x390>
 8007020:	1080004c 	andi	r2,r2,1
 8007024:	103f9e1e 	bne	r2,zero,8006ea0 <_realloc_r+0xac>
 8007028:	adbffe17 	ldw	r22,-8(r21)
 800702c:	00bfff04 	movi	r2,-4
 8007030:	9dadc83a 	sub	r22,r19,r22
 8007034:	b1800117 	ldw	r6,4(r22)
 8007038:	3084703a 	and	r2,r6,r2
 800703c:	20002026 	beq	r4,zero,80070c0 <_realloc_r+0x2cc>
 8007040:	80af883a 	add	r23,r16,r2
 8007044:	b96f883a 	add	r23,r23,r5
 8007048:	21c05f26 	beq	r4,r7,80071c8 <_realloc_r+0x3d4>
 800704c:	b8c01c16 	blt	r23,r3,80070c0 <_realloc_r+0x2cc>
 8007050:	20800317 	ldw	r2,12(r4)
 8007054:	20c00217 	ldw	r3,8(r4)
 8007058:	81bfff04 	addi	r6,r16,-4
 800705c:	01000904 	movi	r4,36
 8007060:	18800315 	stw	r2,12(r3)
 8007064:	10c00215 	stw	r3,8(r2)
 8007068:	b0c00217 	ldw	r3,8(r22)
 800706c:	b0800317 	ldw	r2,12(r22)
 8007070:	b4800204 	addi	r18,r22,8
 8007074:	18800315 	stw	r2,12(r3)
 8007078:	10c00215 	stw	r3,8(r2)
 800707c:	21801b36 	bltu	r4,r6,80070ec <_realloc_r+0x2f8>
 8007080:	008004c4 	movi	r2,19
 8007084:	1180352e 	bgeu	r2,r6,800715c <_realloc_r+0x368>
 8007088:	a8800017 	ldw	r2,0(r21)
 800708c:	b0800215 	stw	r2,8(r22)
 8007090:	a8800117 	ldw	r2,4(r21)
 8007094:	b0800315 	stw	r2,12(r22)
 8007098:	008006c4 	movi	r2,27
 800709c:	11807f36 	bltu	r2,r6,800729c <_realloc_r+0x4a8>
 80070a0:	b0800404 	addi	r2,r22,16
 80070a4:	ad400204 	addi	r21,r21,8
 80070a8:	00002d06 	br	8007160 <_realloc_r+0x36c>
 80070ac:	adbffe17 	ldw	r22,-8(r21)
 80070b0:	00bfff04 	movi	r2,-4
 80070b4:	9dadc83a 	sub	r22,r19,r22
 80070b8:	b1000117 	ldw	r4,4(r22)
 80070bc:	2084703a 	and	r2,r4,r2
 80070c0:	b03f7726 	beq	r22,zero,8006ea0 <_realloc_r+0xac>
 80070c4:	80af883a 	add	r23,r16,r2
 80070c8:	b8ff7516 	blt	r23,r3,8006ea0 <_realloc_r+0xac>
 80070cc:	b0800317 	ldw	r2,12(r22)
 80070d0:	b0c00217 	ldw	r3,8(r22)
 80070d4:	81bfff04 	addi	r6,r16,-4
 80070d8:	01000904 	movi	r4,36
 80070dc:	18800315 	stw	r2,12(r3)
 80070e0:	10c00215 	stw	r3,8(r2)
 80070e4:	b4800204 	addi	r18,r22,8
 80070e8:	21bfe52e 	bgeu	r4,r6,8007080 <_realloc_r+0x28c>
 80070ec:	a80b883a 	mov	r5,r21
 80070f0:	9009883a 	mov	r4,r18
 80070f4:	8006c980 	call	8006c98 <memmove>
 80070f8:	b821883a 	mov	r16,r23
 80070fc:	b027883a 	mov	r19,r22
 8007100:	003f8a06 	br	8006f2c <_realloc_r+0x138>
 8007104:	300b883a 	mov	r5,r6
 8007108:	dfc00917 	ldw	ra,36(sp)
 800710c:	df000817 	ldw	fp,32(sp)
 8007110:	ddc00717 	ldw	r23,28(sp)
 8007114:	dd800617 	ldw	r22,24(sp)
 8007118:	dd400517 	ldw	r21,20(sp)
 800711c:	dd000417 	ldw	r20,16(sp)
 8007120:	dcc00317 	ldw	r19,12(sp)
 8007124:	dc800217 	ldw	r18,8(sp)
 8007128:	dc400117 	ldw	r17,4(sp)
 800712c:	dc000017 	ldw	r16,0(sp)
 8007130:	dec00a04 	addi	sp,sp,40
 8007134:	80061e41 	jmpi	80061e4 <_malloc_r>
 8007138:	a8c00017 	ldw	r3,0(r21)
 800713c:	90c00015 	stw	r3,0(r18)
 8007140:	a8c00117 	ldw	r3,4(r21)
 8007144:	90c00115 	stw	r3,4(r18)
 8007148:	00c006c4 	movi	r3,27
 800714c:	19804536 	bltu	r3,r6,8007264 <_realloc_r+0x470>
 8007150:	90800204 	addi	r2,r18,8
 8007154:	a8c00204 	addi	r3,r21,8
 8007158:	003f6306 	br	8006ee8 <_realloc_r+0xf4>
 800715c:	9005883a 	mov	r2,r18
 8007160:	a8c00017 	ldw	r3,0(r21)
 8007164:	b821883a 	mov	r16,r23
 8007168:	b027883a 	mov	r19,r22
 800716c:	10c00015 	stw	r3,0(r2)
 8007170:	a8c00117 	ldw	r3,4(r21)
 8007174:	10c00115 	stw	r3,4(r2)
 8007178:	a8c00217 	ldw	r3,8(r21)
 800717c:	10c00215 	stw	r3,8(r2)
 8007180:	003f6a06 	br	8006f2c <_realloc_r+0x138>
 8007184:	9c67883a 	add	r19,r19,r17
 8007188:	4445c83a 	sub	r2,r8,r17
 800718c:	e4c00215 	stw	r19,8(fp)
 8007190:	10800054 	ori	r2,r2,1
 8007194:	98800115 	stw	r2,4(r19)
 8007198:	a8bfff17 	ldw	r2,-4(r21)
 800719c:	a009883a 	mov	r4,r20
 80071a0:	1080004c 	andi	r2,r2,1
 80071a4:	1462b03a 	or	r17,r2,r17
 80071a8:	ac7fff15 	stw	r17,-4(r21)
 80071ac:	8008eb00 	call	8008eb0 <__malloc_unlock>
 80071b0:	a805883a 	mov	r2,r21
 80071b4:	003f6b06 	br	8006f64 <_realloc_r+0x170>
 80071b8:	a80b883a 	mov	r5,r21
 80071bc:	9009883a 	mov	r4,r18
 80071c0:	8006c980 	call	8006c98 <memmove>
 80071c4:	003f4e06 	br	8006f00 <_realloc_r+0x10c>
 80071c8:	89000404 	addi	r4,r17,16
 80071cc:	b93fbc16 	blt	r23,r4,80070c0 <_realloc_r+0x2cc>
 80071d0:	b0800317 	ldw	r2,12(r22)
 80071d4:	b0c00217 	ldw	r3,8(r22)
 80071d8:	81bfff04 	addi	r6,r16,-4
 80071dc:	01000904 	movi	r4,36
 80071e0:	18800315 	stw	r2,12(r3)
 80071e4:	10c00215 	stw	r3,8(r2)
 80071e8:	b4800204 	addi	r18,r22,8
 80071ec:	21804336 	bltu	r4,r6,80072fc <_realloc_r+0x508>
 80071f0:	008004c4 	movi	r2,19
 80071f4:	11803f2e 	bgeu	r2,r6,80072f4 <_realloc_r+0x500>
 80071f8:	a8800017 	ldw	r2,0(r21)
 80071fc:	b0800215 	stw	r2,8(r22)
 8007200:	a8800117 	ldw	r2,4(r21)
 8007204:	b0800315 	stw	r2,12(r22)
 8007208:	008006c4 	movi	r2,27
 800720c:	11803f36 	bltu	r2,r6,800730c <_realloc_r+0x518>
 8007210:	b0800404 	addi	r2,r22,16
 8007214:	ad400204 	addi	r21,r21,8
 8007218:	a8c00017 	ldw	r3,0(r21)
 800721c:	10c00015 	stw	r3,0(r2)
 8007220:	a8c00117 	ldw	r3,4(r21)
 8007224:	10c00115 	stw	r3,4(r2)
 8007228:	a8c00217 	ldw	r3,8(r21)
 800722c:	10c00215 	stw	r3,8(r2)
 8007230:	b447883a 	add	r3,r22,r17
 8007234:	bc45c83a 	sub	r2,r23,r17
 8007238:	e0c00215 	stw	r3,8(fp)
 800723c:	10800054 	ori	r2,r2,1
 8007240:	18800115 	stw	r2,4(r3)
 8007244:	b0800117 	ldw	r2,4(r22)
 8007248:	a009883a 	mov	r4,r20
 800724c:	1080004c 	andi	r2,r2,1
 8007250:	1462b03a 	or	r17,r2,r17
 8007254:	b4400115 	stw	r17,4(r22)
 8007258:	8008eb00 	call	8008eb0 <__malloc_unlock>
 800725c:	9005883a 	mov	r2,r18
 8007260:	003f4006 	br	8006f64 <_realloc_r+0x170>
 8007264:	a8c00217 	ldw	r3,8(r21)
 8007268:	90c00215 	stw	r3,8(r18)
 800726c:	a8c00317 	ldw	r3,12(r21)
 8007270:	90c00315 	stw	r3,12(r18)
 8007274:	30801126 	beq	r6,r2,80072bc <_realloc_r+0x4c8>
 8007278:	90800404 	addi	r2,r18,16
 800727c:	a8c00404 	addi	r3,r21,16
 8007280:	003f1906 	br	8006ee8 <_realloc_r+0xf4>
 8007284:	90ffff17 	ldw	r3,-4(r18)
 8007288:	00bfff04 	movi	r2,-4
 800728c:	a825883a 	mov	r18,r21
 8007290:	1884703a 	and	r2,r3,r2
 8007294:	80a1883a 	add	r16,r16,r2
 8007298:	003f2406 	br	8006f2c <_realloc_r+0x138>
 800729c:	a8800217 	ldw	r2,8(r21)
 80072a0:	b0800415 	stw	r2,16(r22)
 80072a4:	a8800317 	ldw	r2,12(r21)
 80072a8:	b0800515 	stw	r2,20(r22)
 80072ac:	31000a26 	beq	r6,r4,80072d8 <_realloc_r+0x4e4>
 80072b0:	b0800604 	addi	r2,r22,24
 80072b4:	ad400404 	addi	r21,r21,16
 80072b8:	003fa906 	br	8007160 <_realloc_r+0x36c>
 80072bc:	a9000417 	ldw	r4,16(r21)
 80072c0:	90800604 	addi	r2,r18,24
 80072c4:	a8c00604 	addi	r3,r21,24
 80072c8:	91000415 	stw	r4,16(r18)
 80072cc:	a9000517 	ldw	r4,20(r21)
 80072d0:	91000515 	stw	r4,20(r18)
 80072d4:	003f0406 	br	8006ee8 <_realloc_r+0xf4>
 80072d8:	a8c00417 	ldw	r3,16(r21)
 80072dc:	ad400604 	addi	r21,r21,24
 80072e0:	b0800804 	addi	r2,r22,32
 80072e4:	b0c00615 	stw	r3,24(r22)
 80072e8:	a8ffff17 	ldw	r3,-4(r21)
 80072ec:	b0c00715 	stw	r3,28(r22)
 80072f0:	003f9b06 	br	8007160 <_realloc_r+0x36c>
 80072f4:	9005883a 	mov	r2,r18
 80072f8:	003fc706 	br	8007218 <_realloc_r+0x424>
 80072fc:	a80b883a 	mov	r5,r21
 8007300:	9009883a 	mov	r4,r18
 8007304:	8006c980 	call	8006c98 <memmove>
 8007308:	003fc906 	br	8007230 <_realloc_r+0x43c>
 800730c:	a8800217 	ldw	r2,8(r21)
 8007310:	b0800415 	stw	r2,16(r22)
 8007314:	a8800317 	ldw	r2,12(r21)
 8007318:	b0800515 	stw	r2,20(r22)
 800731c:	31000726 	beq	r6,r4,800733c <_realloc_r+0x548>
 8007320:	b0800604 	addi	r2,r22,24
 8007324:	ad400404 	addi	r21,r21,16
 8007328:	003fbb06 	br	8007218 <_realloc_r+0x424>
 800732c:	a009883a 	mov	r4,r20
 8007330:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8007334:	0005883a 	mov	r2,zero
 8007338:	003f0a06 	br	8006f64 <_realloc_r+0x170>
 800733c:	a8c00417 	ldw	r3,16(r21)
 8007340:	ad400604 	addi	r21,r21,24
 8007344:	b0800804 	addi	r2,r22,32
 8007348:	b0c00615 	stw	r3,24(r22)
 800734c:	a8ffff17 	ldw	r3,-4(r21)
 8007350:	b0c00715 	stw	r3,28(r22)
 8007354:	003fb006 	br	8007218 <_realloc_r+0x424>

08007358 <_sbrk_r>:
 8007358:	defffd04 	addi	sp,sp,-12
 800735c:	dc000015 	stw	r16,0(sp)
 8007360:	04020074 	movhi	r16,2049
 8007364:	dc400115 	stw	r17,4(sp)
 8007368:	84320d04 	addi	r16,r16,-14284
 800736c:	2023883a 	mov	r17,r4
 8007370:	2809883a 	mov	r4,r5
 8007374:	dfc00215 	stw	ra,8(sp)
 8007378:	80000015 	stw	zero,0(r16)
 800737c:	800900c0 	call	800900c <sbrk>
 8007380:	00ffffc4 	movi	r3,-1
 8007384:	10c00526 	beq	r2,r3,800739c <_sbrk_r+0x44>
 8007388:	dfc00217 	ldw	ra,8(sp)
 800738c:	dc400117 	ldw	r17,4(sp)
 8007390:	dc000017 	ldw	r16,0(sp)
 8007394:	dec00304 	addi	sp,sp,12
 8007398:	f800283a 	ret
 800739c:	80c00017 	ldw	r3,0(r16)
 80073a0:	183ff926 	beq	r3,zero,8007388 <_sbrk_r+0x30>
 80073a4:	88c00015 	stw	r3,0(r17)
 80073a8:	003ff706 	br	8007388 <_sbrk_r+0x30>

080073ac <strlen>:
 80073ac:	208000cc 	andi	r2,r4,3
 80073b0:	10002026 	beq	r2,zero,8007434 <strlen+0x88>
 80073b4:	20800007 	ldb	r2,0(r4)
 80073b8:	10002026 	beq	r2,zero,800743c <strlen+0x90>
 80073bc:	2005883a 	mov	r2,r4
 80073c0:	00000206 	br	80073cc <strlen+0x20>
 80073c4:	10c00007 	ldb	r3,0(r2)
 80073c8:	18001826 	beq	r3,zero,800742c <strlen+0x80>
 80073cc:	10800044 	addi	r2,r2,1
 80073d0:	10c000cc 	andi	r3,r2,3
 80073d4:	183ffb1e 	bne	r3,zero,80073c4 <strlen+0x18>
 80073d8:	10c00017 	ldw	r3,0(r2)
 80073dc:	01ffbff4 	movhi	r7,65279
 80073e0:	39ffbfc4 	addi	r7,r7,-257
 80073e4:	00ca303a 	nor	r5,zero,r3
 80073e8:	01a02074 	movhi	r6,32897
 80073ec:	19c7883a 	add	r3,r3,r7
 80073f0:	31a02004 	addi	r6,r6,-32640
 80073f4:	1946703a 	and	r3,r3,r5
 80073f8:	1986703a 	and	r3,r3,r6
 80073fc:	1800091e 	bne	r3,zero,8007424 <strlen+0x78>
 8007400:	10800104 	addi	r2,r2,4
 8007404:	10c00017 	ldw	r3,0(r2)
 8007408:	19cb883a 	add	r5,r3,r7
 800740c:	00c6303a 	nor	r3,zero,r3
 8007410:	28c6703a 	and	r3,r5,r3
 8007414:	1986703a 	and	r3,r3,r6
 8007418:	183ff926 	beq	r3,zero,8007400 <strlen+0x54>
 800741c:	00000106 	br	8007424 <strlen+0x78>
 8007420:	10800044 	addi	r2,r2,1
 8007424:	10c00007 	ldb	r3,0(r2)
 8007428:	183ffd1e 	bne	r3,zero,8007420 <strlen+0x74>
 800742c:	1105c83a 	sub	r2,r2,r4
 8007430:	f800283a 	ret
 8007434:	2005883a 	mov	r2,r4
 8007438:	003fe706 	br	80073d8 <strlen+0x2c>
 800743c:	0005883a 	mov	r2,zero
 8007440:	f800283a 	ret

08007444 <__swsetup_r>:
 8007444:	00820074 	movhi	r2,2049
 8007448:	defffd04 	addi	sp,sp,-12
 800744c:	10ab6704 	addi	r2,r2,-21092
 8007450:	dc400115 	stw	r17,4(sp)
 8007454:	2023883a 	mov	r17,r4
 8007458:	11000017 	ldw	r4,0(r2)
 800745c:	dc000015 	stw	r16,0(sp)
 8007460:	dfc00215 	stw	ra,8(sp)
 8007464:	2821883a 	mov	r16,r5
 8007468:	20000226 	beq	r4,zero,8007474 <__swsetup_r+0x30>
 800746c:	20800e17 	ldw	r2,56(r4)
 8007470:	10003126 	beq	r2,zero,8007538 <__swsetup_r+0xf4>
 8007474:	8080030b 	ldhu	r2,12(r16)
 8007478:	10c0020c 	andi	r3,r2,8
 800747c:	1009883a 	mov	r4,r2
 8007480:	18000f26 	beq	r3,zero,80074c0 <__swsetup_r+0x7c>
 8007484:	80c00417 	ldw	r3,16(r16)
 8007488:	18001526 	beq	r3,zero,80074e0 <__swsetup_r+0x9c>
 800748c:	1100004c 	andi	r4,r2,1
 8007490:	20001c1e 	bne	r4,zero,8007504 <__swsetup_r+0xc0>
 8007494:	1080008c 	andi	r2,r2,2
 8007498:	1000291e 	bne	r2,zero,8007540 <__swsetup_r+0xfc>
 800749c:	80800517 	ldw	r2,20(r16)
 80074a0:	80800215 	stw	r2,8(r16)
 80074a4:	18001c26 	beq	r3,zero,8007518 <__swsetup_r+0xd4>
 80074a8:	0005883a 	mov	r2,zero
 80074ac:	dfc00217 	ldw	ra,8(sp)
 80074b0:	dc400117 	ldw	r17,4(sp)
 80074b4:	dc000017 	ldw	r16,0(sp)
 80074b8:	dec00304 	addi	sp,sp,12
 80074bc:	f800283a 	ret
 80074c0:	2080040c 	andi	r2,r4,16
 80074c4:	10002e26 	beq	r2,zero,8007580 <__swsetup_r+0x13c>
 80074c8:	2080010c 	andi	r2,r4,4
 80074cc:	10001e1e 	bne	r2,zero,8007548 <__swsetup_r+0x104>
 80074d0:	80c00417 	ldw	r3,16(r16)
 80074d4:	20800214 	ori	r2,r4,8
 80074d8:	8080030d 	sth	r2,12(r16)
 80074dc:	183feb1e 	bne	r3,zero,800748c <__swsetup_r+0x48>
 80074e0:	1100a00c 	andi	r4,r2,640
 80074e4:	01408004 	movi	r5,512
 80074e8:	217fe826 	beq	r4,r5,800748c <__swsetup_r+0x48>
 80074ec:	800b883a 	mov	r5,r16
 80074f0:	8809883a 	mov	r4,r17
 80074f4:	80084340 	call	8008434 <__smakebuf_r>
 80074f8:	8080030b 	ldhu	r2,12(r16)
 80074fc:	80c00417 	ldw	r3,16(r16)
 8007500:	003fe206 	br	800748c <__swsetup_r+0x48>
 8007504:	80800517 	ldw	r2,20(r16)
 8007508:	80000215 	stw	zero,8(r16)
 800750c:	0085c83a 	sub	r2,zero,r2
 8007510:	80800615 	stw	r2,24(r16)
 8007514:	183fe41e 	bne	r3,zero,80074a8 <__swsetup_r+0x64>
 8007518:	80c0030b 	ldhu	r3,12(r16)
 800751c:	0005883a 	mov	r2,zero
 8007520:	1900200c 	andi	r4,r3,128
 8007524:	203fe126 	beq	r4,zero,80074ac <__swsetup_r+0x68>
 8007528:	18c01014 	ori	r3,r3,64
 800752c:	80c0030d 	sth	r3,12(r16)
 8007530:	00bfffc4 	movi	r2,-1
 8007534:	003fdd06 	br	80074ac <__swsetup_r+0x68>
 8007538:	8007e280 	call	8007e28 <__sinit>
 800753c:	003fcd06 	br	8007474 <__swsetup_r+0x30>
 8007540:	0005883a 	mov	r2,zero
 8007544:	003fd606 	br	80074a0 <__swsetup_r+0x5c>
 8007548:	81400c17 	ldw	r5,48(r16)
 800754c:	28000626 	beq	r5,zero,8007568 <__swsetup_r+0x124>
 8007550:	80801004 	addi	r2,r16,64
 8007554:	28800326 	beq	r5,r2,8007564 <__swsetup_r+0x120>
 8007558:	8809883a 	mov	r4,r17
 800755c:	8007f9c0 	call	8007f9c <_free_r>
 8007560:	8100030b 	ldhu	r4,12(r16)
 8007564:	80000c15 	stw	zero,48(r16)
 8007568:	80c00417 	ldw	r3,16(r16)
 800756c:	00bff6c4 	movi	r2,-37
 8007570:	1108703a 	and	r4,r2,r4
 8007574:	80000115 	stw	zero,4(r16)
 8007578:	80c00015 	stw	r3,0(r16)
 800757c:	003fd506 	br	80074d4 <__swsetup_r+0x90>
 8007580:	00800244 	movi	r2,9
 8007584:	88800015 	stw	r2,0(r17)
 8007588:	20801014 	ori	r2,r4,64
 800758c:	8080030d 	sth	r2,12(r16)
 8007590:	00bfffc4 	movi	r2,-1
 8007594:	003fc506 	br	80074ac <__swsetup_r+0x68>

08007598 <__register_exitproc>:
 8007598:	defffa04 	addi	sp,sp,-24
 800759c:	dc000315 	stw	r16,12(sp)
 80075a0:	04020074 	movhi	r16,2049
 80075a4:	842b6604 	addi	r16,r16,-21096
 80075a8:	80c00017 	ldw	r3,0(r16)
 80075ac:	dc400415 	stw	r17,16(sp)
 80075b0:	dfc00515 	stw	ra,20(sp)
 80075b4:	18805217 	ldw	r2,328(r3)
 80075b8:	2023883a 	mov	r17,r4
 80075bc:	10003726 	beq	r2,zero,800769c <__register_exitproc+0x104>
 80075c0:	10c00117 	ldw	r3,4(r2)
 80075c4:	010007c4 	movi	r4,31
 80075c8:	20c00e16 	blt	r4,r3,8007604 <__register_exitproc+0x6c>
 80075cc:	1a000044 	addi	r8,r3,1
 80075d0:	8800221e 	bne	r17,zero,800765c <__register_exitproc+0xc4>
 80075d4:	18c00084 	addi	r3,r3,2
 80075d8:	18c7883a 	add	r3,r3,r3
 80075dc:	18c7883a 	add	r3,r3,r3
 80075e0:	12000115 	stw	r8,4(r2)
 80075e4:	10c7883a 	add	r3,r2,r3
 80075e8:	19400015 	stw	r5,0(r3)
 80075ec:	0005883a 	mov	r2,zero
 80075f0:	dfc00517 	ldw	ra,20(sp)
 80075f4:	dc400417 	ldw	r17,16(sp)
 80075f8:	dc000317 	ldw	r16,12(sp)
 80075fc:	dec00604 	addi	sp,sp,24
 8007600:	f800283a 	ret
 8007604:	00800034 	movhi	r2,0
 8007608:	10800004 	addi	r2,r2,0
 800760c:	10002626 	beq	r2,zero,80076a8 <__register_exitproc+0x110>
 8007610:	01006404 	movi	r4,400
 8007614:	d9400015 	stw	r5,0(sp)
 8007618:	d9800115 	stw	r6,4(sp)
 800761c:	d9c00215 	stw	r7,8(sp)
 8007620:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8007624:	d9400017 	ldw	r5,0(sp)
 8007628:	d9800117 	ldw	r6,4(sp)
 800762c:	d9c00217 	ldw	r7,8(sp)
 8007630:	10001d26 	beq	r2,zero,80076a8 <__register_exitproc+0x110>
 8007634:	81000017 	ldw	r4,0(r16)
 8007638:	10000115 	stw	zero,4(r2)
 800763c:	02000044 	movi	r8,1
 8007640:	22405217 	ldw	r9,328(r4)
 8007644:	0007883a 	mov	r3,zero
 8007648:	12400015 	stw	r9,0(r2)
 800764c:	20805215 	stw	r2,328(r4)
 8007650:	10006215 	stw	zero,392(r2)
 8007654:	10006315 	stw	zero,396(r2)
 8007658:	883fde26 	beq	r17,zero,80075d4 <__register_exitproc+0x3c>
 800765c:	18c9883a 	add	r4,r3,r3
 8007660:	2109883a 	add	r4,r4,r4
 8007664:	1109883a 	add	r4,r2,r4
 8007668:	21802215 	stw	r6,136(r4)
 800766c:	01800044 	movi	r6,1
 8007670:	12406217 	ldw	r9,392(r2)
 8007674:	30cc983a 	sll	r6,r6,r3
 8007678:	4992b03a 	or	r9,r9,r6
 800767c:	12406215 	stw	r9,392(r2)
 8007680:	21c04215 	stw	r7,264(r4)
 8007684:	01000084 	movi	r4,2
 8007688:	893fd21e 	bne	r17,r4,80075d4 <__register_exitproc+0x3c>
 800768c:	11006317 	ldw	r4,396(r2)
 8007690:	218cb03a 	or	r6,r4,r6
 8007694:	11806315 	stw	r6,396(r2)
 8007698:	003fce06 	br	80075d4 <__register_exitproc+0x3c>
 800769c:	18805304 	addi	r2,r3,332
 80076a0:	18805215 	stw	r2,328(r3)
 80076a4:	003fc606 	br	80075c0 <__register_exitproc+0x28>
 80076a8:	00bfffc4 	movi	r2,-1
 80076ac:	003fd006 	br	80075f0 <__register_exitproc+0x58>

080076b0 <__call_exitprocs>:
 80076b0:	defff504 	addi	sp,sp,-44
 80076b4:	df000915 	stw	fp,36(sp)
 80076b8:	dd400615 	stw	r21,24(sp)
 80076bc:	dc800315 	stw	r18,12(sp)
 80076c0:	dfc00a15 	stw	ra,40(sp)
 80076c4:	ddc00815 	stw	r23,32(sp)
 80076c8:	dd800715 	stw	r22,28(sp)
 80076cc:	dd000515 	stw	r20,20(sp)
 80076d0:	dcc00415 	stw	r19,16(sp)
 80076d4:	dc400215 	stw	r17,8(sp)
 80076d8:	dc000115 	stw	r16,4(sp)
 80076dc:	d9000015 	stw	r4,0(sp)
 80076e0:	2839883a 	mov	fp,r5
 80076e4:	04800044 	movi	r18,1
 80076e8:	057fffc4 	movi	r21,-1
 80076ec:	00820074 	movhi	r2,2049
 80076f0:	10ab6604 	addi	r2,r2,-21096
 80076f4:	12000017 	ldw	r8,0(r2)
 80076f8:	45005217 	ldw	r20,328(r8)
 80076fc:	44c05204 	addi	r19,r8,328
 8007700:	a0001c26 	beq	r20,zero,8007774 <__call_exitprocs+0xc4>
 8007704:	a0800117 	ldw	r2,4(r20)
 8007708:	15ffffc4 	addi	r23,r2,-1
 800770c:	b8000d16 	blt	r23,zero,8007744 <__call_exitprocs+0x94>
 8007710:	14000044 	addi	r16,r2,1
 8007714:	8421883a 	add	r16,r16,r16
 8007718:	8421883a 	add	r16,r16,r16
 800771c:	84402004 	addi	r17,r16,128
 8007720:	a463883a 	add	r17,r20,r17
 8007724:	a421883a 	add	r16,r20,r16
 8007728:	e0001e26 	beq	fp,zero,80077a4 <__call_exitprocs+0xf4>
 800772c:	80804017 	ldw	r2,256(r16)
 8007730:	e0801c26 	beq	fp,r2,80077a4 <__call_exitprocs+0xf4>
 8007734:	bdffffc4 	addi	r23,r23,-1
 8007738:	843fff04 	addi	r16,r16,-4
 800773c:	8c7fff04 	addi	r17,r17,-4
 8007740:	bd7ff91e 	bne	r23,r21,8007728 <__call_exitprocs+0x78>
 8007744:	00800034 	movhi	r2,0
 8007748:	10800004 	addi	r2,r2,0
 800774c:	10000926 	beq	r2,zero,8007774 <__call_exitprocs+0xc4>
 8007750:	a0800117 	ldw	r2,4(r20)
 8007754:	1000301e 	bne	r2,zero,8007818 <__call_exitprocs+0x168>
 8007758:	a0800017 	ldw	r2,0(r20)
 800775c:	10003226 	beq	r2,zero,8007828 <__call_exitprocs+0x178>
 8007760:	a009883a 	mov	r4,r20
 8007764:	98800015 	stw	r2,0(r19)
 8007768:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 800776c:	9d000017 	ldw	r20,0(r19)
 8007770:	a03fe41e 	bne	r20,zero,8007704 <__call_exitprocs+0x54>
 8007774:	dfc00a17 	ldw	ra,40(sp)
 8007778:	df000917 	ldw	fp,36(sp)
 800777c:	ddc00817 	ldw	r23,32(sp)
 8007780:	dd800717 	ldw	r22,28(sp)
 8007784:	dd400617 	ldw	r21,24(sp)
 8007788:	dd000517 	ldw	r20,20(sp)
 800778c:	dcc00417 	ldw	r19,16(sp)
 8007790:	dc800317 	ldw	r18,12(sp)
 8007794:	dc400217 	ldw	r17,8(sp)
 8007798:	dc000117 	ldw	r16,4(sp)
 800779c:	dec00b04 	addi	sp,sp,44
 80077a0:	f800283a 	ret
 80077a4:	a0800117 	ldw	r2,4(r20)
 80077a8:	80c00017 	ldw	r3,0(r16)
 80077ac:	10bfffc4 	addi	r2,r2,-1
 80077b0:	15c01426 	beq	r2,r23,8007804 <__call_exitprocs+0x154>
 80077b4:	80000015 	stw	zero,0(r16)
 80077b8:	183fde26 	beq	r3,zero,8007734 <__call_exitprocs+0x84>
 80077bc:	95c8983a 	sll	r4,r18,r23
 80077c0:	a0806217 	ldw	r2,392(r20)
 80077c4:	a5800117 	ldw	r22,4(r20)
 80077c8:	2084703a 	and	r2,r4,r2
 80077cc:	10000b26 	beq	r2,zero,80077fc <__call_exitprocs+0x14c>
 80077d0:	a0806317 	ldw	r2,396(r20)
 80077d4:	2088703a 	and	r4,r4,r2
 80077d8:	20000c1e 	bne	r4,zero,800780c <__call_exitprocs+0x15c>
 80077dc:	89400017 	ldw	r5,0(r17)
 80077e0:	d9000017 	ldw	r4,0(sp)
 80077e4:	183ee83a 	callr	r3
 80077e8:	a0800117 	ldw	r2,4(r20)
 80077ec:	15bfbf1e 	bne	r2,r22,80076ec <__call_exitprocs+0x3c>
 80077f0:	98800017 	ldw	r2,0(r19)
 80077f4:	153fcf26 	beq	r2,r20,8007734 <__call_exitprocs+0x84>
 80077f8:	003fbc06 	br	80076ec <__call_exitprocs+0x3c>
 80077fc:	183ee83a 	callr	r3
 8007800:	003ff906 	br	80077e8 <__call_exitprocs+0x138>
 8007804:	a5c00115 	stw	r23,4(r20)
 8007808:	003feb06 	br	80077b8 <__call_exitprocs+0x108>
 800780c:	89000017 	ldw	r4,0(r17)
 8007810:	183ee83a 	callr	r3
 8007814:	003ff406 	br	80077e8 <__call_exitprocs+0x138>
 8007818:	a0800017 	ldw	r2,0(r20)
 800781c:	a027883a 	mov	r19,r20
 8007820:	1029883a 	mov	r20,r2
 8007824:	003fb606 	br	8007700 <__call_exitprocs+0x50>
 8007828:	0005883a 	mov	r2,zero
 800782c:	003ffb06 	br	800781c <__call_exitprocs+0x16c>

08007830 <__sflush_r>:
 8007830:	2880030b 	ldhu	r2,12(r5)
 8007834:	defffb04 	addi	sp,sp,-20
 8007838:	dcc00315 	stw	r19,12(sp)
 800783c:	dc400115 	stw	r17,4(sp)
 8007840:	dfc00415 	stw	ra,16(sp)
 8007844:	dc800215 	stw	r18,8(sp)
 8007848:	dc000015 	stw	r16,0(sp)
 800784c:	10c0020c 	andi	r3,r2,8
 8007850:	2823883a 	mov	r17,r5
 8007854:	2027883a 	mov	r19,r4
 8007858:	1800311e 	bne	r3,zero,8007920 <__sflush_r+0xf0>
 800785c:	28c00117 	ldw	r3,4(r5)
 8007860:	10820014 	ori	r2,r2,2048
 8007864:	2880030d 	sth	r2,12(r5)
 8007868:	00c04b0e 	bge	zero,r3,8007998 <__sflush_r+0x168>
 800786c:	8a000a17 	ldw	r8,40(r17)
 8007870:	40002326 	beq	r8,zero,8007900 <__sflush_r+0xd0>
 8007874:	9c000017 	ldw	r16,0(r19)
 8007878:	10c4000c 	andi	r3,r2,4096
 800787c:	98000015 	stw	zero,0(r19)
 8007880:	18004826 	beq	r3,zero,80079a4 <__sflush_r+0x174>
 8007884:	89801417 	ldw	r6,80(r17)
 8007888:	10c0010c 	andi	r3,r2,4
 800788c:	18000626 	beq	r3,zero,80078a8 <__sflush_r+0x78>
 8007890:	88c00117 	ldw	r3,4(r17)
 8007894:	88800c17 	ldw	r2,48(r17)
 8007898:	30cdc83a 	sub	r6,r6,r3
 800789c:	10000226 	beq	r2,zero,80078a8 <__sflush_r+0x78>
 80078a0:	88800f17 	ldw	r2,60(r17)
 80078a4:	308dc83a 	sub	r6,r6,r2
 80078a8:	89400717 	ldw	r5,28(r17)
 80078ac:	000f883a 	mov	r7,zero
 80078b0:	9809883a 	mov	r4,r19
 80078b4:	403ee83a 	callr	r8
 80078b8:	00ffffc4 	movi	r3,-1
 80078bc:	10c04426 	beq	r2,r3,80079d0 <__sflush_r+0x1a0>
 80078c0:	88c0030b 	ldhu	r3,12(r17)
 80078c4:	89000417 	ldw	r4,16(r17)
 80078c8:	88000115 	stw	zero,4(r17)
 80078cc:	197dffcc 	andi	r5,r3,63487
 80078d0:	8940030d 	sth	r5,12(r17)
 80078d4:	89000015 	stw	r4,0(r17)
 80078d8:	18c4000c 	andi	r3,r3,4096
 80078dc:	18002c1e 	bne	r3,zero,8007990 <__sflush_r+0x160>
 80078e0:	89400c17 	ldw	r5,48(r17)
 80078e4:	9c000015 	stw	r16,0(r19)
 80078e8:	28000526 	beq	r5,zero,8007900 <__sflush_r+0xd0>
 80078ec:	88801004 	addi	r2,r17,64
 80078f0:	28800226 	beq	r5,r2,80078fc <__sflush_r+0xcc>
 80078f4:	9809883a 	mov	r4,r19
 80078f8:	8007f9c0 	call	8007f9c <_free_r>
 80078fc:	88000c15 	stw	zero,48(r17)
 8007900:	0005883a 	mov	r2,zero
 8007904:	dfc00417 	ldw	ra,16(sp)
 8007908:	dcc00317 	ldw	r19,12(sp)
 800790c:	dc800217 	ldw	r18,8(sp)
 8007910:	dc400117 	ldw	r17,4(sp)
 8007914:	dc000017 	ldw	r16,0(sp)
 8007918:	dec00504 	addi	sp,sp,20
 800791c:	f800283a 	ret
 8007920:	2c800417 	ldw	r18,16(r5)
 8007924:	903ff626 	beq	r18,zero,8007900 <__sflush_r+0xd0>
 8007928:	2c000017 	ldw	r16,0(r5)
 800792c:	108000cc 	andi	r2,r2,3
 8007930:	2c800015 	stw	r18,0(r5)
 8007934:	84a1c83a 	sub	r16,r16,r18
 8007938:	1000131e 	bne	r2,zero,8007988 <__sflush_r+0x158>
 800793c:	28800517 	ldw	r2,20(r5)
 8007940:	88800215 	stw	r2,8(r17)
 8007944:	04000316 	blt	zero,r16,8007954 <__sflush_r+0x124>
 8007948:	003fed06 	br	8007900 <__sflush_r+0xd0>
 800794c:	90a5883a 	add	r18,r18,r2
 8007950:	043feb0e 	bge	zero,r16,8007900 <__sflush_r+0xd0>
 8007954:	88800917 	ldw	r2,36(r17)
 8007958:	89400717 	ldw	r5,28(r17)
 800795c:	800f883a 	mov	r7,r16
 8007960:	900d883a 	mov	r6,r18
 8007964:	9809883a 	mov	r4,r19
 8007968:	103ee83a 	callr	r2
 800796c:	80a1c83a 	sub	r16,r16,r2
 8007970:	00bff616 	blt	zero,r2,800794c <__sflush_r+0x11c>
 8007974:	88c0030b 	ldhu	r3,12(r17)
 8007978:	00bfffc4 	movi	r2,-1
 800797c:	18c01014 	ori	r3,r3,64
 8007980:	88c0030d 	sth	r3,12(r17)
 8007984:	003fdf06 	br	8007904 <__sflush_r+0xd4>
 8007988:	0005883a 	mov	r2,zero
 800798c:	003fec06 	br	8007940 <__sflush_r+0x110>
 8007990:	88801415 	stw	r2,80(r17)
 8007994:	003fd206 	br	80078e0 <__sflush_r+0xb0>
 8007998:	28c00f17 	ldw	r3,60(r5)
 800799c:	00ffb316 	blt	zero,r3,800786c <__sflush_r+0x3c>
 80079a0:	003fd706 	br	8007900 <__sflush_r+0xd0>
 80079a4:	89400717 	ldw	r5,28(r17)
 80079a8:	000d883a 	mov	r6,zero
 80079ac:	01c00044 	movi	r7,1
 80079b0:	9809883a 	mov	r4,r19
 80079b4:	403ee83a 	callr	r8
 80079b8:	100d883a 	mov	r6,r2
 80079bc:	00bfffc4 	movi	r2,-1
 80079c0:	30801426 	beq	r6,r2,8007a14 <__sflush_r+0x1e4>
 80079c4:	8880030b 	ldhu	r2,12(r17)
 80079c8:	8a000a17 	ldw	r8,40(r17)
 80079cc:	003fae06 	br	8007888 <__sflush_r+0x58>
 80079d0:	98c00017 	ldw	r3,0(r19)
 80079d4:	183fba26 	beq	r3,zero,80078c0 <__sflush_r+0x90>
 80079d8:	01000744 	movi	r4,29
 80079dc:	19000626 	beq	r3,r4,80079f8 <__sflush_r+0x1c8>
 80079e0:	01000584 	movi	r4,22
 80079e4:	19000426 	beq	r3,r4,80079f8 <__sflush_r+0x1c8>
 80079e8:	88c0030b 	ldhu	r3,12(r17)
 80079ec:	18c01014 	ori	r3,r3,64
 80079f0:	88c0030d 	sth	r3,12(r17)
 80079f4:	003fc306 	br	8007904 <__sflush_r+0xd4>
 80079f8:	8880030b 	ldhu	r2,12(r17)
 80079fc:	88c00417 	ldw	r3,16(r17)
 8007a00:	88000115 	stw	zero,4(r17)
 8007a04:	10bdffcc 	andi	r2,r2,63487
 8007a08:	8880030d 	sth	r2,12(r17)
 8007a0c:	88c00015 	stw	r3,0(r17)
 8007a10:	003fb306 	br	80078e0 <__sflush_r+0xb0>
 8007a14:	98800017 	ldw	r2,0(r19)
 8007a18:	103fea26 	beq	r2,zero,80079c4 <__sflush_r+0x194>
 8007a1c:	00c00744 	movi	r3,29
 8007a20:	10c00226 	beq	r2,r3,8007a2c <__sflush_r+0x1fc>
 8007a24:	00c00584 	movi	r3,22
 8007a28:	10c0031e 	bne	r2,r3,8007a38 <__sflush_r+0x208>
 8007a2c:	9c000015 	stw	r16,0(r19)
 8007a30:	0005883a 	mov	r2,zero
 8007a34:	003fb306 	br	8007904 <__sflush_r+0xd4>
 8007a38:	88c0030b 	ldhu	r3,12(r17)
 8007a3c:	3005883a 	mov	r2,r6
 8007a40:	18c01014 	ori	r3,r3,64
 8007a44:	88c0030d 	sth	r3,12(r17)
 8007a48:	003fae06 	br	8007904 <__sflush_r+0xd4>

08007a4c <_fflush_r>:
 8007a4c:	defffd04 	addi	sp,sp,-12
 8007a50:	dc000115 	stw	r16,4(sp)
 8007a54:	dfc00215 	stw	ra,8(sp)
 8007a58:	2021883a 	mov	r16,r4
 8007a5c:	20000226 	beq	r4,zero,8007a68 <_fflush_r+0x1c>
 8007a60:	20800e17 	ldw	r2,56(r4)
 8007a64:	10000c26 	beq	r2,zero,8007a98 <_fflush_r+0x4c>
 8007a68:	2880030f 	ldh	r2,12(r5)
 8007a6c:	1000051e 	bne	r2,zero,8007a84 <_fflush_r+0x38>
 8007a70:	0005883a 	mov	r2,zero
 8007a74:	dfc00217 	ldw	ra,8(sp)
 8007a78:	dc000117 	ldw	r16,4(sp)
 8007a7c:	dec00304 	addi	sp,sp,12
 8007a80:	f800283a 	ret
 8007a84:	8009883a 	mov	r4,r16
 8007a88:	dfc00217 	ldw	ra,8(sp)
 8007a8c:	dc000117 	ldw	r16,4(sp)
 8007a90:	dec00304 	addi	sp,sp,12
 8007a94:	80078301 	jmpi	8007830 <__sflush_r>
 8007a98:	d9400015 	stw	r5,0(sp)
 8007a9c:	8007e280 	call	8007e28 <__sinit>
 8007aa0:	d9400017 	ldw	r5,0(sp)
 8007aa4:	003ff006 	br	8007a68 <_fflush_r+0x1c>

08007aa8 <fflush>:
 8007aa8:	20000526 	beq	r4,zero,8007ac0 <fflush+0x18>
 8007aac:	00820074 	movhi	r2,2049
 8007ab0:	10ab6704 	addi	r2,r2,-21092
 8007ab4:	200b883a 	mov	r5,r4
 8007ab8:	11000017 	ldw	r4,0(r2)
 8007abc:	8007a4c1 	jmpi	8007a4c <_fflush_r>
 8007ac0:	00820074 	movhi	r2,2049
 8007ac4:	10ab6604 	addi	r2,r2,-21096
 8007ac8:	11000017 	ldw	r4,0(r2)
 8007acc:	01420034 	movhi	r5,2048
 8007ad0:	295e9304 	addi	r5,r5,31308
 8007ad4:	80083701 	jmpi	8008370 <_fwalk_reent>

08007ad8 <__fp_unlock>:
 8007ad8:	0005883a 	mov	r2,zero
 8007adc:	f800283a 	ret

08007ae0 <_cleanup_r>:
 8007ae0:	01420074 	movhi	r5,2049
 8007ae4:	29624204 	addi	r5,r5,-30456
 8007ae8:	80083701 	jmpi	8008370 <_fwalk_reent>

08007aec <__sinit.part.1>:
 8007aec:	defff704 	addi	sp,sp,-36
 8007af0:	00c20034 	movhi	r3,2048
 8007af4:	dfc00815 	stw	ra,32(sp)
 8007af8:	ddc00715 	stw	r23,28(sp)
 8007afc:	dd800615 	stw	r22,24(sp)
 8007b00:	dd400515 	stw	r21,20(sp)
 8007b04:	dd000415 	stw	r20,16(sp)
 8007b08:	dcc00315 	stw	r19,12(sp)
 8007b0c:	dc800215 	stw	r18,8(sp)
 8007b10:	dc400115 	stw	r17,4(sp)
 8007b14:	dc000015 	stw	r16,0(sp)
 8007b18:	18deb804 	addi	r3,r3,31456
 8007b1c:	24000117 	ldw	r16,4(r4)
 8007b20:	20c00f15 	stw	r3,60(r4)
 8007b24:	2080bb04 	addi	r2,r4,748
 8007b28:	00c000c4 	movi	r3,3
 8007b2c:	20c0b915 	stw	r3,740(r4)
 8007b30:	2080ba15 	stw	r2,744(r4)
 8007b34:	2000b815 	stw	zero,736(r4)
 8007b38:	05c00204 	movi	r23,8
 8007b3c:	00800104 	movi	r2,4
 8007b40:	2025883a 	mov	r18,r4
 8007b44:	b80d883a 	mov	r6,r23
 8007b48:	81001704 	addi	r4,r16,92
 8007b4c:	000b883a 	mov	r5,zero
 8007b50:	80000015 	stw	zero,0(r16)
 8007b54:	80000115 	stw	zero,4(r16)
 8007b58:	80000215 	stw	zero,8(r16)
 8007b5c:	8080030d 	sth	r2,12(r16)
 8007b60:	80001915 	stw	zero,100(r16)
 8007b64:	8000038d 	sth	zero,14(r16)
 8007b68:	80000415 	stw	zero,16(r16)
 8007b6c:	80000515 	stw	zero,20(r16)
 8007b70:	80000615 	stw	zero,24(r16)
 8007b74:	80085f00 	call	80085f0 <memset>
 8007b78:	05820074 	movhi	r22,2049
 8007b7c:	94400217 	ldw	r17,8(r18)
 8007b80:	05420074 	movhi	r21,2049
 8007b84:	05020074 	movhi	r20,2049
 8007b88:	04c20074 	movhi	r19,2049
 8007b8c:	b5a1c604 	addi	r22,r22,-30952
 8007b90:	ad61dd04 	addi	r21,r21,-30860
 8007b94:	a521fc04 	addi	r20,r20,-30736
 8007b98:	9ce21304 	addi	r19,r19,-30644
 8007b9c:	85800815 	stw	r22,32(r16)
 8007ba0:	85400915 	stw	r21,36(r16)
 8007ba4:	85000a15 	stw	r20,40(r16)
 8007ba8:	84c00b15 	stw	r19,44(r16)
 8007bac:	84000715 	stw	r16,28(r16)
 8007bb0:	00800284 	movi	r2,10
 8007bb4:	8880030d 	sth	r2,12(r17)
 8007bb8:	00800044 	movi	r2,1
 8007bbc:	b80d883a 	mov	r6,r23
 8007bc0:	89001704 	addi	r4,r17,92
 8007bc4:	000b883a 	mov	r5,zero
 8007bc8:	88000015 	stw	zero,0(r17)
 8007bcc:	88000115 	stw	zero,4(r17)
 8007bd0:	88000215 	stw	zero,8(r17)
 8007bd4:	88001915 	stw	zero,100(r17)
 8007bd8:	8880038d 	sth	r2,14(r17)
 8007bdc:	88000415 	stw	zero,16(r17)
 8007be0:	88000515 	stw	zero,20(r17)
 8007be4:	88000615 	stw	zero,24(r17)
 8007be8:	80085f00 	call	80085f0 <memset>
 8007bec:	94000317 	ldw	r16,12(r18)
 8007bf0:	00800484 	movi	r2,18
 8007bf4:	8c400715 	stw	r17,28(r17)
 8007bf8:	8d800815 	stw	r22,32(r17)
 8007bfc:	8d400915 	stw	r21,36(r17)
 8007c00:	8d000a15 	stw	r20,40(r17)
 8007c04:	8cc00b15 	stw	r19,44(r17)
 8007c08:	8080030d 	sth	r2,12(r16)
 8007c0c:	00800084 	movi	r2,2
 8007c10:	80000015 	stw	zero,0(r16)
 8007c14:	80000115 	stw	zero,4(r16)
 8007c18:	80000215 	stw	zero,8(r16)
 8007c1c:	80001915 	stw	zero,100(r16)
 8007c20:	8080038d 	sth	r2,14(r16)
 8007c24:	80000415 	stw	zero,16(r16)
 8007c28:	80000515 	stw	zero,20(r16)
 8007c2c:	80000615 	stw	zero,24(r16)
 8007c30:	b80d883a 	mov	r6,r23
 8007c34:	000b883a 	mov	r5,zero
 8007c38:	81001704 	addi	r4,r16,92
 8007c3c:	80085f00 	call	80085f0 <memset>
 8007c40:	00800044 	movi	r2,1
 8007c44:	84000715 	stw	r16,28(r16)
 8007c48:	85800815 	stw	r22,32(r16)
 8007c4c:	85400915 	stw	r21,36(r16)
 8007c50:	85000a15 	stw	r20,40(r16)
 8007c54:	84c00b15 	stw	r19,44(r16)
 8007c58:	90800e15 	stw	r2,56(r18)
 8007c5c:	dfc00817 	ldw	ra,32(sp)
 8007c60:	ddc00717 	ldw	r23,28(sp)
 8007c64:	dd800617 	ldw	r22,24(sp)
 8007c68:	dd400517 	ldw	r21,20(sp)
 8007c6c:	dd000417 	ldw	r20,16(sp)
 8007c70:	dcc00317 	ldw	r19,12(sp)
 8007c74:	dc800217 	ldw	r18,8(sp)
 8007c78:	dc400117 	ldw	r17,4(sp)
 8007c7c:	dc000017 	ldw	r16,0(sp)
 8007c80:	dec00904 	addi	sp,sp,36
 8007c84:	f800283a 	ret

08007c88 <__fp_lock>:
 8007c88:	0005883a 	mov	r2,zero
 8007c8c:	f800283a 	ret

08007c90 <__sfmoreglue>:
 8007c90:	defffc04 	addi	sp,sp,-16
 8007c94:	dc400115 	stw	r17,4(sp)
 8007c98:	2c7fffc4 	addi	r17,r5,-1
 8007c9c:	8c401a24 	muli	r17,r17,104
 8007ca0:	dc800215 	stw	r18,8(sp)
 8007ca4:	2825883a 	mov	r18,r5
 8007ca8:	89401d04 	addi	r5,r17,116
 8007cac:	dc000015 	stw	r16,0(sp)
 8007cb0:	dfc00315 	stw	ra,12(sp)
 8007cb4:	80061e40 	call	80061e4 <_malloc_r>
 8007cb8:	1021883a 	mov	r16,r2
 8007cbc:	10000726 	beq	r2,zero,8007cdc <__sfmoreglue+0x4c>
 8007cc0:	11000304 	addi	r4,r2,12
 8007cc4:	10000015 	stw	zero,0(r2)
 8007cc8:	14800115 	stw	r18,4(r2)
 8007ccc:	11000215 	stw	r4,8(r2)
 8007cd0:	89801a04 	addi	r6,r17,104
 8007cd4:	000b883a 	mov	r5,zero
 8007cd8:	80085f00 	call	80085f0 <memset>
 8007cdc:	8005883a 	mov	r2,r16
 8007ce0:	dfc00317 	ldw	ra,12(sp)
 8007ce4:	dc800217 	ldw	r18,8(sp)
 8007ce8:	dc400117 	ldw	r17,4(sp)
 8007cec:	dc000017 	ldw	r16,0(sp)
 8007cf0:	dec00404 	addi	sp,sp,16
 8007cf4:	f800283a 	ret

08007cf8 <__sfp>:
 8007cf8:	defffb04 	addi	sp,sp,-20
 8007cfc:	dc000015 	stw	r16,0(sp)
 8007d00:	04020074 	movhi	r16,2049
 8007d04:	842b6604 	addi	r16,r16,-21096
 8007d08:	dcc00315 	stw	r19,12(sp)
 8007d0c:	2027883a 	mov	r19,r4
 8007d10:	81000017 	ldw	r4,0(r16)
 8007d14:	dfc00415 	stw	ra,16(sp)
 8007d18:	dc800215 	stw	r18,8(sp)
 8007d1c:	20800e17 	ldw	r2,56(r4)
 8007d20:	dc400115 	stw	r17,4(sp)
 8007d24:	1000021e 	bne	r2,zero,8007d30 <__sfp+0x38>
 8007d28:	8007aec0 	call	8007aec <__sinit.part.1>
 8007d2c:	81000017 	ldw	r4,0(r16)
 8007d30:	2480b804 	addi	r18,r4,736
 8007d34:	047fffc4 	movi	r17,-1
 8007d38:	91000117 	ldw	r4,4(r18)
 8007d3c:	94000217 	ldw	r16,8(r18)
 8007d40:	213fffc4 	addi	r4,r4,-1
 8007d44:	20000a16 	blt	r4,zero,8007d70 <__sfp+0x78>
 8007d48:	8080030f 	ldh	r2,12(r16)
 8007d4c:	10000c26 	beq	r2,zero,8007d80 <__sfp+0x88>
 8007d50:	80c01d04 	addi	r3,r16,116
 8007d54:	00000206 	br	8007d60 <__sfp+0x68>
 8007d58:	18bfe60f 	ldh	r2,-104(r3)
 8007d5c:	10000826 	beq	r2,zero,8007d80 <__sfp+0x88>
 8007d60:	213fffc4 	addi	r4,r4,-1
 8007d64:	1c3ffd04 	addi	r16,r3,-12
 8007d68:	18c01a04 	addi	r3,r3,104
 8007d6c:	247ffa1e 	bne	r4,r17,8007d58 <__sfp+0x60>
 8007d70:	90800017 	ldw	r2,0(r18)
 8007d74:	10001d26 	beq	r2,zero,8007dec <__sfp+0xf4>
 8007d78:	1025883a 	mov	r18,r2
 8007d7c:	003fee06 	br	8007d38 <__sfp+0x40>
 8007d80:	00bfffc4 	movi	r2,-1
 8007d84:	8080038d 	sth	r2,14(r16)
 8007d88:	00800044 	movi	r2,1
 8007d8c:	8080030d 	sth	r2,12(r16)
 8007d90:	80001915 	stw	zero,100(r16)
 8007d94:	80000015 	stw	zero,0(r16)
 8007d98:	80000215 	stw	zero,8(r16)
 8007d9c:	80000115 	stw	zero,4(r16)
 8007da0:	80000415 	stw	zero,16(r16)
 8007da4:	80000515 	stw	zero,20(r16)
 8007da8:	80000615 	stw	zero,24(r16)
 8007dac:	01800204 	movi	r6,8
 8007db0:	000b883a 	mov	r5,zero
 8007db4:	81001704 	addi	r4,r16,92
 8007db8:	80085f00 	call	80085f0 <memset>
 8007dbc:	8005883a 	mov	r2,r16
 8007dc0:	80000c15 	stw	zero,48(r16)
 8007dc4:	80000d15 	stw	zero,52(r16)
 8007dc8:	80001115 	stw	zero,68(r16)
 8007dcc:	80001215 	stw	zero,72(r16)
 8007dd0:	dfc00417 	ldw	ra,16(sp)
 8007dd4:	dcc00317 	ldw	r19,12(sp)
 8007dd8:	dc800217 	ldw	r18,8(sp)
 8007ddc:	dc400117 	ldw	r17,4(sp)
 8007de0:	dc000017 	ldw	r16,0(sp)
 8007de4:	dec00504 	addi	sp,sp,20
 8007de8:	f800283a 	ret
 8007dec:	01400104 	movi	r5,4
 8007df0:	9809883a 	mov	r4,r19
 8007df4:	8007c900 	call	8007c90 <__sfmoreglue>
 8007df8:	90800015 	stw	r2,0(r18)
 8007dfc:	103fde1e 	bne	r2,zero,8007d78 <__sfp+0x80>
 8007e00:	00800304 	movi	r2,12
 8007e04:	98800015 	stw	r2,0(r19)
 8007e08:	0005883a 	mov	r2,zero
 8007e0c:	003ff006 	br	8007dd0 <__sfp+0xd8>

08007e10 <_cleanup>:
 8007e10:	00820074 	movhi	r2,2049
 8007e14:	10ab6604 	addi	r2,r2,-21096
 8007e18:	11000017 	ldw	r4,0(r2)
 8007e1c:	01420074 	movhi	r5,2049
 8007e20:	29624204 	addi	r5,r5,-30456
 8007e24:	80083701 	jmpi	8008370 <_fwalk_reent>

08007e28 <__sinit>:
 8007e28:	20800e17 	ldw	r2,56(r4)
 8007e2c:	10000126 	beq	r2,zero,8007e34 <__sinit+0xc>
 8007e30:	f800283a 	ret
 8007e34:	8007aec1 	jmpi	8007aec <__sinit.part.1>

08007e38 <__sfp_lock_acquire>:
 8007e38:	f800283a 	ret

08007e3c <__sfp_lock_release>:
 8007e3c:	f800283a 	ret

08007e40 <__sinit_lock_acquire>:
 8007e40:	f800283a 	ret

08007e44 <__sinit_lock_release>:
 8007e44:	f800283a 	ret

08007e48 <__fp_lock_all>:
 8007e48:	00820074 	movhi	r2,2049
 8007e4c:	10ab6704 	addi	r2,r2,-21092
 8007e50:	11000017 	ldw	r4,0(r2)
 8007e54:	01420034 	movhi	r5,2048
 8007e58:	295f2204 	addi	r5,r5,31880
 8007e5c:	80082ac1 	jmpi	80082ac <_fwalk>

08007e60 <__fp_unlock_all>:
 8007e60:	00820074 	movhi	r2,2049
 8007e64:	10ab6704 	addi	r2,r2,-21092
 8007e68:	11000017 	ldw	r4,0(r2)
 8007e6c:	01420034 	movhi	r5,2048
 8007e70:	295eb604 	addi	r5,r5,31448
 8007e74:	80082ac1 	jmpi	80082ac <_fwalk>

08007e78 <_malloc_trim_r>:
 8007e78:	defffb04 	addi	sp,sp,-20
 8007e7c:	dcc00315 	stw	r19,12(sp)
 8007e80:	04c20074 	movhi	r19,2049
 8007e84:	dc800215 	stw	r18,8(sp)
 8007e88:	dc400115 	stw	r17,4(sp)
 8007e8c:	dc000015 	stw	r16,0(sp)
 8007e90:	dfc00415 	stw	ra,16(sp)
 8007e94:	2821883a 	mov	r16,r5
 8007e98:	9cea5b04 	addi	r19,r19,-22164
 8007e9c:	2025883a 	mov	r18,r4
 8007ea0:	8008e8c0 	call	8008e8c <__malloc_lock>
 8007ea4:	98800217 	ldw	r2,8(r19)
 8007ea8:	14400117 	ldw	r17,4(r2)
 8007eac:	00bfff04 	movi	r2,-4
 8007eb0:	88a2703a 	and	r17,r17,r2
 8007eb4:	8c21c83a 	sub	r16,r17,r16
 8007eb8:	8403fbc4 	addi	r16,r16,4079
 8007ebc:	8020d33a 	srli	r16,r16,12
 8007ec0:	0083ffc4 	movi	r2,4095
 8007ec4:	843fffc4 	addi	r16,r16,-1
 8007ec8:	8020933a 	slli	r16,r16,12
 8007ecc:	1400060e 	bge	r2,r16,8007ee8 <_malloc_trim_r+0x70>
 8007ed0:	000b883a 	mov	r5,zero
 8007ed4:	9009883a 	mov	r4,r18
 8007ed8:	80073580 	call	8007358 <_sbrk_r>
 8007edc:	98c00217 	ldw	r3,8(r19)
 8007ee0:	1c47883a 	add	r3,r3,r17
 8007ee4:	10c00a26 	beq	r2,r3,8007f10 <_malloc_trim_r+0x98>
 8007ee8:	9009883a 	mov	r4,r18
 8007eec:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8007ef0:	0005883a 	mov	r2,zero
 8007ef4:	dfc00417 	ldw	ra,16(sp)
 8007ef8:	dcc00317 	ldw	r19,12(sp)
 8007efc:	dc800217 	ldw	r18,8(sp)
 8007f00:	dc400117 	ldw	r17,4(sp)
 8007f04:	dc000017 	ldw	r16,0(sp)
 8007f08:	dec00504 	addi	sp,sp,20
 8007f0c:	f800283a 	ret
 8007f10:	040bc83a 	sub	r5,zero,r16
 8007f14:	9009883a 	mov	r4,r18
 8007f18:	80073580 	call	8007358 <_sbrk_r>
 8007f1c:	00ffffc4 	movi	r3,-1
 8007f20:	10c00d26 	beq	r2,r3,8007f58 <_malloc_trim_r+0xe0>
 8007f24:	00c20074 	movhi	r3,2049
 8007f28:	18f21104 	addi	r3,r3,-14268
 8007f2c:	18800017 	ldw	r2,0(r3)
 8007f30:	99000217 	ldw	r4,8(r19)
 8007f34:	8c23c83a 	sub	r17,r17,r16
 8007f38:	8c400054 	ori	r17,r17,1
 8007f3c:	1421c83a 	sub	r16,r2,r16
 8007f40:	24400115 	stw	r17,4(r4)
 8007f44:	9009883a 	mov	r4,r18
 8007f48:	1c000015 	stw	r16,0(r3)
 8007f4c:	8008eb00 	call	8008eb0 <__malloc_unlock>
 8007f50:	00800044 	movi	r2,1
 8007f54:	003fe706 	br	8007ef4 <_malloc_trim_r+0x7c>
 8007f58:	000b883a 	mov	r5,zero
 8007f5c:	9009883a 	mov	r4,r18
 8007f60:	80073580 	call	8007358 <_sbrk_r>
 8007f64:	99000217 	ldw	r4,8(r19)
 8007f68:	014003c4 	movi	r5,15
 8007f6c:	1107c83a 	sub	r3,r2,r4
 8007f70:	28ffdd0e 	bge	r5,r3,8007ee8 <_malloc_trim_r+0x70>
 8007f74:	01420074 	movhi	r5,2049
 8007f78:	296b6804 	addi	r5,r5,-21088
 8007f7c:	29400017 	ldw	r5,0(r5)
 8007f80:	18c00054 	ori	r3,r3,1
 8007f84:	20c00115 	stw	r3,4(r4)
 8007f88:	00c20074 	movhi	r3,2049
 8007f8c:	1145c83a 	sub	r2,r2,r5
 8007f90:	18f21104 	addi	r3,r3,-14268
 8007f94:	18800015 	stw	r2,0(r3)
 8007f98:	003fd306 	br	8007ee8 <_malloc_trim_r+0x70>

08007f9c <_free_r>:
 8007f9c:	28004126 	beq	r5,zero,80080a4 <_free_r+0x108>
 8007fa0:	defffd04 	addi	sp,sp,-12
 8007fa4:	dc400115 	stw	r17,4(sp)
 8007fa8:	dc000015 	stw	r16,0(sp)
 8007fac:	2023883a 	mov	r17,r4
 8007fb0:	2821883a 	mov	r16,r5
 8007fb4:	dfc00215 	stw	ra,8(sp)
 8007fb8:	8008e8c0 	call	8008e8c <__malloc_lock>
 8007fbc:	81ffff17 	ldw	r7,-4(r16)
 8007fc0:	00bfff84 	movi	r2,-2
 8007fc4:	01020074 	movhi	r4,2049
 8007fc8:	81bffe04 	addi	r6,r16,-8
 8007fcc:	3884703a 	and	r2,r7,r2
 8007fd0:	212a5b04 	addi	r4,r4,-22164
 8007fd4:	308b883a 	add	r5,r6,r2
 8007fd8:	2a400117 	ldw	r9,4(r5)
 8007fdc:	22000217 	ldw	r8,8(r4)
 8007fe0:	00ffff04 	movi	r3,-4
 8007fe4:	48c6703a 	and	r3,r9,r3
 8007fe8:	2a005726 	beq	r5,r8,8008148 <_free_r+0x1ac>
 8007fec:	28c00115 	stw	r3,4(r5)
 8007ff0:	39c0004c 	andi	r7,r7,1
 8007ff4:	3800091e 	bne	r7,zero,800801c <_free_r+0x80>
 8007ff8:	823ffe17 	ldw	r8,-8(r16)
 8007ffc:	22400204 	addi	r9,r4,8
 8008000:	320dc83a 	sub	r6,r6,r8
 8008004:	31c00217 	ldw	r7,8(r6)
 8008008:	1205883a 	add	r2,r2,r8
 800800c:	3a406526 	beq	r7,r9,80081a4 <_free_r+0x208>
 8008010:	32000317 	ldw	r8,12(r6)
 8008014:	3a000315 	stw	r8,12(r7)
 8008018:	41c00215 	stw	r7,8(r8)
 800801c:	28cf883a 	add	r7,r5,r3
 8008020:	39c00117 	ldw	r7,4(r7)
 8008024:	39c0004c 	andi	r7,r7,1
 8008028:	38003a26 	beq	r7,zero,8008114 <_free_r+0x178>
 800802c:	10c00054 	ori	r3,r2,1
 8008030:	30c00115 	stw	r3,4(r6)
 8008034:	3087883a 	add	r3,r6,r2
 8008038:	18800015 	stw	r2,0(r3)
 800803c:	00c07fc4 	movi	r3,511
 8008040:	18801936 	bltu	r3,r2,80080a8 <_free_r+0x10c>
 8008044:	1004d0fa 	srli	r2,r2,3
 8008048:	01c00044 	movi	r7,1
 800804c:	21400117 	ldw	r5,4(r4)
 8008050:	10c00044 	addi	r3,r2,1
 8008054:	18c7883a 	add	r3,r3,r3
 8008058:	1005d0ba 	srai	r2,r2,2
 800805c:	18c7883a 	add	r3,r3,r3
 8008060:	18c7883a 	add	r3,r3,r3
 8008064:	1907883a 	add	r3,r3,r4
 8008068:	3884983a 	sll	r2,r7,r2
 800806c:	19c00017 	ldw	r7,0(r3)
 8008070:	1a3ffe04 	addi	r8,r3,-8
 8008074:	1144b03a 	or	r2,r2,r5
 8008078:	32000315 	stw	r8,12(r6)
 800807c:	31c00215 	stw	r7,8(r6)
 8008080:	20800115 	stw	r2,4(r4)
 8008084:	19800015 	stw	r6,0(r3)
 8008088:	39800315 	stw	r6,12(r7)
 800808c:	8809883a 	mov	r4,r17
 8008090:	dfc00217 	ldw	ra,8(sp)
 8008094:	dc400117 	ldw	r17,4(sp)
 8008098:	dc000017 	ldw	r16,0(sp)
 800809c:	dec00304 	addi	sp,sp,12
 80080a0:	8008eb01 	jmpi	8008eb0 <__malloc_unlock>
 80080a4:	f800283a 	ret
 80080a8:	100ad27a 	srli	r5,r2,9
 80080ac:	00c00104 	movi	r3,4
 80080b0:	19404a36 	bltu	r3,r5,80081dc <_free_r+0x240>
 80080b4:	100ad1ba 	srli	r5,r2,6
 80080b8:	28c00e44 	addi	r3,r5,57
 80080bc:	18c7883a 	add	r3,r3,r3
 80080c0:	29400e04 	addi	r5,r5,56
 80080c4:	18c7883a 	add	r3,r3,r3
 80080c8:	18c7883a 	add	r3,r3,r3
 80080cc:	1909883a 	add	r4,r3,r4
 80080d0:	20c00017 	ldw	r3,0(r4)
 80080d4:	01c20074 	movhi	r7,2049
 80080d8:	213ffe04 	addi	r4,r4,-8
 80080dc:	39ea5b04 	addi	r7,r7,-22164
 80080e0:	20c04426 	beq	r4,r3,80081f4 <_free_r+0x258>
 80080e4:	01ffff04 	movi	r7,-4
 80080e8:	19400117 	ldw	r5,4(r3)
 80080ec:	29ca703a 	and	r5,r5,r7
 80080f0:	1140022e 	bgeu	r2,r5,80080fc <_free_r+0x160>
 80080f4:	18c00217 	ldw	r3,8(r3)
 80080f8:	20fffb1e 	bne	r4,r3,80080e8 <_free_r+0x14c>
 80080fc:	19000317 	ldw	r4,12(r3)
 8008100:	31000315 	stw	r4,12(r6)
 8008104:	30c00215 	stw	r3,8(r6)
 8008108:	21800215 	stw	r6,8(r4)
 800810c:	19800315 	stw	r6,12(r3)
 8008110:	003fde06 	br	800808c <_free_r+0xf0>
 8008114:	29c00217 	ldw	r7,8(r5)
 8008118:	10c5883a 	add	r2,r2,r3
 800811c:	00c20074 	movhi	r3,2049
 8008120:	18ea5d04 	addi	r3,r3,-22156
 8008124:	38c03b26 	beq	r7,r3,8008214 <_free_r+0x278>
 8008128:	2a000317 	ldw	r8,12(r5)
 800812c:	11400054 	ori	r5,r2,1
 8008130:	3087883a 	add	r3,r6,r2
 8008134:	3a000315 	stw	r8,12(r7)
 8008138:	41c00215 	stw	r7,8(r8)
 800813c:	31400115 	stw	r5,4(r6)
 8008140:	18800015 	stw	r2,0(r3)
 8008144:	003fbd06 	br	800803c <_free_r+0xa0>
 8008148:	39c0004c 	andi	r7,r7,1
 800814c:	10c5883a 	add	r2,r2,r3
 8008150:	3800071e 	bne	r7,zero,8008170 <_free_r+0x1d4>
 8008154:	81fffe17 	ldw	r7,-8(r16)
 8008158:	31cdc83a 	sub	r6,r6,r7
 800815c:	30c00317 	ldw	r3,12(r6)
 8008160:	31400217 	ldw	r5,8(r6)
 8008164:	11c5883a 	add	r2,r2,r7
 8008168:	28c00315 	stw	r3,12(r5)
 800816c:	19400215 	stw	r5,8(r3)
 8008170:	10c00054 	ori	r3,r2,1
 8008174:	30c00115 	stw	r3,4(r6)
 8008178:	00c20074 	movhi	r3,2049
 800817c:	18eb6904 	addi	r3,r3,-21084
 8008180:	18c00017 	ldw	r3,0(r3)
 8008184:	21800215 	stw	r6,8(r4)
 8008188:	10ffc036 	bltu	r2,r3,800808c <_free_r+0xf0>
 800818c:	00820074 	movhi	r2,2049
 8008190:	10b21004 	addi	r2,r2,-14272
 8008194:	11400017 	ldw	r5,0(r2)
 8008198:	8809883a 	mov	r4,r17
 800819c:	8007e780 	call	8007e78 <_malloc_trim_r>
 80081a0:	003fba06 	br	800808c <_free_r+0xf0>
 80081a4:	28c9883a 	add	r4,r5,r3
 80081a8:	21000117 	ldw	r4,4(r4)
 80081ac:	2100004c 	andi	r4,r4,1
 80081b0:	2000391e 	bne	r4,zero,8008298 <_free_r+0x2fc>
 80081b4:	29c00217 	ldw	r7,8(r5)
 80081b8:	29000317 	ldw	r4,12(r5)
 80081bc:	1885883a 	add	r2,r3,r2
 80081c0:	10c00054 	ori	r3,r2,1
 80081c4:	39000315 	stw	r4,12(r7)
 80081c8:	21c00215 	stw	r7,8(r4)
 80081cc:	30c00115 	stw	r3,4(r6)
 80081d0:	308d883a 	add	r6,r6,r2
 80081d4:	30800015 	stw	r2,0(r6)
 80081d8:	003fac06 	br	800808c <_free_r+0xf0>
 80081dc:	00c00504 	movi	r3,20
 80081e0:	19401536 	bltu	r3,r5,8008238 <_free_r+0x29c>
 80081e4:	28c01704 	addi	r3,r5,92
 80081e8:	18c7883a 	add	r3,r3,r3
 80081ec:	294016c4 	addi	r5,r5,91
 80081f0:	003fb406 	br	80080c4 <_free_r+0x128>
 80081f4:	280bd0ba 	srai	r5,r5,2
 80081f8:	00c00044 	movi	r3,1
 80081fc:	38800117 	ldw	r2,4(r7)
 8008200:	194a983a 	sll	r5,r3,r5
 8008204:	2007883a 	mov	r3,r4
 8008208:	2884b03a 	or	r2,r5,r2
 800820c:	38800115 	stw	r2,4(r7)
 8008210:	003fbb06 	br	8008100 <_free_r+0x164>
 8008214:	21800515 	stw	r6,20(r4)
 8008218:	21800415 	stw	r6,16(r4)
 800821c:	10c00054 	ori	r3,r2,1
 8008220:	31c00315 	stw	r7,12(r6)
 8008224:	31c00215 	stw	r7,8(r6)
 8008228:	30c00115 	stw	r3,4(r6)
 800822c:	308d883a 	add	r6,r6,r2
 8008230:	30800015 	stw	r2,0(r6)
 8008234:	003f9506 	br	800808c <_free_r+0xf0>
 8008238:	00c01504 	movi	r3,84
 800823c:	19400536 	bltu	r3,r5,8008254 <_free_r+0x2b8>
 8008240:	100ad33a 	srli	r5,r2,12
 8008244:	28c01bc4 	addi	r3,r5,111
 8008248:	18c7883a 	add	r3,r3,r3
 800824c:	29401b84 	addi	r5,r5,110
 8008250:	003f9c06 	br	80080c4 <_free_r+0x128>
 8008254:	00c05504 	movi	r3,340
 8008258:	19400536 	bltu	r3,r5,8008270 <_free_r+0x2d4>
 800825c:	100ad3fa 	srli	r5,r2,15
 8008260:	28c01e04 	addi	r3,r5,120
 8008264:	18c7883a 	add	r3,r3,r3
 8008268:	29401dc4 	addi	r5,r5,119
 800826c:	003f9506 	br	80080c4 <_free_r+0x128>
 8008270:	00c15504 	movi	r3,1364
 8008274:	19400536 	bltu	r3,r5,800828c <_free_r+0x2f0>
 8008278:	100ad4ba 	srli	r5,r2,18
 800827c:	28c01f44 	addi	r3,r5,125
 8008280:	18c7883a 	add	r3,r3,r3
 8008284:	29401f04 	addi	r5,r5,124
 8008288:	003f8e06 	br	80080c4 <_free_r+0x128>
 800828c:	00c03f84 	movi	r3,254
 8008290:	01401f84 	movi	r5,126
 8008294:	003f8b06 	br	80080c4 <_free_r+0x128>
 8008298:	10c00054 	ori	r3,r2,1
 800829c:	30c00115 	stw	r3,4(r6)
 80082a0:	308d883a 	add	r6,r6,r2
 80082a4:	30800015 	stw	r2,0(r6)
 80082a8:	003f7806 	br	800808c <_free_r+0xf0>

080082ac <_fwalk>:
 80082ac:	defff704 	addi	sp,sp,-36
 80082b0:	dd000415 	stw	r20,16(sp)
 80082b4:	dfc00815 	stw	ra,32(sp)
 80082b8:	ddc00715 	stw	r23,28(sp)
 80082bc:	dd800615 	stw	r22,24(sp)
 80082c0:	dd400515 	stw	r21,20(sp)
 80082c4:	dcc00315 	stw	r19,12(sp)
 80082c8:	dc800215 	stw	r18,8(sp)
 80082cc:	dc400115 	stw	r17,4(sp)
 80082d0:	dc000015 	stw	r16,0(sp)
 80082d4:	2500b804 	addi	r20,r4,736
 80082d8:	a0002326 	beq	r20,zero,8008368 <_fwalk+0xbc>
 80082dc:	282b883a 	mov	r21,r5
 80082e0:	002f883a 	mov	r23,zero
 80082e4:	05800044 	movi	r22,1
 80082e8:	04ffffc4 	movi	r19,-1
 80082ec:	a4400117 	ldw	r17,4(r20)
 80082f0:	a4800217 	ldw	r18,8(r20)
 80082f4:	8c7fffc4 	addi	r17,r17,-1
 80082f8:	88000d16 	blt	r17,zero,8008330 <_fwalk+0x84>
 80082fc:	94000304 	addi	r16,r18,12
 8008300:	94800384 	addi	r18,r18,14
 8008304:	8080000b 	ldhu	r2,0(r16)
 8008308:	8c7fffc4 	addi	r17,r17,-1
 800830c:	813ffd04 	addi	r4,r16,-12
 8008310:	b080042e 	bgeu	r22,r2,8008324 <_fwalk+0x78>
 8008314:	9080000f 	ldh	r2,0(r18)
 8008318:	14c00226 	beq	r2,r19,8008324 <_fwalk+0x78>
 800831c:	a83ee83a 	callr	r21
 8008320:	b8aeb03a 	or	r23,r23,r2
 8008324:	84001a04 	addi	r16,r16,104
 8008328:	94801a04 	addi	r18,r18,104
 800832c:	8cfff51e 	bne	r17,r19,8008304 <_fwalk+0x58>
 8008330:	a5000017 	ldw	r20,0(r20)
 8008334:	a03fed1e 	bne	r20,zero,80082ec <_fwalk+0x40>
 8008338:	b805883a 	mov	r2,r23
 800833c:	dfc00817 	ldw	ra,32(sp)
 8008340:	ddc00717 	ldw	r23,28(sp)
 8008344:	dd800617 	ldw	r22,24(sp)
 8008348:	dd400517 	ldw	r21,20(sp)
 800834c:	dd000417 	ldw	r20,16(sp)
 8008350:	dcc00317 	ldw	r19,12(sp)
 8008354:	dc800217 	ldw	r18,8(sp)
 8008358:	dc400117 	ldw	r17,4(sp)
 800835c:	dc000017 	ldw	r16,0(sp)
 8008360:	dec00904 	addi	sp,sp,36
 8008364:	f800283a 	ret
 8008368:	002f883a 	mov	r23,zero
 800836c:	003ff206 	br	8008338 <_fwalk+0x8c>

08008370 <_fwalk_reent>:
 8008370:	defff704 	addi	sp,sp,-36
 8008374:	dd000415 	stw	r20,16(sp)
 8008378:	dfc00815 	stw	ra,32(sp)
 800837c:	ddc00715 	stw	r23,28(sp)
 8008380:	dd800615 	stw	r22,24(sp)
 8008384:	dd400515 	stw	r21,20(sp)
 8008388:	dcc00315 	stw	r19,12(sp)
 800838c:	dc800215 	stw	r18,8(sp)
 8008390:	dc400115 	stw	r17,4(sp)
 8008394:	dc000015 	stw	r16,0(sp)
 8008398:	2500b804 	addi	r20,r4,736
 800839c:	a0002326 	beq	r20,zero,800842c <_fwalk_reent+0xbc>
 80083a0:	282b883a 	mov	r21,r5
 80083a4:	2027883a 	mov	r19,r4
 80083a8:	002f883a 	mov	r23,zero
 80083ac:	05800044 	movi	r22,1
 80083b0:	04bfffc4 	movi	r18,-1
 80083b4:	a4400117 	ldw	r17,4(r20)
 80083b8:	a4000217 	ldw	r16,8(r20)
 80083bc:	8c7fffc4 	addi	r17,r17,-1
 80083c0:	88000c16 	blt	r17,zero,80083f4 <_fwalk_reent+0x84>
 80083c4:	84000304 	addi	r16,r16,12
 80083c8:	8080000b 	ldhu	r2,0(r16)
 80083cc:	8c7fffc4 	addi	r17,r17,-1
 80083d0:	817ffd04 	addi	r5,r16,-12
 80083d4:	b080052e 	bgeu	r22,r2,80083ec <_fwalk_reent+0x7c>
 80083d8:	8080008f 	ldh	r2,2(r16)
 80083dc:	9809883a 	mov	r4,r19
 80083e0:	14800226 	beq	r2,r18,80083ec <_fwalk_reent+0x7c>
 80083e4:	a83ee83a 	callr	r21
 80083e8:	b8aeb03a 	or	r23,r23,r2
 80083ec:	84001a04 	addi	r16,r16,104
 80083f0:	8cbff51e 	bne	r17,r18,80083c8 <_fwalk_reent+0x58>
 80083f4:	a5000017 	ldw	r20,0(r20)
 80083f8:	a03fee1e 	bne	r20,zero,80083b4 <_fwalk_reent+0x44>
 80083fc:	b805883a 	mov	r2,r23
 8008400:	dfc00817 	ldw	ra,32(sp)
 8008404:	ddc00717 	ldw	r23,28(sp)
 8008408:	dd800617 	ldw	r22,24(sp)
 800840c:	dd400517 	ldw	r21,20(sp)
 8008410:	dd000417 	ldw	r20,16(sp)
 8008414:	dcc00317 	ldw	r19,12(sp)
 8008418:	dc800217 	ldw	r18,8(sp)
 800841c:	dc400117 	ldw	r17,4(sp)
 8008420:	dc000017 	ldw	r16,0(sp)
 8008424:	dec00904 	addi	sp,sp,36
 8008428:	f800283a 	ret
 800842c:	002f883a 	mov	r23,zero
 8008430:	003ff206 	br	80083fc <_fwalk_reent+0x8c>

08008434 <__smakebuf_r>:
 8008434:	2880030b 	ldhu	r2,12(r5)
 8008438:	10c0008c 	andi	r3,r2,2
 800843c:	1800411e 	bne	r3,zero,8008544 <__smakebuf_r+0x110>
 8008440:	deffec04 	addi	sp,sp,-80
 8008444:	dc000f15 	stw	r16,60(sp)
 8008448:	2821883a 	mov	r16,r5
 800844c:	2940038f 	ldh	r5,14(r5)
 8008450:	dc401015 	stw	r17,64(sp)
 8008454:	dfc01315 	stw	ra,76(sp)
 8008458:	dcc01215 	stw	r19,72(sp)
 800845c:	dc801115 	stw	r18,68(sp)
 8008460:	2023883a 	mov	r17,r4
 8008464:	28001c16 	blt	r5,zero,80084d8 <__smakebuf_r+0xa4>
 8008468:	d80d883a 	mov	r6,sp
 800846c:	8008a0c0 	call	8008a0c <_fstat_r>
 8008470:	10001816 	blt	r2,zero,80084d4 <__smakebuf_r+0xa0>
 8008474:	d8800117 	ldw	r2,4(sp)
 8008478:	00e00014 	movui	r3,32768
 800847c:	10bc000c 	andi	r2,r2,61440
 8008480:	14c80020 	cmpeqi	r19,r2,8192
 8008484:	10c03726 	beq	r2,r3,8008564 <__smakebuf_r+0x130>
 8008488:	80c0030b 	ldhu	r3,12(r16)
 800848c:	18c20014 	ori	r3,r3,2048
 8008490:	80c0030d 	sth	r3,12(r16)
 8008494:	00c80004 	movi	r3,8192
 8008498:	10c0521e 	bne	r2,r3,80085e4 <__smakebuf_r+0x1b0>
 800849c:	8140038f 	ldh	r5,14(r16)
 80084a0:	8809883a 	mov	r4,r17
 80084a4:	8008a680 	call	8008a68 <_isatty_r>
 80084a8:	10004c26 	beq	r2,zero,80085dc <__smakebuf_r+0x1a8>
 80084ac:	8080030b 	ldhu	r2,12(r16)
 80084b0:	80c010c4 	addi	r3,r16,67
 80084b4:	80c00015 	stw	r3,0(r16)
 80084b8:	10800054 	ori	r2,r2,1
 80084bc:	8080030d 	sth	r2,12(r16)
 80084c0:	00800044 	movi	r2,1
 80084c4:	80c00415 	stw	r3,16(r16)
 80084c8:	80800515 	stw	r2,20(r16)
 80084cc:	04810004 	movi	r18,1024
 80084d0:	00000706 	br	80084f0 <__smakebuf_r+0xbc>
 80084d4:	8080030b 	ldhu	r2,12(r16)
 80084d8:	10c0200c 	andi	r3,r2,128
 80084dc:	18001f1e 	bne	r3,zero,800855c <__smakebuf_r+0x128>
 80084e0:	04810004 	movi	r18,1024
 80084e4:	10820014 	ori	r2,r2,2048
 80084e8:	8080030d 	sth	r2,12(r16)
 80084ec:	0027883a 	mov	r19,zero
 80084f0:	900b883a 	mov	r5,r18
 80084f4:	8809883a 	mov	r4,r17
 80084f8:	80061e40 	call	80061e4 <_malloc_r>
 80084fc:	10002c26 	beq	r2,zero,80085b0 <__smakebuf_r+0x17c>
 8008500:	80c0030b 	ldhu	r3,12(r16)
 8008504:	01020034 	movhi	r4,2048
 8008508:	211eb804 	addi	r4,r4,31456
 800850c:	89000f15 	stw	r4,60(r17)
 8008510:	18c02014 	ori	r3,r3,128
 8008514:	80c0030d 	sth	r3,12(r16)
 8008518:	80800015 	stw	r2,0(r16)
 800851c:	80800415 	stw	r2,16(r16)
 8008520:	84800515 	stw	r18,20(r16)
 8008524:	98001a1e 	bne	r19,zero,8008590 <__smakebuf_r+0x15c>
 8008528:	dfc01317 	ldw	ra,76(sp)
 800852c:	dcc01217 	ldw	r19,72(sp)
 8008530:	dc801117 	ldw	r18,68(sp)
 8008534:	dc401017 	ldw	r17,64(sp)
 8008538:	dc000f17 	ldw	r16,60(sp)
 800853c:	dec01404 	addi	sp,sp,80
 8008540:	f800283a 	ret
 8008544:	288010c4 	addi	r2,r5,67
 8008548:	28800015 	stw	r2,0(r5)
 800854c:	28800415 	stw	r2,16(r5)
 8008550:	00800044 	movi	r2,1
 8008554:	28800515 	stw	r2,20(r5)
 8008558:	f800283a 	ret
 800855c:	04801004 	movi	r18,64
 8008560:	003fe006 	br	80084e4 <__smakebuf_r+0xb0>
 8008564:	81000a17 	ldw	r4,40(r16)
 8008568:	00c20074 	movhi	r3,2049
 800856c:	18e1fc04 	addi	r3,r3,-30736
 8008570:	20ffc51e 	bne	r4,r3,8008488 <__smakebuf_r+0x54>
 8008574:	8080030b 	ldhu	r2,12(r16)
 8008578:	04810004 	movi	r18,1024
 800857c:	84801315 	stw	r18,76(r16)
 8008580:	1484b03a 	or	r2,r2,r18
 8008584:	8080030d 	sth	r2,12(r16)
 8008588:	0027883a 	mov	r19,zero
 800858c:	003fd806 	br	80084f0 <__smakebuf_r+0xbc>
 8008590:	8140038f 	ldh	r5,14(r16)
 8008594:	8809883a 	mov	r4,r17
 8008598:	8008a680 	call	8008a68 <_isatty_r>
 800859c:	103fe226 	beq	r2,zero,8008528 <__smakebuf_r+0xf4>
 80085a0:	8080030b 	ldhu	r2,12(r16)
 80085a4:	10800054 	ori	r2,r2,1
 80085a8:	8080030d 	sth	r2,12(r16)
 80085ac:	003fde06 	br	8008528 <__smakebuf_r+0xf4>
 80085b0:	8080030b 	ldhu	r2,12(r16)
 80085b4:	10c0800c 	andi	r3,r2,512
 80085b8:	183fdb1e 	bne	r3,zero,8008528 <__smakebuf_r+0xf4>
 80085bc:	10800094 	ori	r2,r2,2
 80085c0:	80c010c4 	addi	r3,r16,67
 80085c4:	8080030d 	sth	r2,12(r16)
 80085c8:	00800044 	movi	r2,1
 80085cc:	80c00015 	stw	r3,0(r16)
 80085d0:	80c00415 	stw	r3,16(r16)
 80085d4:	80800515 	stw	r2,20(r16)
 80085d8:	003fd306 	br	8008528 <__smakebuf_r+0xf4>
 80085dc:	04810004 	movi	r18,1024
 80085e0:	003fc306 	br	80084f0 <__smakebuf_r+0xbc>
 80085e4:	0027883a 	mov	r19,zero
 80085e8:	04810004 	movi	r18,1024
 80085ec:	003fc006 	br	80084f0 <__smakebuf_r+0xbc>

080085f0 <memset>:
 80085f0:	20c000cc 	andi	r3,r4,3
 80085f4:	2005883a 	mov	r2,r4
 80085f8:	18004426 	beq	r3,zero,800870c <memset+0x11c>
 80085fc:	31ffffc4 	addi	r7,r6,-1
 8008600:	30004026 	beq	r6,zero,8008704 <memset+0x114>
 8008604:	2813883a 	mov	r9,r5
 8008608:	200d883a 	mov	r6,r4
 800860c:	2007883a 	mov	r3,r4
 8008610:	00000406 	br	8008624 <memset+0x34>
 8008614:	3a3fffc4 	addi	r8,r7,-1
 8008618:	31800044 	addi	r6,r6,1
 800861c:	38003926 	beq	r7,zero,8008704 <memset+0x114>
 8008620:	400f883a 	mov	r7,r8
 8008624:	18c00044 	addi	r3,r3,1
 8008628:	32400005 	stb	r9,0(r6)
 800862c:	1a0000cc 	andi	r8,r3,3
 8008630:	403ff81e 	bne	r8,zero,8008614 <memset+0x24>
 8008634:	010000c4 	movi	r4,3
 8008638:	21c02d2e 	bgeu	r4,r7,80086f0 <memset+0x100>
 800863c:	29003fcc 	andi	r4,r5,255
 8008640:	200c923a 	slli	r6,r4,8
 8008644:	3108b03a 	or	r4,r6,r4
 8008648:	200c943a 	slli	r6,r4,16
 800864c:	218cb03a 	or	r6,r4,r6
 8008650:	010003c4 	movi	r4,15
 8008654:	21c0182e 	bgeu	r4,r7,80086b8 <memset+0xc8>
 8008658:	3b3ffc04 	addi	r12,r7,-16
 800865c:	6018d13a 	srli	r12,r12,4
 8008660:	1a000104 	addi	r8,r3,4
 8008664:	1ac00204 	addi	r11,r3,8
 8008668:	6008913a 	slli	r4,r12,4
 800866c:	1a800304 	addi	r10,r3,12
 8008670:	1813883a 	mov	r9,r3
 8008674:	21000504 	addi	r4,r4,20
 8008678:	1909883a 	add	r4,r3,r4
 800867c:	49800015 	stw	r6,0(r9)
 8008680:	41800015 	stw	r6,0(r8)
 8008684:	59800015 	stw	r6,0(r11)
 8008688:	51800015 	stw	r6,0(r10)
 800868c:	42000404 	addi	r8,r8,16
 8008690:	4a400404 	addi	r9,r9,16
 8008694:	5ac00404 	addi	r11,r11,16
 8008698:	52800404 	addi	r10,r10,16
 800869c:	413ff71e 	bne	r8,r4,800867c <memset+0x8c>
 80086a0:	63000044 	addi	r12,r12,1
 80086a4:	6018913a 	slli	r12,r12,4
 80086a8:	39c003cc 	andi	r7,r7,15
 80086ac:	010000c4 	movi	r4,3
 80086b0:	1b07883a 	add	r3,r3,r12
 80086b4:	21c00e2e 	bgeu	r4,r7,80086f0 <memset+0x100>
 80086b8:	1813883a 	mov	r9,r3
 80086bc:	3811883a 	mov	r8,r7
 80086c0:	010000c4 	movi	r4,3
 80086c4:	49800015 	stw	r6,0(r9)
 80086c8:	423fff04 	addi	r8,r8,-4
 80086cc:	4a400104 	addi	r9,r9,4
 80086d0:	223ffc36 	bltu	r4,r8,80086c4 <memset+0xd4>
 80086d4:	393fff04 	addi	r4,r7,-4
 80086d8:	2008d0ba 	srli	r4,r4,2
 80086dc:	39c000cc 	andi	r7,r7,3
 80086e0:	21000044 	addi	r4,r4,1
 80086e4:	2109883a 	add	r4,r4,r4
 80086e8:	2109883a 	add	r4,r4,r4
 80086ec:	1907883a 	add	r3,r3,r4
 80086f0:	38000526 	beq	r7,zero,8008708 <memset+0x118>
 80086f4:	19cf883a 	add	r7,r3,r7
 80086f8:	19400005 	stb	r5,0(r3)
 80086fc:	18c00044 	addi	r3,r3,1
 8008700:	38fffd1e 	bne	r7,r3,80086f8 <memset+0x108>
 8008704:	f800283a 	ret
 8008708:	f800283a 	ret
 800870c:	2007883a 	mov	r3,r4
 8008710:	300f883a 	mov	r7,r6
 8008714:	003fc706 	br	8008634 <memset+0x44>

08008718 <__sread>:
 8008718:	defffe04 	addi	sp,sp,-8
 800871c:	dc000015 	stw	r16,0(sp)
 8008720:	2821883a 	mov	r16,r5
 8008724:	2940038f 	ldh	r5,14(r5)
 8008728:	dfc00115 	stw	ra,4(sp)
 800872c:	8008b1c0 	call	8008b1c <_read_r>
 8008730:	10000716 	blt	r2,zero,8008750 <__sread+0x38>
 8008734:	80c01417 	ldw	r3,80(r16)
 8008738:	1887883a 	add	r3,r3,r2
 800873c:	80c01415 	stw	r3,80(r16)
 8008740:	dfc00117 	ldw	ra,4(sp)
 8008744:	dc000017 	ldw	r16,0(sp)
 8008748:	dec00204 	addi	sp,sp,8
 800874c:	f800283a 	ret
 8008750:	80c0030b 	ldhu	r3,12(r16)
 8008754:	18fbffcc 	andi	r3,r3,61439
 8008758:	80c0030d 	sth	r3,12(r16)
 800875c:	dfc00117 	ldw	ra,4(sp)
 8008760:	dc000017 	ldw	r16,0(sp)
 8008764:	dec00204 	addi	sp,sp,8
 8008768:	f800283a 	ret

0800876c <__seofread>:
 800876c:	0005883a 	mov	r2,zero
 8008770:	f800283a 	ret

08008774 <__swrite>:
 8008774:	2880030b 	ldhu	r2,12(r5)
 8008778:	defffb04 	addi	sp,sp,-20
 800877c:	dcc00315 	stw	r19,12(sp)
 8008780:	dc800215 	stw	r18,8(sp)
 8008784:	dc400115 	stw	r17,4(sp)
 8008788:	dc000015 	stw	r16,0(sp)
 800878c:	dfc00415 	stw	ra,16(sp)
 8008790:	10c0400c 	andi	r3,r2,256
 8008794:	2821883a 	mov	r16,r5
 8008798:	2023883a 	mov	r17,r4
 800879c:	3025883a 	mov	r18,r6
 80087a0:	3827883a 	mov	r19,r7
 80087a4:	18000526 	beq	r3,zero,80087bc <__swrite+0x48>
 80087a8:	2940038f 	ldh	r5,14(r5)
 80087ac:	01c00084 	movi	r7,2
 80087b0:	000d883a 	mov	r6,zero
 80087b4:	8008abc0 	call	8008abc <_lseek_r>
 80087b8:	8080030b 	ldhu	r2,12(r16)
 80087bc:	8140038f 	ldh	r5,14(r16)
 80087c0:	10bbffcc 	andi	r2,r2,61439
 80087c4:	980f883a 	mov	r7,r19
 80087c8:	900d883a 	mov	r6,r18
 80087cc:	8809883a 	mov	r4,r17
 80087d0:	8080030d 	sth	r2,12(r16)
 80087d4:	dfc00417 	ldw	ra,16(sp)
 80087d8:	dcc00317 	ldw	r19,12(sp)
 80087dc:	dc800217 	ldw	r18,8(sp)
 80087e0:	dc400117 	ldw	r17,4(sp)
 80087e4:	dc000017 	ldw	r16,0(sp)
 80087e8:	dec00504 	addi	sp,sp,20
 80087ec:	80088541 	jmpi	8008854 <_write_r>

080087f0 <__sseek>:
 80087f0:	defffe04 	addi	sp,sp,-8
 80087f4:	dc000015 	stw	r16,0(sp)
 80087f8:	2821883a 	mov	r16,r5
 80087fc:	2940038f 	ldh	r5,14(r5)
 8008800:	dfc00115 	stw	ra,4(sp)
 8008804:	8008abc0 	call	8008abc <_lseek_r>
 8008808:	00ffffc4 	movi	r3,-1
 800880c:	10c00826 	beq	r2,r3,8008830 <__sseek+0x40>
 8008810:	80c0030b 	ldhu	r3,12(r16)
 8008814:	80801415 	stw	r2,80(r16)
 8008818:	18c40014 	ori	r3,r3,4096
 800881c:	80c0030d 	sth	r3,12(r16)
 8008820:	dfc00117 	ldw	ra,4(sp)
 8008824:	dc000017 	ldw	r16,0(sp)
 8008828:	dec00204 	addi	sp,sp,8
 800882c:	f800283a 	ret
 8008830:	80c0030b 	ldhu	r3,12(r16)
 8008834:	18fbffcc 	andi	r3,r3,61439
 8008838:	80c0030d 	sth	r3,12(r16)
 800883c:	dfc00117 	ldw	ra,4(sp)
 8008840:	dc000017 	ldw	r16,0(sp)
 8008844:	dec00204 	addi	sp,sp,8
 8008848:	f800283a 	ret

0800884c <__sclose>:
 800884c:	2940038f 	ldh	r5,14(r5)
 8008850:	80088b41 	jmpi	80088b4 <_close_r>

08008854 <_write_r>:
 8008854:	defffd04 	addi	sp,sp,-12
 8008858:	2805883a 	mov	r2,r5
 800885c:	dc000015 	stw	r16,0(sp)
 8008860:	04020074 	movhi	r16,2049
 8008864:	dc400115 	stw	r17,4(sp)
 8008868:	300b883a 	mov	r5,r6
 800886c:	84320d04 	addi	r16,r16,-14284
 8008870:	2023883a 	mov	r17,r4
 8008874:	380d883a 	mov	r6,r7
 8008878:	1009883a 	mov	r4,r2
 800887c:	dfc00215 	stw	ra,8(sp)
 8008880:	80000015 	stw	zero,0(r16)
 8008884:	80090f80 	call	80090f8 <write>
 8008888:	00ffffc4 	movi	r3,-1
 800888c:	10c00526 	beq	r2,r3,80088a4 <_write_r+0x50>
 8008890:	dfc00217 	ldw	ra,8(sp)
 8008894:	dc400117 	ldw	r17,4(sp)
 8008898:	dc000017 	ldw	r16,0(sp)
 800889c:	dec00304 	addi	sp,sp,12
 80088a0:	f800283a 	ret
 80088a4:	80c00017 	ldw	r3,0(r16)
 80088a8:	183ff926 	beq	r3,zero,8008890 <_write_r+0x3c>
 80088ac:	88c00015 	stw	r3,0(r17)
 80088b0:	003ff706 	br	8008890 <_write_r+0x3c>

080088b4 <_close_r>:
 80088b4:	defffd04 	addi	sp,sp,-12
 80088b8:	dc000015 	stw	r16,0(sp)
 80088bc:	04020074 	movhi	r16,2049
 80088c0:	dc400115 	stw	r17,4(sp)
 80088c4:	84320d04 	addi	r16,r16,-14284
 80088c8:	2023883a 	mov	r17,r4
 80088cc:	2809883a 	mov	r4,r5
 80088d0:	dfc00215 	stw	ra,8(sp)
 80088d4:	80000015 	stw	zero,0(r16)
 80088d8:	8004d480 	call	8004d48 <close>
 80088dc:	00ffffc4 	movi	r3,-1
 80088e0:	10c00526 	beq	r2,r3,80088f8 <_close_r+0x44>
 80088e4:	dfc00217 	ldw	ra,8(sp)
 80088e8:	dc400117 	ldw	r17,4(sp)
 80088ec:	dc000017 	ldw	r16,0(sp)
 80088f0:	dec00304 	addi	sp,sp,12
 80088f4:	f800283a 	ret
 80088f8:	80c00017 	ldw	r3,0(r16)
 80088fc:	183ff926 	beq	r3,zero,80088e4 <_close_r+0x30>
 8008900:	88c00015 	stw	r3,0(r17)
 8008904:	003ff706 	br	80088e4 <_close_r+0x30>

08008908 <_fclose_r>:
 8008908:	28003926 	beq	r5,zero,80089f0 <_fclose_r+0xe8>
 800890c:	defffc04 	addi	sp,sp,-16
 8008910:	dc400115 	stw	r17,4(sp)
 8008914:	dc000015 	stw	r16,0(sp)
 8008918:	dfc00315 	stw	ra,12(sp)
 800891c:	dc800215 	stw	r18,8(sp)
 8008920:	2023883a 	mov	r17,r4
 8008924:	2821883a 	mov	r16,r5
 8008928:	20000226 	beq	r4,zero,8008934 <_fclose_r+0x2c>
 800892c:	20800e17 	ldw	r2,56(r4)
 8008930:	10002726 	beq	r2,zero,80089d0 <_fclose_r+0xc8>
 8008934:	8080030f 	ldh	r2,12(r16)
 8008938:	1000071e 	bne	r2,zero,8008958 <_fclose_r+0x50>
 800893c:	0005883a 	mov	r2,zero
 8008940:	dfc00317 	ldw	ra,12(sp)
 8008944:	dc800217 	ldw	r18,8(sp)
 8008948:	dc400117 	ldw	r17,4(sp)
 800894c:	dc000017 	ldw	r16,0(sp)
 8008950:	dec00404 	addi	sp,sp,16
 8008954:	f800283a 	ret
 8008958:	800b883a 	mov	r5,r16
 800895c:	8809883a 	mov	r4,r17
 8008960:	80078300 	call	8007830 <__sflush_r>
 8008964:	1025883a 	mov	r18,r2
 8008968:	80800b17 	ldw	r2,44(r16)
 800896c:	10000426 	beq	r2,zero,8008980 <_fclose_r+0x78>
 8008970:	81400717 	ldw	r5,28(r16)
 8008974:	8809883a 	mov	r4,r17
 8008978:	103ee83a 	callr	r2
 800897c:	10001616 	blt	r2,zero,80089d8 <_fclose_r+0xd0>
 8008980:	8080030b 	ldhu	r2,12(r16)
 8008984:	1080200c 	andi	r2,r2,128
 8008988:	1000151e 	bne	r2,zero,80089e0 <_fclose_r+0xd8>
 800898c:	81400c17 	ldw	r5,48(r16)
 8008990:	28000526 	beq	r5,zero,80089a8 <_fclose_r+0xa0>
 8008994:	80801004 	addi	r2,r16,64
 8008998:	28800226 	beq	r5,r2,80089a4 <_fclose_r+0x9c>
 800899c:	8809883a 	mov	r4,r17
 80089a0:	8007f9c0 	call	8007f9c <_free_r>
 80089a4:	80000c15 	stw	zero,48(r16)
 80089a8:	81401117 	ldw	r5,68(r16)
 80089ac:	28000326 	beq	r5,zero,80089bc <_fclose_r+0xb4>
 80089b0:	8809883a 	mov	r4,r17
 80089b4:	8007f9c0 	call	8007f9c <_free_r>
 80089b8:	80001115 	stw	zero,68(r16)
 80089bc:	8007e380 	call	8007e38 <__sfp_lock_acquire>
 80089c0:	8000030d 	sth	zero,12(r16)
 80089c4:	8007e3c0 	call	8007e3c <__sfp_lock_release>
 80089c8:	9005883a 	mov	r2,r18
 80089cc:	003fdc06 	br	8008940 <_fclose_r+0x38>
 80089d0:	8007e280 	call	8007e28 <__sinit>
 80089d4:	003fd706 	br	8008934 <_fclose_r+0x2c>
 80089d8:	04bfffc4 	movi	r18,-1
 80089dc:	003fe806 	br	8008980 <_fclose_r+0x78>
 80089e0:	81400417 	ldw	r5,16(r16)
 80089e4:	8809883a 	mov	r4,r17
 80089e8:	8007f9c0 	call	8007f9c <_free_r>
 80089ec:	003fe706 	br	800898c <_fclose_r+0x84>
 80089f0:	0005883a 	mov	r2,zero
 80089f4:	f800283a 	ret

080089f8 <fclose>:
 80089f8:	00820074 	movhi	r2,2049
 80089fc:	10ab6704 	addi	r2,r2,-21092
 8008a00:	200b883a 	mov	r5,r4
 8008a04:	11000017 	ldw	r4,0(r2)
 8008a08:	80089081 	jmpi	8008908 <_fclose_r>

08008a0c <_fstat_r>:
 8008a0c:	defffd04 	addi	sp,sp,-12
 8008a10:	2805883a 	mov	r2,r5
 8008a14:	dc000015 	stw	r16,0(sp)
 8008a18:	04020074 	movhi	r16,2049
 8008a1c:	dc400115 	stw	r17,4(sp)
 8008a20:	84320d04 	addi	r16,r16,-14284
 8008a24:	2023883a 	mov	r17,r4
 8008a28:	300b883a 	mov	r5,r6
 8008a2c:	1009883a 	mov	r4,r2
 8008a30:	dfc00215 	stw	ra,8(sp)
 8008a34:	80000015 	stw	zero,0(r16)
 8008a38:	8008bec0 	call	8008bec <fstat>
 8008a3c:	00ffffc4 	movi	r3,-1
 8008a40:	10c00526 	beq	r2,r3,8008a58 <_fstat_r+0x4c>
 8008a44:	dfc00217 	ldw	ra,8(sp)
 8008a48:	dc400117 	ldw	r17,4(sp)
 8008a4c:	dc000017 	ldw	r16,0(sp)
 8008a50:	dec00304 	addi	sp,sp,12
 8008a54:	f800283a 	ret
 8008a58:	80c00017 	ldw	r3,0(r16)
 8008a5c:	183ff926 	beq	r3,zero,8008a44 <_fstat_r+0x38>
 8008a60:	88c00015 	stw	r3,0(r17)
 8008a64:	003ff706 	br	8008a44 <_fstat_r+0x38>

08008a68 <_isatty_r>:
 8008a68:	defffd04 	addi	sp,sp,-12
 8008a6c:	dc000015 	stw	r16,0(sp)
 8008a70:	04020074 	movhi	r16,2049
 8008a74:	dc400115 	stw	r17,4(sp)
 8008a78:	84320d04 	addi	r16,r16,-14284
 8008a7c:	2023883a 	mov	r17,r4
 8008a80:	2809883a 	mov	r4,r5
 8008a84:	dfc00215 	stw	ra,8(sp)
 8008a88:	80000015 	stw	zero,0(r16)
 8008a8c:	8008cd80 	call	8008cd8 <isatty>
 8008a90:	00ffffc4 	movi	r3,-1
 8008a94:	10c00526 	beq	r2,r3,8008aac <_isatty_r+0x44>
 8008a98:	dfc00217 	ldw	ra,8(sp)
 8008a9c:	dc400117 	ldw	r17,4(sp)
 8008aa0:	dc000017 	ldw	r16,0(sp)
 8008aa4:	dec00304 	addi	sp,sp,12
 8008aa8:	f800283a 	ret
 8008aac:	80c00017 	ldw	r3,0(r16)
 8008ab0:	183ff926 	beq	r3,zero,8008a98 <_isatty_r+0x30>
 8008ab4:	88c00015 	stw	r3,0(r17)
 8008ab8:	003ff706 	br	8008a98 <_isatty_r+0x30>

08008abc <_lseek_r>:
 8008abc:	defffd04 	addi	sp,sp,-12
 8008ac0:	2805883a 	mov	r2,r5
 8008ac4:	dc000015 	stw	r16,0(sp)
 8008ac8:	04020074 	movhi	r16,2049
 8008acc:	dc400115 	stw	r17,4(sp)
 8008ad0:	300b883a 	mov	r5,r6
 8008ad4:	84320d04 	addi	r16,r16,-14284
 8008ad8:	2023883a 	mov	r17,r4
 8008adc:	380d883a 	mov	r6,r7
 8008ae0:	1009883a 	mov	r4,r2
 8008ae4:	dfc00215 	stw	ra,8(sp)
 8008ae8:	80000015 	stw	zero,0(r16)
 8008aec:	8008db80 	call	8008db8 <lseek>
 8008af0:	00ffffc4 	movi	r3,-1
 8008af4:	10c00526 	beq	r2,r3,8008b0c <_lseek_r+0x50>
 8008af8:	dfc00217 	ldw	ra,8(sp)
 8008afc:	dc400117 	ldw	r17,4(sp)
 8008b00:	dc000017 	ldw	r16,0(sp)
 8008b04:	dec00304 	addi	sp,sp,12
 8008b08:	f800283a 	ret
 8008b0c:	80c00017 	ldw	r3,0(r16)
 8008b10:	183ff926 	beq	r3,zero,8008af8 <_lseek_r+0x3c>
 8008b14:	88c00015 	stw	r3,0(r17)
 8008b18:	003ff706 	br	8008af8 <_lseek_r+0x3c>

08008b1c <_read_r>:
 8008b1c:	defffd04 	addi	sp,sp,-12
 8008b20:	2805883a 	mov	r2,r5
 8008b24:	dc000015 	stw	r16,0(sp)
 8008b28:	04020074 	movhi	r16,2049
 8008b2c:	dc400115 	stw	r17,4(sp)
 8008b30:	300b883a 	mov	r5,r6
 8008b34:	84320d04 	addi	r16,r16,-14284
 8008b38:	2023883a 	mov	r17,r4
 8008b3c:	380d883a 	mov	r6,r7
 8008b40:	1009883a 	mov	r4,r2
 8008b44:	dfc00215 	stw	ra,8(sp)
 8008b48:	80000015 	stw	zero,0(r16)
 8008b4c:	8008f100 	call	8008f10 <read>
 8008b50:	00ffffc4 	movi	r3,-1
 8008b54:	10c00526 	beq	r2,r3,8008b6c <_read_r+0x50>
 8008b58:	dfc00217 	ldw	ra,8(sp)
 8008b5c:	dc400117 	ldw	r17,4(sp)
 8008b60:	dc000017 	ldw	r16,0(sp)
 8008b64:	dec00304 	addi	sp,sp,12
 8008b68:	f800283a 	ret
 8008b6c:	80c00017 	ldw	r3,0(r16)
 8008b70:	183ff926 	beq	r3,zero,8008b58 <_read_r+0x3c>
 8008b74:	88c00015 	stw	r3,0(r17)
 8008b78:	003ff706 	br	8008b58 <_read_r+0x3c>

08008b7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8008b7c:	defffd04 	addi	sp,sp,-12
 8008b80:	df000215 	stw	fp,8(sp)
 8008b84:	df000204 	addi	fp,sp,8
 8008b88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8008b8c:	0001883a 	nop
 8008b90:	e0bfff17 	ldw	r2,-4(fp)
 8008b94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8008b98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8008b9c:	10000226 	beq	r2,zero,8008ba8 <_exit+0x2c>
    ALT_SIM_FAIL();
 8008ba0:	002af070 	cmpltui	zero,zero,43969
 8008ba4:	00000106 	br	8008bac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8008ba8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8008bac:	003fff06 	br	8008bac <_exit+0x30>

08008bb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008bb0:	defffe04 	addi	sp,sp,-8
 8008bb4:	dfc00115 	stw	ra,4(sp)
 8008bb8:	df000015 	stw	fp,0(sp)
 8008bbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008bc0:	d0a00517 	ldw	r2,-32748(gp)
 8008bc4:	10000326 	beq	r2,zero,8008bd4 <alt_get_errno+0x24>
 8008bc8:	d0a00517 	ldw	r2,-32748(gp)
 8008bcc:	103ee83a 	callr	r2
 8008bd0:	00000106 	br	8008bd8 <alt_get_errno+0x28>
 8008bd4:	d0a6b004 	addi	r2,gp,-25920
}
 8008bd8:	e037883a 	mov	sp,fp
 8008bdc:	dfc00117 	ldw	ra,4(sp)
 8008be0:	df000017 	ldw	fp,0(sp)
 8008be4:	dec00204 	addi	sp,sp,8
 8008be8:	f800283a 	ret

08008bec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8008bec:	defffb04 	addi	sp,sp,-20
 8008bf0:	dfc00415 	stw	ra,16(sp)
 8008bf4:	df000315 	stw	fp,12(sp)
 8008bf8:	df000304 	addi	fp,sp,12
 8008bfc:	e13ffe15 	stw	r4,-8(fp)
 8008c00:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8008c04:	e0bffe17 	ldw	r2,-8(fp)
 8008c08:	10000616 	blt	r2,zero,8008c24 <fstat+0x38>
 8008c0c:	e0bffe17 	ldw	r2,-8(fp)
 8008c10:	10c00324 	muli	r3,r2,12
 8008c14:	00820074 	movhi	r2,2049
 8008c18:	10a8f204 	addi	r2,r2,-23608
 8008c1c:	1885883a 	add	r2,r3,r2
 8008c20:	00000106 	br	8008c28 <fstat+0x3c>
 8008c24:	0005883a 	mov	r2,zero
 8008c28:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8008c2c:	e0bffd17 	ldw	r2,-12(fp)
 8008c30:	10001026 	beq	r2,zero,8008c74 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8008c34:	e0bffd17 	ldw	r2,-12(fp)
 8008c38:	10800017 	ldw	r2,0(r2)
 8008c3c:	10800817 	ldw	r2,32(r2)
 8008c40:	10000726 	beq	r2,zero,8008c60 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8008c44:	e0bffd17 	ldw	r2,-12(fp)
 8008c48:	10800017 	ldw	r2,0(r2)
 8008c4c:	10800817 	ldw	r2,32(r2)
 8008c50:	e17fff17 	ldw	r5,-4(fp)
 8008c54:	e13ffd17 	ldw	r4,-12(fp)
 8008c58:	103ee83a 	callr	r2
 8008c5c:	00000a06 	br	8008c88 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8008c60:	e0bfff17 	ldw	r2,-4(fp)
 8008c64:	00c80004 	movi	r3,8192
 8008c68:	10c00115 	stw	r3,4(r2)
      return 0;
 8008c6c:	0005883a 	mov	r2,zero
 8008c70:	00000506 	br	8008c88 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8008c74:	8008bb00 	call	8008bb0 <alt_get_errno>
 8008c78:	1007883a 	mov	r3,r2
 8008c7c:	00801444 	movi	r2,81
 8008c80:	18800015 	stw	r2,0(r3)
    return -1;
 8008c84:	00bfffc4 	movi	r2,-1
  }
}
 8008c88:	e037883a 	mov	sp,fp
 8008c8c:	dfc00117 	ldw	ra,4(sp)
 8008c90:	df000017 	ldw	fp,0(sp)
 8008c94:	dec00204 	addi	sp,sp,8
 8008c98:	f800283a 	ret

08008c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008c9c:	defffe04 	addi	sp,sp,-8
 8008ca0:	dfc00115 	stw	ra,4(sp)
 8008ca4:	df000015 	stw	fp,0(sp)
 8008ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008cac:	d0a00517 	ldw	r2,-32748(gp)
 8008cb0:	10000326 	beq	r2,zero,8008cc0 <alt_get_errno+0x24>
 8008cb4:	d0a00517 	ldw	r2,-32748(gp)
 8008cb8:	103ee83a 	callr	r2
 8008cbc:	00000106 	br	8008cc4 <alt_get_errno+0x28>
 8008cc0:	d0a6b004 	addi	r2,gp,-25920
}
 8008cc4:	e037883a 	mov	sp,fp
 8008cc8:	dfc00117 	ldw	ra,4(sp)
 8008ccc:	df000017 	ldw	fp,0(sp)
 8008cd0:	dec00204 	addi	sp,sp,8
 8008cd4:	f800283a 	ret

08008cd8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8008cd8:	deffed04 	addi	sp,sp,-76
 8008cdc:	dfc01215 	stw	ra,72(sp)
 8008ce0:	df001115 	stw	fp,68(sp)
 8008ce4:	df001104 	addi	fp,sp,68
 8008ce8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8008cec:	e0bfff17 	ldw	r2,-4(fp)
 8008cf0:	10000616 	blt	r2,zero,8008d0c <isatty+0x34>
 8008cf4:	e0bfff17 	ldw	r2,-4(fp)
 8008cf8:	10c00324 	muli	r3,r2,12
 8008cfc:	00820074 	movhi	r2,2049
 8008d00:	10a8f204 	addi	r2,r2,-23608
 8008d04:	1885883a 	add	r2,r3,r2
 8008d08:	00000106 	br	8008d10 <isatty+0x38>
 8008d0c:	0005883a 	mov	r2,zero
 8008d10:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8008d14:	e0bfef17 	ldw	r2,-68(fp)
 8008d18:	10000e26 	beq	r2,zero,8008d54 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8008d1c:	e0bfef17 	ldw	r2,-68(fp)
 8008d20:	10800017 	ldw	r2,0(r2)
 8008d24:	10800817 	ldw	r2,32(r2)
 8008d28:	1000021e 	bne	r2,zero,8008d34 <isatty+0x5c>
    {
      return 1;
 8008d2c:	00800044 	movi	r2,1
 8008d30:	00000d06 	br	8008d68 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8008d34:	e0bff004 	addi	r2,fp,-64
 8008d38:	100b883a 	mov	r5,r2
 8008d3c:	e13fff17 	ldw	r4,-4(fp)
 8008d40:	8008bec0 	call	8008bec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8008d44:	e0bff117 	ldw	r2,-60(fp)
 8008d48:	10880020 	cmpeqi	r2,r2,8192
 8008d4c:	10803fcc 	andi	r2,r2,255
 8008d50:	00000506 	br	8008d68 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8008d54:	8008c9c0 	call	8008c9c <alt_get_errno>
 8008d58:	1007883a 	mov	r3,r2
 8008d5c:	00801444 	movi	r2,81
 8008d60:	18800015 	stw	r2,0(r3)
    return 0;
 8008d64:	0005883a 	mov	r2,zero
  }
}
 8008d68:	e037883a 	mov	sp,fp
 8008d6c:	dfc00117 	ldw	ra,4(sp)
 8008d70:	df000017 	ldw	fp,0(sp)
 8008d74:	dec00204 	addi	sp,sp,8
 8008d78:	f800283a 	ret

08008d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008d7c:	defffe04 	addi	sp,sp,-8
 8008d80:	dfc00115 	stw	ra,4(sp)
 8008d84:	df000015 	stw	fp,0(sp)
 8008d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008d8c:	d0a00517 	ldw	r2,-32748(gp)
 8008d90:	10000326 	beq	r2,zero,8008da0 <alt_get_errno+0x24>
 8008d94:	d0a00517 	ldw	r2,-32748(gp)
 8008d98:	103ee83a 	callr	r2
 8008d9c:	00000106 	br	8008da4 <alt_get_errno+0x28>
 8008da0:	d0a6b004 	addi	r2,gp,-25920
}
 8008da4:	e037883a 	mov	sp,fp
 8008da8:	dfc00117 	ldw	ra,4(sp)
 8008dac:	df000017 	ldw	fp,0(sp)
 8008db0:	dec00204 	addi	sp,sp,8
 8008db4:	f800283a 	ret

08008db8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8008db8:	defff904 	addi	sp,sp,-28
 8008dbc:	dfc00615 	stw	ra,24(sp)
 8008dc0:	df000515 	stw	fp,20(sp)
 8008dc4:	df000504 	addi	fp,sp,20
 8008dc8:	e13ffd15 	stw	r4,-12(fp)
 8008dcc:	e17ffe15 	stw	r5,-8(fp)
 8008dd0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8008dd4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8008dd8:	e0bffd17 	ldw	r2,-12(fp)
 8008ddc:	10000616 	blt	r2,zero,8008df8 <lseek+0x40>
 8008de0:	e0bffd17 	ldw	r2,-12(fp)
 8008de4:	10c00324 	muli	r3,r2,12
 8008de8:	00820074 	movhi	r2,2049
 8008dec:	10a8f204 	addi	r2,r2,-23608
 8008df0:	1885883a 	add	r2,r3,r2
 8008df4:	00000106 	br	8008dfc <lseek+0x44>
 8008df8:	0005883a 	mov	r2,zero
 8008dfc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8008e00:	e0bffc17 	ldw	r2,-16(fp)
 8008e04:	10001026 	beq	r2,zero,8008e48 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8008e08:	e0bffc17 	ldw	r2,-16(fp)
 8008e0c:	10800017 	ldw	r2,0(r2)
 8008e10:	10800717 	ldw	r2,28(r2)
 8008e14:	10000926 	beq	r2,zero,8008e3c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8008e18:	e0bffc17 	ldw	r2,-16(fp)
 8008e1c:	10800017 	ldw	r2,0(r2)
 8008e20:	10800717 	ldw	r2,28(r2)
 8008e24:	e1bfff17 	ldw	r6,-4(fp)
 8008e28:	e17ffe17 	ldw	r5,-8(fp)
 8008e2c:	e13ffc17 	ldw	r4,-16(fp)
 8008e30:	103ee83a 	callr	r2
 8008e34:	e0bffb15 	stw	r2,-20(fp)
 8008e38:	00000506 	br	8008e50 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8008e3c:	00bfde84 	movi	r2,-134
 8008e40:	e0bffb15 	stw	r2,-20(fp)
 8008e44:	00000206 	br	8008e50 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8008e48:	00bfebc4 	movi	r2,-81
 8008e4c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8008e50:	e0bffb17 	ldw	r2,-20(fp)
 8008e54:	1000070e 	bge	r2,zero,8008e74 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8008e58:	8008d7c0 	call	8008d7c <alt_get_errno>
 8008e5c:	1007883a 	mov	r3,r2
 8008e60:	e0bffb17 	ldw	r2,-20(fp)
 8008e64:	0085c83a 	sub	r2,zero,r2
 8008e68:	18800015 	stw	r2,0(r3)
    rc = -1;
 8008e6c:	00bfffc4 	movi	r2,-1
 8008e70:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8008e74:	e0bffb17 	ldw	r2,-20(fp)
}
 8008e78:	e037883a 	mov	sp,fp
 8008e7c:	dfc00117 	ldw	ra,4(sp)
 8008e80:	df000017 	ldw	fp,0(sp)
 8008e84:	dec00204 	addi	sp,sp,8
 8008e88:	f800283a 	ret

08008e8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8008e8c:	defffe04 	addi	sp,sp,-8
 8008e90:	df000115 	stw	fp,4(sp)
 8008e94:	df000104 	addi	fp,sp,4
 8008e98:	e13fff15 	stw	r4,-4(fp)
}
 8008e9c:	0001883a 	nop
 8008ea0:	e037883a 	mov	sp,fp
 8008ea4:	df000017 	ldw	fp,0(sp)
 8008ea8:	dec00104 	addi	sp,sp,4
 8008eac:	f800283a 	ret

08008eb0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8008eb0:	defffe04 	addi	sp,sp,-8
 8008eb4:	df000115 	stw	fp,4(sp)
 8008eb8:	df000104 	addi	fp,sp,4
 8008ebc:	e13fff15 	stw	r4,-4(fp)
}
 8008ec0:	0001883a 	nop
 8008ec4:	e037883a 	mov	sp,fp
 8008ec8:	df000017 	ldw	fp,0(sp)
 8008ecc:	dec00104 	addi	sp,sp,4
 8008ed0:	f800283a 	ret

08008ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008ed4:	defffe04 	addi	sp,sp,-8
 8008ed8:	dfc00115 	stw	ra,4(sp)
 8008edc:	df000015 	stw	fp,0(sp)
 8008ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008ee4:	d0a00517 	ldw	r2,-32748(gp)
 8008ee8:	10000326 	beq	r2,zero,8008ef8 <alt_get_errno+0x24>
 8008eec:	d0a00517 	ldw	r2,-32748(gp)
 8008ef0:	103ee83a 	callr	r2
 8008ef4:	00000106 	br	8008efc <alt_get_errno+0x28>
 8008ef8:	d0a6b004 	addi	r2,gp,-25920
}
 8008efc:	e037883a 	mov	sp,fp
 8008f00:	dfc00117 	ldw	ra,4(sp)
 8008f04:	df000017 	ldw	fp,0(sp)
 8008f08:	dec00204 	addi	sp,sp,8
 8008f0c:	f800283a 	ret

08008f10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8008f10:	defff904 	addi	sp,sp,-28
 8008f14:	dfc00615 	stw	ra,24(sp)
 8008f18:	df000515 	stw	fp,20(sp)
 8008f1c:	df000504 	addi	fp,sp,20
 8008f20:	e13ffd15 	stw	r4,-12(fp)
 8008f24:	e17ffe15 	stw	r5,-8(fp)
 8008f28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8008f2c:	e0bffd17 	ldw	r2,-12(fp)
 8008f30:	10000616 	blt	r2,zero,8008f4c <read+0x3c>
 8008f34:	e0bffd17 	ldw	r2,-12(fp)
 8008f38:	10c00324 	muli	r3,r2,12
 8008f3c:	00820074 	movhi	r2,2049
 8008f40:	10a8f204 	addi	r2,r2,-23608
 8008f44:	1885883a 	add	r2,r3,r2
 8008f48:	00000106 	br	8008f50 <read+0x40>
 8008f4c:	0005883a 	mov	r2,zero
 8008f50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8008f54:	e0bffb17 	ldw	r2,-20(fp)
 8008f58:	10002226 	beq	r2,zero,8008fe4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8008f5c:	e0bffb17 	ldw	r2,-20(fp)
 8008f60:	10800217 	ldw	r2,8(r2)
 8008f64:	108000cc 	andi	r2,r2,3
 8008f68:	10800060 	cmpeqi	r2,r2,1
 8008f6c:	1000181e 	bne	r2,zero,8008fd0 <read+0xc0>
        (fd->dev->read))
 8008f70:	e0bffb17 	ldw	r2,-20(fp)
 8008f74:	10800017 	ldw	r2,0(r2)
 8008f78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8008f7c:	10001426 	beq	r2,zero,8008fd0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8008f80:	e0bffb17 	ldw	r2,-20(fp)
 8008f84:	10800017 	ldw	r2,0(r2)
 8008f88:	10800517 	ldw	r2,20(r2)
 8008f8c:	e0ffff17 	ldw	r3,-4(fp)
 8008f90:	180d883a 	mov	r6,r3
 8008f94:	e17ffe17 	ldw	r5,-8(fp)
 8008f98:	e13ffb17 	ldw	r4,-20(fp)
 8008f9c:	103ee83a 	callr	r2
 8008fa0:	e0bffc15 	stw	r2,-16(fp)
 8008fa4:	e0bffc17 	ldw	r2,-16(fp)
 8008fa8:	1000070e 	bge	r2,zero,8008fc8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8008fac:	8008ed40 	call	8008ed4 <alt_get_errno>
 8008fb0:	1007883a 	mov	r3,r2
 8008fb4:	e0bffc17 	ldw	r2,-16(fp)
 8008fb8:	0085c83a 	sub	r2,zero,r2
 8008fbc:	18800015 	stw	r2,0(r3)
          return -1;
 8008fc0:	00bfffc4 	movi	r2,-1
 8008fc4:	00000c06 	br	8008ff8 <read+0xe8>
        }
        return rval;
 8008fc8:	e0bffc17 	ldw	r2,-16(fp)
 8008fcc:	00000a06 	br	8008ff8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8008fd0:	8008ed40 	call	8008ed4 <alt_get_errno>
 8008fd4:	1007883a 	mov	r3,r2
 8008fd8:	00800344 	movi	r2,13
 8008fdc:	18800015 	stw	r2,0(r3)
 8008fe0:	00000406 	br	8008ff4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8008fe4:	8008ed40 	call	8008ed4 <alt_get_errno>
 8008fe8:	1007883a 	mov	r3,r2
 8008fec:	00801444 	movi	r2,81
 8008ff0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8008ff4:	00bfffc4 	movi	r2,-1
}
 8008ff8:	e037883a 	mov	sp,fp
 8008ffc:	dfc00117 	ldw	ra,4(sp)
 8009000:	df000017 	ldw	fp,0(sp)
 8009004:	dec00204 	addi	sp,sp,8
 8009008:	f800283a 	ret

0800900c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800900c:	defff904 	addi	sp,sp,-28
 8009010:	df000615 	stw	fp,24(sp)
 8009014:	df000604 	addi	fp,sp,24
 8009018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800901c:	0005303a 	rdctl	r2,status
 8009020:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8009024:	e0fffe17 	ldw	r3,-8(fp)
 8009028:	00bfff84 	movi	r2,-2
 800902c:	1884703a 	and	r2,r3,r2
 8009030:	1001703a 	wrctl	status,r2
  
  return context;
 8009034:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8009038:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800903c:	d0a00d17 	ldw	r2,-32716(gp)
 8009040:	10c000c4 	addi	r3,r2,3
 8009044:	00bfff04 	movi	r2,-4
 8009048:	1884703a 	and	r2,r3,r2
 800904c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8009050:	d0e00d17 	ldw	r3,-32716(gp)
 8009054:	e0bfff17 	ldw	r2,-4(fp)
 8009058:	1887883a 	add	r3,r3,r2
 800905c:	00840034 	movhi	r2,4096
 8009060:	10800004 	addi	r2,r2,0
 8009064:	10c0062e 	bgeu	r2,r3,8009080 <sbrk+0x74>
 8009068:	e0bffb17 	ldw	r2,-20(fp)
 800906c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8009070:	e0bffa17 	ldw	r2,-24(fp)
 8009074:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8009078:	00bfffc4 	movi	r2,-1
 800907c:	00000b06 	br	80090ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8009080:	d0a00d17 	ldw	r2,-32716(gp)
 8009084:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8009088:	d0e00d17 	ldw	r3,-32716(gp)
 800908c:	e0bfff17 	ldw	r2,-4(fp)
 8009090:	1885883a 	add	r2,r3,r2
 8009094:	d0a00d15 	stw	r2,-32716(gp)
 8009098:	e0bffb17 	ldw	r2,-20(fp)
 800909c:	e0bffc15 	stw	r2,-16(fp)
 80090a0:	e0bffc17 	ldw	r2,-16(fp)
 80090a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80090a8:	e0bffd17 	ldw	r2,-12(fp)
} 
 80090ac:	e037883a 	mov	sp,fp
 80090b0:	df000017 	ldw	fp,0(sp)
 80090b4:	dec00104 	addi	sp,sp,4
 80090b8:	f800283a 	ret

080090bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80090bc:	defffe04 	addi	sp,sp,-8
 80090c0:	dfc00115 	stw	ra,4(sp)
 80090c4:	df000015 	stw	fp,0(sp)
 80090c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80090cc:	d0a00517 	ldw	r2,-32748(gp)
 80090d0:	10000326 	beq	r2,zero,80090e0 <alt_get_errno+0x24>
 80090d4:	d0a00517 	ldw	r2,-32748(gp)
 80090d8:	103ee83a 	callr	r2
 80090dc:	00000106 	br	80090e4 <alt_get_errno+0x28>
 80090e0:	d0a6b004 	addi	r2,gp,-25920
}
 80090e4:	e037883a 	mov	sp,fp
 80090e8:	dfc00117 	ldw	ra,4(sp)
 80090ec:	df000017 	ldw	fp,0(sp)
 80090f0:	dec00204 	addi	sp,sp,8
 80090f4:	f800283a 	ret

080090f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80090f8:	defff904 	addi	sp,sp,-28
 80090fc:	dfc00615 	stw	ra,24(sp)
 8009100:	df000515 	stw	fp,20(sp)
 8009104:	df000504 	addi	fp,sp,20
 8009108:	e13ffd15 	stw	r4,-12(fp)
 800910c:	e17ffe15 	stw	r5,-8(fp)
 8009110:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009114:	e0bffd17 	ldw	r2,-12(fp)
 8009118:	10000616 	blt	r2,zero,8009134 <write+0x3c>
 800911c:	e0bffd17 	ldw	r2,-12(fp)
 8009120:	10c00324 	muli	r3,r2,12
 8009124:	00820074 	movhi	r2,2049
 8009128:	10a8f204 	addi	r2,r2,-23608
 800912c:	1885883a 	add	r2,r3,r2
 8009130:	00000106 	br	8009138 <write+0x40>
 8009134:	0005883a 	mov	r2,zero
 8009138:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800913c:	e0bffb17 	ldw	r2,-20(fp)
 8009140:	10002126 	beq	r2,zero,80091c8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8009144:	e0bffb17 	ldw	r2,-20(fp)
 8009148:	10800217 	ldw	r2,8(r2)
 800914c:	108000cc 	andi	r2,r2,3
 8009150:	10001826 	beq	r2,zero,80091b4 <write+0xbc>
 8009154:	e0bffb17 	ldw	r2,-20(fp)
 8009158:	10800017 	ldw	r2,0(r2)
 800915c:	10800617 	ldw	r2,24(r2)
 8009160:	10001426 	beq	r2,zero,80091b4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8009164:	e0bffb17 	ldw	r2,-20(fp)
 8009168:	10800017 	ldw	r2,0(r2)
 800916c:	10800617 	ldw	r2,24(r2)
 8009170:	e0ffff17 	ldw	r3,-4(fp)
 8009174:	180d883a 	mov	r6,r3
 8009178:	e17ffe17 	ldw	r5,-8(fp)
 800917c:	e13ffb17 	ldw	r4,-20(fp)
 8009180:	103ee83a 	callr	r2
 8009184:	e0bffc15 	stw	r2,-16(fp)
 8009188:	e0bffc17 	ldw	r2,-16(fp)
 800918c:	1000070e 	bge	r2,zero,80091ac <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8009190:	80090bc0 	call	80090bc <alt_get_errno>
 8009194:	1007883a 	mov	r3,r2
 8009198:	e0bffc17 	ldw	r2,-16(fp)
 800919c:	0085c83a 	sub	r2,zero,r2
 80091a0:	18800015 	stw	r2,0(r3)
        return -1;
 80091a4:	00bfffc4 	movi	r2,-1
 80091a8:	00000c06 	br	80091dc <write+0xe4>
      }
      return rval;
 80091ac:	e0bffc17 	ldw	r2,-16(fp)
 80091b0:	00000a06 	br	80091dc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80091b4:	80090bc0 	call	80090bc <alt_get_errno>
 80091b8:	1007883a 	mov	r3,r2
 80091bc:	00800344 	movi	r2,13
 80091c0:	18800015 	stw	r2,0(r3)
 80091c4:	00000406 	br	80091d8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80091c8:	80090bc0 	call	80090bc <alt_get_errno>
 80091cc:	1007883a 	mov	r3,r2
 80091d0:	00801444 	movi	r2,81
 80091d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80091d8:	00bfffc4 	movi	r2,-1
}
 80091dc:	e037883a 	mov	sp,fp
 80091e0:	dfc00117 	ldw	ra,4(sp)
 80091e4:	df000017 	ldw	fp,0(sp)
 80091e8:	dec00204 	addi	sp,sp,8
 80091ec:	f800283a 	ret


lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00002128 memsz 0x00002128 flags r-x
    LOAD off    0x00003148 vaddr 0x08002148 paddr 0x08002238 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00003328 vaddr 0x08002328 paddr 0x08002328 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08000020  08000020  00003238  2**0
                  CONTENTS
  2 .text         00002008  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000120  08002028  08002028  00003028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  08002148  08002238  00003148  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  08002328  08002328  00003328  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  08002338  08002338  00003238  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003a0  00000000  00000000  00003260  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000049ef  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b69  00000000  00000000  00007fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001f48  00000000  00000000  00009b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000050c  00000000  00000000  0000baa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000013ae  00000000  00000000  0000bfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e5e  00000000  00000000  0000d35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000111b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007d8  00000000  00000000  000111e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00012bfa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00012bfd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012c09  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012c0a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00012c0b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00012c16  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00012c21  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00012c2c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  00012c37  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  00012c5c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003aff5  00000000  00000000  00017dd3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000020 l    d  .text	00000000 .text
08002028 l    d  .rodata	00000000 .rodata
08002148 l    d  .rwdata	00000000 .rwdata
08002328 l    d  .bss	00000000 .bss
08002338 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
08000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800152c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08002148 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
08001e98 g     F .text	0000002c alt_main
08002238 g       *ABS*	00000000 __flash_rwdata_start
080014e0 g     F .text	0000004c printf
08001ec4 g     F .text	00000038 alt_putstr
08000ab0 g     F .text	000000dc .hidden __gtdf2
08001fe8 g     F .text	00000008 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002328 g     O .bss	00000004 errno
08002330 g     O .bss	00000004 alt_argv
0800a228 g       *ABS*	00000000 _gp
08000b8c g     F .text	000000f4 .hidden __ltdf2
080014a4 g     F .text	0000003c _printf_r
08001cfc g     F .text	00000064 .hidden __udivsi3
08001ff0 g     F .text	00000038 alt_icache_flush
08000204 g     F .text	000008ac .hidden __adddf3
08002228 g     O .rwdata	00000004 _global_impure_ptr
08002338 g       *ABS*	00000000 __bss_end
08001398 g     F .text	000000a8 .hidden __floatunsidf
08001fc4 g     F .text	00000018 alt_dcache_flush_all
08002238 g       *ABS*	00000000 __ram_rwdata_end
08001efc g     F .text	00000060 write
08002148 g       *ABS*	00000000 __ram_rodata_end
08002230 g     O .rwdata	00000004 jtag_uart_0
08000b8c g     F .text	000000f4 .hidden __ledf2
08001d60 g     F .text	00000058 .hidden __umodsi3
08002338 g       *ABS*	00000000 end
10000000 g       *ABS*	00000000 __alt_stack_pointer
08001440 g     F .text	00000064 .hidden __clzsi2
08001f90 g     F .text	00000034 altera_avalon_jtag_uart_write
08001598 g     F .text	00000524 ___vfprintf_internal_r
08000020 g     F .text	0000004c _start
08000194 g     F .text	00000070 .hidden __floatundidf
08001f7c g     F .text	00000014 alt_sys_init
08002148 g       *ABS*	00000000 __ram_rwdata_start
08002028 g       *ABS*	00000000 __ram_rodata_start
08002338 g       *ABS*	00000000 __alt_stack_base
08000c80 g     F .text	00000718 .hidden __muldf3
08001ad8 g     F .text	000000b8 __sfvwrite_small_dev
08002328 g       *ABS*	00000000 __bss_start
0800006c g     F .text	00000128 main
0800232c g     O .bss	00000004 alt_envp
08002234 g     O .rwdata	00000004 alt_errno
08001c04 g     F .text	00000084 .hidden __divsi3
08002028 g       *ABS*	00000000 __flash_rodata_start
08001f5c g     F .text	00000020 alt_irq_init
08002048 g     O .rodata	00000100 .hidden __clz_tab
08001bac g     F .text	00000058 _write_r
0800222c g     O .rwdata	00000004 _impure_ptr
08002334 g     O .bss	00000004 alt_argc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08002238 g       *ABS*	00000000 _edata
08002338 g       *ABS*	00000000 _end
08000020 g       *ABS*	00000000 __ram_exceptions_end
08001c88 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0800001c g       .entry	00000000 _exit
08001b90 g     F .text	0000001c strlen
08000ab0 g     F .text	000000dc .hidden __gedf2
08001fdc g     F .text	0000000c alt_icache_flush_all
08001abc g     F .text	0000001c __vfprintf_internal
08001db8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08400814 	ori	at,at,32
    jmp r1
 8000018:	0800683a 	jmp	at

0800001c <_exit>:
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .text:

08000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800002c:	00bffd16 	blt	zero,r2,8000024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000030:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000038:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800003c:	d6a88a14 	ori	gp,gp,41512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000044:	1088ca14 	ori	r2,r2,9000

    movhi r3, %hi(__bss_end)
 8000048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800004c:	18c8ce14 	ori	r3,r3,9016

    beq r2, r3, 1f
 8000050:	10c00326 	beq	r2,r3,8000060 <_start+0x40>

0:
    stw zero, (r2)
 8000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800005c:	10fffd36 	bltu	r2,r3,8000054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000060:	8001db80 	call	8001db8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000064:	8001e980 	call	8001e98 <alt_main>

08000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000068:	003fff06 	br	8000068 <alt_after_alt_main>

0800006c <main>:




int main()
{
 800006c:	defff404 	addi	sp,sp,-48
 8000070:	dc000215 	stw	r16,8(sp)
			} parts;
		alt_u64 raw;
	} cnt;

	// Start Performance Counter
	IOWR(PERFORMANCE_COUNTER_0_BASE,1,0);
 8000074:	04040034 	movhi	r16,4096




int main()
{
 8000078:	dfc00b15 	stw	ra,44(sp)
 800007c:	df000a15 	stw	fp,40(sp)
 8000080:	ddc00915 	stw	r23,36(sp)
 8000084:	dd800815 	stw	r22,32(sp)
 8000088:	dd400715 	stw	r21,28(sp)
 800008c:	dd000615 	stw	r20,24(sp)
 8000090:	dcc00515 	stw	r19,20(sp)
 8000094:	dc800415 	stw	r18,16(sp)
 8000098:	dc400315 	stw	r17,12(sp)
			} parts;
		alt_u64 raw;
	} cnt;

	// Start Performance Counter
	IOWR(PERFORMANCE_COUNTER_0_BASE,1,0);
 800009c:	84040104 	addi	r16,r16,4100
 80000a0:	80000035 	stwio	zero,0(r16)


	alt_putstr("Hello from Nios II!\n");
 80000a4:	01020034 	movhi	r4,2048
 80000a8:	21080a04 	addi	r4,r4,8232
 80000ac:	8001ec40 	call	8001ec4 <alt_putstr>

	printf("pwm: %g", pwm_period);
 80000b0:	01020034 	movhi	r4,2048
 80000b4:	000b883a 	mov	r5,zero
 80000b8:	000d883a 	mov	r6,zero
 80000bc:	21081004 	addi	r4,r4,8256

	/* Event loop never exits. */
	while (1) {
		// Read upper 32 bits and lower 32 bits of counter
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 80000c0:	07040034 	movhi	fp,4096
		double current_duty_cycle = 0.5;//fabs((cnt.raw % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);

		// First part of pwm cycle (<current_duty_cycle>% of it) - signal high
		while(cnt.raw < cycle_start + current_duty_cycle * pwm_period_in_cycles) {
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x3FFFFFF);
 80000c4:	04c10034 	movhi	r19,1024
 80000c8:	05040034 	movhi	r20,4096
	IOWR(PERFORMANCE_COUNTER_0_BASE,1,0);


	alt_putstr("Hello from Nios II!\n");

	printf("pwm: %g", pwm_period);
 80000cc:	80014e00 	call	80014e0 <printf>

	/* Event loop never exits. */
	while (1) {
		// Read upper 32 bits and lower 32 bits of counter
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 80000d0:	e7040004 	addi	fp,fp,4096
		double current_duty_cycle = 0.5;//fabs((cnt.raw % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);

		// First part of pwm cycle (<current_duty_cycle>% of it) - signal high
		while(cnt.raw < cycle_start + current_duty_cycle * pwm_period_in_cycles) {
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x3FFFFFF);
 80000d4:	9cffffc4 	addi	r19,r19,-1
 80000d8:	a5041004 	addi	r20,r20,4160
	printf("pwm: %g", pwm_period);

	/* Event loop never exits. */
	while (1) {
		// Read upper 32 bits and lower 32 bits of counter
		cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 80000dc:	84400037 	ldwio	r17,0(r16)
		cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 80000e0:	e4800037 	ldwio	r18,0(fp)
 80000e4:	05c40034 	movhi	r23,4096

		alt_u64 cycle_start = cnt.raw;
 80000e8:	9013883a 	mov	r9,r18
 80000ec:	8811883a 	mov	r8,r17
 80000f0:	bdc40004 	addi	r23,r23,4096

		double current_duty_cycle = 0.5;//fabs((cnt.raw % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);

		// First part of pwm cycle (<current_duty_cycle>% of it) - signal high
		while(cnt.raw < cycle_start + current_duty_cycle * pwm_period_in_cycles) {
 80000f4:	4809883a 	mov	r4,r9
 80000f8:	400b883a 	mov	r5,r8
 80000fc:	da000115 	stw	r8,4(sp)
 8000100:	da400015 	stw	r9,0(sp)
 8000104:	80001940 	call	8000194 <__floatundidf>
 8000108:	000d883a 	mov	r6,zero
 800010c:	000f883a 	mov	r7,zero
 8000110:	1009883a 	mov	r4,r2
 8000114:	180b883a 	mov	r5,r3
 8000118:	80002040 	call	8000204 <__adddf3>
 800011c:	9009883a 	mov	r4,r18
 8000120:	880b883a 	mov	r5,r17
 8000124:	102d883a 	mov	r22,r2
 8000128:	182b883a 	mov	r21,r3
 800012c:	80001940 	call	8000194 <__floatundidf>
 8000130:	b00d883a 	mov	r6,r22
 8000134:	a80f883a 	mov	r7,r21
 8000138:	1009883a 	mov	r4,r2
 800013c:	180b883a 	mov	r5,r3
 8000140:	8000b8c0 	call	8000b8c <__ledf2>
 8000144:	da000117 	ldw	r8,4(sp)
 8000148:	da400017 	ldw	r9,0(sp)
 800014c:	1000040e 	bge	r2,zero,8000160 <main+0xf4>
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x3FFFFFF);
 8000150:	a4c00035 	stwio	r19,0(r20)
			// Read upper 32 bits and lower 32 bits of counter
			cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 8000154:	84400037 	ldwio	r17,0(r16)
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 8000158:	bc800037 	ldwio	r18,0(r23)
 800015c:	003fe506 	br	80000f4 <main+0x88>
		}
		// Second part of pwm cycle (rest of it) - signal low
		while(cnt.raw < cycle_start + current_duty_cycle * pwm_period_in_cycles) {
 8000160:	9009883a 	mov	r4,r18
 8000164:	880b883a 	mov	r5,r17
 8000168:	80001940 	call	8000194 <__floatundidf>
 800016c:	100d883a 	mov	r6,r2
 8000170:	180f883a 	mov	r7,r3
 8000174:	b009883a 	mov	r4,r22
 8000178:	a80b883a 	mov	r5,r21
 800017c:	8000ab00 	call	8000ab0 <__gedf2>
 8000180:	00bfd60e 	bge	zero,r2,80000dc <main+0x70>
			// First part of pwm cycle - leds on
			IOWR(LEDS_BASE,0,0x3FFFFFF);
 8000184:	a4c00035 	stwio	r19,0(r20)
			// Read upper 32 bits and lower 32 bits of counter
			cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE,1);
 8000188:	84400037 	ldwio	r17,0(r16)
			cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE,0);
 800018c:	bc800037 	ldwio	r18,0(r23)
 8000190:	003ff306 	br	8000160 <main+0xf4>

08000194 <__floatundidf>:
 8000194:	defffc04 	addi	sp,sp,-16
 8000198:	dc800215 	stw	r18,8(sp)
 800019c:	2025883a 	mov	r18,r4
 80001a0:	2809883a 	mov	r4,r5
 80001a4:	dfc00315 	stw	ra,12(sp)
 80001a8:	dc400115 	stw	r17,4(sp)
 80001ac:	dc000015 	stw	r16,0(sp)
 80001b0:	80013980 	call	8001398 <__floatunsidf>
 80001b4:	000d883a 	mov	r6,zero
 80001b8:	01d07c34 	movhi	r7,16880
 80001bc:	180b883a 	mov	r5,r3
 80001c0:	1009883a 	mov	r4,r2
 80001c4:	8000c800 	call	8000c80 <__muldf3>
 80001c8:	9009883a 	mov	r4,r18
 80001cc:	1023883a 	mov	r17,r2
 80001d0:	1821883a 	mov	r16,r3
 80001d4:	80013980 	call	8001398 <__floatunsidf>
 80001d8:	880d883a 	mov	r6,r17
 80001dc:	800f883a 	mov	r7,r16
 80001e0:	1009883a 	mov	r4,r2
 80001e4:	180b883a 	mov	r5,r3
 80001e8:	80002040 	call	8000204 <__adddf3>
 80001ec:	dfc00317 	ldw	ra,12(sp)
 80001f0:	dc800217 	ldw	r18,8(sp)
 80001f4:	dc400117 	ldw	r17,4(sp)
 80001f8:	dc000017 	ldw	r16,0(sp)
 80001fc:	dec00404 	addi	sp,sp,16
 8000200:	f800283a 	ret

08000204 <__adddf3>:
 8000204:	02c00434 	movhi	r11,16
 8000208:	5affffc4 	addi	r11,r11,-1
 800020c:	2806d7fa 	srli	r3,r5,31
 8000210:	2ad4703a 	and	r10,r5,r11
 8000214:	3ad2703a 	and	r9,r7,r11
 8000218:	3804d53a 	srli	r2,r7,20
 800021c:	3018d77a 	srli	r12,r6,29
 8000220:	280ad53a 	srli	r5,r5,20
 8000224:	501490fa 	slli	r10,r10,3
 8000228:	2010d77a 	srli	r8,r4,29
 800022c:	481290fa 	slli	r9,r9,3
 8000230:	380ed7fa 	srli	r7,r7,31
 8000234:	defffb04 	addi	sp,sp,-20
 8000238:	dc800215 	stw	r18,8(sp)
 800023c:	dc400115 	stw	r17,4(sp)
 8000240:	dc000015 	stw	r16,0(sp)
 8000244:	dfc00415 	stw	ra,16(sp)
 8000248:	dcc00315 	stw	r19,12(sp)
 800024c:	1c803fcc 	andi	r18,r3,255
 8000250:	2c01ffcc 	andi	r16,r5,2047
 8000254:	5210b03a 	or	r8,r10,r8
 8000258:	202290fa 	slli	r17,r4,3
 800025c:	1081ffcc 	andi	r2,r2,2047
 8000260:	4b12b03a 	or	r9,r9,r12
 8000264:	300c90fa 	slli	r6,r6,3
 8000268:	91c07526 	beq	r18,r7,8000440 <__adddf3+0x23c>
 800026c:	8087c83a 	sub	r3,r16,r2
 8000270:	00c0ab0e 	bge	zero,r3,8000520 <__adddf3+0x31c>
 8000274:	10002a1e 	bne	r2,zero,8000320 <__adddf3+0x11c>
 8000278:	4984b03a 	or	r2,r9,r6
 800027c:	1000961e 	bne	r2,zero,80004d8 <__adddf3+0x2d4>
 8000280:	888001cc 	andi	r2,r17,7
 8000284:	10000726 	beq	r2,zero,80002a4 <__adddf3+0xa0>
 8000288:	888003cc 	andi	r2,r17,15
 800028c:	00c00104 	movi	r3,4
 8000290:	10c00426 	beq	r2,r3,80002a4 <__adddf3+0xa0>
 8000294:	88c7883a 	add	r3,r17,r3
 8000298:	1c63803a 	cmpltu	r17,r3,r17
 800029c:	4451883a 	add	r8,r8,r17
 80002a0:	1823883a 	mov	r17,r3
 80002a4:	4080202c 	andhi	r2,r8,128
 80002a8:	10005926 	beq	r2,zero,8000410 <__adddf3+0x20c>
 80002ac:	84000044 	addi	r16,r16,1
 80002b0:	0081ffc4 	movi	r2,2047
 80002b4:	8080ba26 	beq	r16,r2,80005a0 <__adddf3+0x39c>
 80002b8:	00bfe034 	movhi	r2,65408
 80002bc:	10bfffc4 	addi	r2,r2,-1
 80002c0:	4090703a 	and	r8,r8,r2
 80002c4:	4004977a 	slli	r2,r8,29
 80002c8:	4010927a 	slli	r8,r8,9
 80002cc:	8822d0fa 	srli	r17,r17,3
 80002d0:	8401ffcc 	andi	r16,r16,2047
 80002d4:	4010d33a 	srli	r8,r8,12
 80002d8:	9007883a 	mov	r3,r18
 80002dc:	1444b03a 	or	r2,r2,r17
 80002e0:	8401ffcc 	andi	r16,r16,2047
 80002e4:	8020953a 	slli	r16,r16,20
 80002e8:	18c03fcc 	andi	r3,r3,255
 80002ec:	01000434 	movhi	r4,16
 80002f0:	213fffc4 	addi	r4,r4,-1
 80002f4:	180697fa 	slli	r3,r3,31
 80002f8:	4110703a 	and	r8,r8,r4
 80002fc:	4410b03a 	or	r8,r8,r16
 8000300:	40c6b03a 	or	r3,r8,r3
 8000304:	dfc00417 	ldw	ra,16(sp)
 8000308:	dcc00317 	ldw	r19,12(sp)
 800030c:	dc800217 	ldw	r18,8(sp)
 8000310:	dc400117 	ldw	r17,4(sp)
 8000314:	dc000017 	ldw	r16,0(sp)
 8000318:	dec00504 	addi	sp,sp,20
 800031c:	f800283a 	ret
 8000320:	0081ffc4 	movi	r2,2047
 8000324:	80bfd626 	beq	r16,r2,8000280 <__adddf3+0x7c>
 8000328:	4a402034 	orhi	r9,r9,128
 800032c:	00800e04 	movi	r2,56
 8000330:	10c09f16 	blt	r2,r3,80005b0 <__adddf3+0x3ac>
 8000334:	008007c4 	movi	r2,31
 8000338:	10c0c216 	blt	r2,r3,8000644 <__adddf3+0x440>
 800033c:	00800804 	movi	r2,32
 8000340:	10c5c83a 	sub	r2,r2,r3
 8000344:	488a983a 	sll	r5,r9,r2
 8000348:	30c8d83a 	srl	r4,r6,r3
 800034c:	3084983a 	sll	r2,r6,r2
 8000350:	48c6d83a 	srl	r3,r9,r3
 8000354:	290cb03a 	or	r6,r5,r4
 8000358:	1004c03a 	cmpne	r2,r2,zero
 800035c:	308cb03a 	or	r6,r6,r2
 8000360:	898dc83a 	sub	r6,r17,r6
 8000364:	89a3803a 	cmpltu	r17,r17,r6
 8000368:	40d1c83a 	sub	r8,r8,r3
 800036c:	4451c83a 	sub	r8,r8,r17
 8000370:	3023883a 	mov	r17,r6
 8000374:	4080202c 	andhi	r2,r8,128
 8000378:	10002326 	beq	r2,zero,8000408 <__adddf3+0x204>
 800037c:	04c02034 	movhi	r19,128
 8000380:	9cffffc4 	addi	r19,r19,-1
 8000384:	44e6703a 	and	r19,r8,r19
 8000388:	98007626 	beq	r19,zero,8000564 <__adddf3+0x360>
 800038c:	9809883a 	mov	r4,r19
 8000390:	80014400 	call	8001440 <__clzsi2>
 8000394:	10fffe04 	addi	r3,r2,-8
 8000398:	010007c4 	movi	r4,31
 800039c:	20c07716 	blt	r4,r3,800057c <__adddf3+0x378>
 80003a0:	00800804 	movi	r2,32
 80003a4:	10c5c83a 	sub	r2,r2,r3
 80003a8:	8884d83a 	srl	r2,r17,r2
 80003ac:	98d0983a 	sll	r8,r19,r3
 80003b0:	88e2983a 	sll	r17,r17,r3
 80003b4:	1204b03a 	or	r2,r2,r8
 80003b8:	1c007416 	blt	r3,r16,800058c <__adddf3+0x388>
 80003bc:	1c21c83a 	sub	r16,r3,r16
 80003c0:	82000044 	addi	r8,r16,1
 80003c4:	00c007c4 	movi	r3,31
 80003c8:	1a009116 	blt	r3,r8,8000610 <__adddf3+0x40c>
 80003cc:	00c00804 	movi	r3,32
 80003d0:	1a07c83a 	sub	r3,r3,r8
 80003d4:	8a08d83a 	srl	r4,r17,r8
 80003d8:	88e2983a 	sll	r17,r17,r3
 80003dc:	10c6983a 	sll	r3,r2,r3
 80003e0:	1210d83a 	srl	r8,r2,r8
 80003e4:	8804c03a 	cmpne	r2,r17,zero
 80003e8:	1906b03a 	or	r3,r3,r4
 80003ec:	18a2b03a 	or	r17,r3,r2
 80003f0:	0021883a 	mov	r16,zero
 80003f4:	003fa206 	br	8000280 <__adddf3+0x7c>
 80003f8:	1890b03a 	or	r8,r3,r2
 80003fc:	40017d26 	beq	r8,zero,80009f4 <__adddf3+0x7f0>
 8000400:	1011883a 	mov	r8,r2
 8000404:	1823883a 	mov	r17,r3
 8000408:	888001cc 	andi	r2,r17,7
 800040c:	103f9e1e 	bne	r2,zero,8000288 <__adddf3+0x84>
 8000410:	4004977a 	slli	r2,r8,29
 8000414:	8822d0fa 	srli	r17,r17,3
 8000418:	4010d0fa 	srli	r8,r8,3
 800041c:	9007883a 	mov	r3,r18
 8000420:	1444b03a 	or	r2,r2,r17
 8000424:	0101ffc4 	movi	r4,2047
 8000428:	81002426 	beq	r16,r4,80004bc <__adddf3+0x2b8>
 800042c:	8120703a 	and	r16,r16,r4
 8000430:	01000434 	movhi	r4,16
 8000434:	213fffc4 	addi	r4,r4,-1
 8000438:	4110703a 	and	r8,r8,r4
 800043c:	003fa806 	br	80002e0 <__adddf3+0xdc>
 8000440:	8089c83a 	sub	r4,r16,r2
 8000444:	01005e0e 	bge	zero,r4,80005c0 <__adddf3+0x3bc>
 8000448:	10002b26 	beq	r2,zero,80004f8 <__adddf3+0x2f4>
 800044c:	0081ffc4 	movi	r2,2047
 8000450:	80bf8b26 	beq	r16,r2,8000280 <__adddf3+0x7c>
 8000454:	4a402034 	orhi	r9,r9,128
 8000458:	00800e04 	movi	r2,56
 800045c:	1100a40e 	bge	r2,r4,80006f0 <__adddf3+0x4ec>
 8000460:	498cb03a 	or	r6,r9,r6
 8000464:	300ac03a 	cmpne	r5,r6,zero
 8000468:	0013883a 	mov	r9,zero
 800046c:	2c4b883a 	add	r5,r5,r17
 8000470:	2c63803a 	cmpltu	r17,r5,r17
 8000474:	4a11883a 	add	r8,r9,r8
 8000478:	8a11883a 	add	r8,r17,r8
 800047c:	2823883a 	mov	r17,r5
 8000480:	4080202c 	andhi	r2,r8,128
 8000484:	103fe026 	beq	r2,zero,8000408 <__adddf3+0x204>
 8000488:	84000044 	addi	r16,r16,1
 800048c:	0081ffc4 	movi	r2,2047
 8000490:	8080d226 	beq	r16,r2,80007dc <__adddf3+0x5d8>
 8000494:	00bfe034 	movhi	r2,65408
 8000498:	10bfffc4 	addi	r2,r2,-1
 800049c:	4090703a 	and	r8,r8,r2
 80004a0:	880ad07a 	srli	r5,r17,1
 80004a4:	400897fa 	slli	r4,r8,31
 80004a8:	88c0004c 	andi	r3,r17,1
 80004ac:	28e2b03a 	or	r17,r5,r3
 80004b0:	4010d07a 	srli	r8,r8,1
 80004b4:	2462b03a 	or	r17,r4,r17
 80004b8:	003f7106 	br	8000280 <__adddf3+0x7c>
 80004bc:	4088b03a 	or	r4,r8,r2
 80004c0:	20014526 	beq	r4,zero,80009d8 <__adddf3+0x7d4>
 80004c4:	01000434 	movhi	r4,16
 80004c8:	42000234 	orhi	r8,r8,8
 80004cc:	213fffc4 	addi	r4,r4,-1
 80004d0:	4110703a 	and	r8,r8,r4
 80004d4:	003f8206 	br	80002e0 <__adddf3+0xdc>
 80004d8:	18ffffc4 	addi	r3,r3,-1
 80004dc:	1800491e 	bne	r3,zero,8000604 <__adddf3+0x400>
 80004e0:	898bc83a 	sub	r5,r17,r6
 80004e4:	8963803a 	cmpltu	r17,r17,r5
 80004e8:	4251c83a 	sub	r8,r8,r9
 80004ec:	4451c83a 	sub	r8,r8,r17
 80004f0:	2823883a 	mov	r17,r5
 80004f4:	003f9f06 	br	8000374 <__adddf3+0x170>
 80004f8:	4984b03a 	or	r2,r9,r6
 80004fc:	103f6026 	beq	r2,zero,8000280 <__adddf3+0x7c>
 8000500:	213fffc4 	addi	r4,r4,-1
 8000504:	2000931e 	bne	r4,zero,8000754 <__adddf3+0x550>
 8000508:	898d883a 	add	r6,r17,r6
 800050c:	3463803a 	cmpltu	r17,r6,r17
 8000510:	4251883a 	add	r8,r8,r9
 8000514:	8a11883a 	add	r8,r17,r8
 8000518:	3023883a 	mov	r17,r6
 800051c:	003fd806 	br	8000480 <__adddf3+0x27c>
 8000520:	1800541e 	bne	r3,zero,8000674 <__adddf3+0x470>
 8000524:	80800044 	addi	r2,r16,1
 8000528:	1081ffcc 	andi	r2,r2,2047
 800052c:	00c00044 	movi	r3,1
 8000530:	1880a00e 	bge	r3,r2,80007b4 <__adddf3+0x5b0>
 8000534:	8989c83a 	sub	r4,r17,r6
 8000538:	8905803a 	cmpltu	r2,r17,r4
 800053c:	4267c83a 	sub	r19,r8,r9
 8000540:	98a7c83a 	sub	r19,r19,r2
 8000544:	9880202c 	andhi	r2,r19,128
 8000548:	10006326 	beq	r2,zero,80006d8 <__adddf3+0x4d4>
 800054c:	3463c83a 	sub	r17,r6,r17
 8000550:	4a07c83a 	sub	r3,r9,r8
 8000554:	344d803a 	cmpltu	r6,r6,r17
 8000558:	19a7c83a 	sub	r19,r3,r6
 800055c:	3825883a 	mov	r18,r7
 8000560:	983f8a1e 	bne	r19,zero,800038c <__adddf3+0x188>
 8000564:	8809883a 	mov	r4,r17
 8000568:	80014400 	call	8001440 <__clzsi2>
 800056c:	10800804 	addi	r2,r2,32
 8000570:	10fffe04 	addi	r3,r2,-8
 8000574:	010007c4 	movi	r4,31
 8000578:	20ff890e 	bge	r4,r3,80003a0 <__adddf3+0x19c>
 800057c:	10bff604 	addi	r2,r2,-40
 8000580:	8884983a 	sll	r2,r17,r2
 8000584:	0023883a 	mov	r17,zero
 8000588:	1c3f8c0e 	bge	r3,r16,80003bc <__adddf3+0x1b8>
 800058c:	023fe034 	movhi	r8,65408
 8000590:	423fffc4 	addi	r8,r8,-1
 8000594:	80e1c83a 	sub	r16,r16,r3
 8000598:	1210703a 	and	r8,r2,r8
 800059c:	003f3806 	br	8000280 <__adddf3+0x7c>
 80005a0:	9007883a 	mov	r3,r18
 80005a4:	0011883a 	mov	r8,zero
 80005a8:	0005883a 	mov	r2,zero
 80005ac:	003f4c06 	br	80002e0 <__adddf3+0xdc>
 80005b0:	498cb03a 	or	r6,r9,r6
 80005b4:	300cc03a 	cmpne	r6,r6,zero
 80005b8:	0007883a 	mov	r3,zero
 80005bc:	003f6806 	br	8000360 <__adddf3+0x15c>
 80005c0:	20009c1e 	bne	r4,zero,8000834 <__adddf3+0x630>
 80005c4:	80800044 	addi	r2,r16,1
 80005c8:	1141ffcc 	andi	r5,r2,2047
 80005cc:	01000044 	movi	r4,1
 80005d0:	2140670e 	bge	r4,r5,8000770 <__adddf3+0x56c>
 80005d4:	0101ffc4 	movi	r4,2047
 80005d8:	11007f26 	beq	r2,r4,80007d8 <__adddf3+0x5d4>
 80005dc:	898d883a 	add	r6,r17,r6
 80005e0:	4247883a 	add	r3,r8,r9
 80005e4:	3451803a 	cmpltu	r8,r6,r17
 80005e8:	40d1883a 	add	r8,r8,r3
 80005ec:	402297fa 	slli	r17,r8,31
 80005f0:	300cd07a 	srli	r6,r6,1
 80005f4:	4010d07a 	srli	r8,r8,1
 80005f8:	1021883a 	mov	r16,r2
 80005fc:	89a2b03a 	or	r17,r17,r6
 8000600:	003f1f06 	br	8000280 <__adddf3+0x7c>
 8000604:	0081ffc4 	movi	r2,2047
 8000608:	80bf481e 	bne	r16,r2,800032c <__adddf3+0x128>
 800060c:	003f1c06 	br	8000280 <__adddf3+0x7c>
 8000610:	843ff844 	addi	r16,r16,-31
 8000614:	01000804 	movi	r4,32
 8000618:	1406d83a 	srl	r3,r2,r16
 800061c:	41005026 	beq	r8,r4,8000760 <__adddf3+0x55c>
 8000620:	01001004 	movi	r4,64
 8000624:	2211c83a 	sub	r8,r4,r8
 8000628:	1204983a 	sll	r2,r2,r8
 800062c:	88a2b03a 	or	r17,r17,r2
 8000630:	8822c03a 	cmpne	r17,r17,zero
 8000634:	1c62b03a 	or	r17,r3,r17
 8000638:	0011883a 	mov	r8,zero
 800063c:	0021883a 	mov	r16,zero
 8000640:	003f7106 	br	8000408 <__adddf3+0x204>
 8000644:	193ff804 	addi	r4,r3,-32
 8000648:	00800804 	movi	r2,32
 800064c:	4908d83a 	srl	r4,r9,r4
 8000650:	18804526 	beq	r3,r2,8000768 <__adddf3+0x564>
 8000654:	00801004 	movi	r2,64
 8000658:	10c5c83a 	sub	r2,r2,r3
 800065c:	4886983a 	sll	r3,r9,r2
 8000660:	198cb03a 	or	r6,r3,r6
 8000664:	300cc03a 	cmpne	r6,r6,zero
 8000668:	218cb03a 	or	r6,r4,r6
 800066c:	0007883a 	mov	r3,zero
 8000670:	003f3b06 	br	8000360 <__adddf3+0x15c>
 8000674:	80002a26 	beq	r16,zero,8000720 <__adddf3+0x51c>
 8000678:	0101ffc4 	movi	r4,2047
 800067c:	11006826 	beq	r2,r4,8000820 <__adddf3+0x61c>
 8000680:	00c7c83a 	sub	r3,zero,r3
 8000684:	42002034 	orhi	r8,r8,128
 8000688:	01000e04 	movi	r4,56
 800068c:	20c07c16 	blt	r4,r3,8000880 <__adddf3+0x67c>
 8000690:	010007c4 	movi	r4,31
 8000694:	20c0da16 	blt	r4,r3,8000a00 <__adddf3+0x7fc>
 8000698:	01000804 	movi	r4,32
 800069c:	20c9c83a 	sub	r4,r4,r3
 80006a0:	4114983a 	sll	r10,r8,r4
 80006a4:	88cad83a 	srl	r5,r17,r3
 80006a8:	8908983a 	sll	r4,r17,r4
 80006ac:	40c6d83a 	srl	r3,r8,r3
 80006b0:	5162b03a 	or	r17,r10,r5
 80006b4:	2008c03a 	cmpne	r4,r4,zero
 80006b8:	8922b03a 	or	r17,r17,r4
 80006bc:	3463c83a 	sub	r17,r6,r17
 80006c0:	48c7c83a 	sub	r3,r9,r3
 80006c4:	344d803a 	cmpltu	r6,r6,r17
 80006c8:	1991c83a 	sub	r8,r3,r6
 80006cc:	1021883a 	mov	r16,r2
 80006d0:	3825883a 	mov	r18,r7
 80006d4:	003f2706 	br	8000374 <__adddf3+0x170>
 80006d8:	24d0b03a 	or	r8,r4,r19
 80006dc:	40001b1e 	bne	r8,zero,800074c <__adddf3+0x548>
 80006e0:	0005883a 	mov	r2,zero
 80006e4:	0007883a 	mov	r3,zero
 80006e8:	0021883a 	mov	r16,zero
 80006ec:	003f4d06 	br	8000424 <__adddf3+0x220>
 80006f0:	008007c4 	movi	r2,31
 80006f4:	11003c16 	blt	r2,r4,80007e8 <__adddf3+0x5e4>
 80006f8:	00800804 	movi	r2,32
 80006fc:	1105c83a 	sub	r2,r2,r4
 8000700:	488e983a 	sll	r7,r9,r2
 8000704:	310ad83a 	srl	r5,r6,r4
 8000708:	3084983a 	sll	r2,r6,r2
 800070c:	4912d83a 	srl	r9,r9,r4
 8000710:	394ab03a 	or	r5,r7,r5
 8000714:	1004c03a 	cmpne	r2,r2,zero
 8000718:	288ab03a 	or	r5,r5,r2
 800071c:	003f5306 	br	800046c <__adddf3+0x268>
 8000720:	4448b03a 	or	r4,r8,r17
 8000724:	20003e26 	beq	r4,zero,8000820 <__adddf3+0x61c>
 8000728:	00c6303a 	nor	r3,zero,r3
 800072c:	18003a1e 	bne	r3,zero,8000818 <__adddf3+0x614>
 8000730:	3463c83a 	sub	r17,r6,r17
 8000734:	4a07c83a 	sub	r3,r9,r8
 8000738:	344d803a 	cmpltu	r6,r6,r17
 800073c:	1991c83a 	sub	r8,r3,r6
 8000740:	1021883a 	mov	r16,r2
 8000744:	3825883a 	mov	r18,r7
 8000748:	003f0a06 	br	8000374 <__adddf3+0x170>
 800074c:	2023883a 	mov	r17,r4
 8000750:	003f0d06 	br	8000388 <__adddf3+0x184>
 8000754:	0081ffc4 	movi	r2,2047
 8000758:	80bf3f1e 	bne	r16,r2,8000458 <__adddf3+0x254>
 800075c:	003ec806 	br	8000280 <__adddf3+0x7c>
 8000760:	0005883a 	mov	r2,zero
 8000764:	003fb106 	br	800062c <__adddf3+0x428>
 8000768:	0007883a 	mov	r3,zero
 800076c:	003fbc06 	br	8000660 <__adddf3+0x45c>
 8000770:	4444b03a 	or	r2,r8,r17
 8000774:	8000871e 	bne	r16,zero,8000994 <__adddf3+0x790>
 8000778:	1000ba26 	beq	r2,zero,8000a64 <__adddf3+0x860>
 800077c:	4984b03a 	or	r2,r9,r6
 8000780:	103ebf26 	beq	r2,zero,8000280 <__adddf3+0x7c>
 8000784:	8985883a 	add	r2,r17,r6
 8000788:	4247883a 	add	r3,r8,r9
 800078c:	1451803a 	cmpltu	r8,r2,r17
 8000790:	40d1883a 	add	r8,r8,r3
 8000794:	40c0202c 	andhi	r3,r8,128
 8000798:	1023883a 	mov	r17,r2
 800079c:	183f1a26 	beq	r3,zero,8000408 <__adddf3+0x204>
 80007a0:	00bfe034 	movhi	r2,65408
 80007a4:	10bfffc4 	addi	r2,r2,-1
 80007a8:	2021883a 	mov	r16,r4
 80007ac:	4090703a 	and	r8,r8,r2
 80007b0:	003eb306 	br	8000280 <__adddf3+0x7c>
 80007b4:	4444b03a 	or	r2,r8,r17
 80007b8:	8000291e 	bne	r16,zero,8000860 <__adddf3+0x65c>
 80007bc:	10004b1e 	bne	r2,zero,80008ec <__adddf3+0x6e8>
 80007c0:	4990b03a 	or	r8,r9,r6
 80007c4:	40008b26 	beq	r8,zero,80009f4 <__adddf3+0x7f0>
 80007c8:	4811883a 	mov	r8,r9
 80007cc:	3023883a 	mov	r17,r6
 80007d0:	3825883a 	mov	r18,r7
 80007d4:	003eaa06 	br	8000280 <__adddf3+0x7c>
 80007d8:	1021883a 	mov	r16,r2
 80007dc:	0011883a 	mov	r8,zero
 80007e0:	0005883a 	mov	r2,zero
 80007e4:	003f0f06 	br	8000424 <__adddf3+0x220>
 80007e8:	217ff804 	addi	r5,r4,-32
 80007ec:	00800804 	movi	r2,32
 80007f0:	494ad83a 	srl	r5,r9,r5
 80007f4:	20807d26 	beq	r4,r2,80009ec <__adddf3+0x7e8>
 80007f8:	00801004 	movi	r2,64
 80007fc:	1109c83a 	sub	r4,r2,r4
 8000800:	4912983a 	sll	r9,r9,r4
 8000804:	498cb03a 	or	r6,r9,r6
 8000808:	300cc03a 	cmpne	r6,r6,zero
 800080c:	298ab03a 	or	r5,r5,r6
 8000810:	0013883a 	mov	r9,zero
 8000814:	003f1506 	br	800046c <__adddf3+0x268>
 8000818:	0101ffc4 	movi	r4,2047
 800081c:	113f9a1e 	bne	r2,r4,8000688 <__adddf3+0x484>
 8000820:	4811883a 	mov	r8,r9
 8000824:	3023883a 	mov	r17,r6
 8000828:	1021883a 	mov	r16,r2
 800082c:	3825883a 	mov	r18,r7
 8000830:	003e9306 	br	8000280 <__adddf3+0x7c>
 8000834:	8000161e 	bne	r16,zero,8000890 <__adddf3+0x68c>
 8000838:	444ab03a 	or	r5,r8,r17
 800083c:	28005126 	beq	r5,zero,8000984 <__adddf3+0x780>
 8000840:	0108303a 	nor	r4,zero,r4
 8000844:	20004d1e 	bne	r4,zero,800097c <__adddf3+0x778>
 8000848:	89a3883a 	add	r17,r17,r6
 800084c:	4253883a 	add	r9,r8,r9
 8000850:	898d803a 	cmpltu	r6,r17,r6
 8000854:	3251883a 	add	r8,r6,r9
 8000858:	1021883a 	mov	r16,r2
 800085c:	003f0806 	br	8000480 <__adddf3+0x27c>
 8000860:	1000301e 	bne	r2,zero,8000924 <__adddf3+0x720>
 8000864:	4984b03a 	or	r2,r9,r6
 8000868:	10007126 	beq	r2,zero,8000a30 <__adddf3+0x82c>
 800086c:	4811883a 	mov	r8,r9
 8000870:	3023883a 	mov	r17,r6
 8000874:	3825883a 	mov	r18,r7
 8000878:	0401ffc4 	movi	r16,2047
 800087c:	003e8006 	br	8000280 <__adddf3+0x7c>
 8000880:	4462b03a 	or	r17,r8,r17
 8000884:	8822c03a 	cmpne	r17,r17,zero
 8000888:	0007883a 	mov	r3,zero
 800088c:	003f8b06 	br	80006bc <__adddf3+0x4b8>
 8000890:	0141ffc4 	movi	r5,2047
 8000894:	11403b26 	beq	r2,r5,8000984 <__adddf3+0x780>
 8000898:	0109c83a 	sub	r4,zero,r4
 800089c:	42002034 	orhi	r8,r8,128
 80008a0:	01400e04 	movi	r5,56
 80008a4:	29006716 	blt	r5,r4,8000a44 <__adddf3+0x840>
 80008a8:	014007c4 	movi	r5,31
 80008ac:	29007016 	blt	r5,r4,8000a70 <__adddf3+0x86c>
 80008b0:	01400804 	movi	r5,32
 80008b4:	290bc83a 	sub	r5,r5,r4
 80008b8:	4154983a 	sll	r10,r8,r5
 80008bc:	890ed83a 	srl	r7,r17,r4
 80008c0:	894a983a 	sll	r5,r17,r5
 80008c4:	4108d83a 	srl	r4,r8,r4
 80008c8:	51e2b03a 	or	r17,r10,r7
 80008cc:	280ac03a 	cmpne	r5,r5,zero
 80008d0:	8962b03a 	or	r17,r17,r5
 80008d4:	89a3883a 	add	r17,r17,r6
 80008d8:	2253883a 	add	r9,r4,r9
 80008dc:	898d803a 	cmpltu	r6,r17,r6
 80008e0:	3251883a 	add	r8,r6,r9
 80008e4:	1021883a 	mov	r16,r2
 80008e8:	003ee506 	br	8000480 <__adddf3+0x27c>
 80008ec:	4984b03a 	or	r2,r9,r6
 80008f0:	103e6326 	beq	r2,zero,8000280 <__adddf3+0x7c>
 80008f4:	8987c83a 	sub	r3,r17,r6
 80008f8:	88c9803a 	cmpltu	r4,r17,r3
 80008fc:	4245c83a 	sub	r2,r8,r9
 8000900:	1105c83a 	sub	r2,r2,r4
 8000904:	1100202c 	andhi	r4,r2,128
 8000908:	203ebb26 	beq	r4,zero,80003f8 <__adddf3+0x1f4>
 800090c:	3463c83a 	sub	r17,r6,r17
 8000910:	4a07c83a 	sub	r3,r9,r8
 8000914:	344d803a 	cmpltu	r6,r6,r17
 8000918:	1991c83a 	sub	r8,r3,r6
 800091c:	3825883a 	mov	r18,r7
 8000920:	003e5706 	br	8000280 <__adddf3+0x7c>
 8000924:	4984b03a 	or	r2,r9,r6
 8000928:	10002e26 	beq	r2,zero,80009e4 <__adddf3+0x7e0>
 800092c:	4004d0fa 	srli	r2,r8,3
 8000930:	8822d0fa 	srli	r17,r17,3
 8000934:	4010977a 	slli	r8,r8,29
 8000938:	10c0022c 	andhi	r3,r2,8
 800093c:	4462b03a 	or	r17,r8,r17
 8000940:	18000826 	beq	r3,zero,8000964 <__adddf3+0x760>
 8000944:	4808d0fa 	srli	r4,r9,3
 8000948:	20c0022c 	andhi	r3,r4,8
 800094c:	1800051e 	bne	r3,zero,8000964 <__adddf3+0x760>
 8000950:	300cd0fa 	srli	r6,r6,3
 8000954:	4806977a 	slli	r3,r9,29
 8000958:	2005883a 	mov	r2,r4
 800095c:	3825883a 	mov	r18,r7
 8000960:	19a2b03a 	or	r17,r3,r6
 8000964:	8810d77a 	srli	r8,r17,29
 8000968:	100490fa 	slli	r2,r2,3
 800096c:	882290fa 	slli	r17,r17,3
 8000970:	0401ffc4 	movi	r16,2047
 8000974:	4090b03a 	or	r8,r8,r2
 8000978:	003e4106 	br	8000280 <__adddf3+0x7c>
 800097c:	0141ffc4 	movi	r5,2047
 8000980:	117fc71e 	bne	r2,r5,80008a0 <__adddf3+0x69c>
 8000984:	4811883a 	mov	r8,r9
 8000988:	3023883a 	mov	r17,r6
 800098c:	1021883a 	mov	r16,r2
 8000990:	003e3b06 	br	8000280 <__adddf3+0x7c>
 8000994:	10002f26 	beq	r2,zero,8000a54 <__adddf3+0x850>
 8000998:	4984b03a 	or	r2,r9,r6
 800099c:	10001126 	beq	r2,zero,80009e4 <__adddf3+0x7e0>
 80009a0:	4004d0fa 	srli	r2,r8,3
 80009a4:	8822d0fa 	srli	r17,r17,3
 80009a8:	4010977a 	slli	r8,r8,29
 80009ac:	10c0022c 	andhi	r3,r2,8
 80009b0:	4462b03a 	or	r17,r8,r17
 80009b4:	183feb26 	beq	r3,zero,8000964 <__adddf3+0x760>
 80009b8:	4808d0fa 	srli	r4,r9,3
 80009bc:	20c0022c 	andhi	r3,r4,8
 80009c0:	183fe81e 	bne	r3,zero,8000964 <__adddf3+0x760>
 80009c4:	300cd0fa 	srli	r6,r6,3
 80009c8:	4806977a 	slli	r3,r9,29
 80009cc:	2005883a 	mov	r2,r4
 80009d0:	19a2b03a 	or	r17,r3,r6
 80009d4:	003fe306 	br	8000964 <__adddf3+0x760>
 80009d8:	0011883a 	mov	r8,zero
 80009dc:	0005883a 	mov	r2,zero
 80009e0:	003e3f06 	br	80002e0 <__adddf3+0xdc>
 80009e4:	0401ffc4 	movi	r16,2047
 80009e8:	003e2506 	br	8000280 <__adddf3+0x7c>
 80009ec:	0013883a 	mov	r9,zero
 80009f0:	003f8406 	br	8000804 <__adddf3+0x600>
 80009f4:	0005883a 	mov	r2,zero
 80009f8:	0007883a 	mov	r3,zero
 80009fc:	003e8906 	br	8000424 <__adddf3+0x220>
 8000a00:	197ff804 	addi	r5,r3,-32
 8000a04:	01000804 	movi	r4,32
 8000a08:	414ad83a 	srl	r5,r8,r5
 8000a0c:	19002426 	beq	r3,r4,8000aa0 <__adddf3+0x89c>
 8000a10:	01001004 	movi	r4,64
 8000a14:	20c7c83a 	sub	r3,r4,r3
 8000a18:	40c6983a 	sll	r3,r8,r3
 8000a1c:	1c46b03a 	or	r3,r3,r17
 8000a20:	1806c03a 	cmpne	r3,r3,zero
 8000a24:	28e2b03a 	or	r17,r5,r3
 8000a28:	0007883a 	mov	r3,zero
 8000a2c:	003f2306 	br	80006bc <__adddf3+0x4b8>
 8000a30:	0007883a 	mov	r3,zero
 8000a34:	5811883a 	mov	r8,r11
 8000a38:	00bfffc4 	movi	r2,-1
 8000a3c:	0401ffc4 	movi	r16,2047
 8000a40:	003e7806 	br	8000424 <__adddf3+0x220>
 8000a44:	4462b03a 	or	r17,r8,r17
 8000a48:	8822c03a 	cmpne	r17,r17,zero
 8000a4c:	0009883a 	mov	r4,zero
 8000a50:	003fa006 	br	80008d4 <__adddf3+0x6d0>
 8000a54:	4811883a 	mov	r8,r9
 8000a58:	3023883a 	mov	r17,r6
 8000a5c:	0401ffc4 	movi	r16,2047
 8000a60:	003e0706 	br	8000280 <__adddf3+0x7c>
 8000a64:	4811883a 	mov	r8,r9
 8000a68:	3023883a 	mov	r17,r6
 8000a6c:	003e0406 	br	8000280 <__adddf3+0x7c>
 8000a70:	21fff804 	addi	r7,r4,-32
 8000a74:	01400804 	movi	r5,32
 8000a78:	41ced83a 	srl	r7,r8,r7
 8000a7c:	21400a26 	beq	r4,r5,8000aa8 <__adddf3+0x8a4>
 8000a80:	01401004 	movi	r5,64
 8000a84:	2909c83a 	sub	r4,r5,r4
 8000a88:	4108983a 	sll	r4,r8,r4
 8000a8c:	2448b03a 	or	r4,r4,r17
 8000a90:	2008c03a 	cmpne	r4,r4,zero
 8000a94:	3922b03a 	or	r17,r7,r4
 8000a98:	0009883a 	mov	r4,zero
 8000a9c:	003f8d06 	br	80008d4 <__adddf3+0x6d0>
 8000aa0:	0007883a 	mov	r3,zero
 8000aa4:	003fdd06 	br	8000a1c <__adddf3+0x818>
 8000aa8:	0009883a 	mov	r4,zero
 8000aac:	003ff706 	br	8000a8c <__adddf3+0x888>

08000ab0 <__gedf2>:
 8000ab0:	2804d53a 	srli	r2,r5,20
 8000ab4:	3806d53a 	srli	r3,r7,20
 8000ab8:	02000434 	movhi	r8,16
 8000abc:	423fffc4 	addi	r8,r8,-1
 8000ac0:	1081ffcc 	andi	r2,r2,2047
 8000ac4:	0241ffc4 	movi	r9,2047
 8000ac8:	2a14703a 	and	r10,r5,r8
 8000acc:	18c1ffcc 	andi	r3,r3,2047
 8000ad0:	3a10703a 	and	r8,r7,r8
 8000ad4:	280ad7fa 	srli	r5,r5,31
 8000ad8:	380ed7fa 	srli	r7,r7,31
 8000adc:	12401d26 	beq	r2,r9,8000b54 <__gedf2+0xa4>
 8000ae0:	0241ffc4 	movi	r9,2047
 8000ae4:	1a401226 	beq	r3,r9,8000b30 <__gedf2+0x80>
 8000ae8:	1000081e 	bne	r2,zero,8000b0c <__gedf2+0x5c>
 8000aec:	2296b03a 	or	r11,r4,r10
 8000af0:	5813003a 	cmpeq	r9,r11,zero
 8000af4:	1800091e 	bne	r3,zero,8000b1c <__gedf2+0x6c>
 8000af8:	3218b03a 	or	r12,r6,r8
 8000afc:	6000071e 	bne	r12,zero,8000b1c <__gedf2+0x6c>
 8000b00:	0005883a 	mov	r2,zero
 8000b04:	5800101e 	bne	r11,zero,8000b48 <__gedf2+0x98>
 8000b08:	f800283a 	ret
 8000b0c:	18000c1e 	bne	r3,zero,8000b40 <__gedf2+0x90>
 8000b10:	3212b03a 	or	r9,r6,r8
 8000b14:	48000c26 	beq	r9,zero,8000b48 <__gedf2+0x98>
 8000b18:	0013883a 	mov	r9,zero
 8000b1c:	39c03fcc 	andi	r7,r7,255
 8000b20:	48000826 	beq	r9,zero,8000b44 <__gedf2+0x94>
 8000b24:	38000926 	beq	r7,zero,8000b4c <__gedf2+0x9c>
 8000b28:	00800044 	movi	r2,1
 8000b2c:	f800283a 	ret
 8000b30:	3212b03a 	or	r9,r6,r8
 8000b34:	483fec26 	beq	r9,zero,8000ae8 <__gedf2+0x38>
 8000b38:	00bfff84 	movi	r2,-2
 8000b3c:	f800283a 	ret
 8000b40:	39c03fcc 	andi	r7,r7,255
 8000b44:	29c00626 	beq	r5,r7,8000b60 <__gedf2+0xb0>
 8000b48:	283ff726 	beq	r5,zero,8000b28 <__gedf2+0x78>
 8000b4c:	00bfffc4 	movi	r2,-1
 8000b50:	f800283a 	ret
 8000b54:	2292b03a 	or	r9,r4,r10
 8000b58:	483fe126 	beq	r9,zero,8000ae0 <__gedf2+0x30>
 8000b5c:	003ff606 	br	8000b38 <__gedf2+0x88>
 8000b60:	18bff916 	blt	r3,r2,8000b48 <__gedf2+0x98>
 8000b64:	10c00316 	blt	r2,r3,8000b74 <__gedf2+0xc4>
 8000b68:	42bff736 	bltu	r8,r10,8000b48 <__gedf2+0x98>
 8000b6c:	52000326 	beq	r10,r8,8000b7c <__gedf2+0xcc>
 8000b70:	5200042e 	bgeu	r10,r8,8000b84 <__gedf2+0xd4>
 8000b74:	283fec1e 	bne	r5,zero,8000b28 <__gedf2+0x78>
 8000b78:	003ff406 	br	8000b4c <__gedf2+0x9c>
 8000b7c:	313ff236 	bltu	r6,r4,8000b48 <__gedf2+0x98>
 8000b80:	21bffc36 	bltu	r4,r6,8000b74 <__gedf2+0xc4>
 8000b84:	0005883a 	mov	r2,zero
 8000b88:	f800283a 	ret

08000b8c <__ledf2>:
 8000b8c:	2804d53a 	srli	r2,r5,20
 8000b90:	3810d53a 	srli	r8,r7,20
 8000b94:	00c00434 	movhi	r3,16
 8000b98:	18ffffc4 	addi	r3,r3,-1
 8000b9c:	1081ffcc 	andi	r2,r2,2047
 8000ba0:	0241ffc4 	movi	r9,2047
 8000ba4:	28d4703a 	and	r10,r5,r3
 8000ba8:	4201ffcc 	andi	r8,r8,2047
 8000bac:	38c6703a 	and	r3,r7,r3
 8000bb0:	280ad7fa 	srli	r5,r5,31
 8000bb4:	380ed7fa 	srli	r7,r7,31
 8000bb8:	12401f26 	beq	r2,r9,8000c38 <__ledf2+0xac>
 8000bbc:	0241ffc4 	movi	r9,2047
 8000bc0:	42401426 	beq	r8,r9,8000c14 <__ledf2+0x88>
 8000bc4:	1000091e 	bne	r2,zero,8000bec <__ledf2+0x60>
 8000bc8:	2296b03a 	or	r11,r4,r10
 8000bcc:	5813003a 	cmpeq	r9,r11,zero
 8000bd0:	29403fcc 	andi	r5,r5,255
 8000bd4:	40000a1e 	bne	r8,zero,8000c00 <__ledf2+0x74>
 8000bd8:	30d8b03a 	or	r12,r6,r3
 8000bdc:	6000081e 	bne	r12,zero,8000c00 <__ledf2+0x74>
 8000be0:	0005883a 	mov	r2,zero
 8000be4:	5800111e 	bne	r11,zero,8000c2c <__ledf2+0xa0>
 8000be8:	f800283a 	ret
 8000bec:	29403fcc 	andi	r5,r5,255
 8000bf0:	40000c1e 	bne	r8,zero,8000c24 <__ledf2+0x98>
 8000bf4:	30d2b03a 	or	r9,r6,r3
 8000bf8:	48000c26 	beq	r9,zero,8000c2c <__ledf2+0xa0>
 8000bfc:	0013883a 	mov	r9,zero
 8000c00:	39c03fcc 	andi	r7,r7,255
 8000c04:	48000826 	beq	r9,zero,8000c28 <__ledf2+0x9c>
 8000c08:	38001126 	beq	r7,zero,8000c50 <__ledf2+0xc4>
 8000c0c:	00800044 	movi	r2,1
 8000c10:	f800283a 	ret
 8000c14:	30d2b03a 	or	r9,r6,r3
 8000c18:	483fea26 	beq	r9,zero,8000bc4 <__ledf2+0x38>
 8000c1c:	00800084 	movi	r2,2
 8000c20:	f800283a 	ret
 8000c24:	39c03fcc 	andi	r7,r7,255
 8000c28:	39400726 	beq	r7,r5,8000c48 <__ledf2+0xbc>
 8000c2c:	2800081e 	bne	r5,zero,8000c50 <__ledf2+0xc4>
 8000c30:	00800044 	movi	r2,1
 8000c34:	f800283a 	ret
 8000c38:	2292b03a 	or	r9,r4,r10
 8000c3c:	483fdf26 	beq	r9,zero,8000bbc <__ledf2+0x30>
 8000c40:	00800084 	movi	r2,2
 8000c44:	f800283a 	ret
 8000c48:	4080030e 	bge	r8,r2,8000c58 <__ledf2+0xcc>
 8000c4c:	383fef26 	beq	r7,zero,8000c0c <__ledf2+0x80>
 8000c50:	00bfffc4 	movi	r2,-1
 8000c54:	f800283a 	ret
 8000c58:	123feb16 	blt	r2,r8,8000c08 <__ledf2+0x7c>
 8000c5c:	1abff336 	bltu	r3,r10,8000c2c <__ledf2+0xa0>
 8000c60:	50c00326 	beq	r10,r3,8000c70 <__ledf2+0xe4>
 8000c64:	50c0042e 	bgeu	r10,r3,8000c78 <__ledf2+0xec>
 8000c68:	283fe81e 	bne	r5,zero,8000c0c <__ledf2+0x80>
 8000c6c:	003ff806 	br	8000c50 <__ledf2+0xc4>
 8000c70:	313fee36 	bltu	r6,r4,8000c2c <__ledf2+0xa0>
 8000c74:	21bffc36 	bltu	r4,r6,8000c68 <__ledf2+0xdc>
 8000c78:	0005883a 	mov	r2,zero
 8000c7c:	f800283a 	ret

08000c80 <__muldf3>:
 8000c80:	defff304 	addi	sp,sp,-52
 8000c84:	2804d53a 	srli	r2,r5,20
 8000c88:	dd800915 	stw	r22,36(sp)
 8000c8c:	282cd7fa 	srli	r22,r5,31
 8000c90:	dc000315 	stw	r16,12(sp)
 8000c94:	04000434 	movhi	r16,16
 8000c98:	dd400815 	stw	r21,32(sp)
 8000c9c:	dc800515 	stw	r18,20(sp)
 8000ca0:	843fffc4 	addi	r16,r16,-1
 8000ca4:	dfc00c15 	stw	ra,48(sp)
 8000ca8:	df000b15 	stw	fp,44(sp)
 8000cac:	ddc00a15 	stw	r23,40(sp)
 8000cb0:	dd000715 	stw	r20,28(sp)
 8000cb4:	dcc00615 	stw	r19,24(sp)
 8000cb8:	dc400415 	stw	r17,16(sp)
 8000cbc:	1481ffcc 	andi	r18,r2,2047
 8000cc0:	2c20703a 	and	r16,r5,r16
 8000cc4:	b02b883a 	mov	r21,r22
 8000cc8:	b2403fcc 	andi	r9,r22,255
 8000ccc:	90006026 	beq	r18,zero,8000e50 <__muldf3+0x1d0>
 8000cd0:	0081ffc4 	movi	r2,2047
 8000cd4:	2029883a 	mov	r20,r4
 8000cd8:	90803626 	beq	r18,r2,8000db4 <__muldf3+0x134>
 8000cdc:	80800434 	orhi	r2,r16,16
 8000ce0:	100490fa 	slli	r2,r2,3
 8000ce4:	2020d77a 	srli	r16,r4,29
 8000ce8:	202890fa 	slli	r20,r4,3
 8000cec:	94bf0044 	addi	r18,r18,-1023
 8000cf0:	80a0b03a 	or	r16,r16,r2
 8000cf4:	0027883a 	mov	r19,zero
 8000cf8:	0039883a 	mov	fp,zero
 8000cfc:	3804d53a 	srli	r2,r7,20
 8000d00:	382ed7fa 	srli	r23,r7,31
 8000d04:	04400434 	movhi	r17,16
 8000d08:	8c7fffc4 	addi	r17,r17,-1
 8000d0c:	1081ffcc 	andi	r2,r2,2047
 8000d10:	3011883a 	mov	r8,r6
 8000d14:	3c62703a 	and	r17,r7,r17
 8000d18:	ba803fcc 	andi	r10,r23,255
 8000d1c:	10006d26 	beq	r2,zero,8000ed4 <__muldf3+0x254>
 8000d20:	00c1ffc4 	movi	r3,2047
 8000d24:	10c06526 	beq	r2,r3,8000ebc <__muldf3+0x23c>
 8000d28:	88c00434 	orhi	r3,r17,16
 8000d2c:	180690fa 	slli	r3,r3,3
 8000d30:	3022d77a 	srli	r17,r6,29
 8000d34:	301090fa 	slli	r8,r6,3
 8000d38:	10bf0044 	addi	r2,r2,-1023
 8000d3c:	88e2b03a 	or	r17,r17,r3
 8000d40:	000b883a 	mov	r5,zero
 8000d44:	9085883a 	add	r2,r18,r2
 8000d48:	2cc8b03a 	or	r4,r5,r19
 8000d4c:	00c003c4 	movi	r3,15
 8000d50:	bdacf03a 	xor	r22,r23,r22
 8000d54:	12c00044 	addi	r11,r2,1
 8000d58:	19009936 	bltu	r3,r4,8000fc0 <__muldf3+0x340>
 8000d5c:	200890ba 	slli	r4,r4,2
 8000d60:	00c20034 	movhi	r3,2048
 8000d64:	18c35d04 	addi	r3,r3,3444
 8000d68:	20c9883a 	add	r4,r4,r3
 8000d6c:	20c00017 	ldw	r3,0(r4)
 8000d70:	1800683a 	jmp	r3
 8000d74:	08000fc0 	call	8000fc <__alt_mem_new_sdram_controller_0-0x77fff04>
 8000d78:	08000dd4 	ori	zero,at,55
 8000d7c:	08000dd4 	ori	zero,at,55
 8000d80:	08000dd0 	cmplti	zero,at,55
 8000d84:	08000f9c 	xori	zero,at,62
 8000d88:	08000f9c 	xori	zero,at,62
 8000d8c:	08000f84 	addi	zero,at,62
 8000d90:	08000dd0 	cmplti	zero,at,55
 8000d94:	08000f9c 	xori	zero,at,62
 8000d98:	08000f84 	addi	zero,at,62
 8000d9c:	08000f9c 	xori	zero,at,62
 8000da0:	08000dd0 	cmplti	zero,at,55
 8000da4:	08000fac 	andhi	zero,at,62
 8000da8:	08000fac 	andhi	zero,at,62
 8000dac:	08000fac 	andhi	zero,at,62
 8000db0:	080011c8 	cmpgei	zero,at,71
 8000db4:	2404b03a 	or	r2,r4,r16
 8000db8:	10006f1e 	bne	r2,zero,8000f78 <__muldf3+0x2f8>
 8000dbc:	04c00204 	movi	r19,8
 8000dc0:	0021883a 	mov	r16,zero
 8000dc4:	0029883a 	mov	r20,zero
 8000dc8:	07000084 	movi	fp,2
 8000dcc:	003fcb06 	br	8000cfc <__muldf3+0x7c>
 8000dd0:	502d883a 	mov	r22,r10
 8000dd4:	00800084 	movi	r2,2
 8000dd8:	28805726 	beq	r5,r2,8000f38 <__muldf3+0x2b8>
 8000ddc:	008000c4 	movi	r2,3
 8000de0:	28816626 	beq	r5,r2,800137c <__muldf3+0x6fc>
 8000de4:	00800044 	movi	r2,1
 8000de8:	2881411e 	bne	r5,r2,80012f0 <__muldf3+0x670>
 8000dec:	b02b883a 	mov	r21,r22
 8000df0:	0005883a 	mov	r2,zero
 8000df4:	000b883a 	mov	r5,zero
 8000df8:	0029883a 	mov	r20,zero
 8000dfc:	1004953a 	slli	r2,r2,20
 8000e00:	a8c03fcc 	andi	r3,r21,255
 8000e04:	04400434 	movhi	r17,16
 8000e08:	8c7fffc4 	addi	r17,r17,-1
 8000e0c:	180697fa 	slli	r3,r3,31
 8000e10:	2c4a703a 	and	r5,r5,r17
 8000e14:	288ab03a 	or	r5,r5,r2
 8000e18:	28c6b03a 	or	r3,r5,r3
 8000e1c:	a005883a 	mov	r2,r20
 8000e20:	dfc00c17 	ldw	ra,48(sp)
 8000e24:	df000b17 	ldw	fp,44(sp)
 8000e28:	ddc00a17 	ldw	r23,40(sp)
 8000e2c:	dd800917 	ldw	r22,36(sp)
 8000e30:	dd400817 	ldw	r21,32(sp)
 8000e34:	dd000717 	ldw	r20,28(sp)
 8000e38:	dcc00617 	ldw	r19,24(sp)
 8000e3c:	dc800517 	ldw	r18,20(sp)
 8000e40:	dc400417 	ldw	r17,16(sp)
 8000e44:	dc000317 	ldw	r16,12(sp)
 8000e48:	dec00d04 	addi	sp,sp,52
 8000e4c:	f800283a 	ret
 8000e50:	2404b03a 	or	r2,r4,r16
 8000e54:	2027883a 	mov	r19,r4
 8000e58:	10004226 	beq	r2,zero,8000f64 <__muldf3+0x2e4>
 8000e5c:	8000fc26 	beq	r16,zero,8001250 <__muldf3+0x5d0>
 8000e60:	8009883a 	mov	r4,r16
 8000e64:	d9800215 	stw	r6,8(sp)
 8000e68:	d9c00015 	stw	r7,0(sp)
 8000e6c:	da400115 	stw	r9,4(sp)
 8000e70:	80014400 	call	8001440 <__clzsi2>
 8000e74:	d9800217 	ldw	r6,8(sp)
 8000e78:	d9c00017 	ldw	r7,0(sp)
 8000e7c:	da400117 	ldw	r9,4(sp)
 8000e80:	113ffd44 	addi	r4,r2,-11
 8000e84:	00c00704 	movi	r3,28
 8000e88:	1900ed16 	blt	r3,r4,8001240 <__muldf3+0x5c0>
 8000e8c:	00c00744 	movi	r3,29
 8000e90:	147ffe04 	addi	r17,r2,-8
 8000e94:	1907c83a 	sub	r3,r3,r4
 8000e98:	8460983a 	sll	r16,r16,r17
 8000e9c:	98c6d83a 	srl	r3,r19,r3
 8000ea0:	9c68983a 	sll	r20,r19,r17
 8000ea4:	1c20b03a 	or	r16,r3,r16
 8000ea8:	1080fcc4 	addi	r2,r2,1011
 8000eac:	00a5c83a 	sub	r18,zero,r2
 8000eb0:	0027883a 	mov	r19,zero
 8000eb4:	0039883a 	mov	fp,zero
 8000eb8:	003f9006 	br	8000cfc <__muldf3+0x7c>
 8000ebc:	3446b03a 	or	r3,r6,r17
 8000ec0:	1800261e 	bne	r3,zero,8000f5c <__muldf3+0x2dc>
 8000ec4:	0023883a 	mov	r17,zero
 8000ec8:	0011883a 	mov	r8,zero
 8000ecc:	01400084 	movi	r5,2
 8000ed0:	003f9c06 	br	8000d44 <__muldf3+0xc4>
 8000ed4:	3446b03a 	or	r3,r6,r17
 8000ed8:	18001c26 	beq	r3,zero,8000f4c <__muldf3+0x2cc>
 8000edc:	8800ce26 	beq	r17,zero,8001218 <__muldf3+0x598>
 8000ee0:	8809883a 	mov	r4,r17
 8000ee4:	d9800215 	stw	r6,8(sp)
 8000ee8:	da400115 	stw	r9,4(sp)
 8000eec:	da800015 	stw	r10,0(sp)
 8000ef0:	80014400 	call	8001440 <__clzsi2>
 8000ef4:	d9800217 	ldw	r6,8(sp)
 8000ef8:	da400117 	ldw	r9,4(sp)
 8000efc:	da800017 	ldw	r10,0(sp)
 8000f00:	113ffd44 	addi	r4,r2,-11
 8000f04:	00c00704 	movi	r3,28
 8000f08:	1900bf16 	blt	r3,r4,8001208 <__muldf3+0x588>
 8000f0c:	00c00744 	movi	r3,29
 8000f10:	123ffe04 	addi	r8,r2,-8
 8000f14:	1907c83a 	sub	r3,r3,r4
 8000f18:	8a22983a 	sll	r17,r17,r8
 8000f1c:	30c6d83a 	srl	r3,r6,r3
 8000f20:	3210983a 	sll	r8,r6,r8
 8000f24:	1c62b03a 	or	r17,r3,r17
 8000f28:	1080fcc4 	addi	r2,r2,1011
 8000f2c:	0085c83a 	sub	r2,zero,r2
 8000f30:	000b883a 	mov	r5,zero
 8000f34:	003f8306 	br	8000d44 <__muldf3+0xc4>
 8000f38:	b02b883a 	mov	r21,r22
 8000f3c:	0081ffc4 	movi	r2,2047
 8000f40:	000b883a 	mov	r5,zero
 8000f44:	0029883a 	mov	r20,zero
 8000f48:	003fac06 	br	8000dfc <__muldf3+0x17c>
 8000f4c:	0023883a 	mov	r17,zero
 8000f50:	0011883a 	mov	r8,zero
 8000f54:	01400044 	movi	r5,1
 8000f58:	003f7a06 	br	8000d44 <__muldf3+0xc4>
 8000f5c:	014000c4 	movi	r5,3
 8000f60:	003f7806 	br	8000d44 <__muldf3+0xc4>
 8000f64:	04c00104 	movi	r19,4
 8000f68:	0021883a 	mov	r16,zero
 8000f6c:	0029883a 	mov	r20,zero
 8000f70:	07000044 	movi	fp,1
 8000f74:	003f6106 	br	8000cfc <__muldf3+0x7c>
 8000f78:	04c00304 	movi	r19,12
 8000f7c:	070000c4 	movi	fp,3
 8000f80:	003f5e06 	br	8000cfc <__muldf3+0x7c>
 8000f84:	01400434 	movhi	r5,16
 8000f88:	002b883a 	mov	r21,zero
 8000f8c:	297fffc4 	addi	r5,r5,-1
 8000f90:	053fffc4 	movi	r20,-1
 8000f94:	0081ffc4 	movi	r2,2047
 8000f98:	003f9806 	br	8000dfc <__muldf3+0x17c>
 8000f9c:	8023883a 	mov	r17,r16
 8000fa0:	a011883a 	mov	r8,r20
 8000fa4:	e00b883a 	mov	r5,fp
 8000fa8:	003f8a06 	br	8000dd4 <__muldf3+0x154>
 8000fac:	8023883a 	mov	r17,r16
 8000fb0:	a011883a 	mov	r8,r20
 8000fb4:	482d883a 	mov	r22,r9
 8000fb8:	e00b883a 	mov	r5,fp
 8000fbc:	003f8506 	br	8000dd4 <__muldf3+0x154>
 8000fc0:	a00ad43a 	srli	r5,r20,16
 8000fc4:	401ad43a 	srli	r13,r8,16
 8000fc8:	a53fffcc 	andi	r20,r20,65535
 8000fcc:	423fffcc 	andi	r8,r8,65535
 8000fd0:	4519383a 	mul	r12,r8,r20
 8000fd4:	4147383a 	mul	r3,r8,r5
 8000fd8:	6d09383a 	mul	r4,r13,r20
 8000fdc:	600cd43a 	srli	r6,r12,16
 8000fe0:	2b5d383a 	mul	r14,r5,r13
 8000fe4:	20c9883a 	add	r4,r4,r3
 8000fe8:	310d883a 	add	r6,r6,r4
 8000fec:	30c0022e 	bgeu	r6,r3,8000ff8 <__muldf3+0x378>
 8000ff0:	00c00074 	movhi	r3,1
 8000ff4:	70dd883a 	add	r14,r14,r3
 8000ff8:	8826d43a 	srli	r19,r17,16
 8000ffc:	8bffffcc 	andi	r15,r17,65535
 8001000:	7d23383a 	mul	r17,r15,r20
 8001004:	7949383a 	mul	r4,r15,r5
 8001008:	9d29383a 	mul	r20,r19,r20
 800100c:	8814d43a 	srli	r10,r17,16
 8001010:	3012943a 	slli	r9,r6,16
 8001014:	a129883a 	add	r20,r20,r4
 8001018:	633fffcc 	andi	r12,r12,65535
 800101c:	5515883a 	add	r10,r10,r20
 8001020:	3006d43a 	srli	r3,r6,16
 8001024:	4b13883a 	add	r9,r9,r12
 8001028:	2ccb383a 	mul	r5,r5,r19
 800102c:	5100022e 	bgeu	r10,r4,8001038 <__muldf3+0x3b8>
 8001030:	01000074 	movhi	r4,1
 8001034:	290b883a 	add	r5,r5,r4
 8001038:	802ad43a 	srli	r21,r16,16
 800103c:	843fffcc 	andi	r16,r16,65535
 8001040:	440d383a 	mul	r6,r8,r16
 8001044:	4565383a 	mul	r18,r8,r21
 8001048:	8349383a 	mul	r4,r16,r13
 800104c:	500e943a 	slli	r7,r10,16
 8001050:	3010d43a 	srli	r8,r6,16
 8001054:	5028d43a 	srli	r20,r10,16
 8001058:	2489883a 	add	r4,r4,r18
 800105c:	8abfffcc 	andi	r10,r17,65535
 8001060:	3a95883a 	add	r10,r7,r10
 8001064:	4119883a 	add	r12,r8,r4
 8001068:	a169883a 	add	r20,r20,r5
 800106c:	1a87883a 	add	r3,r3,r10
 8001070:	6d5b383a 	mul	r13,r13,r21
 8001074:	6480022e 	bgeu	r12,r18,8001080 <__muldf3+0x400>
 8001078:	01000074 	movhi	r4,1
 800107c:	691b883a 	add	r13,r13,r4
 8001080:	7c25383a 	mul	r18,r15,r16
 8001084:	7d4b383a 	mul	r5,r15,r21
 8001088:	84cf383a 	mul	r7,r16,r19
 800108c:	901ed43a 	srli	r15,r18,16
 8001090:	6008d43a 	srli	r4,r12,16
 8001094:	6010943a 	slli	r8,r12,16
 8001098:	394f883a 	add	r7,r7,r5
 800109c:	333fffcc 	andi	r12,r6,65535
 80010a0:	79df883a 	add	r15,r15,r7
 80010a4:	235b883a 	add	r13,r4,r13
 80010a8:	9d63383a 	mul	r17,r19,r21
 80010ac:	4309883a 	add	r4,r8,r12
 80010b0:	7940022e 	bgeu	r15,r5,80010bc <__muldf3+0x43c>
 80010b4:	01400074 	movhi	r5,1
 80010b8:	8963883a 	add	r17,r17,r5
 80010bc:	780a943a 	slli	r5,r15,16
 80010c0:	91bfffcc 	andi	r6,r18,65535
 80010c4:	70c7883a 	add	r3,r14,r3
 80010c8:	298d883a 	add	r6,r5,r6
 80010cc:	1a8f803a 	cmpltu	r7,r3,r10
 80010d0:	350b883a 	add	r5,r6,r20
 80010d4:	20c7883a 	add	r3,r4,r3
 80010d8:	3955883a 	add	r10,r7,r5
 80010dc:	1909803a 	cmpltu	r4,r3,r4
 80010e0:	6a91883a 	add	r8,r13,r10
 80010e4:	780cd43a 	srli	r6,r15,16
 80010e8:	2219883a 	add	r12,r4,r8
 80010ec:	2d0b803a 	cmpltu	r5,r5,r20
 80010f0:	51cf803a 	cmpltu	r7,r10,r7
 80010f4:	29ceb03a 	or	r7,r5,r7
 80010f8:	4351803a 	cmpltu	r8,r8,r13
 80010fc:	610b803a 	cmpltu	r5,r12,r4
 8001100:	4148b03a 	or	r4,r8,r5
 8001104:	398f883a 	add	r7,r7,r6
 8001108:	3909883a 	add	r4,r7,r4
 800110c:	1810927a 	slli	r8,r3,9
 8001110:	2449883a 	add	r4,r4,r17
 8001114:	2008927a 	slli	r4,r4,9
 8001118:	6022d5fa 	srli	r17,r12,23
 800111c:	1806d5fa 	srli	r3,r3,23
 8001120:	4252b03a 	or	r9,r8,r9
 8001124:	600a927a 	slli	r5,r12,9
 8001128:	4810c03a 	cmpne	r8,r9,zero
 800112c:	2462b03a 	or	r17,r4,r17
 8001130:	40c6b03a 	or	r3,r8,r3
 8001134:	8900402c 	andhi	r4,r17,256
 8001138:	1950b03a 	or	r8,r3,r5
 800113c:	20000726 	beq	r4,zero,800115c <__muldf3+0x4dc>
 8001140:	4006d07a 	srli	r3,r8,1
 8001144:	880497fa 	slli	r2,r17,31
 8001148:	4200004c 	andi	r8,r8,1
 800114c:	8822d07a 	srli	r17,r17,1
 8001150:	1a10b03a 	or	r8,r3,r8
 8001154:	1210b03a 	or	r8,r2,r8
 8001158:	5805883a 	mov	r2,r11
 800115c:	1140ffc4 	addi	r5,r2,1023
 8001160:	0140440e 	bge	zero,r5,8001274 <__muldf3+0x5f4>
 8001164:	40c001cc 	andi	r3,r8,7
 8001168:	18000726 	beq	r3,zero,8001188 <__muldf3+0x508>
 800116c:	40c003cc 	andi	r3,r8,15
 8001170:	01000104 	movi	r4,4
 8001174:	19000426 	beq	r3,r4,8001188 <__muldf3+0x508>
 8001178:	4107883a 	add	r3,r8,r4
 800117c:	1a11803a 	cmpltu	r8,r3,r8
 8001180:	8a23883a 	add	r17,r17,r8
 8001184:	1811883a 	mov	r8,r3
 8001188:	88c0402c 	andhi	r3,r17,256
 800118c:	18000426 	beq	r3,zero,80011a0 <__muldf3+0x520>
 8001190:	11410004 	addi	r5,r2,1024
 8001194:	00bfc034 	movhi	r2,65280
 8001198:	10bfffc4 	addi	r2,r2,-1
 800119c:	88a2703a 	and	r17,r17,r2
 80011a0:	0081ff84 	movi	r2,2046
 80011a4:	117f6416 	blt	r2,r5,8000f38 <__muldf3+0x2b8>
 80011a8:	8828977a 	slli	r20,r17,29
 80011ac:	4010d0fa 	srli	r8,r8,3
 80011b0:	8822927a 	slli	r17,r17,9
 80011b4:	2881ffcc 	andi	r2,r5,2047
 80011b8:	a228b03a 	or	r20,r20,r8
 80011bc:	880ad33a 	srli	r5,r17,12
 80011c0:	b02b883a 	mov	r21,r22
 80011c4:	003f0d06 	br	8000dfc <__muldf3+0x17c>
 80011c8:	8080022c 	andhi	r2,r16,8
 80011cc:	10000926 	beq	r2,zero,80011f4 <__muldf3+0x574>
 80011d0:	8880022c 	andhi	r2,r17,8
 80011d4:	1000071e 	bne	r2,zero,80011f4 <__muldf3+0x574>
 80011d8:	00800434 	movhi	r2,16
 80011dc:	89400234 	orhi	r5,r17,8
 80011e0:	10bfffc4 	addi	r2,r2,-1
 80011e4:	b82b883a 	mov	r21,r23
 80011e8:	288a703a 	and	r5,r5,r2
 80011ec:	4029883a 	mov	r20,r8
 80011f0:	003f6806 	br	8000f94 <__muldf3+0x314>
 80011f4:	00800434 	movhi	r2,16
 80011f8:	81400234 	orhi	r5,r16,8
 80011fc:	10bfffc4 	addi	r2,r2,-1
 8001200:	288a703a 	and	r5,r5,r2
 8001204:	003f6306 	br	8000f94 <__muldf3+0x314>
 8001208:	147ff604 	addi	r17,r2,-40
 800120c:	3462983a 	sll	r17,r6,r17
 8001210:	0011883a 	mov	r8,zero
 8001214:	003f4406 	br	8000f28 <__muldf3+0x2a8>
 8001218:	3009883a 	mov	r4,r6
 800121c:	d9800215 	stw	r6,8(sp)
 8001220:	da400115 	stw	r9,4(sp)
 8001224:	da800015 	stw	r10,0(sp)
 8001228:	80014400 	call	8001440 <__clzsi2>
 800122c:	10800804 	addi	r2,r2,32
 8001230:	da800017 	ldw	r10,0(sp)
 8001234:	da400117 	ldw	r9,4(sp)
 8001238:	d9800217 	ldw	r6,8(sp)
 800123c:	003f3006 	br	8000f00 <__muldf3+0x280>
 8001240:	143ff604 	addi	r16,r2,-40
 8001244:	9c20983a 	sll	r16,r19,r16
 8001248:	0029883a 	mov	r20,zero
 800124c:	003f1606 	br	8000ea8 <__muldf3+0x228>
 8001250:	d9800215 	stw	r6,8(sp)
 8001254:	d9c00015 	stw	r7,0(sp)
 8001258:	da400115 	stw	r9,4(sp)
 800125c:	80014400 	call	8001440 <__clzsi2>
 8001260:	10800804 	addi	r2,r2,32
 8001264:	da400117 	ldw	r9,4(sp)
 8001268:	d9c00017 	ldw	r7,0(sp)
 800126c:	d9800217 	ldw	r6,8(sp)
 8001270:	003f0306 	br	8000e80 <__muldf3+0x200>
 8001274:	00c00044 	movi	r3,1
 8001278:	1947c83a 	sub	r3,r3,r5
 800127c:	00800e04 	movi	r2,56
 8001280:	10feda16 	blt	r2,r3,8000dec <__muldf3+0x16c>
 8001284:	008007c4 	movi	r2,31
 8001288:	10c01b16 	blt	r2,r3,80012f8 <__muldf3+0x678>
 800128c:	00800804 	movi	r2,32
 8001290:	10c5c83a 	sub	r2,r2,r3
 8001294:	888a983a 	sll	r5,r17,r2
 8001298:	40c8d83a 	srl	r4,r8,r3
 800129c:	4084983a 	sll	r2,r8,r2
 80012a0:	88e2d83a 	srl	r17,r17,r3
 80012a4:	2906b03a 	or	r3,r5,r4
 80012a8:	1004c03a 	cmpne	r2,r2,zero
 80012ac:	1886b03a 	or	r3,r3,r2
 80012b0:	188001cc 	andi	r2,r3,7
 80012b4:	10000726 	beq	r2,zero,80012d4 <__muldf3+0x654>
 80012b8:	188003cc 	andi	r2,r3,15
 80012bc:	01000104 	movi	r4,4
 80012c0:	11000426 	beq	r2,r4,80012d4 <__muldf3+0x654>
 80012c4:	1805883a 	mov	r2,r3
 80012c8:	10c00104 	addi	r3,r2,4
 80012cc:	1885803a 	cmpltu	r2,r3,r2
 80012d0:	88a3883a 	add	r17,r17,r2
 80012d4:	8880202c 	andhi	r2,r17,128
 80012d8:	10001c26 	beq	r2,zero,800134c <__muldf3+0x6cc>
 80012dc:	b02b883a 	mov	r21,r22
 80012e0:	00800044 	movi	r2,1
 80012e4:	000b883a 	mov	r5,zero
 80012e8:	0029883a 	mov	r20,zero
 80012ec:	003ec306 	br	8000dfc <__muldf3+0x17c>
 80012f0:	5805883a 	mov	r2,r11
 80012f4:	003f9906 	br	800115c <__muldf3+0x4dc>
 80012f8:	00bff844 	movi	r2,-31
 80012fc:	1145c83a 	sub	r2,r2,r5
 8001300:	8888d83a 	srl	r4,r17,r2
 8001304:	00800804 	movi	r2,32
 8001308:	18801a26 	beq	r3,r2,8001374 <__muldf3+0x6f4>
 800130c:	00801004 	movi	r2,64
 8001310:	10c5c83a 	sub	r2,r2,r3
 8001314:	8884983a 	sll	r2,r17,r2
 8001318:	1204b03a 	or	r2,r2,r8
 800131c:	1004c03a 	cmpne	r2,r2,zero
 8001320:	2084b03a 	or	r2,r4,r2
 8001324:	144001cc 	andi	r17,r2,7
 8001328:	88000d1e 	bne	r17,zero,8001360 <__muldf3+0x6e0>
 800132c:	000b883a 	mov	r5,zero
 8001330:	1028d0fa 	srli	r20,r2,3
 8001334:	b02b883a 	mov	r21,r22
 8001338:	0005883a 	mov	r2,zero
 800133c:	a468b03a 	or	r20,r20,r17
 8001340:	003eae06 	br	8000dfc <__muldf3+0x17c>
 8001344:	1007883a 	mov	r3,r2
 8001348:	0023883a 	mov	r17,zero
 800134c:	880a927a 	slli	r5,r17,9
 8001350:	1805883a 	mov	r2,r3
 8001354:	8822977a 	slli	r17,r17,29
 8001358:	280ad33a 	srli	r5,r5,12
 800135c:	003ff406 	br	8001330 <__muldf3+0x6b0>
 8001360:	10c003cc 	andi	r3,r2,15
 8001364:	01000104 	movi	r4,4
 8001368:	193ff626 	beq	r3,r4,8001344 <__muldf3+0x6c4>
 800136c:	0023883a 	mov	r17,zero
 8001370:	003fd506 	br	80012c8 <__muldf3+0x648>
 8001374:	0005883a 	mov	r2,zero
 8001378:	003fe706 	br	8001318 <__muldf3+0x698>
 800137c:	00800434 	movhi	r2,16
 8001380:	89400234 	orhi	r5,r17,8
 8001384:	10bfffc4 	addi	r2,r2,-1
 8001388:	b02b883a 	mov	r21,r22
 800138c:	288a703a 	and	r5,r5,r2
 8001390:	4029883a 	mov	r20,r8
 8001394:	003eff06 	br	8000f94 <__muldf3+0x314>

08001398 <__floatunsidf>:
 8001398:	defffe04 	addi	sp,sp,-8
 800139c:	dc000015 	stw	r16,0(sp)
 80013a0:	dfc00115 	stw	ra,4(sp)
 80013a4:	2021883a 	mov	r16,r4
 80013a8:	20002226 	beq	r4,zero,8001434 <__floatunsidf+0x9c>
 80013ac:	80014400 	call	8001440 <__clzsi2>
 80013b0:	01010784 	movi	r4,1054
 80013b4:	2089c83a 	sub	r4,r4,r2
 80013b8:	01810cc4 	movi	r6,1075
 80013bc:	310dc83a 	sub	r6,r6,r4
 80013c0:	00c007c4 	movi	r3,31
 80013c4:	1980120e 	bge	r3,r6,8001410 <__floatunsidf+0x78>
 80013c8:	00c104c4 	movi	r3,1043
 80013cc:	1907c83a 	sub	r3,r3,r4
 80013d0:	80ca983a 	sll	r5,r16,r3
 80013d4:	00800434 	movhi	r2,16
 80013d8:	10bfffc4 	addi	r2,r2,-1
 80013dc:	2101ffcc 	andi	r4,r4,2047
 80013e0:	0021883a 	mov	r16,zero
 80013e4:	288a703a 	and	r5,r5,r2
 80013e8:	2008953a 	slli	r4,r4,20
 80013ec:	00c00434 	movhi	r3,16
 80013f0:	18ffffc4 	addi	r3,r3,-1
 80013f4:	28c6703a 	and	r3,r5,r3
 80013f8:	8005883a 	mov	r2,r16
 80013fc:	1906b03a 	or	r3,r3,r4
 8001400:	dfc00117 	ldw	ra,4(sp)
 8001404:	dc000017 	ldw	r16,0(sp)
 8001408:	dec00204 	addi	sp,sp,8
 800140c:	f800283a 	ret
 8001410:	00c002c4 	movi	r3,11
 8001414:	188bc83a 	sub	r5,r3,r2
 8001418:	814ad83a 	srl	r5,r16,r5
 800141c:	00c00434 	movhi	r3,16
 8001420:	18ffffc4 	addi	r3,r3,-1
 8001424:	81a0983a 	sll	r16,r16,r6
 8001428:	2101ffcc 	andi	r4,r4,2047
 800142c:	28ca703a 	and	r5,r5,r3
 8001430:	003fed06 	br	80013e8 <__floatunsidf+0x50>
 8001434:	0009883a 	mov	r4,zero
 8001438:	000b883a 	mov	r5,zero
 800143c:	003fea06 	br	80013e8 <__floatunsidf+0x50>

08001440 <__clzsi2>:
 8001440:	00bfffd4 	movui	r2,65535
 8001444:	11000536 	bltu	r2,r4,800145c <__clzsi2+0x1c>
 8001448:	00803fc4 	movi	r2,255
 800144c:	11000f36 	bltu	r2,r4,800148c <__clzsi2+0x4c>
 8001450:	00800804 	movi	r2,32
 8001454:	0007883a 	mov	r3,zero
 8001458:	00000506 	br	8001470 <__clzsi2+0x30>
 800145c:	00804034 	movhi	r2,256
 8001460:	10bfffc4 	addi	r2,r2,-1
 8001464:	11000c2e 	bgeu	r2,r4,8001498 <__clzsi2+0x58>
 8001468:	00800204 	movi	r2,8
 800146c:	00c00604 	movi	r3,24
 8001470:	20c8d83a 	srl	r4,r4,r3
 8001474:	00c20034 	movhi	r3,2048
 8001478:	18c81204 	addi	r3,r3,8264
 800147c:	1909883a 	add	r4,r3,r4
 8001480:	20c00003 	ldbu	r3,0(r4)
 8001484:	10c5c83a 	sub	r2,r2,r3
 8001488:	f800283a 	ret
 800148c:	00800604 	movi	r2,24
 8001490:	00c00204 	movi	r3,8
 8001494:	003ff606 	br	8001470 <__clzsi2+0x30>
 8001498:	00800404 	movi	r2,16
 800149c:	1007883a 	mov	r3,r2
 80014a0:	003ff306 	br	8001470 <__clzsi2+0x30>

080014a4 <_printf_r>:
 80014a4:	defffd04 	addi	sp,sp,-12
 80014a8:	dfc00015 	stw	ra,0(sp)
 80014ac:	d9800115 	stw	r6,4(sp)
 80014b0:	d9c00215 	stw	r7,8(sp)
 80014b4:	20c00217 	ldw	r3,8(r4)
 80014b8:	01820034 	movhi	r6,2048
 80014bc:	3186b604 	addi	r6,r6,6872
 80014c0:	19800115 	stw	r6,4(r3)
 80014c4:	280d883a 	mov	r6,r5
 80014c8:	21400217 	ldw	r5,8(r4)
 80014cc:	d9c00104 	addi	r7,sp,4
 80014d0:	80015980 	call	8001598 <___vfprintf_internal_r>
 80014d4:	dfc00017 	ldw	ra,0(sp)
 80014d8:	dec00304 	addi	sp,sp,12
 80014dc:	f800283a 	ret

080014e0 <printf>:
 80014e0:	defffc04 	addi	sp,sp,-16
 80014e4:	dfc00015 	stw	ra,0(sp)
 80014e8:	d9400115 	stw	r5,4(sp)
 80014ec:	d9800215 	stw	r6,8(sp)
 80014f0:	d9c00315 	stw	r7,12(sp)
 80014f4:	00820034 	movhi	r2,2048
 80014f8:	10888b04 	addi	r2,r2,8748
 80014fc:	10800017 	ldw	r2,0(r2)
 8001500:	01420034 	movhi	r5,2048
 8001504:	2946b604 	addi	r5,r5,6872
 8001508:	10c00217 	ldw	r3,8(r2)
 800150c:	d9800104 	addi	r6,sp,4
 8001510:	19400115 	stw	r5,4(r3)
 8001514:	200b883a 	mov	r5,r4
 8001518:	11000217 	ldw	r4,8(r2)
 800151c:	8001abc0 	call	8001abc <__vfprintf_internal>
 8001520:	dfc00017 	ldw	ra,0(sp)
 8001524:	dec00404 	addi	sp,sp,16
 8001528:	f800283a 	ret

0800152c <print_repeat>:
 800152c:	defffb04 	addi	sp,sp,-20
 8001530:	dc800315 	stw	r18,12(sp)
 8001534:	dc400215 	stw	r17,8(sp)
 8001538:	dc000115 	stw	r16,4(sp)
 800153c:	dfc00415 	stw	ra,16(sp)
 8001540:	2025883a 	mov	r18,r4
 8001544:	2823883a 	mov	r17,r5
 8001548:	d9800005 	stb	r6,0(sp)
 800154c:	3821883a 	mov	r16,r7
 8001550:	04000a0e 	bge	zero,r16,800157c <print_repeat+0x50>
 8001554:	88800117 	ldw	r2,4(r17)
 8001558:	01c00044 	movi	r7,1
 800155c:	d80d883a 	mov	r6,sp
 8001560:	880b883a 	mov	r5,r17
 8001564:	9009883a 	mov	r4,r18
 8001568:	103ee83a 	callr	r2
 800156c:	843fffc4 	addi	r16,r16,-1
 8001570:	103ff726 	beq	r2,zero,8001550 <print_repeat+0x24>
 8001574:	00bfffc4 	movi	r2,-1
 8001578:	00000106 	br	8001580 <print_repeat+0x54>
 800157c:	0005883a 	mov	r2,zero
 8001580:	dfc00417 	ldw	ra,16(sp)
 8001584:	dc800317 	ldw	r18,12(sp)
 8001588:	dc400217 	ldw	r17,8(sp)
 800158c:	dc000117 	ldw	r16,4(sp)
 8001590:	dec00504 	addi	sp,sp,20
 8001594:	f800283a 	ret

08001598 <___vfprintf_internal_r>:
 8001598:	deffe504 	addi	sp,sp,-108
 800159c:	d8c00804 	addi	r3,sp,32
 80015a0:	df001915 	stw	fp,100(sp)
 80015a4:	ddc01815 	stw	r23,96(sp)
 80015a8:	dd801715 	stw	r22,92(sp)
 80015ac:	dd401615 	stw	r21,88(sp)
 80015b0:	dd001515 	stw	r20,84(sp)
 80015b4:	dcc01415 	stw	r19,80(sp)
 80015b8:	dc801315 	stw	r18,76(sp)
 80015bc:	dc401215 	stw	r17,72(sp)
 80015c0:	dc001115 	stw	r16,68(sp)
 80015c4:	dfc01a15 	stw	ra,104(sp)
 80015c8:	2027883a 	mov	r19,r4
 80015cc:	2839883a 	mov	fp,r5
 80015d0:	382d883a 	mov	r22,r7
 80015d4:	d9800f15 	stw	r6,60(sp)
 80015d8:	0021883a 	mov	r16,zero
 80015dc:	d8000e15 	stw	zero,56(sp)
 80015e0:	002f883a 	mov	r23,zero
 80015e4:	002b883a 	mov	r21,zero
 80015e8:	0025883a 	mov	r18,zero
 80015ec:	0023883a 	mov	r17,zero
 80015f0:	d8000c15 	stw	zero,48(sp)
 80015f4:	d8000b15 	stw	zero,44(sp)
 80015f8:	0029883a 	mov	r20,zero
 80015fc:	d8c00915 	stw	r3,36(sp)
 8001600:	d8c00f17 	ldw	r3,60(sp)
 8001604:	19000003 	ldbu	r4,0(r3)
 8001608:	20803fcc 	andi	r2,r4,255
 800160c:	1080201c 	xori	r2,r2,128
 8001610:	10bfe004 	addi	r2,r2,-128
 8001614:	10011c26 	beq	r2,zero,8001a88 <___vfprintf_internal_r+0x4f0>
 8001618:	00c00044 	movi	r3,1
 800161c:	a0c01426 	beq	r20,r3,8001670 <___vfprintf_internal_r+0xd8>
 8001620:	1d000216 	blt	r3,r20,800162c <___vfprintf_internal_r+0x94>
 8001624:	a0000626 	beq	r20,zero,8001640 <___vfprintf_internal_r+0xa8>
 8001628:	00011306 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 800162c:	01400084 	movi	r5,2
 8001630:	a1401d26 	beq	r20,r5,80016a8 <___vfprintf_internal_r+0x110>
 8001634:	014000c4 	movi	r5,3
 8001638:	a1402926 	beq	r20,r5,80016e0 <___vfprintf_internal_r+0x148>
 800163c:	00010e06 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 8001640:	01400944 	movi	r5,37
 8001644:	1140fb26 	beq	r2,r5,8001a34 <___vfprintf_internal_r+0x49c>
 8001648:	e0800117 	ldw	r2,4(fp)
 800164c:	d9000005 	stb	r4,0(sp)
 8001650:	01c00044 	movi	r7,1
 8001654:	d80d883a 	mov	r6,sp
 8001658:	e00b883a 	mov	r5,fp
 800165c:	9809883a 	mov	r4,r19
 8001660:	103ee83a 	callr	r2
 8001664:	1000d61e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001668:	84000044 	addi	r16,r16,1
 800166c:	00010206 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 8001670:	01400c04 	movi	r5,48
 8001674:	1140f826 	beq	r2,r5,8001a58 <___vfprintf_internal_r+0x4c0>
 8001678:	01400944 	movi	r5,37
 800167c:	11400a1e 	bne	r2,r5,80016a8 <___vfprintf_internal_r+0x110>
 8001680:	d8800005 	stb	r2,0(sp)
 8001684:	e0800117 	ldw	r2,4(fp)
 8001688:	a00f883a 	mov	r7,r20
 800168c:	d80d883a 	mov	r6,sp
 8001690:	e00b883a 	mov	r5,fp
 8001694:	9809883a 	mov	r4,r19
 8001698:	103ee83a 	callr	r2
 800169c:	1000c81e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 80016a0:	84000044 	addi	r16,r16,1
 80016a4:	0000f306 	br	8001a74 <___vfprintf_internal_r+0x4dc>
 80016a8:	217ff404 	addi	r5,r4,-48
 80016ac:	29403fcc 	andi	r5,r5,255
 80016b0:	00c00244 	movi	r3,9
 80016b4:	19400736 	bltu	r3,r5,80016d4 <___vfprintf_internal_r+0x13c>
 80016b8:	00bfffc4 	movi	r2,-1
 80016bc:	88800226 	beq	r17,r2,80016c8 <___vfprintf_internal_r+0x130>
 80016c0:	8c4002a4 	muli	r17,r17,10
 80016c4:	00000106 	br	80016cc <___vfprintf_internal_r+0x134>
 80016c8:	0023883a 	mov	r17,zero
 80016cc:	2c63883a 	add	r17,r5,r17
 80016d0:	0000e206 	br	8001a5c <___vfprintf_internal_r+0x4c4>
 80016d4:	01400b84 	movi	r5,46
 80016d8:	1140e426 	beq	r2,r5,8001a6c <___vfprintf_internal_r+0x4d4>
 80016dc:	05000084 	movi	r20,2
 80016e0:	213ff404 	addi	r4,r4,-48
 80016e4:	21003fcc 	andi	r4,r4,255
 80016e8:	00c00244 	movi	r3,9
 80016ec:	19000736 	bltu	r3,r4,800170c <___vfprintf_internal_r+0x174>
 80016f0:	00bfffc4 	movi	r2,-1
 80016f4:	90800226 	beq	r18,r2,8001700 <___vfprintf_internal_r+0x168>
 80016f8:	948002a4 	muli	r18,r18,10
 80016fc:	00000106 	br	8001704 <___vfprintf_internal_r+0x16c>
 8001700:	0025883a 	mov	r18,zero
 8001704:	24a5883a 	add	r18,r4,r18
 8001708:	0000db06 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 800170c:	00c01b04 	movi	r3,108
 8001710:	10c0d426 	beq	r2,r3,8001a64 <___vfprintf_internal_r+0x4cc>
 8001714:	013fffc4 	movi	r4,-1
 8001718:	91000226 	beq	r18,r4,8001724 <___vfprintf_internal_r+0x18c>
 800171c:	d8000b15 	stw	zero,44(sp)
 8001720:	00000106 	br	8001728 <___vfprintf_internal_r+0x190>
 8001724:	04800044 	movi	r18,1
 8001728:	01001a44 	movi	r4,105
 800172c:	11001626 	beq	r2,r4,8001788 <___vfprintf_internal_r+0x1f0>
 8001730:	20800916 	blt	r4,r2,8001758 <___vfprintf_internal_r+0x1c0>
 8001734:	010018c4 	movi	r4,99
 8001738:	11008a26 	beq	r2,r4,8001964 <___vfprintf_internal_r+0x3cc>
 800173c:	01001904 	movi	r4,100
 8001740:	11001126 	beq	r2,r4,8001788 <___vfprintf_internal_r+0x1f0>
 8001744:	01001604 	movi	r4,88
 8001748:	1100ca1e 	bne	r2,r4,8001a74 <___vfprintf_internal_r+0x4dc>
 800174c:	00c00044 	movi	r3,1
 8001750:	d8c00e15 	stw	r3,56(sp)
 8001754:	00001406 	br	80017a8 <___vfprintf_internal_r+0x210>
 8001758:	01001cc4 	movi	r4,115
 800175c:	11009a26 	beq	r2,r4,80019c8 <___vfprintf_internal_r+0x430>
 8001760:	20800416 	blt	r4,r2,8001774 <___vfprintf_internal_r+0x1dc>
 8001764:	01001bc4 	movi	r4,111
 8001768:	1100c21e 	bne	r2,r4,8001a74 <___vfprintf_internal_r+0x4dc>
 800176c:	05400204 	movi	r21,8
 8001770:	00000e06 	br	80017ac <___vfprintf_internal_r+0x214>
 8001774:	01001d44 	movi	r4,117
 8001778:	11000c26 	beq	r2,r4,80017ac <___vfprintf_internal_r+0x214>
 800177c:	01001e04 	movi	r4,120
 8001780:	11000926 	beq	r2,r4,80017a8 <___vfprintf_internal_r+0x210>
 8001784:	0000bb06 	br	8001a74 <___vfprintf_internal_r+0x4dc>
 8001788:	b5000104 	addi	r20,r22,4
 800178c:	b8000726 	beq	r23,zero,80017ac <___vfprintf_internal_r+0x214>
 8001790:	dd000d15 	stw	r20,52(sp)
 8001794:	b5800017 	ldw	r22,0(r22)
 8001798:	b000080e 	bge	r22,zero,80017bc <___vfprintf_internal_r+0x224>
 800179c:	05adc83a 	sub	r22,zero,r22
 80017a0:	02800044 	movi	r10,1
 80017a4:	00000606 	br	80017c0 <___vfprintf_internal_r+0x228>
 80017a8:	05400404 	movi	r21,16
 80017ac:	b0c00104 	addi	r3,r22,4
 80017b0:	d8c00d15 	stw	r3,52(sp)
 80017b4:	b5800017 	ldw	r22,0(r22)
 80017b8:	002f883a 	mov	r23,zero
 80017bc:	0015883a 	mov	r10,zero
 80017c0:	d829883a 	mov	r20,sp
 80017c4:	b0001426 	beq	r22,zero,8001818 <___vfprintf_internal_r+0x280>
 80017c8:	b009883a 	mov	r4,r22
 80017cc:	a80b883a 	mov	r5,r21
 80017d0:	da801015 	stw	r10,64(sp)
 80017d4:	8001cfc0 	call	8001cfc <__udivsi3>
 80017d8:	1549383a 	mul	r4,r2,r21
 80017dc:	00c00244 	movi	r3,9
 80017e0:	da801017 	ldw	r10,64(sp)
 80017e4:	b12dc83a 	sub	r22,r22,r4
 80017e8:	1d800216 	blt	r3,r22,80017f4 <___vfprintf_internal_r+0x25c>
 80017ec:	b5800c04 	addi	r22,r22,48
 80017f0:	00000506 	br	8001808 <___vfprintf_internal_r+0x270>
 80017f4:	d8c00e17 	ldw	r3,56(sp)
 80017f8:	18000226 	beq	r3,zero,8001804 <___vfprintf_internal_r+0x26c>
 80017fc:	b5800dc4 	addi	r22,r22,55
 8001800:	00000106 	br	8001808 <___vfprintf_internal_r+0x270>
 8001804:	b58015c4 	addi	r22,r22,87
 8001808:	a5800005 	stb	r22,0(r20)
 800180c:	a5000044 	addi	r20,r20,1
 8001810:	102d883a 	mov	r22,r2
 8001814:	003feb06 	br	80017c4 <___vfprintf_internal_r+0x22c>
 8001818:	a6c7c83a 	sub	r3,r20,sp
 800181c:	d8c00a15 	stw	r3,40(sp)
 8001820:	90c5c83a 	sub	r2,r18,r3
 8001824:	00800a0e 	bge	zero,r2,8001850 <___vfprintf_internal_r+0x2b8>
 8001828:	a085883a 	add	r2,r20,r2
 800182c:	01400c04 	movi	r5,48
 8001830:	d8c00917 	ldw	r3,36(sp)
 8001834:	a009883a 	mov	r4,r20
 8001838:	a0c0032e 	bgeu	r20,r3,8001848 <___vfprintf_internal_r+0x2b0>
 800183c:	a5000044 	addi	r20,r20,1
 8001840:	21400005 	stb	r5,0(r4)
 8001844:	a0bffa1e 	bne	r20,r2,8001830 <___vfprintf_internal_r+0x298>
 8001848:	a6c7c83a 	sub	r3,r20,sp
 800184c:	d8c00a15 	stw	r3,40(sp)
 8001850:	d8c00a17 	ldw	r3,40(sp)
 8001854:	50d3883a 	add	r9,r10,r3
 8001858:	d8c00b17 	ldw	r3,44(sp)
 800185c:	8a6dc83a 	sub	r22,r17,r9
 8001860:	18001726 	beq	r3,zero,80018c0 <___vfprintf_internal_r+0x328>
 8001864:	50000a26 	beq	r10,zero,8001890 <___vfprintf_internal_r+0x2f8>
 8001868:	00800b44 	movi	r2,45
 800186c:	d8800805 	stb	r2,32(sp)
 8001870:	e0800117 	ldw	r2,4(fp)
 8001874:	01c00044 	movi	r7,1
 8001878:	d9800804 	addi	r6,sp,32
 800187c:	e00b883a 	mov	r5,fp
 8001880:	9809883a 	mov	r4,r19
 8001884:	103ee83a 	callr	r2
 8001888:	10004d1e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 800188c:	84000044 	addi	r16,r16,1
 8001890:	0580070e 	bge	zero,r22,80018b0 <___vfprintf_internal_r+0x318>
 8001894:	b00f883a 	mov	r7,r22
 8001898:	01800c04 	movi	r6,48
 800189c:	e00b883a 	mov	r5,fp
 80018a0:	9809883a 	mov	r4,r19
 80018a4:	800152c0 	call	800152c <print_repeat>
 80018a8:	1000451e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 80018ac:	85a1883a 	add	r16,r16,r22
 80018b0:	d8c00a17 	ldw	r3,40(sp)
 80018b4:	a013883a 	mov	r9,r20
 80018b8:	1d2dc83a 	sub	r22,r3,r20
 80018bc:	00002206 	br	8001948 <___vfprintf_internal_r+0x3b0>
 80018c0:	0580090e 	bge	zero,r22,80018e8 <___vfprintf_internal_r+0x350>
 80018c4:	b00f883a 	mov	r7,r22
 80018c8:	01800804 	movi	r6,32
 80018cc:	e00b883a 	mov	r5,fp
 80018d0:	9809883a 	mov	r4,r19
 80018d4:	da801015 	stw	r10,64(sp)
 80018d8:	800152c0 	call	800152c <print_repeat>
 80018dc:	da801017 	ldw	r10,64(sp)
 80018e0:	1000371e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 80018e4:	85a1883a 	add	r16,r16,r22
 80018e8:	503ff126 	beq	r10,zero,80018b0 <___vfprintf_internal_r+0x318>
 80018ec:	00800b44 	movi	r2,45
 80018f0:	d8800805 	stb	r2,32(sp)
 80018f4:	e0800117 	ldw	r2,4(fp)
 80018f8:	01c00044 	movi	r7,1
 80018fc:	d9800804 	addi	r6,sp,32
 8001900:	e00b883a 	mov	r5,fp
 8001904:	9809883a 	mov	r4,r19
 8001908:	103ee83a 	callr	r2
 800190c:	10002c1e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001910:	84000044 	addi	r16,r16,1
 8001914:	003fe606 	br	80018b0 <___vfprintf_internal_r+0x318>
 8001918:	4a7fffc4 	addi	r9,r9,-1
 800191c:	48800003 	ldbu	r2,0(r9)
 8001920:	01c00044 	movi	r7,1
 8001924:	d9800804 	addi	r6,sp,32
 8001928:	d8800805 	stb	r2,32(sp)
 800192c:	e0800117 	ldw	r2,4(fp)
 8001930:	e00b883a 	mov	r5,fp
 8001934:	da401015 	stw	r9,64(sp)
 8001938:	9809883a 	mov	r4,r19
 800193c:	103ee83a 	callr	r2
 8001940:	da401017 	ldw	r9,64(sp)
 8001944:	10001e1e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001948:	8245c83a 	sub	r2,r16,r9
 800194c:	4d89883a 	add	r4,r9,r22
 8001950:	a085883a 	add	r2,r20,r2
 8001954:	013ff016 	blt	zero,r4,8001918 <___vfprintf_internal_r+0x380>
 8001958:	1021883a 	mov	r16,r2
 800195c:	dd800d17 	ldw	r22,52(sp)
 8001960:	00004406 	br	8001a74 <___vfprintf_internal_r+0x4dc>
 8001964:	00800044 	movi	r2,1
 8001968:	1440080e 	bge	r2,r17,800198c <___vfprintf_internal_r+0x3f4>
 800196c:	8d3fffc4 	addi	r20,r17,-1
 8001970:	a00f883a 	mov	r7,r20
 8001974:	01800804 	movi	r6,32
 8001978:	e00b883a 	mov	r5,fp
 800197c:	9809883a 	mov	r4,r19
 8001980:	800152c0 	call	800152c <print_repeat>
 8001984:	10000e1e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001988:	8521883a 	add	r16,r16,r20
 800198c:	b0800017 	ldw	r2,0(r22)
 8001990:	01c00044 	movi	r7,1
 8001994:	d80d883a 	mov	r6,sp
 8001998:	d8800005 	stb	r2,0(sp)
 800199c:	e0800117 	ldw	r2,4(fp)
 80019a0:	e00b883a 	mov	r5,fp
 80019a4:	9809883a 	mov	r4,r19
 80019a8:	b5000104 	addi	r20,r22,4
 80019ac:	103ee83a 	callr	r2
 80019b0:	1000031e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 80019b4:	84000044 	addi	r16,r16,1
 80019b8:	a02d883a 	mov	r22,r20
 80019bc:	00002d06 	br	8001a74 <___vfprintf_internal_r+0x4dc>
 80019c0:	00bfffc4 	movi	r2,-1
 80019c4:	00003106 	br	8001a8c <___vfprintf_internal_r+0x4f4>
 80019c8:	b5000017 	ldw	r20,0(r22)
 80019cc:	b0c00104 	addi	r3,r22,4
 80019d0:	d8c00a15 	stw	r3,40(sp)
 80019d4:	a009883a 	mov	r4,r20
 80019d8:	8001b900 	call	8001b90 <strlen>
 80019dc:	8893c83a 	sub	r9,r17,r2
 80019e0:	102d883a 	mov	r22,r2
 80019e4:	0240090e 	bge	zero,r9,8001a0c <___vfprintf_internal_r+0x474>
 80019e8:	480f883a 	mov	r7,r9
 80019ec:	01800804 	movi	r6,32
 80019f0:	e00b883a 	mov	r5,fp
 80019f4:	9809883a 	mov	r4,r19
 80019f8:	da401015 	stw	r9,64(sp)
 80019fc:	800152c0 	call	800152c <print_repeat>
 8001a00:	da401017 	ldw	r9,64(sp)
 8001a04:	103fee1e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001a08:	8261883a 	add	r16,r16,r9
 8001a0c:	e0800117 	ldw	r2,4(fp)
 8001a10:	b00f883a 	mov	r7,r22
 8001a14:	a00d883a 	mov	r6,r20
 8001a18:	e00b883a 	mov	r5,fp
 8001a1c:	9809883a 	mov	r4,r19
 8001a20:	103ee83a 	callr	r2
 8001a24:	103fe61e 	bne	r2,zero,80019c0 <___vfprintf_internal_r+0x428>
 8001a28:	85a1883a 	add	r16,r16,r22
 8001a2c:	dd800a17 	ldw	r22,40(sp)
 8001a30:	00001006 	br	8001a74 <___vfprintf_internal_r+0x4dc>
 8001a34:	05c00044 	movi	r23,1
 8001a38:	04bfffc4 	movi	r18,-1
 8001a3c:	d8000e15 	stw	zero,56(sp)
 8001a40:	05400284 	movi	r21,10
 8001a44:	9023883a 	mov	r17,r18
 8001a48:	d8000c15 	stw	zero,48(sp)
 8001a4c:	d8000b15 	stw	zero,44(sp)
 8001a50:	b829883a 	mov	r20,r23
 8001a54:	00000806 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 8001a58:	dd000b15 	stw	r20,44(sp)
 8001a5c:	05000084 	movi	r20,2
 8001a60:	00000506 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 8001a64:	00c00044 	movi	r3,1
 8001a68:	d8c00c15 	stw	r3,48(sp)
 8001a6c:	050000c4 	movi	r20,3
 8001a70:	00000106 	br	8001a78 <___vfprintf_internal_r+0x4e0>
 8001a74:	0029883a 	mov	r20,zero
 8001a78:	d8c00f17 	ldw	r3,60(sp)
 8001a7c:	18c00044 	addi	r3,r3,1
 8001a80:	d8c00f15 	stw	r3,60(sp)
 8001a84:	003ede06 	br	8001600 <___vfprintf_internal_r+0x68>
 8001a88:	8005883a 	mov	r2,r16
 8001a8c:	dfc01a17 	ldw	ra,104(sp)
 8001a90:	df001917 	ldw	fp,100(sp)
 8001a94:	ddc01817 	ldw	r23,96(sp)
 8001a98:	dd801717 	ldw	r22,92(sp)
 8001a9c:	dd401617 	ldw	r21,88(sp)
 8001aa0:	dd001517 	ldw	r20,84(sp)
 8001aa4:	dcc01417 	ldw	r19,80(sp)
 8001aa8:	dc801317 	ldw	r18,76(sp)
 8001aac:	dc401217 	ldw	r17,72(sp)
 8001ab0:	dc001117 	ldw	r16,68(sp)
 8001ab4:	dec01b04 	addi	sp,sp,108
 8001ab8:	f800283a 	ret

08001abc <__vfprintf_internal>:
 8001abc:	00820034 	movhi	r2,2048
 8001ac0:	10888b04 	addi	r2,r2,8748
 8001ac4:	300f883a 	mov	r7,r6
 8001ac8:	280d883a 	mov	r6,r5
 8001acc:	200b883a 	mov	r5,r4
 8001ad0:	11000017 	ldw	r4,0(r2)
 8001ad4:	80015981 	jmpi	8001598 <___vfprintf_internal_r>

08001ad8 <__sfvwrite_small_dev>:
 8001ad8:	2880000b 	ldhu	r2,0(r5)
 8001adc:	1080020c 	andi	r2,r2,8
 8001ae0:	10002126 	beq	r2,zero,8001b68 <__sfvwrite_small_dev+0x90>
 8001ae4:	2880008f 	ldh	r2,2(r5)
 8001ae8:	defffa04 	addi	sp,sp,-24
 8001aec:	dc000015 	stw	r16,0(sp)
 8001af0:	dfc00515 	stw	ra,20(sp)
 8001af4:	dd000415 	stw	r20,16(sp)
 8001af8:	dcc00315 	stw	r19,12(sp)
 8001afc:	dc800215 	stw	r18,8(sp)
 8001b00:	dc400115 	stw	r17,4(sp)
 8001b04:	2821883a 	mov	r16,r5
 8001b08:	10001216 	blt	r2,zero,8001b54 <__sfvwrite_small_dev+0x7c>
 8001b0c:	2027883a 	mov	r19,r4
 8001b10:	3025883a 	mov	r18,r6
 8001b14:	3823883a 	mov	r17,r7
 8001b18:	05010004 	movi	r20,1024
 8001b1c:	04400b0e 	bge	zero,r17,8001b4c <__sfvwrite_small_dev+0x74>
 8001b20:	880f883a 	mov	r7,r17
 8001b24:	a440010e 	bge	r20,r17,8001b2c <__sfvwrite_small_dev+0x54>
 8001b28:	01c10004 	movi	r7,1024
 8001b2c:	8140008f 	ldh	r5,2(r16)
 8001b30:	900d883a 	mov	r6,r18
 8001b34:	9809883a 	mov	r4,r19
 8001b38:	8001bac0 	call	8001bac <_write_r>
 8001b3c:	0080050e 	bge	zero,r2,8001b54 <__sfvwrite_small_dev+0x7c>
 8001b40:	88a3c83a 	sub	r17,r17,r2
 8001b44:	90a5883a 	add	r18,r18,r2
 8001b48:	003ff406 	br	8001b1c <__sfvwrite_small_dev+0x44>
 8001b4c:	0005883a 	mov	r2,zero
 8001b50:	00000706 	br	8001b70 <__sfvwrite_small_dev+0x98>
 8001b54:	8080000b 	ldhu	r2,0(r16)
 8001b58:	10801014 	ori	r2,r2,64
 8001b5c:	8080000d 	sth	r2,0(r16)
 8001b60:	00bfffc4 	movi	r2,-1
 8001b64:	00000206 	br	8001b70 <__sfvwrite_small_dev+0x98>
 8001b68:	00bfffc4 	movi	r2,-1
 8001b6c:	f800283a 	ret
 8001b70:	dfc00517 	ldw	ra,20(sp)
 8001b74:	dd000417 	ldw	r20,16(sp)
 8001b78:	dcc00317 	ldw	r19,12(sp)
 8001b7c:	dc800217 	ldw	r18,8(sp)
 8001b80:	dc400117 	ldw	r17,4(sp)
 8001b84:	dc000017 	ldw	r16,0(sp)
 8001b88:	dec00604 	addi	sp,sp,24
 8001b8c:	f800283a 	ret

08001b90 <strlen>:
 8001b90:	2005883a 	mov	r2,r4
 8001b94:	10c00007 	ldb	r3,0(r2)
 8001b98:	18000226 	beq	r3,zero,8001ba4 <strlen+0x14>
 8001b9c:	10800044 	addi	r2,r2,1
 8001ba0:	003ffc06 	br	8001b94 <strlen+0x4>
 8001ba4:	1105c83a 	sub	r2,r2,r4
 8001ba8:	f800283a 	ret

08001bac <_write_r>:
 8001bac:	defffd04 	addi	sp,sp,-12
 8001bb0:	dc000015 	stw	r16,0(sp)
 8001bb4:	04020034 	movhi	r16,2048
 8001bb8:	dc400115 	stw	r17,4(sp)
 8001bbc:	8408ca04 	addi	r16,r16,9000
 8001bc0:	2023883a 	mov	r17,r4
 8001bc4:	2809883a 	mov	r4,r5
 8001bc8:	300b883a 	mov	r5,r6
 8001bcc:	380d883a 	mov	r6,r7
 8001bd0:	dfc00215 	stw	ra,8(sp)
 8001bd4:	80000015 	stw	zero,0(r16)
 8001bd8:	8001efc0 	call	8001efc <write>
 8001bdc:	00ffffc4 	movi	r3,-1
 8001be0:	10c0031e 	bne	r2,r3,8001bf0 <_write_r+0x44>
 8001be4:	80c00017 	ldw	r3,0(r16)
 8001be8:	18000126 	beq	r3,zero,8001bf0 <_write_r+0x44>
 8001bec:	88c00015 	stw	r3,0(r17)
 8001bf0:	dfc00217 	ldw	ra,8(sp)
 8001bf4:	dc400117 	ldw	r17,4(sp)
 8001bf8:	dc000017 	ldw	r16,0(sp)
 8001bfc:	dec00304 	addi	sp,sp,12
 8001c00:	f800283a 	ret

08001c04 <__divsi3>:
 8001c04:	20001b16 	blt	r4,zero,8001c74 <__divsi3+0x70>
 8001c08:	000f883a 	mov	r7,zero
 8001c0c:	28001616 	blt	r5,zero,8001c68 <__divsi3+0x64>
 8001c10:	200d883a 	mov	r6,r4
 8001c14:	29001a2e 	bgeu	r5,r4,8001c80 <__divsi3+0x7c>
 8001c18:	00800804 	movi	r2,32
 8001c1c:	00c00044 	movi	r3,1
 8001c20:	00000106 	br	8001c28 <__divsi3+0x24>
 8001c24:	10000d26 	beq	r2,zero,8001c5c <__divsi3+0x58>
 8001c28:	294b883a 	add	r5,r5,r5
 8001c2c:	10bfffc4 	addi	r2,r2,-1
 8001c30:	18c7883a 	add	r3,r3,r3
 8001c34:	293ffb36 	bltu	r5,r4,8001c24 <__divsi3+0x20>
 8001c38:	0005883a 	mov	r2,zero
 8001c3c:	18000726 	beq	r3,zero,8001c5c <__divsi3+0x58>
 8001c40:	0005883a 	mov	r2,zero
 8001c44:	31400236 	bltu	r6,r5,8001c50 <__divsi3+0x4c>
 8001c48:	314dc83a 	sub	r6,r6,r5
 8001c4c:	10c4b03a 	or	r2,r2,r3
 8001c50:	1806d07a 	srli	r3,r3,1
 8001c54:	280ad07a 	srli	r5,r5,1
 8001c58:	183ffa1e 	bne	r3,zero,8001c44 <__divsi3+0x40>
 8001c5c:	38000126 	beq	r7,zero,8001c64 <__divsi3+0x60>
 8001c60:	0085c83a 	sub	r2,zero,r2
 8001c64:	f800283a 	ret
 8001c68:	014bc83a 	sub	r5,zero,r5
 8001c6c:	39c0005c 	xori	r7,r7,1
 8001c70:	003fe706 	br	8001c10 <__divsi3+0xc>
 8001c74:	0109c83a 	sub	r4,zero,r4
 8001c78:	01c00044 	movi	r7,1
 8001c7c:	003fe306 	br	8001c0c <__divsi3+0x8>
 8001c80:	00c00044 	movi	r3,1
 8001c84:	003fee06 	br	8001c40 <__divsi3+0x3c>

08001c88 <__modsi3>:
 8001c88:	20001716 	blt	r4,zero,8001ce8 <__modsi3+0x60>
 8001c8c:	000f883a 	mov	r7,zero
 8001c90:	2005883a 	mov	r2,r4
 8001c94:	28001216 	blt	r5,zero,8001ce0 <__modsi3+0x58>
 8001c98:	2900162e 	bgeu	r5,r4,8001cf4 <__modsi3+0x6c>
 8001c9c:	01800804 	movi	r6,32
 8001ca0:	00c00044 	movi	r3,1
 8001ca4:	00000106 	br	8001cac <__modsi3+0x24>
 8001ca8:	30000a26 	beq	r6,zero,8001cd4 <__modsi3+0x4c>
 8001cac:	294b883a 	add	r5,r5,r5
 8001cb0:	31bfffc4 	addi	r6,r6,-1
 8001cb4:	18c7883a 	add	r3,r3,r3
 8001cb8:	293ffb36 	bltu	r5,r4,8001ca8 <__modsi3+0x20>
 8001cbc:	18000526 	beq	r3,zero,8001cd4 <__modsi3+0x4c>
 8001cc0:	1806d07a 	srli	r3,r3,1
 8001cc4:	11400136 	bltu	r2,r5,8001ccc <__modsi3+0x44>
 8001cc8:	1145c83a 	sub	r2,r2,r5
 8001ccc:	280ad07a 	srli	r5,r5,1
 8001cd0:	183ffb1e 	bne	r3,zero,8001cc0 <__modsi3+0x38>
 8001cd4:	38000126 	beq	r7,zero,8001cdc <__modsi3+0x54>
 8001cd8:	0085c83a 	sub	r2,zero,r2
 8001cdc:	f800283a 	ret
 8001ce0:	014bc83a 	sub	r5,zero,r5
 8001ce4:	003fec06 	br	8001c98 <__modsi3+0x10>
 8001ce8:	0109c83a 	sub	r4,zero,r4
 8001cec:	01c00044 	movi	r7,1
 8001cf0:	003fe706 	br	8001c90 <__modsi3+0x8>
 8001cf4:	00c00044 	movi	r3,1
 8001cf8:	003ff106 	br	8001cc0 <__modsi3+0x38>

08001cfc <__udivsi3>:
 8001cfc:	200d883a 	mov	r6,r4
 8001d00:	2900152e 	bgeu	r5,r4,8001d58 <__udivsi3+0x5c>
 8001d04:	28001416 	blt	r5,zero,8001d58 <__udivsi3+0x5c>
 8001d08:	00800804 	movi	r2,32
 8001d0c:	00c00044 	movi	r3,1
 8001d10:	00000206 	br	8001d1c <__udivsi3+0x20>
 8001d14:	10000e26 	beq	r2,zero,8001d50 <__udivsi3+0x54>
 8001d18:	28000516 	blt	r5,zero,8001d30 <__udivsi3+0x34>
 8001d1c:	294b883a 	add	r5,r5,r5
 8001d20:	10bfffc4 	addi	r2,r2,-1
 8001d24:	18c7883a 	add	r3,r3,r3
 8001d28:	293ffa36 	bltu	r5,r4,8001d14 <__udivsi3+0x18>
 8001d2c:	18000826 	beq	r3,zero,8001d50 <__udivsi3+0x54>
 8001d30:	0005883a 	mov	r2,zero
 8001d34:	31400236 	bltu	r6,r5,8001d40 <__udivsi3+0x44>
 8001d38:	314dc83a 	sub	r6,r6,r5
 8001d3c:	10c4b03a 	or	r2,r2,r3
 8001d40:	1806d07a 	srli	r3,r3,1
 8001d44:	280ad07a 	srli	r5,r5,1
 8001d48:	183ffa1e 	bne	r3,zero,8001d34 <__udivsi3+0x38>
 8001d4c:	f800283a 	ret
 8001d50:	0005883a 	mov	r2,zero
 8001d54:	f800283a 	ret
 8001d58:	00c00044 	movi	r3,1
 8001d5c:	003ff406 	br	8001d30 <__udivsi3+0x34>

08001d60 <__umodsi3>:
 8001d60:	2005883a 	mov	r2,r4
 8001d64:	2900122e 	bgeu	r5,r4,8001db0 <__umodsi3+0x50>
 8001d68:	28001116 	blt	r5,zero,8001db0 <__umodsi3+0x50>
 8001d6c:	01800804 	movi	r6,32
 8001d70:	00c00044 	movi	r3,1
 8001d74:	00000206 	br	8001d80 <__umodsi3+0x20>
 8001d78:	30000c26 	beq	r6,zero,8001dac <__umodsi3+0x4c>
 8001d7c:	28000516 	blt	r5,zero,8001d94 <__umodsi3+0x34>
 8001d80:	294b883a 	add	r5,r5,r5
 8001d84:	31bfffc4 	addi	r6,r6,-1
 8001d88:	18c7883a 	add	r3,r3,r3
 8001d8c:	293ffa36 	bltu	r5,r4,8001d78 <__umodsi3+0x18>
 8001d90:	18000626 	beq	r3,zero,8001dac <__umodsi3+0x4c>
 8001d94:	1806d07a 	srli	r3,r3,1
 8001d98:	11400136 	bltu	r2,r5,8001da0 <__umodsi3+0x40>
 8001d9c:	1145c83a 	sub	r2,r2,r5
 8001da0:	280ad07a 	srli	r5,r5,1
 8001da4:	183ffb1e 	bne	r3,zero,8001d94 <__umodsi3+0x34>
 8001da8:	f800283a 	ret
 8001dac:	f800283a 	ret
 8001db0:	00c00044 	movi	r3,1
 8001db4:	003ff706 	br	8001d94 <__umodsi3+0x34>

08001db8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8001db8:	deffff04 	addi	sp,sp,-4
 8001dbc:	01020034 	movhi	r4,2048
 8001dc0:	01420034 	movhi	r5,2048
 8001dc4:	dfc00015 	stw	ra,0(sp)
 8001dc8:	21085204 	addi	r4,r4,8520
 8001dcc:	29488e04 	addi	r5,r5,8760

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8001dd0:	2140061e 	bne	r4,r5,8001dec <alt_load+0x34>
 8001dd4:	01020034 	movhi	r4,2048
 8001dd8:	01420034 	movhi	r5,2048
 8001ddc:	21000804 	addi	r4,r4,32
 8001de0:	29400804 	addi	r5,r5,32
 8001de4:	2140121e 	bne	r4,r5,8001e30 <alt_load+0x78>
 8001de8:	00000b06 	br	8001e18 <alt_load+0x60>
 8001dec:	00c20034 	movhi	r3,2048
 8001df0:	18c88e04 	addi	r3,r3,8760
 8001df4:	1907c83a 	sub	r3,r3,r4
 8001df8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8001dfc:	10fff526 	beq	r2,r3,8001dd4 <alt_load+0x1c>
    {
      *to++ = *from++;
 8001e00:	114f883a 	add	r7,r2,r5
 8001e04:	39c00017 	ldw	r7,0(r7)
 8001e08:	110d883a 	add	r6,r2,r4
 8001e0c:	10800104 	addi	r2,r2,4
 8001e10:	31c00015 	stw	r7,0(r6)
 8001e14:	003ff906 	br	8001dfc <alt_load+0x44>
 8001e18:	01020034 	movhi	r4,2048
 8001e1c:	01420034 	movhi	r5,2048
 8001e20:	21080a04 	addi	r4,r4,8232
 8001e24:	29480a04 	addi	r5,r5,8232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8001e28:	2140101e 	bne	r4,r5,8001e6c <alt_load+0xb4>
 8001e2c:	00000b06 	br	8001e5c <alt_load+0xa4>
 8001e30:	00c20034 	movhi	r3,2048
 8001e34:	18c00804 	addi	r3,r3,32
 8001e38:	1907c83a 	sub	r3,r3,r4
 8001e3c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8001e40:	10fff526 	beq	r2,r3,8001e18 <alt_load+0x60>
    {
      *to++ = *from++;
 8001e44:	114f883a 	add	r7,r2,r5
 8001e48:	39c00017 	ldw	r7,0(r7)
 8001e4c:	110d883a 	add	r6,r2,r4
 8001e50:	10800104 	addi	r2,r2,4
 8001e54:	31c00015 	stw	r7,0(r6)
 8001e58:	003ff906 	br	8001e40 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8001e5c:	8001fc40 	call	8001fc4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8001e60:	dfc00017 	ldw	ra,0(sp)
 8001e64:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 8001e68:	8001fdc1 	jmpi	8001fdc <alt_icache_flush_all>
 8001e6c:	00c20034 	movhi	r3,2048
 8001e70:	18c85204 	addi	r3,r3,8520
 8001e74:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8001e78:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8001e7c:	18bff726 	beq	r3,r2,8001e5c <alt_load+0xa4>
    {
      *to++ = *from++;
 8001e80:	114f883a 	add	r7,r2,r5
 8001e84:	39c00017 	ldw	r7,0(r7)
 8001e88:	110d883a 	add	r6,r2,r4
 8001e8c:	10800104 	addi	r2,r2,4
 8001e90:	31c00015 	stw	r7,0(r6)
 8001e94:	003ff906 	br	8001e7c <alt_load+0xc4>

08001e98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8001e98:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8001e9c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8001ea0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8001ea4:	8001f5c0 	call	8001f5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8001ea8:	8001f7c0 	call	8001f7c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8001eac:	d1a04117 	ldw	r6,-32508(gp)
 8001eb0:	d1604217 	ldw	r5,-32504(gp)
 8001eb4:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8001eb8:	dfc00017 	ldw	ra,0(sp)
 8001ebc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8001ec0:	800006c1 	jmpi	800006c <main>

08001ec4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 8001ec4:	defffe04 	addi	sp,sp,-8
 8001ec8:	dc000015 	stw	r16,0(sp)
 8001ecc:	dfc00115 	stw	ra,4(sp)
 8001ed0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 8001ed4:	8001b900 	call	8001b90 <strlen>
 8001ed8:	01020034 	movhi	r4,2048
 8001edc:	000f883a 	mov	r7,zero
 8001ee0:	100d883a 	mov	r6,r2
 8001ee4:	800b883a 	mov	r5,r16
 8001ee8:	21088c04 	addi	r4,r4,8752
#else
    return fputs(str, stdout);
#endif
#endif
}
 8001eec:	dfc00117 	ldw	ra,4(sp)
 8001ef0:	dc000017 	ldw	r16,0(sp)
 8001ef4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 8001ef8:	8001f901 	jmpi	8001f90 <altera_avalon_jtag_uart_write>

08001efc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 8001efc:	00800044 	movi	r2,1
 8001f00:	20800226 	beq	r4,r2,8001f0c <write+0x10>
 8001f04:	00800084 	movi	r2,2
 8001f08:	2080041e 	bne	r4,r2,8001f1c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 8001f0c:	01020034 	movhi	r4,2048
 8001f10:	000f883a 	mov	r7,zero
 8001f14:	21088c04 	addi	r4,r4,8752
 8001f18:	8001f901 	jmpi	8001f90 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 8001f1c:	d0a00317 	ldw	r2,-32756(gp)
 8001f20:	10000926 	beq	r2,zero,8001f48 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8001f24:	deffff04 	addi	sp,sp,-4
 8001f28:	dfc00015 	stw	ra,0(sp)
 8001f2c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8001f30:	00c01444 	movi	r3,81
 8001f34:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8001f38:	00bfffc4 	movi	r2,-1
 8001f3c:	dfc00017 	ldw	ra,0(sp)
 8001f40:	dec00104 	addi	sp,sp,4
 8001f44:	f800283a 	ret
 8001f48:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8001f4c:	00c01444 	movi	r3,81
 8001f50:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8001f54:	00bfffc4 	movi	r2,-1
 8001f58:	f800283a 	ret

08001f5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8001f5c:	deffff04 	addi	sp,sp,-4
 8001f60:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8001f64:	8001fe80 	call	8001fe8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8001f68:	00800044 	movi	r2,1
 8001f6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8001f70:	dfc00017 	ldw	ra,0(sp)
 8001f74:	dec00104 	addi	sp,sp,4
 8001f78:	f800283a 	ret

08001f7c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8001f7c:	00840034 	movhi	r2,4096
 8001f80:	10840004 	addi	r2,r2,4096
 8001f84:	00c00044 	movi	r3,1
 8001f88:	10c00035 	stwio	r3,0(r2)
 8001f8c:	f800283a 	ret

08001f90 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 8001f90:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8001f94:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 8001f98:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8001f9c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8001fa0:	2980072e 	bgeu	r5,r6,8001fc0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8001fa4:	38c00037 	ldwio	r3,0(r7)
 8001fa8:	18ffffec 	andhi	r3,r3,65535
 8001fac:	183ffc26 	beq	r3,zero,8001fa0 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8001fb0:	28c00007 	ldb	r3,0(r5)
 8001fb4:	20c00035 	stwio	r3,0(r4)
 8001fb8:	29400044 	addi	r5,r5,1
 8001fbc:	003ff806 	br	8001fa0 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 8001fc0:	f800283a 	ret

08001fc4 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8001fc4:	0005883a 	mov	r2,zero
 8001fc8:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8001fcc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8001fd0:	10800804 	addi	r2,r2,32
 8001fd4:	10fffd1e 	bne	r2,r3,8001fcc <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8001fd8:	f800283a 	ret

08001fdc <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8001fdc:	01440004 	movi	r5,4096
 8001fe0:	0009883a 	mov	r4,zero
 8001fe4:	8001ff01 	jmpi	8001ff0 <alt_icache_flush>

08001fe8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8001fe8:	000170fa 	wrctl	ienable,zero
 8001fec:	f800283a 	ret

08001ff0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 8001ff0:	00840004 	movi	r2,4096
 8001ff4:	1140012e 	bgeu	r2,r5,8001ffc <alt_icache_flush+0xc>
 8001ff8:	100b883a 	mov	r5,r2
 8001ffc:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8002000:	2005883a 	mov	r2,r4
 8002004:	1140032e 	bgeu	r2,r5,8002014 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8002008:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800200c:	10800804 	addi	r2,r2,32
 8002010:	003ffc06 	br	8002004 <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8002014:	210007cc 	andi	r4,r4,31
 8002018:	20000126 	beq	r4,zero,8002020 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800201c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8002020:	0000203a 	flushp
 8002024:	f800283a 	ret
